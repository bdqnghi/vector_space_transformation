Spring.Aop.Framework System using System.Runtime.Serialization using AopAlliance.Aop using AopAlliance.Intercept using NUnit.Framework using Rhino.Mocks using Spring.Aop.Interceptor using Spring.Aop.Support using Spring.Objects using Spring.Util using class attribute Spring.Aop.Framework.ProxyFactoryTests MockRepository bool public public = new public public if != TestObject DoubleClickableIntroduction IDoubleClickable ITestObject ProxyFactory object CountingBeforeAdvice DefaultIntroductionAdvisor public public decl_stmt Spring.Data.NHibernate.TestObject = new decl_stmt DoubleClickableIntroduction = new decl_stmt Spring.Aop.Support.DefaultIntroductionAdvisor = new decl_stmt Spring.Aop.Framework.CountingBeforeAdvice = new = decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new call ProxyFactory.AddIntroduction() call ProxyFactory.AddIntroduction() call ProxyFactory.AddIntroduction() call ProxyFactory.AddIntroduction() call ProxyFactory.AddIntroduction() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() new decl_stmt object = call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = as decl_stmt Spring.Aop.Framework.IDoubleClickable = as += new = call IDoubleClickable.FireDoubleClickEvent() call IDoubleClickable.FireDoubleClickEvent() call IDoubleClickable.FireDoubleClickEvent() call IDoubleClickable.FireDoubleClickEvent() call IDoubleClickable.FireDoubleClickEvent() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() -= new = call IDoubleClickable.FireDoubleClickEvent() call IDoubleClickable.FireDoubleClickEvent() call IDoubleClickable.FireDoubleClickEvent() call IDoubleClickable.FireDoubleClickEvent() call IDoubleClickable.FireDoubleClickEvent() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() private private = NopInterceptor ProxyFactory TestObject CountingBeforeAdvice object public public for = < ++ decl_stmt Spring.Data.NHibernate.TestObject = new decl_stmt Spring.Aop.Interceptor.NopInterceptor = new decl_stmt Spring.Aop.Framework.CountingBeforeAdvice = new decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new = call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() new decl_stmt object = call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) TestObject ITestObject ProxyFactory object CountingBeforeAdvice NopInterceptor public public decl_stmt Spring.Data.NHibernate.TestObject = new decl_stmt Spring.Aop.Interceptor.NopInterceptor = new decl_stmt Spring.Aop.Framework.CountingBeforeAdvice = new = decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() new decl_stmt object = call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = as += new = call ITestObject.OnClick() call ITestObject.OnClick() call ITestObject.OnClick() call ITestObject.OnClick() call ITestObject.OnClick() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() -= new = call ITestObject.OnClick() call ITestObject.OnClick() call ITestObject.OnClick() call ITestObject.OnClick() call ITestObject.OnClick() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() public override public override = return public override public override return ITestObject ProxyFactory TestObject2 object public public decl_stmt TestObject2 = new = decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new decl_stmt object = call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = as = call ITestObject.Equals() call ITestObject.Equals() call ITestObject.Equals() call ITestObject.Equals() call ITestObject.Equals() = call object.Equals() call object.Equals() call object.Equals() call object.Equals() call object.Equals() = call TestObject2.Equals() call TestObject2.Equals() call TestObject2.Equals() call TestObject2.Equals() call TestObject2.Equals() = call ITestObject.Equals() call ITestObject.Equals() call ITestObject.Equals() call ITestObject.Equals() call ITestObject.Equals() TestObject ITestObject ProxyFactory object CountingBeforeAdvice NopInterceptor public public decl_stmt Spring.Data.NHibernate.TestObject = new = decl_stmt Spring.Aop.Interceptor.NopInterceptor = new decl_stmt Spring.Aop.Framework.CountingBeforeAdvice = new decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new = call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() new decl_stmt object = call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() typeof public typeof public new object typeof public typeof public new ProxyFactory typeof public typeof public decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new = call ProxyFactory.AddInterface() call ProxyFactory.AddInterface() call ProxyFactory.AddInterface() call ProxyFactory.AddInterface() call ProxyFactory.AddInterface() typeof NopInterceptor IAdvised ProxyFactory TestObject IAdvisor public public decl_stmt Spring.Data.NHibernate.TestObject = new decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new decl_stmt Spring.Aop.Interceptor.NopInterceptor = new decl_stmt Spring.Aop.IAdvisor = new new decl_stmt Spring.Aop.Framework.IAdvised = call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Aop.Framework.IAdvised.AddAdvice(int,IAdvice) call Spring.Aop.Framework.IAdvised.AddAdvice(int,IAdvice) call Spring.Aop.Framework.IAdvised.AddAdvice(int,IAdvice) call Spring.Aop.Framework.IAdvised.AddAdvice(int,IAdvice) call Spring.Aop.Framework.IAdvised.AddAdvice(int,IAdvice) call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() - call ProxyFactory.IndexOf() call ProxyFactory.IndexOf() call ProxyFactory.IndexOf() call ProxyFactory.IndexOf() call ProxyFactory.IndexOf() - call ProxyFactory.IndexOf() call ProxyFactory.IndexOf() call ProxyFactory.IndexOf() call ProxyFactory.IndexOf() call ProxyFactory.IndexOf() new call ProxyFactory.IndexOf() call ProxyFactory.IndexOf() call ProxyFactory.IndexOf() call ProxyFactory.IndexOf() call ProxyFactory.IndexOf() - call Spring.Aop.Framework.IAdvised.IndexOf(IIntroductionAdvisor) call Spring.Aop.Framework.IAdvised.IndexOf(IIntroductionAdvisor) call Spring.Aop.Framework.IAdvised.IndexOf(IIntroductionAdvisor) call Spring.Aop.Framework.IAdvised.IndexOf(IIntroductionAdvisor) call Spring.Aop.Framework.IAdvised.IndexOf(IIntroductionAdvisor) call ProxyFactory.IndexOf() call ProxyFactory.IndexOf() call ProxyFactory.IndexOf() call ProxyFactory.IndexOf() call ProxyFactory.IndexOf() - call Spring.Aop.Framework.IAdvised.IndexOf(IIntroductionAdvisor) call Spring.Aop.Framework.IAdvised.IndexOf(IIntroductionAdvisor) call Spring.Aop.Framework.IAdvised.IndexOf(IIntroductionAdvisor) call Spring.Aop.Framework.IAdvised.IndexOf(IIntroductionAdvisor) call Spring.Aop.Framework.IAdvised.IndexOf(IIntroductionAdvisor) new CountingBeforeAdvice TestObject ITestObject ProxyFactory IAdvisor NopInterceptor public public decl_stmt Spring.Data.NHibernate.TestObject = new decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new decl_stmt Spring.Aop.Interceptor.NopInterceptor = new decl_stmt Spring.Aop.Framework.CountingBeforeAdvice = new decl_stmt Spring.Aop.IAdvisor = new call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) = call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() new CountingBeforeAdvice TestObject NopInterceptor ITestObject ProxyFactory IAdvisor NopInterceptor public public decl_stmt Spring.Data.NHibernate.TestObject = new decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new decl_stmt Spring.Aop.Interceptor.NopInterceptor = new decl_stmt Spring.Aop.Framework.CountingBeforeAdvice = new decl_stmt Spring.Aop.IAdvisor = new call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() decl_stmt Spring.Aop.Interceptor.NopInterceptor = new call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) = call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() try call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() - catch try call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() catch ProxyFactory public public decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new new call ProxyFactory.RemoveInterface() call ProxyFactory.RemoveInterface() call ProxyFactory.RemoveInterface() call ProxyFactory.RemoveInterface() call ProxyFactory.RemoveInterface() typeof ProxyFactory public public decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new new call ProxyFactory.RemoveInterface() call ProxyFactory.RemoveInterface() call ProxyFactory.RemoveInterface() call ProxyFactory.RemoveInterface() call ProxyFactory.RemoveInterface() typeof TestObject IAdvisor IAdvisor ITestObject ProxyFactory CountingBeforeAdvice CountingBeforeAdvice IAdvised NopInterceptor public public decl_stmt Spring.Data.NHibernate.TestObject = new decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new decl_stmt Spring.Aop.Interceptor.NopInterceptor = new decl_stmt Spring.Aop.Framework.CountingBeforeAdvice = new decl_stmt Spring.Aop.Framework.CountingBeforeAdvice = new decl_stmt Spring.Aop.IAdvisor = new decl_stmt Spring.Aop.IAdvisor = new call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) decl_stmt Spring.Aop.Framework.IAdvised = = call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call Spring.Aop.Framework.IAdvised.ReplaceAdvisor(IAdvisor,IAdvisor) call Spring.Aop.Framework.IAdvised.ReplaceAdvisor(IAdvisor,IAdvisor) call Spring.Aop.Framework.IAdvised.ReplaceAdvisor(IAdvisor,IAdvisor) call Spring.Aop.Framework.IAdvised.ReplaceAdvisor(IAdvisor,IAdvisor) call Spring.Aop.Framework.IAdvised.ReplaceAdvisor(IAdvisor,IAdvisor) call Spring.Aop.Framework.IAdvised.ReplaceAdvisor(IAdvisor,IAdvisor) call Spring.Aop.Framework.IAdvised.ReplaceAdvisor(IAdvisor,IAdvisor) call Spring.Aop.Framework.IAdvised.ReplaceAdvisor(IAdvisor,IAdvisor) call Spring.Aop.Framework.IAdvised.ReplaceAdvisor(IAdvisor,IAdvisor) call Spring.Aop.Framework.IAdvised.ReplaceAdvisor(IAdvisor,IAdvisor) call Spring.Aop.Framework.IAdvised.ReplaceAdvisor(IAdvisor,IAdvisor) call Spring.Aop.Framework.IAdvised.ReplaceAdvisor(IAdvisor,IAdvisor) call Spring.Aop.Framework.IAdvised.ReplaceAdvisor(IAdvisor,IAdvisor) call Spring.Aop.Framework.IAdvised.ReplaceAdvisor(IAdvisor,IAdvisor) call Spring.Aop.Framework.IAdvised.ReplaceAdvisor(IAdvisor,IAdvisor) call Spring.Aop.Framework.IAdvised.ReplaceAdvisor(IAdvisor,IAdvisor) call Spring.Aop.Framework.IAdvised.ReplaceAdvisor(IAdvisor,IAdvisor) call Spring.Aop.Framework.IAdvised.ReplaceAdvisor(IAdvisor,IAdvisor) call Spring.Aop.Framework.IAdvised.ReplaceAdvisor(IAdvisor,IAdvisor) call Spring.Aop.Framework.IAdvised.ReplaceAdvisor(IAdvisor,IAdvisor) call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call ProxyFactory.ReplaceAdvisor() call ProxyFactory.ReplaceAdvisor() call ProxyFactory.ReplaceAdvisor() call ProxyFactory.ReplaceAdvisor() call ProxyFactory.ReplaceAdvisor() new IAdvisor CountingBeforeAdvice AdvisedSupport public public decl_stmt Spring.Aop.Framework.CountingBeforeAdvice = new decl_stmt Spring.Aop.IAdvisor = new decl_stmt Spring.Aop.Framework.AdvisedSupport = new call Spring.Aop.Framework.AdvisedSupport.AddAdvisor(int,IAdvisor) call Spring.Aop.Framework.AdvisedSupport.AddAdvisor(int,IAdvisor) call Spring.Aop.Framework.AdvisedSupport.AddAdvisor(int,IAdvisor) call Spring.Aop.Framework.AdvisedSupport.AddAdvisor(int,IAdvisor) call Spring.Aop.Framework.AdvisedSupport.AddAdvisor(int,IAdvisor) call Spring.Aop.Framework.AdvisedSupport.AddAdvisor(int,IAdvisor) call Spring.Aop.Framework.AdvisedSupport.AddAdvisor(int,IAdvisor) call Spring.Aop.Framework.AdvisedSupport.AddAdvisor(int,IAdvisor) call Spring.Aop.Framework.AdvisedSupport.AddAdvisor(int,IAdvisor) call Spring.Aop.Framework.AdvisedSupport.AddAdvisor(int,IAdvisor) private private = return throw new ITimeStamped ProxyFactory ITimeStamped public public decl_stmt Spring.Aop.Framework.ITimeStamped = new decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new call ProxyFactory.AddInterface() call ProxyFactory.AddInterface() call ProxyFactory.AddInterface() call ProxyFactory.AddInterface() call ProxyFactory.AddInterface() typeof decl_stmt Spring.Aop.Framework.ITimeStamped = call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) public override public override throw new ProxyFactory ITimeStamped TestObjectSubclass DateTime TimestampIntroductionInterceptor ITestObject public public decl_stmt TestObjectSubclass = new decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) is = == decl_stmt DateTime = new decl_stmt Spring.Aop.Framework.TimestampIntroductionInterceptor = new call ProxyFactory.AddIntroduction() call ProxyFactory.AddIntroduction() call ProxyFactory.AddIntroduction() call ProxyFactory.AddIntroduction() call ProxyFactory.AddIntroduction() new typeof decl_stmt Spring.Aop.Framework.ITimeStamped = call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) == IOther ProxyFactory public public decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new new call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() new try call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() new catch decl_stmt Spring.Objects.IOther = call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call IOther.Absquatulate() call IOther.Absquatulate() call IOther.Absquatulate() call IOther.Absquatulate() call IOther.Absquatulate() NopInterceptor ITestObject ProxyFactory NopInterceptor public public decl_stmt Spring.Aop.Interceptor.NopInterceptor = new decl_stmt Spring.Aop.Interceptor.NopInterceptor = new decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new new call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call ProxyFactory.AdviceIncluded() call ProxyFactory.AdviceIncluded() call ProxyFactory.AdviceIncluded() call ProxyFactory.AdviceIncluded() call ProxyFactory.AdviceIncluded() ! call ProxyFactory.AdviceIncluded() call ProxyFactory.AdviceIncluded() call ProxyFactory.AdviceIncluded() call ProxyFactory.AdviceIncluded() call ProxyFactory.AdviceIncluded() call ProxyFactory.CountAdviceOfType() call ProxyFactory.CountAdviceOfType() call ProxyFactory.CountAdviceOfType() call ProxyFactory.CountAdviceOfType() call ProxyFactory.CountAdviceOfType() typeof == call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AdviceIncluded() call ProxyFactory.AdviceIncluded() call ProxyFactory.AdviceIncluded() call ProxyFactory.AdviceIncluded() call ProxyFactory.AdviceIncluded() call ProxyFactory.CountAdviceOfType() call ProxyFactory.CountAdviceOfType() call ProxyFactory.CountAdviceOfType() call ProxyFactory.CountAdviceOfType() call ProxyFactory.CountAdviceOfType() typeof == IAdvisedSupportListener ProxyFactory public public decl_stmt Spring.Aop.Framework.IAdvisedSupportListener = call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() typeof call Spring.Aop.Framework.IAdvisedSupportListener.Activated(AdvisedSupport) call Spring.Aop.Framework.IAdvisedSupportListener.Activated(AdvisedSupport) call Spring.Aop.Framework.IAdvisedSupportListener.Activated(AdvisedSupport) call Spring.Aop.Framework.IAdvisedSupportListener.Activated(AdvisedSupport) call Spring.Aop.Framework.IAdvisedSupportListener.Activated(AdvisedSupport) call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new new call ProxyFactory.AddListener() call ProxyFactory.AddListener() call ProxyFactory.AddListener() call ProxyFactory.AddListener() call ProxyFactory.AddListener() call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() IAdvisedSupportListener ProxyFactory public public decl_stmt Spring.Aop.Framework.IAdvisedSupportListener = < decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new new call ProxyFactory.AddListener() call ProxyFactory.AddListener() call ProxyFactory.AddListener() call ProxyFactory.AddListener() call ProxyFactory.AddListener() call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() new call ProxyFactory.AddInterface() call ProxyFactory.AddInterface() call ProxyFactory.AddInterface() call ProxyFactory.AddInterface() call ProxyFactory.AddInterface() typeof call IAdvisedSupportListener.AssertWasCalled() call IAdvisedSupportListener.AssertWasCalled() call IAdvisedSupportListener.AssertWasCalled() call IAdvisedSupportListener.AssertWasCalled() call IAdvisedSupportListener.AssertWasCalled() < < < < call IAdvisedSupportListener.AssertWasCalled() call IAdvisedSupportListener.AssertWasCalled() call IAdvisedSupportListener.AssertWasCalled() call IAdvisedSupportListener.AssertWasCalled() call IAdvisedSupportListener.AssertWasCalled() < < < < call IAdvisedSupportListener.AssertWasCalled() call IAdvisedSupportListener.AssertWasCalled() call IAdvisedSupportListener.AssertWasCalled() call IAdvisedSupportListener.AssertWasCalled() call IAdvisedSupportListener.AssertWasCalled() < < < < IAdvisedSupportListener ProxyFactory public public decl_stmt Spring.Aop.Framework.IAdvisedSupportListener = < decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new new call ProxyFactory.AddListener() call ProxyFactory.AddListener() call ProxyFactory.AddListener() call ProxyFactory.AddListener() call ProxyFactory.AddListener() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() new call ProxyFactory.AddInterface() call ProxyFactory.AddInterface() call ProxyFactory.AddInterface() call ProxyFactory.AddInterface() call ProxyFactory.AddInterface() typeof call IAdvisedSupportListener.AssertWasNotCalled() call IAdvisedSupportListener.AssertWasNotCalled() call IAdvisedSupportListener.AssertWasNotCalled() call IAdvisedSupportListener.AssertWasNotCalled() call IAdvisedSupportListener.AssertWasNotCalled() < < < < call IAdvisedSupportListener.AssertWasNotCalled() call IAdvisedSupportListener.AssertWasNotCalled() call IAdvisedSupportListener.AssertWasNotCalled() call IAdvisedSupportListener.AssertWasNotCalled() call IAdvisedSupportListener.AssertWasNotCalled() < < < < ProxyFactory public public decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new new call ProxyFactory.AddListener() call ProxyFactory.AddListener() call ProxyFactory.AddListener() call ProxyFactory.AddListener() call ProxyFactory.AddListener() ProxyFactory public public decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new new call ProxyFactory.RemoveListener() call ProxyFactory.RemoveListener() call ProxyFactory.RemoveListener() call ProxyFactory.RemoveListener() call ProxyFactory.RemoveListener() IAdvisedSupportListener ProxyFactory public public decl_stmt Spring.Aop.Framework.IAdvisedSupportListener = < decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new new call ProxyFactory.AddListener() call ProxyFactory.AddListener() call ProxyFactory.AddListener() call ProxyFactory.AddListener() call ProxyFactory.AddListener() call ProxyFactory.RemoveListener() call ProxyFactory.RemoveListener() call ProxyFactory.RemoveListener() call ProxyFactory.RemoveListener() call ProxyFactory.RemoveListener() call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call IAdvisedSupportListener.AssertWasNotCalled() call IAdvisedSupportListener.AssertWasNotCalled() call IAdvisedSupportListener.AssertWasNotCalled() call IAdvisedSupportListener.AssertWasNotCalled() call IAdvisedSupportListener.AssertWasNotCalled() < < < < call IAdvisedSupportListener.AssertWasNotCalled() call IAdvisedSupportListener.AssertWasNotCalled() call IAdvisedSupportListener.AssertWasNotCalled() call IAdvisedSupportListener.AssertWasNotCalled() call IAdvisedSupportListener.AssertWasNotCalled() < < < < call IAdvisedSupportListener.AssertWasNotCalled() call IAdvisedSupportListener.AssertWasNotCalled() call IAdvisedSupportListener.AssertWasNotCalled() call IAdvisedSupportListener.AssertWasNotCalled() call IAdvisedSupportListener.AssertWasNotCalled() < < < < ProxyFactory typeof public typeof public decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new = call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() call ProxyFactory.RemoveAdvisor() public public ++ return + + public public ++ object NopInterceptor object NopInterceptor ProxyFactory ProxyFactory MultiProxyingTestClass string TestCountingIntroduction public public decl_stmt MultiProxyingTestClass = new decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new = decl_stmt Spring.Aop.Interceptor.NopInterceptor = new decl_stmt Spring.Aop.Interceptor.NopInterceptor = new decl_stmt TestCountingIntroduction = new call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() new call ProxyFactory.AddIntroduction() call ProxyFactory.AddIntroduction() call ProxyFactory.AddIntroduction() call ProxyFactory.AddIntroduction() call ProxyFactory.AddIntroduction() new decl_stmt object = call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new = call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() new call ProxyFactory.AddIntroduction() call ProxyFactory.AddIntroduction() call ProxyFactory.AddIntroduction() call ProxyFactory.AddIntroduction() call ProxyFactory.AddIntroduction() new decl_stmt object = call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) decl_stmt string =