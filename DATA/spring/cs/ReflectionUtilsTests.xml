Spring.Util System using System.Collections using System.Collections.Generic using System.Reflection using System.Reflection.Emit using System.Runtime.InteropServices using System.Threading using System.Runtime.CompilerServices using System.Windows.Forms using NUnit.Framework using Spring.Objects using Spring.Objects.Factory using Spring.Objects.Factory.Attributes using class attribute Spring.Util.ReflectionUtilsTests public public = = = return public static public static throw new string string MethodInfo decl string public public if if return endif decl_stmt System.Reflection.MethodInfo = new try try call MethodInfo.Invoke() call MethodInfo.Invoke() call MethodInfo.Invoke() call MethodInfo.Invoke() call MethodInfo.Invoke() catch throw catch decl_stmt string = if ! decl_stmt string = + + decl_stmt string = + + - endif private private if == - MapsInterfaceMethodClass MethodInfo public public decl_stmt MapsInterfaceMethodClass = new decl_stmt System.Reflection.MethodInfo = try = typeof catch try = catch try = typeof catch = typeof typeof = typeof typeof = typeof typeof = typeof typeof public public ? decl object Foo ConstructorInfo = public = public decl_stmt object = new decl_stmt System.Reflection.ConstructorInfo = typeof decl_stmt Spring.Data.NHibernate.Bytecode.Foo = call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) - decl object Foo ConstructorInfo = public = public decl_stmt object = new decl_stmt System.Reflection.ConstructorInfo = typeof decl_stmt Spring.Data.NHibernate.Bytecode.Foo = call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) - decl object Foo ConstructorInfo = public = public decl_stmt object = new decl_stmt System.Reflection.ConstructorInfo = typeof decl_stmt Spring.Data.NHibernate.Bytecode.Foo = call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) - decl Type decl Type MethodInfo public public decl_stmt System.Type = new typeof string decl_stmt System.Reflection.MethodInfo = typeof decl_stmt System.Type = typeof public typeof public typeof public typeof public typeof public typeof public new typeof public typeof public decl MethodInfo decl MethodInfo public public decl_stmt System.Reflection.MethodInfo = typeof | | decl_stmt System.Reflection.MethodInfo = typeof decl MethodInfo typeof public typeof public decl_stmt System.Reflection.MethodInfo = typeof | | | typeof decl MethodInfo decl MethodInfo public public decl_stmt System.Reflection.MethodInfo = typeof | | | decl_stmt System.Reflection.MethodInfo = typeof decl MethodInfo typeof public typeof public decl_stmt System.Reflection.MethodInfo = typeof | | typeof decl MethodInfo decl MethodInfo public public decl_stmt System.Reflection.MethodInfo = typeof | | decl_stmt System.Reflection.MethodInfo = typeof MethodInfo decl Type public public decl_stmt System.Reflection.MethodInfo = typeof decl_stmt System.Type = new typeof string typeof MethodInfo decl Type public public decl_stmt System.Type = new typeof string typeof decl_stmt System.Reflection.MethodInfo = typeof = typeof public public typeof typeof bool typeof typeof char typeof long typeof int typeof short public public typeof typeof typeof typeof MethodInfo public public decl_stmt System.Reflection.MethodInfo = typeof new typeof MethodInfo typeof public typeof public decl_stmt System.Reflection.MethodInfo = typeof new MethodInfo typeof public typeof public decl_stmt System.Reflection.MethodInfo = new MethodInfo public public decl_stmt System.Reflection.MethodInfo = typeof MethodInfo public public decl_stmt System.Reflection.MethodInfo = typeof new typeof typeof typeof public typeof public string string ArrayList MethodInfo decl Type public public decl_stmt System.Reflection.MethodInfo = typeof decl_stmt System.Collections.ArrayList = new foreach in call MethodInfo.GetParameters() call MethodInfo.GetParameters() call MethodInfo.GetParameters() call MethodInfo.GetParameters() call MethodInfo.GetParameters() call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) decl_stmt string = decl_stmt System.Type = call System.Collections.ArrayList.ToArray(Type) call System.Collections.ArrayList.ToArray(Type) call System.Collections.ArrayList.ToArray(Type) call System.Collections.ArrayList.ToArray(Type) call System.Collections.ArrayList.ToArray(Type) typeof decl_stmt string = decl Type decl IList public public decl_stmt System.Type = new typeof typeof decl_stmt System.Collections.Generic.IList < = typeof typeof public typeof public typeof MethodInfo public public decl_stmt System.Reflection.MethodInfo = typeof new typeof string typeof MethodInfo public public decl_stmt System.Reflection.MethodInfo = typeof new typeof string typeof MethodInfo public public decl_stmt System.Reflection.MethodInfo = typeof new typeof string typeof typeof = public typeof = public typeof public typeof public CustomAttributeBuilder public public decl_stmt System.Reflection.Emit.CustomAttributeBuilder = = typeof = typeof = typeof = new = typeof new = typeof new new Type decl System decl Collections MethodInfo public public decl_stmt System.Type = typeof decl_stmt System.Reflection.MethodInfo = call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) decl_stmt Generic < = decl_stmt System.Reflection.Emit.CustomAttributeBuilder = foreach in = decl System decl Collections MethodInfo public public decl_stmt System.Reflection.MethodInfo = typeof decl_stmt Generic < = decl_stmt System.Reflection.Emit.CustomAttributeBuilder = foreach in = decl System decl Collections MethodInfo public public decl_stmt System.Reflection.MethodInfo = typeof decl_stmt Generic < = decl_stmt System.Reflection.Emit.CustomAttributeBuilder = foreach in = decl System decl Collections MethodInfo public public decl_stmt System.Reflection.MethodInfo = typeof decl_stmt Generic < = decl_stmt System.Reflection.Emit.CustomAttributeBuilder = foreach in = decl System decl Collections MethodInfo public public decl_stmt System.Reflection.MethodInfo = typeof decl_stmt Generic < = decl_stmt System.Reflection.Emit.CustomAttributeBuilder = foreach in = decl System decl Collections MethodInfo public public decl_stmt System.Reflection.MethodInfo = typeof decl_stmt Generic < = decl_stmt System.Reflection.Emit.CustomAttributeBuilder = foreach in = = public = public typeof int public typeof int public typeof < public typeof < public return = return = Type public public decl_stmt System.Type = typeof Type public public decl_stmt System.Type = typeof Type public public decl_stmt System.Type = typeof Type public public decl_stmt System.Type = typeof Type public public decl_stmt System.Type = typeof Type public public decl_stmt System.Type = typeof Type public public decl_stmt System.Type = typeof Type public public decl_stmt System.Type = typeof Type public public decl_stmt System.Type = typeof Type public public decl_stmt System.Type = typeof Type public public decl_stmt System.Type = typeof Type public public decl_stmt System.Type = typeof Type public public decl_stmt System.Type = typeof int Type public public decl_stmt System.Type = typeof int IList public public decl_stmt System.Collections.Generic.IList = typeof IList public public decl_stmt System.Collections.Generic.IList = typeof Exception Exception public public decl_stmt System.Exception = new decl_stmt System.Exception = Exception Exception Exception public public decl_stmt System.Exception = new decl_stmt System.Exception = new decl_stmt System.Exception = Exception Exception Exception Exception public public decl_stmt System.Exception = new decl_stmt System.Exception = new decl_stmt System.Exception = new decl_stmt System.Exception = Exception Exception Exception public public decl_stmt System.Exception = new decl_stmt System.Exception = new decl_stmt System.Exception = Type public public decl_stmt System.Type = typeof < < public public ref ref return + Attribute decl Attribute private private decl_stmt System.Attribute = == decl_stmt System.Attribute = call Attribute.GetType() call Attribute.GetType() call Attribute.GetType() call Attribute.GetType() call Attribute.GetType() return decl object Type private static private static decl_stmt System.Type = decl_stmt object = call Type.GetCustomAttributes() call Type.GetCustomAttributes() call Type.GetCustomAttributes() call Type.GetCustomAttributes() call Type.GetCustomAttributes() return typeof AssemblyBuilder AssemblyName ModuleBuilder TypeBuilder private static private static decl_stmt System.Reflection.AssemblyName = new = decl_stmt System.Web.Compilation.AssemblyBuilder = decl_stmt ModuleBuilder = call System.Web.Compilation.AssemblyBuilder.DefineDynamicModule(string) call System.Web.Compilation.AssemblyBuilder.DefineDynamicModule(string) call System.Web.Compilation.AssemblyBuilder.DefineDynamicModule(string) call System.Web.Compilation.AssemblyBuilder.DefineDynamicModule(string) call System.Web.Compilation.AssemblyBuilder.DefineDynamicModule(string) decl_stmt TypeBuilder = call ModuleBuilder.DefineType() call ModuleBuilder.DefineType() call ModuleBuilder.DefineType() call ModuleBuilder.DefineType() call ModuleBuilder.DefineType() call TypeBuilder.SetCustomAttribute() call TypeBuilder.SetCustomAttribute() call TypeBuilder.SetCustomAttribute() call TypeBuilder.SetCustomAttribute() call TypeBuilder.SetCustomAttribute() return call TypeBuilder.CreateType() call TypeBuilder.CreateType() call TypeBuilder.CreateType() call TypeBuilder.CreateType() call TypeBuilder.CreateType()