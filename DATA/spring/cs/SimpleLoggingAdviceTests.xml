Spring.Aspects.Logging System using System.Reflection using System.Text using AopAlliance.Intercept using Common.Logging using NUnit.Framework using Rhino.Mocks using Spring.Aop.Framework using class attribute Spring.Aspects.Logging.SimpleLoggingAdviceTests MockRepository public public public public = new SimpleLoggingAdvice ITestTarget ProxyFactory ILog object public public decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new new decl_stmt ILog = call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() typeof decl_stmt Spring.Aspects.Logging.SimpleLoggingAdvice = new call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() decl_stmt object = call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) decl_stmt Spring.Aspects.Logging.ITestTarget = call ITestTarget.DoSomething() call ITestTarget.DoSomething() call ITestTarget.DoSomething() call ITestTarget.DoSomething() call ITestTarget.DoSomething() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() TestableSimpleLoggingAdvice MethodInfo ILog IMethodInvocation public public decl_stmt ILog = call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() typeof decl_stmt AopAlliance.Intercept.IMethodInvocation = call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() typeof decl_stmt System.Reflection.MethodInfo = typeof string call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() decl_stmt Spring.Aspects.Logging.TestableSimpleLoggingAdvice = new call Spring.Aspects.Logging.TestableSimpleLoggingAdvice.CallInvokeUnderLog(IMethodInvocation,ILog) call Spring.Aspects.Logging.TestableSimpleLoggingAdvice.CallInvokeUnderLog(IMethodInvocation,ILog) call Spring.Aspects.Logging.TestableSimpleLoggingAdvice.CallInvokeUnderLog(IMethodInvocation,ILog) call Spring.Aspects.Logging.TestableSimpleLoggingAdvice.CallInvokeUnderLog(IMethodInvocation,ILog) call Spring.Aspects.Logging.TestableSimpleLoggingAdvice.CallInvokeUnderLog(IMethodInvocation,ILog) call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() TestableSimpleLoggingAdvice MethodInfo ILog IMethodInvocation public public decl_stmt ILog = call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() typeof decl_stmt AopAlliance.Intercept.IMethodInvocation = call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() typeof decl_stmt System.Reflection.MethodInfo = typeof string call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() decl_stmt Spring.Aspects.Logging.TestableSimpleLoggingAdvice = new = call TestableSimpleLoggingAdvice.CallIsInterceptorEnabled() call TestableSimpleLoggingAdvice.CallIsInterceptorEnabled() call TestableSimpleLoggingAdvice.CallIsInterceptorEnabled() call TestableSimpleLoggingAdvice.CallIsInterceptorEnabled() call TestableSimpleLoggingAdvice.CallIsInterceptorEnabled() call Spring.Aspects.Logging.TestableSimpleLoggingAdvice.CallInvokeUnderLog(IMethodInvocation,ILog) call Spring.Aspects.Logging.TestableSimpleLoggingAdvice.CallInvokeUnderLog(IMethodInvocation,ILog) call Spring.Aspects.Logging.TestableSimpleLoggingAdvice.CallInvokeUnderLog(IMethodInvocation,ILog) call Spring.Aspects.Logging.TestableSimpleLoggingAdvice.CallInvokeUnderLog(IMethodInvocation,ILog) call Spring.Aspects.Logging.TestableSimpleLoggingAdvice.CallInvokeUnderLog(IMethodInvocation,ILog) call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() Exception TestableSimpleLoggingAdvice MethodInfo ILog IMethodInvocation public public decl_stmt ILog = call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() typeof decl_stmt AopAlliance.Intercept.IMethodInvocation = call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() typeof decl_stmt System.Reflection.MethodInfo = typeof string call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() decl_stmt System.Exception = new call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() decl_stmt Spring.Aspects.Logging.TestableSimpleLoggingAdvice = new try call Spring.Aspects.Logging.TestableSimpleLoggingAdvice.CallInvokeUnderLog(IMethodInvocation,ILog) call Spring.Aspects.Logging.TestableSimpleLoggingAdvice.CallInvokeUnderLog(IMethodInvocation,ILog) call Spring.Aspects.Logging.TestableSimpleLoggingAdvice.CallInvokeUnderLog(IMethodInvocation,ILog) call Spring.Aspects.Logging.TestableSimpleLoggingAdvice.CallInvokeUnderLog(IMethodInvocation,ILog) call Spring.Aspects.Logging.TestableSimpleLoggingAdvice.CallInvokeUnderLog(IMethodInvocation,ILog) catch call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() TestableSimpleLoggingAdvice ILog decl int decl object MethodInfo IMethodInvocation public public decl_stmt ILog = call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() typeof decl_stmt AopAlliance.Intercept.IMethodInvocation = call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() typeof decl_stmt System.Reflection.MethodInfo = typeof decl_stmt int = new decl_stmt object = new call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() decl_stmt Spring.Aspects.Logging.TestableSimpleLoggingAdvice = new = = = call Spring.Aspects.Logging.TestableSimpleLoggingAdvice.CallInvokeUnderLog(IMethodInvocation,ILog) call Spring.Aspects.Logging.TestableSimpleLoggingAdvice.CallInvokeUnderLog(IMethodInvocation,ILog) call Spring.Aspects.Logging.TestableSimpleLoggingAdvice.CallInvokeUnderLog(IMethodInvocation,ILog) call Spring.Aspects.Logging.TestableSimpleLoggingAdvice.CallInvokeUnderLog(IMethodInvocation,ILog) call Spring.Aspects.Logging.TestableSimpleLoggingAdvice.CallInvokeUnderLog(IMethodInvocation,ILog) call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll()