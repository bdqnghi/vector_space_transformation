Spring.Messaging.Nms.Connections System using System.Collections using System.Collections.Generic using Apache.NMS using Common.Logging using Spring.Collections using Spring.Util using using IQueue===Apache.NMS.IQueue class Spring.Messaging.Nms.Connections.CachedSession super super IDecoratorSession bool IMessageProducer ILog bool IDictionary bool LinkedList CachingConnectionFactory int IDictionary ISession return public public if if != region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion else region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion = call Spring.Messaging.Ems.Common.ISession.CreateProducer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateProducer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateProducer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateProducer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateProducer(Destination) = return new else return call Spring.Messaging.Ems.Common.ISession.CreateProducer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateProducer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateProducer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateProducer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateProducer(Destination) IMessageProducer public public if decl_stmt Spring.Messaging.Ems.Common.IMessageProducer = if != region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + + endregion else = call Spring.Messaging.Ems.Common.ISession.CreateProducer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateProducer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateProducer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateProducer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateProducer(Destination) region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + + endregion call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) = return new else return call Spring.Messaging.Ems.Common.ISession.CreateProducer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateProducer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateProducer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateProducer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateProducer(Destination) public public if lock if < return decl List ConsumerCacheKey private private if && = decl_stmt System.Collections.Generic.List < = new < foreach in decl_stmt ConsumerCacheKey = if != call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() foreach in call System.Collections.Generic.IDictionary.Remove(Object) call System.Collections.Generic.IDictionary.Remove(Object) call System.Collections.Generic.IDictionary.Remove(Object) call System.Collections.Generic.IDictionary.Remove(Object) call System.Collections.Generic.IDictionary.Remove(Object) if ! call Spring.Collections.LinkedList.Contains(object) call Spring.Collections.LinkedList.Contains(object) call Spring.Collections.LinkedList.Contains(object) call Spring.Collections.LinkedList.Contains(object) call Spring.Collections.LinkedList.Contains(object) region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + endregion call Spring.Collections.LinkedList.Add(object) call Spring.Collections.LinkedList.Add(object) call Spring.Collections.LinkedList.Add(object) call Spring.Collections.LinkedList.Add(object) call Spring.Collections.LinkedList.Add(object) private private if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + try foreach in foreach in finally call ISession.Close() call ISession.Close() call ISession.Close() call ISession.Close() call ISession.Close() public public return public public return public public return public public = if return else return call ISession.CreateDurableConsumer() call ISession.CreateDurableConsumer() call ISession.CreateDurableConsumer() call ISession.CreateDurableConsumer() call ISession.CreateDurableConsumer() public public if throw new call ISession.DeleteDurableConsumer() call ISession.DeleteDurableConsumer() call ISession.DeleteDurableConsumer() call ISession.DeleteDurableConsumer() call ISession.DeleteDurableConsumer() protected protected = if return else return call Spring.Messaging.Ems.Common.ISession.CreateConsumer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateConsumer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateConsumer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateConsumer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateConsumer(Destination) object IMessageConsumer private private decl_stmt object = new decl_stmt Spring.Messaging.Ems.Common.IMessageConsumer = if != if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + + + else if is = != call ISession.CreateDurableConsumer() call ISession.CreateDurableConsumer() call ISession.CreateDurableConsumer() call ISession.CreateDurableConsumer() call ISession.CreateDurableConsumer() : call Spring.Messaging.Ems.Common.ISession.CreateConsumer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateConsumer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateConsumer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateConsumer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateConsumer(Destination) else = call Spring.Messaging.Ems.Common.ISession.CreateConsumer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateConsumer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateConsumer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateConsumer(Destination) call Spring.Messaging.Ems.Common.ISession.CreateConsumer(Destination) if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + + + = return new public public = return call ISession.GetQueue() call ISession.GetQueue() call ISession.GetQueue() call ISession.GetQueue() call ISession.GetQueue() public public = return call ISession.GetTopic() call ISession.GetTopic() call ISession.GetTopic() call ISession.GetTopic() call ISession.GetTopic() public public = return call Spring.Messaging.Ems.Common.ISession.CreateTemporaryQueue() call Spring.Messaging.Ems.Common.ISession.CreateTemporaryQueue() call Spring.Messaging.Ems.Common.ISession.CreateTemporaryQueue() call Spring.Messaging.Ems.Common.ISession.CreateTemporaryQueue() call Spring.Messaging.Ems.Common.ISession.CreateTemporaryQueue() public public = return call Spring.Messaging.Ems.Common.ISession.CreateTemporaryTopic() call Spring.Messaging.Ems.Common.ISession.CreateTemporaryTopic() call Spring.Messaging.Ems.Common.ISession.CreateTemporaryTopic() call Spring.Messaging.Ems.Common.ISession.CreateTemporaryTopic() call Spring.Messaging.Ems.Common.ISession.CreateTemporaryTopic() public public = call ISession.DeleteDestination() call ISession.DeleteDestination() call ISession.DeleteDestination() call ISession.DeleteDestination() call ISession.DeleteDestination() public public = return call Spring.Messaging.Ems.Common.ISession.CreateMessage() call Spring.Messaging.Ems.Common.ISession.CreateMessage() call Spring.Messaging.Ems.Common.ISession.CreateMessage() call Spring.Messaging.Ems.Common.ISession.CreateMessage() call Spring.Messaging.Ems.Common.ISession.CreateMessage() public public = return call Spring.Messaging.Ems.Common.ISession.CreateTextMessage() call Spring.Messaging.Ems.Common.ISession.CreateTextMessage() call Spring.Messaging.Ems.Common.ISession.CreateTextMessage() call Spring.Messaging.Ems.Common.ISession.CreateTextMessage() call Spring.Messaging.Ems.Common.ISession.CreateTextMessage() public public = return call Spring.Messaging.Ems.Common.ISession.CreateTextMessage() call Spring.Messaging.Ems.Common.ISession.CreateTextMessage() call Spring.Messaging.Ems.Common.ISession.CreateTextMessage() call Spring.Messaging.Ems.Common.ISession.CreateTextMessage() call Spring.Messaging.Ems.Common.ISession.CreateTextMessage() public public = return call Spring.Messaging.Ems.Common.ISession.CreateMapMessage() call Spring.Messaging.Ems.Common.ISession.CreateMapMessage() call Spring.Messaging.Ems.Common.ISession.CreateMapMessage() call Spring.Messaging.Ems.Common.ISession.CreateMapMessage() call Spring.Messaging.Ems.Common.ISession.CreateMapMessage() public public = return call Spring.Messaging.Ems.Common.ISession.CreateObjectMessage(object) call Spring.Messaging.Ems.Common.ISession.CreateObjectMessage(object) call Spring.Messaging.Ems.Common.ISession.CreateObjectMessage(object) call Spring.Messaging.Ems.Common.ISession.CreateObjectMessage(object) call Spring.Messaging.Ems.Common.ISession.CreateObjectMessage(object) public public = return call Spring.Messaging.Ems.Common.ISession.CreateBytesMessage() call Spring.Messaging.Ems.Common.ISession.CreateBytesMessage() call Spring.Messaging.Ems.Common.ISession.CreateBytesMessage() call Spring.Messaging.Ems.Common.ISession.CreateBytesMessage() call Spring.Messaging.Ems.Common.ISession.CreateBytesMessage() public public = return call Spring.Messaging.Ems.Common.ISession.CreateBytesMessage() call Spring.Messaging.Ems.Common.ISession.CreateBytesMessage() call Spring.Messaging.Ems.Common.ISession.CreateBytesMessage() call Spring.Messaging.Ems.Common.ISession.CreateBytesMessage() call Spring.Messaging.Ems.Common.ISession.CreateBytesMessage() public public = return call Spring.Messaging.Ems.Common.ISession.CreateStreamMessage() call Spring.Messaging.Ems.Common.ISession.CreateStreamMessage() call Spring.Messaging.Ems.Common.ISession.CreateStreamMessage() call Spring.Messaging.Ems.Common.ISession.CreateStreamMessage() call Spring.Messaging.Ems.Common.ISession.CreateStreamMessage() public public = call Spring.Messaging.Ems.Common.ISession.Commit() call Spring.Messaging.Ems.Common.ISession.Commit() call Spring.Messaging.Ems.Common.ISession.Commit() call Spring.Messaging.Ems.Common.ISession.Commit() call Spring.Messaging.Ems.Common.ISession.Commit() public public = call Spring.Messaging.Ems.Common.ISession.Recover() call Spring.Messaging.Ems.Common.ISession.Recover() call Spring.Messaging.Ems.Common.ISession.Recover() call Spring.Messaging.Ems.Common.ISession.Recover() call Spring.Messaging.Ems.Common.ISession.Recover() public public = call Spring.Messaging.Ems.Common.ISession.Rollback() call Spring.Messaging.Ems.Common.ISession.Rollback() call Spring.Messaging.Ems.Common.ISession.Rollback() call Spring.Messaging.Ems.Common.ISession.Rollback() call Spring.Messaging.Ems.Common.ISession.Rollback() return = return = return = = return = return += -= += -= += -= public public = call ISession.Dispose() call ISession.Dispose() call ISession.Dispose() call ISession.Dispose() call ISession.Dispose() public public = return call Spring.Messaging.Ems.Common.ISession.CreateBrowser(Queue) call Spring.Messaging.Ems.Common.ISession.CreateBrowser(Queue) call Spring.Messaging.Ems.Common.ISession.CreateBrowser(Queue) call Spring.Messaging.Ems.Common.ISession.CreateBrowser(Queue) call Spring.Messaging.Ems.Common.ISession.CreateBrowser(Queue) public public = return call Spring.Messaging.Ems.Common.ISession.CreateBrowser(Queue) call Spring.Messaging.Ems.Common.ISession.CreateBrowser(Queue) call Spring.Messaging.Ems.Common.ISession.CreateBrowser(Queue) call Spring.Messaging.Ems.Common.ISession.CreateBrowser(Queue) call Spring.Messaging.Ems.Common.ISession.CreateBrowser(Queue) public override public override return +