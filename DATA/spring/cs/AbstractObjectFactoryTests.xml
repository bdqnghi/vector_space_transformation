Spring.Objects.Factory System using NUnit.Framework using Spring.Context using Spring.Core.IO using Spring.Expressions using Spring.Objects.Factory.Config using Spring.Objects.Factory.Support using Spring.Objects.Factory.Xml using Spring.Threading using System.Threading using System.Diagnostics using System.Collections using class Spring.Objects.Factory.AbstractObjectFactoryTests AbstractObjectFactory return = AbstractObjectFactory object public public decl_stmt Spring.Objects.Factory.Support.AbstractObjectFactory = decl_stmt object = new call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterAlias(string,string) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterAlias(string,string) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterAlias(string,string) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterAlias(string,string) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterAlias(string,string) try call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterAlias(string,string) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterAlias(string,string) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterAlias(string,string) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterAlias(string,string) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterAlias(string,string) catch - < call Spring.Objects.Factory.Support.AbstractObjectFactory.GetAliases(string) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetAliases(string) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetAliases(string) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetAliases(string) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetAliases(string) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(string,Type,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(string,Type,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(string,Type,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(string,Type,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(string,Type,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(string,Type,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(string,Type,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(string,Type,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(string,Type,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(string,Type,object) TestObject TestObject public public decl_stmt Spring.Data.NHibernate.TestObject = decl_stmt Spring.Data.NHibernate.TestObject = != call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() == call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() == typeof public virtual typeof public virtual MustBeInitialized public public decl_stmt Spring.Objects.Factory.MustBeInitialized = call Spring.Objects.Factory.MustBeInitialized.BusinessMethod() call Spring.Objects.Factory.MustBeInitialized.BusinessMethod() call Spring.Objects.Factory.MustBeInitialized.BusinessMethod() call Spring.Objects.Factory.MustBeInitialized.BusinessMethod() call Spring.Objects.Factory.MustBeInitialized.BusinessMethod() LifecycleObject public public decl_stmt Spring.Objects.Factory.LifecycleObject = call Spring.Objects.Factory.LifecycleObject.BusinessMethod() call Spring.Objects.Factory.LifecycleObject.BusinessMethod() call Spring.Objects.Factory.LifecycleObject.BusinessMethod() call Spring.Objects.Factory.LifecycleObject.BusinessMethod() call Spring.Objects.Factory.LifecycleObject.BusinessMethod() AbstractObjectFactory decl LifecycleObject = public = public decl_stmt Spring.Objects.Factory.Support.AbstractObjectFactory = decl_stmt PostProcessor = new call Spring.Objects.Factory.Support.AbstractObjectFactory.AddObjectPostProcessor(IObjectPostProcessor) call Spring.Objects.Factory.Support.AbstractObjectFactory.AddObjectPostProcessor(IObjectPostProcessor) call Spring.Objects.Factory.Support.AbstractObjectFactory.AddObjectPostProcessor(IObjectPostProcessor) call Spring.Objects.Factory.Support.AbstractObjectFactory.AddObjectPostProcessor(IObjectPostProcessor) call Spring.Objects.Factory.Support.AbstractObjectFactory.AddObjectPostProcessor(IObjectPostProcessor) TestObject object public public decl_stmt object = is decl_stmt Spring.Data.NHibernate.TestObject = call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() == object public public decl_stmt object = typeof is public public try typeof catch typeof typeof == object public virtual public virtual decl_stmt object = typeof is object public virtual public virtual decl_stmt object = typeof is public public try typeof catch typeof typeof catch + object object public virtual public virtual try decl_stmt object = is decl_stmt object = is == catch typeof public typeof public TestObject object public public try decl_stmt object = is decl_stmt Spring.Data.NHibernate.TestObject = == && == && == catch typeof public typeof public TestObject PropertyAccessExceptionsException public virtual public virtual try catch is decl_stmt Spring.Objects.PropertyAccessExceptionsException = == call Spring.Objects.PropertyAccessExceptionsException.GetPropertyAccessException(string) call Spring.Objects.PropertyAccessExceptionsException.GetPropertyAccessException(string) call Spring.Objects.PropertyAccessExceptionsException.GetPropertyAccessException(string) call Spring.Objects.PropertyAccessExceptionsException.GetPropertyAccessException(string) call Spring.Objects.PropertyAccessExceptionsException.GetPropertyAccessException(string) != decl_stmt Spring.Data.NHibernate.TestObject = == call Spring.Objects.PropertyAccessExceptionsException.GetPropertyAccessException(string) call Spring.Objects.PropertyAccessExceptionsException.GetPropertyAccessException(string) call Spring.Objects.PropertyAccessExceptionsException.GetPropertyAccessException(string) call Spring.Objects.PropertyAccessExceptionsException.GetPropertyAccessException(string) call Spring.Objects.PropertyAccessExceptionsException.GetPropertyAccessException(string) call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Spouse() call TestObject.Spouse() call TestObject.Spouse() call TestObject.Spouse() call TestObject.Spouse() call TestObject.Spouse() call TestObject.Spouse() call TestObject.Spouse() call TestObject.Spouse() call TestObject.Spouse() call TestObject.Spouse() call TestObject.Spouse() call TestObject.Spouse() call TestObject.Spouse() call TestObject.Spouse() call TestObject.Spouse() call TestObject.Spouse() TestObject public virtual public virtual decl_stmt Spring.Data.NHibernate.TestObject = call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() TestObject public virtual public virtual decl_stmt Spring.Data.NHibernate.TestObject = typeof TestObject public virtual public virtual decl_stmt Spring.Data.NHibernate.TestObject = new TestObject public virtual public virtual decl_stmt Spring.Data.NHibernate.TestObject = typeof new TestObject = public virtual = public virtual try decl_stmt Spring.Data.NHibernate.TestObject = typeof string new catch TestObject TestObject DummyFactory public virtual public virtual decl_stmt Spring.Data.NHibernate.TestObject = call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() + decl_stmt Spring.Objects.Factory.DummyFactory = decl_stmt Spring.Data.NHibernate.TestObject = == != TestObject TestObject public virtual public virtual decl_stmt Spring.Data.NHibernate.TestObject = ! call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() call TestObject.Name() decl_stmt Spring.Data.NHibernate.TestObject = != DummyFactory public virtual public virtual decl_stmt Spring.Objects.Factory.DummyFactory = != TestObject DummyFactory public virtual public virtual decl_stmt Spring.Data.NHibernate.TestObject = decl_stmt Spring.Objects.Factory.DummyFactory = typeof public virtual typeof public virtual string object object typeof public virtual typeof public virtual decl_stmt string = try catch call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() decl_stmt object = decl_stmt object = == typeof public typeof public typeof public typeof public AbstractObjectFactory public public decl_stmt Spring.Objects.Factory.Support.AbstractObjectFactory = call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) new call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) new call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) new new call Spring.Objects.Factory.Support.AbstractObjectFactory.GetSingletonNames() call Spring.Objects.Factory.Support.AbstractObjectFactory.GetSingletonNames() call Spring.Objects.Factory.Support.AbstractObjectFactory.GetSingletonNames() call Spring.Objects.Factory.Support.AbstractObjectFactory.GetSingletonNames() call Spring.Objects.Factory.Support.AbstractObjectFactory.GetSingletonNames() = call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) new call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) new call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) new new call Spring.Objects.Factory.Support.AbstractObjectFactory.GetSingletonNames() call Spring.Objects.Factory.Support.AbstractObjectFactory.GetSingletonNames() call Spring.Objects.Factory.Support.AbstractObjectFactory.GetSingletonNames() call Spring.Objects.Factory.Support.AbstractObjectFactory.GetSingletonNames() call Spring.Objects.Factory.Support.AbstractObjectFactory.GetSingletonNames() typeof object typeof public typeof public typeof public typeof public typeof public typeof public typeof public typeof public AbstractObjectFactory GenericObjectDefinition GenericObjectDefinition TestObject public public decl_stmt Spring.Objects.Factory.Support.AbstractObjectFactory = decl_stmt Spring.Objects.Factory.Support.GenericObjectDefinition = new = typeof = call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() new new call AbstractObjectFactory.RegisterObjectDefinition() call AbstractObjectFactory.RegisterObjectDefinition() call AbstractObjectFactory.RegisterObjectDefinition() call AbstractObjectFactory.RegisterObjectDefinition() call AbstractObjectFactory.RegisterObjectDefinition() decl_stmt Spring.Objects.Factory.Support.GenericObjectDefinition = new = typeof = call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() new new call AbstractObjectFactory.RegisterObjectDefinition() call AbstractObjectFactory.RegisterObjectDefinition() call AbstractObjectFactory.RegisterObjectDefinition() call AbstractObjectFactory.RegisterObjectDefinition() call AbstractObjectFactory.RegisterObjectDefinition() call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) new call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(string,object) new decl_stmt Spring.Data.NHibernate.TestObject = call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(string,Type,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(string,Type,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(string,Type,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(string,Type,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(string,Type,object) AbstractObjectFactory GenericObjectDefinition GenericObjectDefinition public public decl_stmt Spring.Objects.Factory.Support.AbstractObjectFactory = decl_stmt Spring.Objects.Factory.Support.GenericObjectDefinition = new = typeof = call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() new new call AbstractObjectFactory.RegisterObjectDefinition() call AbstractObjectFactory.RegisterObjectDefinition() call AbstractObjectFactory.RegisterObjectDefinition() call AbstractObjectFactory.RegisterObjectDefinition() call AbstractObjectFactory.RegisterObjectDefinition() decl_stmt Spring.Objects.Factory.Support.GenericObjectDefinition = new = typeof = call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() new new call AbstractObjectFactory.RegisterObjectDefinition() call AbstractObjectFactory.RegisterObjectDefinition() call AbstractObjectFactory.RegisterObjectDefinition() call AbstractObjectFactory.RegisterObjectDefinition() call AbstractObjectFactory.RegisterObjectDefinition() try call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(string,Type,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(string,Type,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(string,Type,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(string,Type,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(string,Type,object) catch private private if == else AsyncTestTask AsyncTestTask AsyncTestTask AsyncTestTask GenericObjectDefinition GenericObjectDefinition public public = decl_stmt Spring.Objects.Factory.Support.GenericObjectDefinition = new = typeof = decl_stmt Spring.Objects.Factory.Support.GenericObjectDefinition = new = typeof = call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() call GenericObjectDefinition.PropertyValues() decl_stmt Spring.Threading.AsyncTestTask = new new decl_stmt Spring.Threading.AsyncTestTask = new new decl_stmt Spring.Threading.AsyncTestTask = new new decl_stmt Spring.Threading.AsyncTestTask = new new call AsyncTestTask.AssertNoException() call AsyncTestTask.AssertNoException() call AsyncTestTask.AssertNoException() call AsyncTestTask.AssertNoException() call AsyncTestTask.AssertNoException() call AsyncTestTask.AssertNoException() call AsyncTestTask.AssertNoException() call AsyncTestTask.AssertNoException() call AsyncTestTask.AssertNoException() call AsyncTestTask.AssertNoException() call AsyncTestTask.AssertNoException() call AsyncTestTask.AssertNoException() call AsyncTestTask.AssertNoException() call AsyncTestTask.AssertNoException() call AsyncTestTask.AssertNoException() call AsyncTestTask.AssertNoException() call AsyncTestTask.AssertNoException() call AsyncTestTask.AssertNoException() call AsyncTestTask.AssertNoException() call AsyncTestTask.AssertNoException()