Spring.Aop.Framework.DynamicProxy System using System.IO using System.Runtime.Serialization using System.Runtime.Serialization.Formatters using System.Runtime.Serialization.Formatters.Binary using System.Threading using System.Reflection using System.Web using System.Runtime.Remoting using AopAlliance.Aop using AopAlliance.Intercept using Rhino.Mocks using Spring.Aop.Framework.Adapter using Spring.Aop.Interceptor using Spring.Aop.Support using Spring.Expressions using Spring.Objects using Spring.Proxy using Spring.Threading using Spring.Util using NUnit.Framework using class Spring.Aop.Framework.DynamicProxy.AbstractAopProxyTests MockTargetSource public public protected protected call Spring.Aop.Framework.DynamicProxy.MockTargetSource.Reset() call Spring.Aop.Framework.DynamicProxy.MockTargetSource.Reset() call Spring.Aop.Framework.DynamicProxy.MockTargetSource.Reset() call Spring.Aop.Framework.DynamicProxy.MockTargetSource.Reset() call Spring.Aop.Framework.DynamicProxy.MockTargetSource.Reset() protected protected call MockTargetSource.Verify() call MockTargetSource.Verify() call MockTargetSource.Verify() call MockTargetSource.Verify() call MockTargetSource.Verify() Type ConstructorInfo protected virtual protected virtual decl_stmt System.Type = decl_stmt System.Reflection.ConstructorInfo = call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) new typeof return call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) new object BinaryFormatter private private using = new decl_stmt System.Runtime.Serialization.Formatters.Binary.BinaryFormatter = new = = call System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(Stream,object,bool) call System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(Stream,object,bool) call System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(Stream,object,bool) call System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(Stream,object,bool) call System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(Stream,object,bool) = decl_stmt object = call System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream,HeaderHandler) call System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream,HeaderHandler) call System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream,HeaderHandler) call System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream,HeaderHandler) call System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream,HeaderHandler) return return = public public if ! ++ public public return = public public if ! ++ ISerializableTestObject int ISerializableTestObject AdvisedSupport public public decl_stmt int decl_stmt Spring.Aop.Framework.DynamicProxy.ISerializableTestObject = new = decl_stmt Spring.Aop.Framework.AdvisedSupport = new = = new typeof decl_stmt Spring.Aop.Framework.DynamicProxy.ISerializableTestObject = = = + ISerializableTestObject int ISerializableTestObject AdvisedSupport public public decl_stmt int decl_stmt Spring.Aop.Framework.DynamicProxy.ISerializableTestObject = new = decl_stmt Spring.Aop.Framework.AdvisedSupport = new = = new typeof decl_stmt Spring.Aop.Framework.DynamicProxy.ISerializableTestObject = = = + TestObject int int ProxyFactory ITestObject string = public = public decl_stmt int = decl_stmt int = decl_stmt string = decl_stmt Spring.Data.NHibernate.TestObject = new = decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() new new call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() new new decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = = = return = return = return = ITestCustomer IMethodInterceptor AdvisedSupport = public = public decl_stmt AopAlliance.Intercept.IMethodInterceptor = < call IMethodInterceptor.Stub() call IMethodInterceptor.Stub() call IMethodInterceptor.Stub() call IMethodInterceptor.Stub() call IMethodInterceptor.Stub() < < < < long call IMethodInterceptor.Stub() call IMethodInterceptor.Stub() call IMethodInterceptor.Stub() call IMethodInterceptor.Stub() call IMethodInterceptor.Stub() < < < < call IMethodInterceptor.Stub() call IMethodInterceptor.Stub() call IMethodInterceptor.Stub() call IMethodInterceptor.Stub() call IMethodInterceptor.Stub() < < < < decl_stmt Spring.Aop.Framework.AdvisedSupport = new call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) = new typeof decl_stmt ITestCustomer = as long TestCustomer ITestCustomer AdvisedSupport public virtual public virtual decl_stmt TestCustomer = new decl_stmt Spring.Aop.Framework.AdvisedSupport = new = = new typeof decl_stmt ITestCustomer = as call ITestCustomer.Equals() call ITestCustomer.Equals() call ITestCustomer.Equals() call ITestCustomer.Equals() call ITestCustomer.Equals() ITestObject AdvisedSupport typeof = public typeof = public decl_stmt Spring.Aop.Framework.AdvisedSupport = new = new typeof object = new typeof decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = as call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() DynamicTargetSource ITestObject DynamicInvocationTestInterceptor AdvisedSupport public public decl_stmt DynamicInvocationTestInterceptor = new decl_stmt DynamicTargetSource = new typeof object decl_stmt Spring.Aop.Framework.AdvisedSupport = new = = new typeof call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = as = = call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() DynamicTargetSource ITestObject DynamicInvocationTestInterceptor AdvisedSupport typeof = = public typeof = = public decl_stmt DynamicInvocationTestInterceptor = new decl_stmt DynamicTargetSource = new typeof object decl_stmt Spring.Aop.Framework.AdvisedSupport = new = = new typeof call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = as = = call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() DynamicTargetSource ITestObject DynamicInvocationTestInterceptor AdvisedSupport typeof = public typeof = public decl_stmt DynamicInvocationTestInterceptor = new decl_stmt DynamicTargetSource = new typeof object decl_stmt Spring.Aop.Framework.AdvisedSupport = new = = new typeof call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = as = new = call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() ITestObject AdvisedSupport typeof = public typeof = public decl_stmt Spring.Aop.Framework.AdvisedSupport = new = new typeof decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = as call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() ITestObject int IMethodInterceptor AdvisedSupport public public decl_stmt int = decl_stmt AopAlliance.Intercept.IMethodInterceptor = < call IMethodInterceptor.Stub() call IMethodInterceptor.Stub() call IMethodInterceptor.Stub() call IMethodInterceptor.Stub() call IMethodInterceptor.Stub() < < < < decl_stmt Spring.Aop.Framework.AdvisedSupport = new call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) = new typeof decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = as == ITestObject AdvisedSupport typeof = public typeof = public decl_stmt Spring.Aop.Framework.AdvisedSupport = new call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) new = new typeof decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = as call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() ITestObject IAopProxy ITestObject ITestObject AdvisedSupport public public decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = new = decl_stmt Spring.Aop.Framework.AdvisedSupport = new call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) new decl_stmt Spring.Aop.Framework.IAopProxy = decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call IAopProxy.GetProxy() call IAopProxy.GetProxy() call IAopProxy.GetProxy() call IAopProxy.GetProxy() call IAopProxy.GetProxy() = new call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) new = decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call IAopProxy.GetProxy() call IAopProxy.GetProxy() call IAopProxy.GetProxy() call IAopProxy.GetProxy() call IAopProxy.GetProxy() object IBusinessCommand TheCommand IServiceCommand AdvisedSupport public public decl_stmt TheCommand = new decl_stmt Spring.Aop.Framework.AdvisedSupport = new call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) new decl_stmt object = = new call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) new = decl_stmt IServiceCommand = as call IServiceCommand.Execute() call IServiceCommand.Execute() call IServiceCommand.Execute() call IServiceCommand.Execute() call IServiceCommand.Execute() decl_stmt IBusinessCommand = as call IBusinessCommand.Execute() call IBusinessCommand.Execute() call IBusinessCommand.Execute() call IBusinessCommand.Execute() call IBusinessCommand.Execute() return ++ return ++ object IAopProxy TestObject AdvisedSupport public public decl_stmt Spring.Data.NHibernate.TestObject = new decl_stmt Spring.Aop.Framework.AdvisedSupport = new new typeof = decl_stmt Spring.Aop.Framework.IAopProxy = decl_stmt object = call IAopProxy.GetProxy() call IAopProxy.GetProxy() call IAopProxy.GetProxy() call IAopProxy.GetProxy() call IAopProxy.GetProxy() object IAopProxy TestObject AdvisedSupport public public decl_stmt Spring.Data.NHibernate.TestObject = new decl_stmt Spring.Aop.Framework.AdvisedSupport = new new typeof = decl_stmt Spring.Aop.Framework.IAopProxy = decl_stmt object = call IAopProxy.GetProxy() call IAopProxy.GetProxy() call IAopProxy.GetProxy() call IAopProxy.GetProxy() call IAopProxy.GetProxy() call Spring.Data.NHibernate.TestObject.GetHashCode() call Spring.Data.NHibernate.TestObject.GetHashCode() call Spring.Data.NHibernate.TestObject.GetHashCode() call Spring.Data.NHibernate.TestObject.GetHashCode() call Spring.Data.NHibernate.TestObject.GetHashCode() call object.GetHashCode() call object.GetHashCode() call object.GetHashCode() call object.GetHashCode() call object.GetHashCode() IRefOutTestObject IAopProxy PublicRefOutTestObject AdvisedSupport public public decl_stmt PublicRefOutTestObject = new decl_stmt Spring.Aop.Framework.AdvisedSupport = new new typeof = decl_stmt Spring.Aop.Framework.IAopProxy = decl_stmt Spring.Reflection.Dynamic.IRefOutTestObject = call IAopProxy.GetProxy() call IAopProxy.GetProxy() call IAopProxy.GetProxy() call IAopProxy.GetProxy() call IAopProxy.GetProxy() as NopInterceptor IRefOutTestObject IAopProxy PublicRefOutTestObject AdvisedSupport public public decl_stmt PublicRefOutTestObject = new decl_stmt Spring.Aop.Framework.AdvisedSupport = new new typeof = decl_stmt Spring.Aop.Interceptor.NopInterceptor = new call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) decl_stmt Spring.Aop.Framework.IAopProxy = decl_stmt Spring.Reflection.Dynamic.IRefOutTestObject = call IAopProxy.GetProxy() call IAopProxy.GetProxy() call IAopProxy.GetProxy() call IAopProxy.GetProxy() call IAopProxy.GetProxy() as NopInterceptor IRefOutTestObject IAopProxy InternalRefOutTestObject AdvisedSupport public virtual public virtual decl_stmt InternalRefOutTestObject = new decl_stmt Spring.Aop.Framework.AdvisedSupport = new new typeof = decl_stmt Spring.Aop.Interceptor.NopInterceptor = new call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) decl_stmt Spring.Aop.Framework.IAopProxy = decl_stmt Spring.Reflection.Dynamic.IRefOutTestObject = call IAopProxy.GetProxy() call IAopProxy.GetProxy() call IAopProxy.GetProxy() call IAopProxy.GetProxy() call IAopProxy.GetProxy() as Guid TestObject int int EnumValue EnumValue String TestObject Guid bool EnumValue private private decl_stmt int = decl_stmt Spring.Data.NHibernate.TestObject = decl_stmt EnumValue = decl_stmt bool = decl_stmt int decl_stmt System.String = decl_stmt Spring.Data.NHibernate.TestObject decl_stmt EnumValue = decl_stmt EnumValue = decl_stmt Guid = decl_stmt Guid = ref out ref out ref out ref out public public ref ref out out ref ref out out ref ref out out ref ref out out ++ = new = = = += = new = = = = return public public public < ref ref out out = = return return public return public return public virtual return public virtual Object MethodInfo public public decl_stmt System.Reflection.MethodInfo = decl_stmt System.Object = return Object Object public public decl_stmt System.Object = decl_stmt System.Object = == return return public public throw public public return public override public override return == public override public override return && == && == typeof string public public = return object public public decl_stmt object = return bool public override public override decl_stmt bool = != - if ++ return public override public override return bool public override public override decl_stmt bool = != - if ++ return public public public public return public public return public public public override public override return && == public override public override return && == && == typeof int public override public override return == public override public override return == || == public override public override if throw public public += int public override public override return == typeof int public override public override return public public if == throw new return public public return public public = return return public public INeedsToSeeProxy IAdvised public public decl_stmt INeedsToSeeProxy = call INeedsToSeeProxy.Increment() call INeedsToSeeProxy.Increment() call INeedsToSeeProxy.Increment() call INeedsToSeeProxy.Increment() call INeedsToSeeProxy.Increment() decl_stmt Spring.Aop.Framework.IAdvised = protected virtual protected virtual public public ++ protected override protected override return = return = return public virtual public virtual return public public public public = if return return