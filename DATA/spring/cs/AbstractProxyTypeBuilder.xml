Spring.Proxy System using System.Collections using System.Collections.Generic using System.Reflection using System.Reflection.Emit using System.Runtime.Serialization using Common.Logging using Spring.Core.TypeResolution using Spring.Util using class Spring.Proxy.AbstractProxyTypeBuilder super super IProxyTypeBuilder super IProxyTypeGenerator decl IList Type IDictionary ILog FieldInfo string Type IList string bool if = return = return = return = if == = return = return = return = return = public virtual public virtual string protected virtual protected virtual decl_stmt string = return protected virtual protected virtual foreach in if is else if is else if is protected virtual protected virtual foreach in if is else if is else if is ParameterBuilder protected virtual protected virtual decl_stmt System.Reflection.Emit.ParameterBuilder = foreach in if is call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) else if is call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) else if is call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) ParameterBuilder protected virtual protected virtual foreach in decl_stmt System.Reflection.Emit.ParameterBuilder = + foreach in if is call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) else if is call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) else if is call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) call System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo,byte) ArrayList protected virtual protected virtual decl_stmt System.Collections.ArrayList = new if && ! typeof object call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) return ArrayList protected virtual protected virtual decl_stmt System.Collections.ArrayList = new if && ! call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) foreach in if string if is call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) else if is call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) as return ArrayList decl object decl System protected virtual protected virtual decl_stmt System.Collections.ArrayList = new if && ! decl_stmt object = try decl_stmt Generic < = if != call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) else foreach in call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) catch call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) return ArrayList decl object decl IList protected virtual protected virtual decl_stmt System.Collections.ArrayList = new if && ! decl_stmt object = try decl_stmt System.Collections.Generic.IList < = if != call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) else foreach in call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) catch call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) return protected virtual protected virtual if is return == else if is return == else if is return == call FieldInfo.GetValue() call FieldInfo.GetValue() call FieldInfo.GetValue() call FieldInfo.GetValue() call FieldInfo.GetValue() return protected virtual protected virtual return ConstructorBuilder decl ConstructorInfo ILGenerator protected virtual protected virtual decl_stmt System.Reflection.ConstructorInfo = | | foreach in if || decl_stmt System.Reflection.Emit.ConstructorBuilder = decl_stmt System.Reflection.Emit.ILGenerator = call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) protected virtual protected virtual protected virtual protected virtual MethodBuilder InterfaceMapping decl Dictionary protected virtual protected virtual decl_stmt System.Collections.Generic.Dictionary < = new < decl_stmt InterfaceMapping = for = < ++ if ! && ! && && ! continue decl_stmt System.Reflection.Emit.MethodBuilder = = foreach in foreach in InterfaceMapping protected virtual protected virtual decl_stmt InterfaceMapping if = else = = = = return protected virtual protected virtual MethodAttributes MethodBuilder BindingFlags decl MethodInfo decl IDictionary protected virtual protected virtual decl_stmt System.Collections.Generic.IDictionary < = new < decl_stmt BindingFlags = | | if |= decl_stmt System.Reflection.MethodInfo = foreach in decl_stmt MethodAttributes = & if && ! && ! && == || == || == decl_stmt System.Reflection.Emit.MethodBuilder = = foreach in foreach in PropertyBuilder MethodBuilder string MethodBuilder protected virtual protected virtual < decl_stmt System.Reflection.Emit.MethodBuilder + out decl_stmt System.Reflection.Emit.MethodBuilder + out if != || != decl_stmt string = && != && || != && + + : decl_stmt System.Reflection.Emit.PropertyBuilder = if && != call System.Reflection.Emit.PropertyBuilder.SetGetMethod(MethodBuilder) call System.Reflection.Emit.PropertyBuilder.SetGetMethod(MethodBuilder) call System.Reflection.Emit.PropertyBuilder.SetGetMethod(MethodBuilder) call System.Reflection.Emit.PropertyBuilder.SetGetMethod(MethodBuilder) call System.Reflection.Emit.PropertyBuilder.SetGetMethod(MethodBuilder) if && != call System.Reflection.Emit.PropertyBuilder.SetSetMethod(MethodBuilder) call System.Reflection.Emit.PropertyBuilder.SetSetMethod(MethodBuilder) call System.Reflection.Emit.PropertyBuilder.SetSetMethod(MethodBuilder) call System.Reflection.Emit.PropertyBuilder.SetSetMethod(MethodBuilder) call System.Reflection.Emit.PropertyBuilder.SetSetMethod(MethodBuilder) string MethodBuilder MethodBuilder EventBuilder protected virtual protected virtual < decl_stmt System.Reflection.Emit.MethodBuilder + out decl_stmt System.Reflection.Emit.MethodBuilder + out if != && != decl_stmt string = + + : decl_stmt System.Reflection.Emit.EventBuilder = call System.Reflection.Emit.EventBuilder.SetAddOnMethod(MethodBuilder) call System.Reflection.Emit.EventBuilder.SetAddOnMethod(MethodBuilder) call System.Reflection.Emit.EventBuilder.SetAddOnMethod(MethodBuilder) call System.Reflection.Emit.EventBuilder.SetAddOnMethod(MethodBuilder) call System.Reflection.Emit.EventBuilder.SetAddOnMethod(MethodBuilder) call System.Reflection.Emit.EventBuilder.SetRemoveOnMethod(MethodBuilder) call System.Reflection.Emit.EventBuilder.SetRemoveOnMethod(MethodBuilder) call System.Reflection.Emit.EventBuilder.SetRemoveOnMethod(MethodBuilder) call System.Reflection.Emit.EventBuilder.SetRemoveOnMethod(MethodBuilder) call System.Reflection.Emit.EventBuilder.SetRemoveOnMethod(MethodBuilder) decl List decl Type protected virtual < protected virtual < < decl_stmt System.Collections.Generic.List < = new < foreach in if ! typeof && ! && if ! call decl List.Contains() call decl List.Contains() call decl List.Contains() call decl List.Contains() call decl List.Contains() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() decl_stmt System.Type = foreach in if ! call decl List.Contains() call decl List.Contains() call decl List.Contains() call decl List.Contains() call decl List.Contains() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() return private private return == typeof