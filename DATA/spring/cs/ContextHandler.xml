Spring.Context.Support System using System.Collections.Generic using System.Configuration using System.Reflection using System.Xml using Common.Logging using Spring.Core using Spring.Core.TypeResolution using Spring.Reflection.Dynamic using Spring.Util using class Spring.Context.Support.ContextHandler super super IConfigurationSectionHandler ILog return typeof return return string bool Type IApplicationContext XmlElement IApplicationContext decl IList decl IList public public decl_stmt System.Xml.XmlElement = as region region region region if == throw if != && ! is throw endregion decl_stmt string = if ! = region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion decl_stmt Spring.Context.IApplicationContext = try decl_stmt Spring.Context.IApplicationContext = as decl_stmt System.Type = decl_stmt bool = decl_stmt System.Collections.Generic.IList < = = if && ! decl_stmt System.Collections.Generic.IList < = if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() catch if ! throw throw return protected virtual protected virtual < foreach in ContextInstantiator IApplicationContext protected virtual protected virtual < decl_stmt Spring.Context.IApplicationContext decl_stmt ContextInstantiator if == = new new < else = new new < if = call ContextInstantiator.InstantiateContext() call ContextInstantiator.InstantiateContext() call ContextInstantiator.InstantiateContext() call ContextInstantiator.InstantiateContext() call ContextInstantiator.InstantiateContext() return string protected virtual protected virtual decl_stmt string = return Type private private decl_stmt System.Type if != = else = return bool string private private decl_stmt bool = decl_stmt string = if = return string Type private private decl_stmt string = if return else decl_stmt System.Type = if typeof return else throw new + return XmlElement string decl List private < private < decl_stmt System.Collections.Generic.List < = new < foreach in decl_stmt System.Xml.XmlElement = as if != && == decl_stmt string = call System.Xml.XmlElement.GetAttribute(string,string) call System.Xml.XmlElement.GetAttribute(string,string) call System.Xml.XmlElement.GetAttribute(string,string) call System.Xml.XmlElement.GetAttribute(string,string) call System.Xml.XmlElement.GetAttribute(string,string) if call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() return XmlElement decl List private < private < decl_stmt System.Collections.Generic.List < = new < foreach in decl_stmt System.Xml.XmlElement = as if != && == call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() return string IApplicationContext ConstructorInfo public public decl_stmt System.Reflection.ConstructorInfo = if == decl_stmt string = + + throw decl_stmt Spring.Context.IApplicationContext = return return return return return protected override protected override return new typeof string typeof bool typeof protected override protected override return new new protected override protected override return new typeof string typeof bool typeof typeof protected override protected override return new new