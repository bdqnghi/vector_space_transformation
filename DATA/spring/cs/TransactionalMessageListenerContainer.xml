Spring.Messaging.Listener System using System.Messaging using Common.Logging using Spring.Data.Core using Spring.Messaging.Core using Spring.Messaging.Support using Spring.Transaction using Spring.Transaction.Support using class Spring.Messaging.Listener.TransactionalMessageListenerContainer super super AbstractTransactionalMessageListenerContainer bool bool bool IMessageTransactionExceptionHandler ILog return = = return = return = bool bool public override public override decl_stmt bool = is decl_stmt bool = is if ! && ! throw new + + if ! && && ! = if == = protected override protected override if is return else if is if return else return private private throw new TransactionAction Message protected virtual protected virtual region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion decl_stmt System.ServiceModel.Channels.Message region region region region try = catch if == if call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() return else region region if call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() + + endregion lock throw endregion if == region region if call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() + + endregion return try region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + + + + endregion region region if call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() endregion catch decl_stmt TransactionAction = if == region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + + endregion return else call ILog.Info() call ILog.Info() call ILog.Info() call ILog.Info() call ILog.Info() finally call Message.Dispose() call Message.Dispose() call Message.Dispose() call Message.Dispose() call Message.Dispose() return TransactionAction Message protected virtual protected virtual region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion using = new region region if call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() + + endregion decl_stmt System.ServiceModel.Channels.Message region region try region region if call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() + + endregion = catch if == region region if call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() endregion return else region region if call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() + + endregion lock throw endregion if == region region if call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() + + endregion return try region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + + + + endregion if new region region if call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() endregion region region if call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() + + endregion catch decl_stmt TransactionAction = if == region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + + endregion else region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + + endregion throw finally if call Message.Dispose() call Message.Dispose() call Message.Dispose() call Message.Dispose() call Message.Dispose() return TransactionAction protected virtual protected virtual try decl_stmt TransactionAction = if call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() else call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() return catch call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() return IMessageTransactionExceptionHandler protected virtual protected virtual decl_stmt Spring.Messaging.Listener.IMessageTransactionExceptionHandler = if != return call IMessageTransactionExceptionHandler.OnException() call IMessageTransactionExceptionHandler.OnException() call IMessageTransactionExceptionHandler.OnException() call IMessageTransactionExceptionHandler.OnException() call IMessageTransactionExceptionHandler.OnException() else call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() return