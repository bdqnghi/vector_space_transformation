Spring.Data System using System.Data using System.Data.SqlClient using System.Diagnostics using System.Threading using NUnit.Framework using Spring.Context using Spring.Context.Support using Spring.Data.Core using Spring.Reflection.Dynamic using Spring.Transaction using Spring.Transaction.Support using Spring.Util using class attribute Spring.Data.AdoTemplatePerformanceTests DateTime string AdoTemplate IApplicationContext public public decl_stmt Spring.Context.IApplicationContext = new = as private private call Spring.Data.Core.AdoTemplate.ExecuteNonQuery(CommandType,string) call Spring.Data.Core.AdoTemplate.ExecuteNonQuery(CommandType,string) call Spring.Data.Core.AdoTemplate.ExecuteNonQuery(CommandType,string) call Spring.Data.Core.AdoTemplate.ExecuteNonQuery(CommandType,string) call Spring.Data.Core.AdoTemplate.ExecuteNonQuery(CommandType,string) public public public public for = < ++ int Type double IDynamicConstructor public public decl_stmt int = = decl_stmt System.Type = typeof for = < ++ decl_stmt Spring.Reflection.Dynamic.IDynamicConstructor = call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call IDynamicConstructor.Invoke() call IDynamicConstructor.Invoke() call IDynamicConstructor.Invoke() call IDynamicConstructor.Invoke() call IDynamicConstructor.Invoke() = decl_stmt double = = for = < ++ typeof = = double double double private private + decl_stmt double decl_stmt double if if = else = + if = else = else if = else = + if = else = + + + decl_stmt double = * - / + * + - + TransactionTemplate AdoPlatformTransactionManager double private private decl_stmt Spring.Data.Core.AdoPlatformTransactionManager = new decl_stmt Spring.Transaction.Support.TransactionTemplate = new decl_stmt double = call Spring.Transaction.Support.TransactionTemplate.Execute(TransactionDelegate) call Spring.Transaction.Support.TransactionTemplate.Execute(TransactionDelegate) call Spring.Transaction.Support.TransactionTemplate.Execute(TransactionDelegate) call Spring.Transaction.Support.TransactionTemplate.Execute(TransactionDelegate) call Spring.Transaction.Support.TransactionTemplate.Execute(TransactionDelegate) = for = < ++ call Spring.Data.Core.AdoTemplate.ExecuteNonQuery(CommandType,string) call Spring.Data.Core.AdoTemplate.ExecuteNonQuery(CommandType,string) call Spring.Data.Core.AdoTemplate.ExecuteNonQuery(CommandType,string) call Spring.Data.Core.AdoTemplate.ExecuteNonQuery(CommandType,string) call Spring.Data.Core.AdoTemplate.ExecuteNonQuery(CommandType,string) = = return return double private private = for = < ++ call Spring.Data.Core.AdoTemplate.ExecuteNonQuery(CommandType,string) call Spring.Data.Core.AdoTemplate.ExecuteNonQuery(CommandType,string) call Spring.Data.Core.AdoTemplate.ExecuteNonQuery(CommandType,string) call Spring.Data.Core.AdoTemplate.ExecuteNonQuery(CommandType,string) call Spring.Data.Core.AdoTemplate.ExecuteNonQuery(CommandType,string) = decl_stmt double = return SqlTransaction double private private = using = new using = new decl_stmt System.Data.SqlClient.SqlTransaction = = for = < ++ call System.Data.SqlClient.SqlTransaction.Commit() call System.Data.SqlClient.SqlTransaction.Commit() call System.Data.SqlClient.SqlTransaction.Commit() call System.Data.SqlClient.SqlTransaction.Commit() call System.Data.SqlClient.SqlTransaction.Commit() = decl_stmt double = return double private private = for = < ++ using = new using = new = decl_stmt double = return return - / private static private static /