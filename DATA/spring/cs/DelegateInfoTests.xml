Spring.Util System using System.Reflection using NUnit.Framework using class attribute Spring.Util.DelegateInfoTests public public new typeof typeof public typeof public new typeof string public public typeof string public public public public typeof DelegateInfo public public decl_stmt Spring.Util.DelegateInfo = new typeof typeof call Spring.Util.DelegateInfo.GetReturnType() call Spring.Util.DelegateInfo.GetReturnType() call Spring.Util.DelegateInfo.GetReturnType() call Spring.Util.DelegateInfo.GetReturnType() call Spring.Util.DelegateInfo.GetReturnType() DelegateInfo public public decl_stmt Spring.Util.DelegateInfo = new typeof typeof string call Spring.Util.DelegateInfo.GetReturnType() call Spring.Util.DelegateInfo.GetReturnType() call Spring.Util.DelegateInfo.GetReturnType() call Spring.Util.DelegateInfo.GetReturnType() call Spring.Util.DelegateInfo.GetReturnType() DelegateInfo decl Type public public decl_stmt Spring.Util.DelegateInfo = new typeof decl_stmt System.Type = call DelegateInfo.GetParameterTypes() call DelegateInfo.GetParameterTypes() call DelegateInfo.GetParameterTypes() call DelegateInfo.GetParameterTypes() call DelegateInfo.GetParameterTypes() DelegateInfo decl Type public public decl_stmt Spring.Util.DelegateInfo = new typeof decl_stmt System.Type = call DelegateInfo.GetParameterTypes() call DelegateInfo.GetParameterTypes() call DelegateInfo.GetParameterTypes() call DelegateInfo.GetParameterTypes() call DelegateInfo.GetParameterTypes() DelegateInfo MethodInfo public public decl_stmt Spring.Util.DelegateInfo = new typeof decl_stmt System.Reflection.MethodInfo = call Spring.Util.DelegateInfo.IsSignatureCompatible(MethodInfo) call Spring.Util.DelegateInfo.IsSignatureCompatible(MethodInfo) call Spring.Util.DelegateInfo.IsSignatureCompatible(MethodInfo) call Spring.Util.DelegateInfo.IsSignatureCompatible(MethodInfo) call Spring.Util.DelegateInfo.IsSignatureCompatible(MethodInfo) = call Spring.Util.DelegateInfo.IsSignatureCompatible(MethodInfo) call Spring.Util.DelegateInfo.IsSignatureCompatible(MethodInfo) call Spring.Util.DelegateInfo.IsSignatureCompatible(MethodInfo) call Spring.Util.DelegateInfo.IsSignatureCompatible(MethodInfo) call Spring.Util.DelegateInfo.IsSignatureCompatible(MethodInfo) = call Spring.Util.DelegateInfo.IsSignatureCompatible(MethodInfo) call Spring.Util.DelegateInfo.IsSignatureCompatible(MethodInfo) call Spring.Util.DelegateInfo.IsSignatureCompatible(MethodInfo) call Spring.Util.DelegateInfo.IsSignatureCompatible(MethodInfo) call Spring.Util.DelegateInfo.IsSignatureCompatible(MethodInfo) public public return public public return DelegateInfo MethodInfo public public decl_stmt Spring.Util.DelegateInfo = new typeof decl_stmt System.Reflection.MethodInfo = typeof | call Spring.Util.DelegateInfo.IsSignatureCompatible(MethodInfo) call Spring.Util.DelegateInfo.IsSignatureCompatible(MethodInfo) call Spring.Util.DelegateInfo.IsSignatureCompatible(MethodInfo) call Spring.Util.DelegateInfo.IsSignatureCompatible(MethodInfo) call Spring.Util.DelegateInfo.IsSignatureCompatible(MethodInfo) DelegateInfo MethodInfo public public decl_stmt Spring.Util.DelegateInfo = new typeof decl_stmt System.Reflection.MethodInfo = call Spring.Util.DelegateInfo.IsSignatureCompatible(MethodInfo) call Spring.Util.DelegateInfo.IsSignatureCompatible(MethodInfo) call Spring.Util.DelegateInfo.IsSignatureCompatible(MethodInfo) call Spring.Util.DelegateInfo.IsSignatureCompatible(MethodInfo) call Spring.Util.DelegateInfo.IsSignatureCompatible(MethodInfo) MethodInfo MethodInfo EventInfo public public decl_stmt System.Reflection.EventInfo = typeof decl_stmt System.Reflection.MethodInfo = decl_stmt System.Reflection.MethodInfo = typeof private private return public static public static return public public return