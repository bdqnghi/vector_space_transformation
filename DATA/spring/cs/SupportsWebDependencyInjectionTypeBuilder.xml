Spring.Web.Support System using System.Reflection using System.Reflection.Emit using Spring.Context using Spring.Proxy using Spring.Web.Support using Spring.Util using class Spring.Web.Support.SupportsWebDependencyInjectionTypeBuilder super super InheritanceProxyTypeBuilder string decl MethodInfo MethodInfo BaseProxyMethodBuilder FieldBuilder TypeBuilder public override public override = if || ! throw new + + decl_stmt TypeBuilder = decl_stmt System.Reflection.Emit.FieldBuilder = if ! typeof decl_stmt Spring.Proxy.BaseProxyMethodBuilder = new foreach in call BaseProxyMethodBuilder.BuildProxyMethod() call BaseProxyMethodBuilder.BuildProxyMethod() call BaseProxyMethodBuilder.BuildProxyMethod() call BaseProxyMethodBuilder.BuildProxyMethod() call BaseProxyMethodBuilder.BuildProxyMethod() return call TypeBuilder.CreateType() call TypeBuilder.CreateType() call TypeBuilder.CreateType() call TypeBuilder.CreateType() call TypeBuilder.CreateType() MethodBuilder Type ILGenerator MethodBuilder string string PropertyBuilder MethodAttributes PropertyInfo MethodInfo ILGenerator MethodInfo string private private decl_stmt System.Type = typeof decl_stmt System.Reflection.PropertyInfo = call System.Type.GetProperty(String,BindingFlags) call System.Type.GetProperty(String,BindingFlags) call System.Type.GetProperty(String,BindingFlags) call System.Type.GetProperty(String,BindingFlags) call System.Type.GetProperty(String,BindingFlags) decl_stmt string = typeof + + decl_stmt System.Reflection.Emit.PropertyBuilder = typeof decl_stmt MethodAttributes = | | | | | decl_stmt System.Reflection.MethodInfo = call System.Reflection.PropertyInfo.GetGetMethod() call System.Reflection.PropertyInfo.GetGetMethod() call System.Reflection.PropertyInfo.GetGetMethod() call System.Reflection.PropertyInfo.GetGetMethod() call System.Reflection.PropertyInfo.GetGetMethod() decl_stmt string = typeof + + decl_stmt System.Reflection.Emit.MethodBuilder = decl_stmt System.Reflection.Emit.ILGenerator = call System.Reflection.Emit.MethodBuilder.GetILGenerator(int) call System.Reflection.Emit.MethodBuilder.GetILGenerator(int) call System.Reflection.Emit.MethodBuilder.GetILGenerator(int) call System.Reflection.Emit.MethodBuilder.GetILGenerator(int) call System.Reflection.Emit.MethodBuilder.GetILGenerator(int) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.PropertyBuilder.SetGetMethod(MethodBuilder) call System.Reflection.Emit.PropertyBuilder.SetGetMethod(MethodBuilder) call System.Reflection.Emit.PropertyBuilder.SetGetMethod(MethodBuilder) call System.Reflection.Emit.PropertyBuilder.SetGetMethod(MethodBuilder) call System.Reflection.Emit.PropertyBuilder.SetGetMethod(MethodBuilder) decl_stmt System.Reflection.MethodInfo = call System.Reflection.PropertyInfo.GetSetMethod() call System.Reflection.PropertyInfo.GetSetMethod() call System.Reflection.PropertyInfo.GetSetMethod() call System.Reflection.PropertyInfo.GetSetMethod() call System.Reflection.PropertyInfo.GetSetMethod() decl_stmt string = typeof + + decl_stmt System.Reflection.Emit.MethodBuilder = new typeof decl_stmt System.Reflection.Emit.ILGenerator = call System.Reflection.Emit.MethodBuilder.GetILGenerator(int) call System.Reflection.Emit.MethodBuilder.GetILGenerator(int) call System.Reflection.Emit.MethodBuilder.GetILGenerator(int) call System.Reflection.Emit.MethodBuilder.GetILGenerator(int) call System.Reflection.Emit.MethodBuilder.GetILGenerator(int) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.PropertyBuilder.SetSetMethod(MethodBuilder) call System.Reflection.Emit.PropertyBuilder.SetSetMethod(MethodBuilder) call System.Reflection.Emit.PropertyBuilder.SetSetMethod(MethodBuilder) call System.Reflection.Emit.PropertyBuilder.SetSetMethod(MethodBuilder) call System.Reflection.Emit.PropertyBuilder.SetSetMethod(MethodBuilder) FieldBuilder private private decl_stmt System.Reflection.Emit.FieldBuilder = typeof return public static public static return