Spring.Aspects.Cache System using System.Collections using System.Collections.Specialized using NUnit.Framework using Spring.Aop.Framework using Spring.Caching using Spring.Context using Spring.Context.Support using Spring.Objects.Factory using class attribute Spring.Aspects.Cache.CacheAspectIntegrationTests CacheAspect GenericApplicationContext public public = new = new = Inventor ICache ProxyFactory IInventorStore IList public public decl_stmt Spring.Caching.ICache = new call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new new call ProxyFactory.AddAdvisors() call ProxyFactory.AddAdvisors() call ProxyFactory.AddAdvisors() call ProxyFactory.AddAdvisors() call ProxyFactory.AddAdvisors() decl_stmt Spring.Aspects.Cache.IInventorStore = call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) decl_stmt System.Collections.Generic.IList = call Spring.Aspects.Cache.IInventorStore.GetAll() call Spring.Aspects.Cache.IInventorStore.GetAll() call Spring.Aspects.Cache.IInventorStore.GetAll() call Spring.Aspects.Cache.IInventorStore.GetAll() call Spring.Aspects.Cache.IInventorStore.GetAll() call Spring.Aspects.Cache.IInventorStore.Delete(Inventor) call Spring.Aspects.Cache.IInventorStore.Delete(Inventor) call Spring.Aspects.Cache.IInventorStore.Delete(Inventor) call Spring.Aspects.Cache.IInventorStore.Delete(Inventor) call Spring.Aspects.Cache.IInventorStore.Delete(Inventor) decl_stmt Spring.Inventor = call IInventorStore.Load() call IInventorStore.Load() call IInventorStore.Load() call IInventorStore.Load() call IInventorStore.Load() call Spring.Aspects.Cache.IInventorStore.Save(Inventor) call Spring.Aspects.Cache.IInventorStore.Save(Inventor) call Spring.Aspects.Cache.IInventorStore.Save(Inventor) call Spring.Aspects.Cache.IInventorStore.Save(Inventor) call Spring.Aspects.Cache.IInventorStore.Save(Inventor) call ICache.Get() call ICache.Get() call ICache.Get() call ICache.Get() call ICache.Get() call Spring.Aspects.Cache.IInventorStore.DeleteAll() call Spring.Aspects.Cache.IInventorStore.DeleteAll() call Spring.Aspects.Cache.IInventorStore.DeleteAll() call Spring.Aspects.Cache.IInventorStore.DeleteAll() call Spring.Aspects.Cache.IInventorStore.DeleteAll() ICache ProxyFactory Inventor IInventorStore public public decl_stmt Spring.Caching.ICache = new call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new new call ProxyFactory.AddAdvisors() call ProxyFactory.AddAdvisors() call ProxyFactory.AddAdvisors() call ProxyFactory.AddAdvisors() call ProxyFactory.AddAdvisors() decl_stmt Spring.Aspects.Cache.IInventorStore = call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Caching.ICache.Insert(object,object,TimeSpan) call Spring.Caching.ICache.Insert(object,object,TimeSpan) call Spring.Caching.ICache.Insert(object,object,TimeSpan) call Spring.Caching.ICache.Insert(object,object,TimeSpan) call Spring.Caching.ICache.Insert(object,object,TimeSpan) decl_stmt Spring.Inventor = call IInventorStore.Load() call IInventorStore.Load() call IInventorStore.Load() call IInventorStore.Load() call IInventorStore.Load() typeof IList ICache ProxyFactory IInventorStore typeof public typeof public decl_stmt Spring.Caching.ICache = new call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new new call ProxyFactory.AddAdvisors() call ProxyFactory.AddAdvisors() call ProxyFactory.AddAdvisors() call ProxyFactory.AddAdvisors() call ProxyFactory.AddAdvisors() decl_stmt Spring.Aspects.Cache.IInventorStore = call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) decl_stmt System.Collections.Generic.IList = call Spring.Aspects.Cache.IInventorStore.GetAllNoCacheKey() call Spring.Aspects.Cache.IInventorStore.GetAllNoCacheKey() call Spring.Aspects.Cache.IInventorStore.GetAllNoCacheKey() call Spring.Aspects.Cache.IInventorStore.GetAllNoCacheKey() call Spring.Aspects.Cache.IInventorStore.GetAllNoCacheKey() IList ProxyFactory IInventorStore typeof public typeof public decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new new call ProxyFactory.AddAdvisors() call ProxyFactory.AddAdvisors() call ProxyFactory.AddAdvisors() call ProxyFactory.AddAdvisors() call ProxyFactory.AddAdvisors() decl_stmt Spring.Aspects.Cache.IInventorStore = call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) decl_stmt System.Collections.Generic.IList = call Spring.Aspects.Cache.IInventorStore.GetAll() call Spring.Aspects.Cache.IInventorStore.GetAll() call Spring.Aspects.Cache.IInventorStore.GetAll() call Spring.Aspects.Cache.IInventorStore.GetAll() call Spring.Aspects.Cache.IInventorStore.GetAll() IList ProxyFactory IInventorStore typeof public typeof public call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() new decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new new call ProxyFactory.AddAdvisors() call ProxyFactory.AddAdvisors() call ProxyFactory.AddAdvisors() call ProxyFactory.AddAdvisors() call ProxyFactory.AddAdvisors() decl_stmt Spring.Aspects.Cache.IInventorStore = call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) decl_stmt System.Collections.Generic.IList = call Spring.Aspects.Cache.IInventorStore.GetAll() call Spring.Aspects.Cache.IInventorStore.GetAll() call Spring.Aspects.Cache.IInventorStore.GetAll() call Spring.Aspects.Cache.IInventorStore.GetAll() call Spring.Aspects.Cache.IInventorStore.GetAll() decl IGenericDao ICache ProxyFactory = public = public decl_stmt Spring.Caching.ICache = new call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() call GenericApplicationContext.ObjectFactory() decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new new < call ProxyFactory.AddAdvisors() call ProxyFactory.AddAdvisors() call ProxyFactory.AddAdvisors() call ProxyFactory.AddAdvisors() call ProxyFactory.AddAdvisors() decl_stmt IGenericDao < = < call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call decl IGenericDao.Load() call decl IGenericDao.Load() call decl IGenericDao.Load() call decl IGenericDao.Load() call decl IGenericDao.Load() call ICache.Get() call ICache.Get() call ICache.Get() call ICache.Get() call ICache.Get()