Spring.Data.NHibernate.Bytecode System using System.Reflection using AopAlliance.Intercept using NHibernate.Engine using NHibernate.Proxy.Poco using NHibernate.Type using Spring.Aop using Spring.Reflection.Dynamic using class attribute Spring.Data.NHibernate.Bytecode.LazyInitializer super super BasicLazyInitializer super IMethodInterceptor super ITargetSource MethodInfo MethodInfo SafeMethod object public public try decl_stmt System.Reflection.MethodInfo = decl_stmt object = if != return decl_stmt Spring.Reflection.Dynamic.SafeMethod = new return call Spring.Reflection.Dynamic.SafeMethod.Invoke(object,object) call Spring.Reflection.Dynamic.SafeMethod.Invoke(object,object) call Spring.Reflection.Dynamic.SafeMethod.Invoke(object,object) call Spring.Reflection.Dynamic.SafeMethod.Invoke(object,object) call Spring.Reflection.Dynamic.SafeMethod.Invoke(object,object) catch call MethodInfo.Invoke() call MethodInfo.Invoke() call MethodInfo.Invoke() call MethodInfo.Invoke() call MethodInfo.Invoke() new throw return return return