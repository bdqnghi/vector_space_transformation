Spring.Core.TypeConversion System using System.Collections using System.Collections.Generic using System.ComponentModel using Spring.Util using System.Reflection using class Spring.Core.TypeConversion.TypeConversionUtils Type ICollection object object int Type string object MethodInfo Type Type Type Array object TypeConverter decl Type Type public static public static if != if return if != && decl_stmt System.Type = if is decl_stmt System.Collections.Generic.ICollection = return else if is string if typeof return string else decl_stmt string = string return else if ! decl_stmt System.Array = decl_stmt object = call System.Array.SetValue(Object,int) call System.Array.SetValue(Object,int) call System.Array.SetValue(Object,int) call System.Array.SetValue(Object,int) call System.Array.SetValue(Object,int) return if != && && typeof <> decl_stmt System.Type = if is decl_stmt System.Collections.Generic.ICollection = return typeof <> if != && && typeof <> decl_stmt System.Type = if is decl_stmt System.Collections.Generic.ICollection = return typeof <> if != && && typeof <,> decl_stmt System.Type = decl_stmt System.Type = decl_stmt System.Type = if is decl_stmt System.Collections.Generic.IDictionary = decl_stmt System.Type = typeof <,> decl_stmt System.Type = call System.Type.MakeGenericType(Type) call System.Type.MakeGenericType(Type) call System.Type.MakeGenericType(Type) call System.Type.MakeGenericType(Type) call System.Type.MakeGenericType(Type) new decl_stmt object = decl_stmt System.Reflection.MethodInfo = call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) new decl_stmt int = foreach in decl_stmt string = decl_stmt object = + decl_stmt object = + call MethodInfo.Invoke() call MethodInfo.Invoke() call MethodInfo.Invoke() call MethodInfo.Invoke() call MethodInfo.Invoke() new ++ return if != && && typeof <> decl_stmt System.Type = if is decl_stmt System.Collections.Generic.ICollection = return typeof <> try decl_stmt System.ComponentModel.TypeConverter = if != && call System.ComponentModel.TypeConverter.CanConvertFrom(ITypeDescriptorContext,Type) call System.ComponentModel.TypeConverter.CanConvertFrom(ITypeDescriptorContext,Type) call System.ComponentModel.TypeConverter.CanConvertFrom(ITypeDescriptorContext,Type) call System.ComponentModel.TypeConverter.CanConvertFrom(ITypeDescriptorContext,Type) call System.ComponentModel.TypeConverter.CanConvertFrom(ITypeDescriptorContext,Type) try = call System.ComponentModel.TypeConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,object) call System.ComponentModel.TypeConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,object) call System.ComponentModel.TypeConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,object) call System.ComponentModel.TypeConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,object) call System.ComponentModel.TypeConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,object) catch if is string = call System.ComponentModel.TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext,string) call System.ComponentModel.TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext,string) call System.ComponentModel.TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext,string) call System.ComponentModel.TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext,string) call System.ComponentModel.TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext,string) string else = if != && call System.ComponentModel.TypeConverter.CanConvertTo(Type) call System.ComponentModel.TypeConverter.CanConvertTo(Type) call System.ComponentModel.TypeConverter.CanConvertTo(Type) call System.ComponentModel.TypeConverter.CanConvertTo(Type) call System.ComponentModel.TypeConverter.CanConvertTo(Type) = call System.ComponentModel.TypeConverter.ConvertTo(object,Type) call System.ComponentModel.TypeConverter.ConvertTo(object,Type) call System.ComponentModel.TypeConverter.ConvertTo(object,Type) call System.ComponentModel.TypeConverter.ConvertTo(object,Type) call System.ComponentModel.TypeConverter.ConvertTo(object,Type) else if != && && ! is float && ! is double decl_stmt System.Type = = if = else throw new else if is = else throw new catch throw new if == && == || ! throw new return int Array object private static private static decl_stmt System.Array = decl_stmt int = foreach in decl_stmt object = call System.Array.SetValue(Object,int) call System.Array.SetValue(Object,int) call System.Array.SetValue(Object,int) call System.Array.SetValue(Object,int) call System.Array.SetValue(Object,int) ++ return int Type object object private static private static if ! typeof <> throw new decl_stmt System.Type = new decl_stmt object = decl_stmt int = foreach in decl_stmt object = call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) new ++ return private static private static return != + + + : private static private static if is return if == return return private static private static return new decl Type bool private static private static if ! throw new if && return decl_stmt bool = decl_stmt System.Type = foreach in if = break return private static private static return && ==