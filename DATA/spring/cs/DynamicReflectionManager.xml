Spring.Reflection.Dynamic System using System.Collections using System.Collections.Generic using System.Diagnostics using System.Reflection using System.Reflection.Emit using System.Runtime.CompilerServices using System.Security using System.Security.Permissions using Spring.Util using System.Reflection.Emit.DynamicMethod class Spring.Reflection.Dynamic.DynamicReflectionManager decl IDictionary ConstructorInfo TypeAttributes object decl IDictionary decl IDictionary decl IDictionary decl OpCode object string object MethodInfo decl IDictionary object MethodInfo object string ModuleBuilder internal static internal static decl_stmt string = decl_stmt ModuleBuilder = return call ModuleBuilder.DefineType() call ModuleBuilder.DefineType() call ModuleBuilder.DefineType() call ModuleBuilder.DefineType() call ModuleBuilder.DefineType() IDynamicProperty internal static internal static lock decl_stmt Spring.Reflection.Dynamic.IDynamicProperty if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out = = return IDynamicField internal static internal static lock decl_stmt Spring.Reflection.Dynamic.IDynamicField if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out = = return IDynamicIndexer internal static internal static lock decl_stmt Spring.Reflection.Dynamic.IDynamicIndexer if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out = = return IDynamicMethod internal static internal static lock decl_stmt Spring.Reflection.Dynamic.IDynamicMethod if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out = = return IDynamicConstructor internal static internal static lock decl_stmt Spring.Reflection.Dynamic.IDynamicConstructor if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out = = return public static public static decl System decl Type decl Reflection bool public static public static decl_stmt bool = decl_stmt System.Type = new typeof object decl_stmt System.Reflection.Emit.DynamicMethod = + typeof object decl_stmt System.Reflection.Emit.ILGenerator = call decl System.GetILGenerator() call decl System.GetILGenerator() call decl System.GetILGenerator() call decl System.GetILGenerator() call decl System.GetILGenerator() return call decl System.CreateDelegate() call decl System.CreateDelegate() call decl System.CreateDelegate() call decl System.CreateDelegate() call decl System.CreateDelegate() typeof decl System decl Reflection bool public static public static decl_stmt bool = decl_stmt System.Reflection.Emit.DynamicMethod = + new typeof object typeof object decl_stmt System.Reflection.Emit.ILGenerator = call decl System.GetILGenerator() call decl System.GetILGenerator() call decl System.GetILGenerator() call decl System.GetILGenerator() call decl System.GetILGenerator() return call decl System.CreateDelegate() call decl System.CreateDelegate() call decl System.CreateDelegate() call decl System.CreateDelegate() call decl System.CreateDelegate() typeof NetDynamicMethod ILGenerator MethodInfo bool public static public static decl_stmt System.Reflection.MethodInfo = decl_stmt bool = decl_stmt NetDynamicMethod = + typeof object new typeof object typeof decl_stmt System.Reflection.Emit.ILGenerator = call NetDynamicMethod.GetILGenerator() call NetDynamicMethod.GetILGenerator() call NetDynamicMethod.GetILGenerator() call NetDynamicMethod.GetILGenerator() call NetDynamicMethod.GetILGenerator() return call NetDynamicMethod.CreateDelegate() call NetDynamicMethod.CreateDelegate() call NetDynamicMethod.CreateDelegate() call NetDynamicMethod.CreateDelegate() call NetDynamicMethod.CreateDelegate() typeof decl Type MethodInfo NetDynamicMethod ILGenerator bool public static public static decl_stmt System.Reflection.MethodInfo = decl_stmt bool = decl_stmt System.Type = new typeof object typeof object typeof decl_stmt NetDynamicMethod = + decl_stmt System.Reflection.Emit.ILGenerator = call NetDynamicMethod.GetILGenerator() call NetDynamicMethod.GetILGenerator() call NetDynamicMethod.GetILGenerator() call NetDynamicMethod.GetILGenerator() call NetDynamicMethod.GetILGenerator() return call NetDynamicMethod.CreateDelegate() call NetDynamicMethod.CreateDelegate() call NetDynamicMethod.CreateDelegate() call NetDynamicMethod.CreateDelegate() call NetDynamicMethod.CreateDelegate() typeof NetDynamicMethod ILGenerator bool public static public static decl_stmt bool = decl_stmt NetDynamicMethod = typeof object new typeof object typeof decl_stmt System.Reflection.Emit.ILGenerator = call NetDynamicMethod.GetILGenerator() call NetDynamicMethod.GetILGenerator() call NetDynamicMethod.GetILGenerator() call NetDynamicMethod.GetILGenerator() call NetDynamicMethod.GetILGenerator() return call NetDynamicMethod.CreateDelegate() call NetDynamicMethod.CreateDelegate() call NetDynamicMethod.CreateDelegate() call NetDynamicMethod.CreateDelegate() call NetDynamicMethod.CreateDelegate() typeof decl System decl Reflection decl Emit decl DynamicMethod bool public static public static decl_stmt bool = decl_stmt System.Reflection.Emit.DynamicMethod decl_stmt System.Type = new typeof = typeof object decl_stmt System.Reflection.Emit.ILGenerator = call decl System.GetILGenerator() call decl System.GetILGenerator() call decl System.GetILGenerator() call decl System.GetILGenerator() call decl System.GetILGenerator() decl_stmt ConstructorDelegate = call decl System.CreateDelegate() call decl System.CreateDelegate() call decl System.CreateDelegate() call decl System.CreateDelegate() call decl System.CreateDelegate() typeof return NetDynamicMethod private static private static decl_stmt NetDynamicMethod = = + + + try new = catch = return NetDynamicMethod private static private static decl_stmt NetDynamicMethod = new return object private static private static if decl_stmt object = else if else if internal static internal static if ! && ! && ! && ! if ! if else if else else MethodInfo internal static internal static if decl_stmt System.Reflection.MethodInfo = else decl ParameterInfo IDictionary MethodInfo int internal static internal static decl_stmt System.Reflection.MethodInfo = if && ! && ! decl_stmt int const const = decl_stmt System.Collections.Generic.IDictionary = new decl_stmt System.Reflection.ParameterInfo = for = < ++ if ! for = < ++ if else for = < ++ else decl ParameterInfo IDictionary int internal static internal static decl_stmt int = : decl_stmt System.Reflection.ParameterInfo = decl_stmt System.Collections.Generic.IDictionary = new for = < ++ if ! for = < ++ for = < ++ decl ParameterInfo IDictionary int internal static internal static decl_stmt int = : decl_stmt System.Reflection.ParameterInfo = decl_stmt System.Collections.Generic.IDictionary = new for = < ++ for = < ++ for = < ++ Type LocalBuilder private static private static if ! return decl_stmt System.Type = decl_stmt System.Reflection.Emit.LocalBuilder = if ! = private static private static return || Type private static private static if ! return decl_stmt System.Type = if private static private static if else private static private static if else private static private static private static private static if == typeof else if Type public static public static if == if return throw new decl_stmt System.Type = if = if == return if ! throw new try return catch throw new LocalBuilder private static private static : if decl_stmt System.Reflection.Emit.LocalBuilder = else private static private static : private static private static if is string return if is bool if bool else return if is return if is byte byte else if is else if is else if is else if is else if is else if is else if is else if is private static private static