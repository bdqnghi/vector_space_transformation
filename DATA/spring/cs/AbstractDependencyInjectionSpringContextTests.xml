Spring.Testing.NUnit System using System.Collections.Generic using System.Reflection using NUnit.Framework using Spring.Context using Spring.Objects.Factory using Spring.Objects.Factory.Config using Spring.Objects.Factory.Support using class Spring.Testing.NUnit.AbstractDependencyInjectionSpringContextTests super super AbstractSpringContextTests IConfigurableApplicationContext AutoWiringMode int bool decl IList bool return = return = return = return public public public virtual public virtual = try catch throw IConfigurableListableObjectFactory protected virtual protected virtual if if == else if != decl_stmt Spring.Objects.Factory.Config.IConfigurableListableObjectFactory = typeof call IConfigurableListableObjectFactory.AutowireObjectProperties() call IConfigurableListableObjectFactory.AutowireObjectProperties() call IConfigurableListableObjectFactory.AutowireObjectProperties() call IConfigurableListableObjectFactory.AutowireObjectProperties() call IConfigurableListableObjectFactory.AutowireObjectProperties() return protected override protected override ++ return decl FieldInfo Type decl List object FieldInfo protected virtual protected virtual decl_stmt System.Collections.Generic.List < = new < decl_stmt System.Type = do decl_stmt System.Reflection.FieldInfo = call System.Type.GetFields() call System.Type.GetFields() call System.Type.GetFields() call System.Type.GetFields() call System.Type.GetFields() | | if + + + for = < ++ decl_stmt System.Reflection.FieldInfo = if + if decl_stmt object = call FieldInfo.GetValue() call FieldInfo.GetValue() call FieldInfo.GetValue() call FieldInfo.GetValue() call FieldInfo.GetValue() if == call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() if + + else if + + = != typeof = private static private static return Object string FieldInfo protected virtual protected virtual for = < ++ decl_stmt string = decl_stmt System.Object = try decl_stmt System.Reflection.FieldInfo = | if != = call System.Reflection.FieldInfo.SetValue(Object,Object) call System.Reflection.FieldInfo.SetValue(Object,Object) call System.Reflection.FieldInfo.SetValue(Object,Object) call System.Reflection.FieldInfo.SetValue(Object,Object) call System.Reflection.FieldInfo.SetValue(Object,Object) if + else if + + catch if + + protected virtual protected virtual protected virtual protected virtual public public try catch throw protected virtual protected virtual