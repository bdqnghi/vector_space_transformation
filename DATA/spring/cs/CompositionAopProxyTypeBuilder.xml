Spring.Aop.Framework.DynamicProxy System using System.Collections using System.Reflection using System.Reflection.Emit using System.Runtime.Serialization using Spring.Util using class Spring.Aop.Framework.DynamicProxy.CompositionAopProxyTypeBuilder super super AbstractAopProxyTypeBuilder string IAdvised Type object IDictionary FieldInfo IDictionary TypeBuilder public override public override decl_stmt System.Collections.Generic.IDictionary = new decl_stmt TypeBuilder = if call TypeBuilder.SetCustomAttribute() call TypeBuilder.SetCustomAttribute() call TypeBuilder.SetCustomAttribute() call TypeBuilder.SetCustomAttribute() call TypeBuilder.SetCustomAttribute() typeof decl_stmt System.Collections.Generic.IDictionary = foreach in decl_stmt object = if == new else if is new call Spring.Aop.Framework.IAdvised.IndexOf(IIntroductionAdvisor) call Spring.Aop.Framework.IAdvised.IndexOf(IIntroductionAdvisor) call Spring.Aop.Framework.IAdvised.IndexOf(IIntroductionAdvisor) call Spring.Aop.Framework.IAdvised.IndexOf(IIntroductionAdvisor) call Spring.Aop.Framework.IAdvised.IndexOf(IIntroductionAdvisor) decl_stmt System.Type = call TypeBuilder.CreateType() call TypeBuilder.CreateType() call TypeBuilder.CreateType() call TypeBuilder.CreateType() call TypeBuilder.CreateType() foreach in decl_stmt System.Reflection.FieldInfo = call System.Type.GetField(String) call System.Type.GetField(String) call System.Type.GetField(String) call System.Type.GetField(String) call System.Type.GetField(String) string | call System.Reflection.FieldInfo.SetValue(Object,Object) call System.Reflection.FieldInfo.SetValue(Object,Object) call System.Reflection.FieldInfo.SetValue(Object,Object) call System.Reflection.FieldInfo.SetValue(Object,Object) call System.Reflection.FieldInfo.SetValue(Object,Object) return public override public override ConstructorBuilder ILGenerator private private decl_stmt System.Reflection.Emit.ConstructorBuilder = new typeof typeof decl_stmt System.Reflection.Emit.ILGenerator = call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) ConstructorBuilder ILGenerator protected override protected override decl_stmt System.Reflection.Emit.ConstructorBuilder = new typeof decl_stmt System.Reflection.Emit.ILGenerator = call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) public static public static return