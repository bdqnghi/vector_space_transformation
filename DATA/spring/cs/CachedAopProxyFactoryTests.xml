Spring.Aop.Framework.DynamicProxy System using System.Reflection using System.Collections using NUnit.Framework using Spring.Objects using Spring.Aop.Support using class attribute Spring.Aop.Framework.DynamicProxy.CachedAopProxyFactoryTests super super DefaultAopProxyFactoryTests IAopProxyFactory protected override protected override decl_stmt Spring.Aop.Framework.IAopProxyFactory = new return call IAopProxyFactory.CreateAopProxy() call IAopProxyFactory.CreateAopProxy() call IAopProxyFactory.CreateAopProxy() call IAopProxyFactory.CreateAopProxy() call IAopProxyFactory.CreateAopProxy() public public ProxyFactory public public decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new new = = new new = ProxyFactory public public decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new new = new new ProxyFactory public public decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new new = = new new = IIntroductionAdvisor ProxyFactory TimestampIntroductionInterceptor public public decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new new = new new call ProxyFactory.AddInterface() call ProxyFactory.AddInterface() call ProxyFactory.AddInterface() call ProxyFactory.AddInterface() call ProxyFactory.AddInterface() typeof = new new decl_stmt Spring.Aop.Framework.TimestampIntroductionInterceptor = new = new decl_stmt Spring.Aop.IIntroductionAdvisor = new typeof call ProxyFactory.AddIntroduction() call ProxyFactory.AddIntroduction() call ProxyFactory.AddIntroduction() call ProxyFactory.AddIntroduction() call ProxyFactory.AddIntroduction() ProxyFactory public public decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new new = = new new = ProxyFactory public public decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new new = new new private private public public throw new public public