Spring.Objects.Factory.Config System using System.Collections using System.Collections.Specialized using System.IO using NUnit.Framework using Rhino.Mocks using Spring.Collections using Spring.Context using Spring.Context.Support using Spring.Core.IO using Spring.Objects.Factory.Support using Spring.Objects.Factory.Xml using class attribute Spring.Objects.Factory.Config.PropertyPlaceholderConfigurerTests MockRepository string string public public = new PropertyPlaceholderConfigurer typeof public typeof public decl_stmt Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer = new = new < = new call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() typeof PropertyPlaceholderConfigurer IResource typeof public typeof public decl_stmt Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer = new decl_stmt Spring.Core.IO.IResource = < new call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() = new = new call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() typeof PropertyPlaceholderConfigurer IResource typeof public typeof public decl_stmt Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer = new = decl_stmt Spring.Core.IO.IResource = < call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() = new = new call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() typeof PropertyPlaceholderConfigurer IConfigurableListableObjectFactory IResource public public decl_stmt Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer = new = decl_stmt Spring.Core.IO.IResource = < = = new decl_stmt Spring.Objects.Factory.Config.IConfigurableListableObjectFactory = call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() typeof call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() new call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() StaticApplicationContext MutablePropertyValues typeof public typeof public decl_stmt Spring.Context.Support.StaticApplicationContext = new decl_stmt Spring.Objects.MutablePropertyValues = new call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) new call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof = new call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof = new call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof = new call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() MutablePropertyValues PropertyPlaceholderConfigurer NameValueCollection IConfigurableListableObjectFactory string string string string RootObjectDefinition public public decl_stmt string const const = decl_stmt string const const = decl_stmt Spring.Objects.MutablePropertyValues = new decl_stmt string const const = call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = new typeof decl_stmt Spring.Objects.Factory.Config.IConfigurableListableObjectFactory = < call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() new call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call IConfigurableListableObjectFactory.AddEmbeddedValueResolver() call IConfigurableListableObjectFactory.AddEmbeddedValueResolver() call IConfigurableListableObjectFactory.AddEmbeddedValueResolver() call IConfigurableListableObjectFactory.AddEmbeddedValueResolver() call IConfigurableListableObjectFactory.AddEmbeddedValueResolver() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() decl_stmt Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer = new decl_stmt System.Collections.Specialized.NameValueCollection = new decl_stmt string const const = call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) = call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call RootObjectDefinition.PropertyValues() call RootObjectDefinition.PropertyValues() call RootObjectDefinition.PropertyValues() call RootObjectDefinition.PropertyValues() call RootObjectDefinition.PropertyValues() call RootObjectDefinition.PropertyValues() call RootObjectDefinition.PropertyValues() call RootObjectDefinition.PropertyValues() call RootObjectDefinition.PropertyValues() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() MutablePropertyValues PropertyPlaceholderConfigurer NameValueCollection IConfigurableListableObjectFactory string string string string RootObjectDefinition public public decl_stmt string const const = decl_stmt string const const = decl_stmt Spring.Objects.MutablePropertyValues = new decl_stmt string const const = call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = new typeof decl_stmt Spring.Objects.Factory.Config.IConfigurableListableObjectFactory = < call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() new call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call IConfigurableListableObjectFactory.AddEmbeddedValueResolver() call IConfigurableListableObjectFactory.AddEmbeddedValueResolver() call IConfigurableListableObjectFactory.AddEmbeddedValueResolver() call IConfigurableListableObjectFactory.AddEmbeddedValueResolver() call IConfigurableListableObjectFactory.AddEmbeddedValueResolver() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() decl_stmt Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer = new = decl_stmt System.Collections.Specialized.NameValueCollection = new decl_stmt string const const = call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) = call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call RootObjectDefinition.PropertyValues() call RootObjectDefinition.PropertyValues() call RootObjectDefinition.PropertyValues() call RootObjectDefinition.PropertyValues() call RootObjectDefinition.PropertyValues() call RootObjectDefinition.PropertyValues() call RootObjectDefinition.PropertyValues() call RootObjectDefinition.PropertyValues() call RootObjectDefinition.PropertyValues() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() TestObject StaticApplicationContext MutablePropertyValues public public decl_stmt Spring.Context.Support.StaticApplicationContext = new decl_stmt Spring.Objects.MutablePropertyValues = new call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof = new call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() decl_stmt Spring.Data.NHibernate.TestObject = TestObject StaticApplicationContext NameValueCollection MutablePropertyValues public public decl_stmt Spring.Context.Support.StaticApplicationContext = new decl_stmt Spring.Objects.MutablePropertyValues = new call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof = new decl_stmt System.Collections.Specialized.NameValueCollection = new call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() decl_stmt Spring.Data.NHibernate.TestObject = TestObject StaticApplicationContext NameValueCollection MutablePropertyValues public public decl_stmt Spring.Context.Support.StaticApplicationContext = new decl_stmt Spring.Objects.MutablePropertyValues = new call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof = new decl_stmt System.Collections.Specialized.NameValueCollection = new call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() decl_stmt Spring.Data.NHibernate.TestObject = StaticApplicationContext MutablePropertyValues typeof = public typeof = public decl_stmt Spring.Context.Support.StaticApplicationContext = new decl_stmt Spring.Objects.MutablePropertyValues = new call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof = new call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() StaticApplicationContext MutablePropertyValues public public decl_stmt Spring.Context.Support.StaticApplicationContext = new decl_stmt Spring.Objects.MutablePropertyValues = new call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof try call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() catch != - StaticApplicationContext TestObject NameValueCollection MutablePropertyValues public public decl_stmt Spring.Context.Support.StaticApplicationContext = new decl_stmt Spring.Objects.MutablePropertyValues = new call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) new call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof = new decl_stmt System.Collections.Specialized.NameValueCollection = new call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() decl_stmt Spring.Data.NHibernate.TestObject = call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() RootObjectDefinition StaticApplicationContext TestObject TestObject ConstructorArgumentValues IEnumerator IDictionary TestObject MutablePropertyValues TestObject MutablePropertyValues ArrayList TestObject RootObjectDefinition ISet public public decl_stmt Spring.Context.Support.StaticApplicationContext = new decl_stmt Spring.Objects.MutablePropertyValues = new call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = new new call StaticApplicationContext.RegisterObjectDefinition() call StaticApplicationContext.RegisterObjectDefinition() call StaticApplicationContext.RegisterObjectDefinition() call StaticApplicationContext.RegisterObjectDefinition() call StaticApplicationContext.RegisterObjectDefinition() = new call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) new call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof decl_stmt Spring.Objects.Factory.Config.ConstructorArgumentValues = new call Spring.Objects.Factory.Config.ConstructorArgumentValues.AddIndexedArgumentValue(int,object) call Spring.Objects.Factory.Config.ConstructorArgumentValues.AddIndexedArgumentValue(int,object) call Spring.Objects.Factory.Config.ConstructorArgumentValues.AddIndexedArgumentValue(int,object) call Spring.Objects.Factory.Config.ConstructorArgumentValues.AddIndexedArgumentValue(int,object) call Spring.Objects.Factory.Config.ConstructorArgumentValues.AddIndexedArgumentValue(int,object) call Spring.Objects.Factory.Config.ConstructorArgumentValues.AddGenericArgumentValue(object,string) call Spring.Objects.Factory.Config.ConstructorArgumentValues.AddGenericArgumentValue(object,string) call Spring.Objects.Factory.Config.ConstructorArgumentValues.AddGenericArgumentValue(object,string) call Spring.Objects.Factory.Config.ConstructorArgumentValues.AddGenericArgumentValue(object,string) call Spring.Objects.Factory.Config.ConstructorArgumentValues.AddGenericArgumentValue(object,string) = new decl_stmt System.Collections.ArrayList = new call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) new call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) decl_stmt Spring.Collections.ISet = new call Spring.Collections.ISet.Add(object) call Spring.Collections.ISet.Add(object) call Spring.Collections.ISet.Add(object) call Spring.Collections.ISet.Add(object) call Spring.Collections.ISet.Add(object) call Spring.Collections.ISet.Add(object) call Spring.Collections.ISet.Add(object) call Spring.Collections.ISet.Add(object) call Spring.Collections.ISet.Add(object) call Spring.Collections.ISet.Add(object) new call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) decl_stmt System.Collections.Generic.IDictionary = new = new = decl_stmt Spring.Objects.MutablePropertyValues = new = new typeof = new call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = new typeof call StaticApplicationContext.DefaultListableObjectFactory() call StaticApplicationContext.DefaultListableObjectFactory() call StaticApplicationContext.DefaultListableObjectFactory() call StaticApplicationContext.DefaultListableObjectFactory() call StaticApplicationContext.DefaultListableObjectFactory() call StaticApplicationContext.DefaultListableObjectFactory() call StaticApplicationContext.DefaultListableObjectFactory() call StaticApplicationContext.DefaultListableObjectFactory() call StaticApplicationContext.DefaultListableObjectFactory() = new call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() decl_stmt Spring.Data.NHibernate.TestObject = call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() decl_stmt Spring.Data.NHibernate.TestObject = call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() decl_stmt Spring.Data.NHibernate.TestObject = call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() decl_stmt System.Collections.Generic.IEnumerator = call TestObject.Friends() call TestObject.Friends() call TestObject.Friends() call TestObject.Friends() call TestObject.Friends() call TestObject.Friends() call TestObject.Friends() call TestObject.Friends() call TestObject.Friends() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call TestObject.SomeSet() call TestObject.SomeSet() call TestObject.SomeSet() call TestObject.SomeSet() call TestObject.SomeSet() call TestObject.SomeSet() call TestObject.SomeSet() call TestObject.SomeSet() call TestObject.SomeSet() call TestObject.SomeSet() call TestObject.SomeSet() call TestObject.SomeSet() call TestObject.SomeSet() call TestObject.SomeSet() call TestObject.SomeSet() call TestObject.SomeSet() call TestObject.SomeSet() call TestObject.SomeSet() decl_stmt Spring.Data.NHibernate.TestObject = decl_stmt Spring.Data.NHibernate.TestObject = PropertyPlaceholderConfigurer ConstructorArgumentValues string RootObjectDefinition NameValueCollection IConfigurableListableObjectFactory public public decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = new = typeof decl_stmt Spring.Objects.Factory.Config.ConstructorArgumentValues = new call Spring.Objects.Factory.Config.ConstructorArgumentValues.AddNamedArgumentValue(string,object) call Spring.Objects.Factory.Config.ConstructorArgumentValues.AddNamedArgumentValue(string,object) call Spring.Objects.Factory.Config.ConstructorArgumentValues.AddNamedArgumentValue(string,object) call Spring.Objects.Factory.Config.ConstructorArgumentValues.AddNamedArgumentValue(string,object) call Spring.Objects.Factory.Config.ConstructorArgumentValues.AddNamedArgumentValue(string,object) = decl_stmt System.Collections.Specialized.NameValueCollection = new decl_stmt string const const = call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) decl_stmt Spring.Objects.Factory.Config.IConfigurableListableObjectFactory = < call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() new call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() decl_stmt Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer = new = try call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() catch call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() PropertyPlaceholderConfigurer ConstructorArgumentValues string RootObjectDefinition NameValueCollection IConfigurableListableObjectFactory public public decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = new = typeof decl_stmt Spring.Objects.Factory.Config.ConstructorArgumentValues = new call Spring.Objects.Factory.Config.ConstructorArgumentValues.AddNamedArgumentValue(string,object) call Spring.Objects.Factory.Config.ConstructorArgumentValues.AddNamedArgumentValue(string,object) call Spring.Objects.Factory.Config.ConstructorArgumentValues.AddNamedArgumentValue(string,object) call Spring.Objects.Factory.Config.ConstructorArgumentValues.AddNamedArgumentValue(string,object) call Spring.Objects.Factory.Config.ConstructorArgumentValues.AddNamedArgumentValue(string,object) = decl_stmt System.Collections.Specialized.NameValueCollection = new decl_stmt string const const = call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) decl_stmt Spring.Objects.Factory.Config.IConfigurableListableObjectFactory = < call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() new call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call IConfigurableListableObjectFactory.AddEmbeddedValueResolver() call IConfigurableListableObjectFactory.AddEmbeddedValueResolver() call IConfigurableListableObjectFactory.AddEmbeddedValueResolver() call IConfigurableListableObjectFactory.AddEmbeddedValueResolver() call IConfigurableListableObjectFactory.AddEmbeddedValueResolver() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() decl_stmt Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer = new = call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call RootObjectDefinition.ConstructorArgumentValues() call RootObjectDefinition.ConstructorArgumentValues() call RootObjectDefinition.ConstructorArgumentValues() call RootObjectDefinition.ConstructorArgumentValues() call RootObjectDefinition.ConstructorArgumentValues() call RootObjectDefinition.ConstructorArgumentValues() call RootObjectDefinition.ConstructorArgumentValues() call RootObjectDefinition.ConstructorArgumentValues() call RootObjectDefinition.ConstructorArgumentValues() PropertyPlaceholderConfigurer ConstructorArgumentValues string RootObjectDefinition NameValueCollection IConfigurableListableObjectFactory public public decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = new = typeof decl_stmt Spring.Objects.Factory.Config.ConstructorArgumentValues = new call Spring.Objects.Factory.Config.ConstructorArgumentValues.AddNamedArgumentValue(string,object) call Spring.Objects.Factory.Config.ConstructorArgumentValues.AddNamedArgumentValue(string,object) call Spring.Objects.Factory.Config.ConstructorArgumentValues.AddNamedArgumentValue(string,object) call Spring.Objects.Factory.Config.ConstructorArgumentValues.AddNamedArgumentValue(string,object) call Spring.Objects.Factory.Config.ConstructorArgumentValues.AddNamedArgumentValue(string,object) = decl_stmt System.Collections.Specialized.NameValueCollection = new decl_stmt string const const = call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) decl_stmt Spring.Objects.Factory.Config.IConfigurableListableObjectFactory = < call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() new call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call IConfigurableListableObjectFactory.AddEmbeddedValueResolver() call IConfigurableListableObjectFactory.AddEmbeddedValueResolver() call IConfigurableListableObjectFactory.AddEmbeddedValueResolver() call IConfigurableListableObjectFactory.AddEmbeddedValueResolver() call IConfigurableListableObjectFactory.AddEmbeddedValueResolver() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() decl_stmt Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer = new = = = call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call RootObjectDefinition.ConstructorArgumentValues() call RootObjectDefinition.ConstructorArgumentValues() call RootObjectDefinition.ConstructorArgumentValues() call RootObjectDefinition.ConstructorArgumentValues() call RootObjectDefinition.ConstructorArgumentValues() call RootObjectDefinition.ConstructorArgumentValues() call RootObjectDefinition.ConstructorArgumentValues() call RootObjectDefinition.ConstructorArgumentValues() call RootObjectDefinition.ConstructorArgumentValues() TestObjectDAO IApplicationContext public public decl_stmt Spring.Context.IApplicationContext = new decl_stmt Spring.Objects.TestObjectDAO = TestObjectDAO IApplicationContext public public decl_stmt Spring.Context.IApplicationContext = new decl_stmt Spring.Objects.TestObjectDAO = TestObjectDAO IApplicationContext public public decl_stmt Spring.Context.IApplicationContext = new decl_stmt Spring.Objects.TestObjectDAO = string XmlObjectFactory IObjectFactoryPostProcessor TestObjectDAO = public = public decl_stmt string = decl_stmt Spring.Objects.Factory.Xml.XmlObjectFactory = new new decl_stmt Spring.Objects.Factory.Config.IObjectFactoryPostProcessor = call IObjectFactoryPostProcessor.PostProcessObjectFactory() call IObjectFactoryPostProcessor.PostProcessObjectFactory() call IObjectFactoryPostProcessor.PostProcessObjectFactory() call IObjectFactoryPostProcessor.PostProcessObjectFactory() call IObjectFactoryPostProcessor.PostProcessObjectFactory() decl_stmt Spring.Objects.TestObjectDAO = + + = new new = call IObjectFactoryPostProcessor.PostProcessObjectFactory() call IObjectFactoryPostProcessor.PostProcessObjectFactory() call IObjectFactoryPostProcessor.PostProcessObjectFactory() call IObjectFactoryPostProcessor.PostProcessObjectFactory() call IObjectFactoryPostProcessor.PostProcessObjectFactory() = MutablePropertyValues TestObject PropertyPlaceholderConfigurer IConfigurableListableObjectFactory string string RootObjectDefinition public public decl_stmt string const const = decl_stmt string const const = decl_stmt Spring.Data.NHibernate.TestObject = new decl_stmt Spring.Objects.MutablePropertyValues = new call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = new typeof decl_stmt Spring.Objects.Factory.Config.IConfigurableListableObjectFactory = < call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() call IConfigurableListableObjectFactory.GetObjectDefinitionNames() new call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call IConfigurableListableObjectFactory.AddEmbeddedValueResolver() call IConfigurableListableObjectFactory.AddEmbeddedValueResolver() call IConfigurableListableObjectFactory.AddEmbeddedValueResolver() call IConfigurableListableObjectFactory.AddEmbeddedValueResolver() call IConfigurableListableObjectFactory.AddEmbeddedValueResolver() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() decl_stmt Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer = new = call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() PropertyPlaceholderConfigurer TestObject XmlObjectFactory IResource public public decl_stmt Spring.Core.IO.IResource = new decl_stmt Spring.Objects.Factory.Xml.XmlObjectFactory = new decl_stmt Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer = call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() decl_stmt Spring.Data.NHibernate.TestObject = call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() PropertyPlaceholderConfigurer XmlObjectFactory IResource public public decl_stmt Spring.Core.IO.IResource = new decl_stmt Spring.Objects.Factory.Xml.XmlObjectFactory = new decl_stmt Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer = call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call PropertyPlaceholderConfigurer.PostProcessObjectFactory() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() object IApplicationContext TestObject public public decl_stmt Spring.Context.IApplicationContext = new decl_stmt object = is decl_stmt Spring.Data.NHibernate.TestObject = call TestObject.PeriodicTable() call TestObject.PeriodicTable() call TestObject.PeriodicTable() call TestObject.PeriodicTable() call TestObject.PeriodicTable() call TestObject.PeriodicTable() call TestObject.PeriodicTable() call TestObject.PeriodicTable() call TestObject.PeriodicTable() var var public public decl_stmt var = new new decl_stmt var = <