Spring.Data.NHibernate System using System.Collections using System.Reflection using AopAlliance.Intercept using Common.Logging using NHibernate using NHibernate.Impl using NHibernate.Type using Spring.Core.TypeResolution using Spring.Dao using Spring.Data.Support using Spring.Objects.Factory using using IInterceptor===NHibernate.IInterceptor using ICriteria===NHibernate.ICriteria class Spring.Data.NHibernate.HibernateAccessor super super IInitializingObject super IObjectFactoryAware Type ILog if return else if ! return else return FlushMode protected protected if == if decl_stmt FlushMode = if != = return new else = else if == if decl_stmt FlushMode = if != = return new else else if == if decl_stmt FlushMode = if == = return new else = return new protected protected if == || ! && != call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() public virtual public virtual if is return return protected virtual protected virtual return protected virtual protected virtual return AbstractQueryImpl public virtual public virtual if if != if > decl_stmt AbstractQueryImpl = as if != call AbstractQueryImpl.SetFetchSize() call AbstractQueryImpl.SetFetchSize() call AbstractQueryImpl.SetFetchSize() call AbstractQueryImpl.SetFetchSize() call AbstractQueryImpl.SetFetchSize() else call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() if > public virtual public virtual if is if != else else if is if != else else if != else decl object Type public public if if != if > decl_stmt object = new try decl_stmt System.Type = if != call System.Type.InvokeMember(String,BindingFlags,Binder,Object,Object) call System.Type.InvokeMember(String,BindingFlags,Binder,Object,Object) call System.Type.InvokeMember(String,BindingFlags,Binder,Object,Object) call System.Type.InvokeMember(String,BindingFlags,Binder,Object,Object) call System.Type.InvokeMember(String,BindingFlags,Binder,Object,Object) | | | catch call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() if > private private try = catch call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() public virtual public virtual if == throw new return = return =