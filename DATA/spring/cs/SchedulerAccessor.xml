Spring.Scheduling.Quartz System using System.Collections using System.Collections.Generic using Common.Logging using Quartz using Quartz.Simpl using Quartz.Xml using Spring.Collections using Spring.Context using Spring.Core.IO using Spring.Transaction using Spring.Transaction.Support using class Spring.Scheduling.Quartz.SchedulerAccessor super super IResourceLoaderAware decl IJobListener decl IJobListener IList decl ISchedulerListener decl string IDictionary decl ITriggerListener decl ITriggerListener IResourceLoader bool ILog IList IPlatformTransactionManager = = = new = new < = = new = = = = = = = protected protected return return XMLSchedulingDataProcessor ICalendar string ITransactionStatus protected virtual protected virtual decl_stmt Spring.Transaction.ITransactionStatus = if != = call IPlatformTransactionManager.GetTransaction() call IPlatformTransactionManager.GetTransaction() call IPlatformTransactionManager.GetTransaction() call IPlatformTransactionManager.GetTransaction() call IPlatformTransactionManager.GetTransaction() new try if != decl_stmt XMLSchedulingDataProcessor = new new = foreach in call XMLSchedulingDataProcessor.ProcessFileAndScheduleJobs() call XMLSchedulingDataProcessor.ProcessFileAndScheduleJobs() call XMLSchedulingDataProcessor.ProcessFileAndScheduleJobs() call XMLSchedulingDataProcessor.ProcessFileAndScheduleJobs() call XMLSchedulingDataProcessor.ProcessFileAndScheduleJobs() if != foreach in else = new if != foreach in decl_stmt string = string decl_stmt ICalendar = if != foreach in catch if != try call Spring.Transaction.IPlatformTransactionManager.Rollback(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Rollback(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Rollback(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Rollback(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Rollback(ITransactionStatus) catch call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() throw if is throw throw new + if != call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) private private if || == return else return bool IJobDetail private private decl_stmt bool = != if ! || if is decl_stmt IJobDetail = if ! call System.Collections.Generic.IList.Contains(Object) call System.Collections.Generic.IList.Contains(Object) call System.Collections.Generic.IList.Contains(Object) call System.Collections.Generic.IList.Contains(Object) call System.Collections.Generic.IList.Contains(Object) && call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) if ! try catch if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + + if else return else return protected virtual protected virtual if != for = < ++ if != foreach in if != && > throw new + if != foreach in if != && > throw new +