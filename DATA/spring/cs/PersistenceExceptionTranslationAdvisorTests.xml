Spring.Dao.Attributes System using System.Runtime.Serialization using NUnit.Framework using Spring.Aop.Framework using Spring.Dao.Support using Spring.Stereotype using class attribute Spring.Dao.Attributes.PersistenceExceptionTranslationAdvisorTests IndexOutOfRangeException PersistenceException public public RepositoryInterfaceImpl IRepositoryInterface public public decl_stmt RepositoryInterfaceImpl = new decl_stmt IRepositoryInterface = call IRepositoryInterface.Throws() call IRepositoryInterface.Throws() call IRepositoryInterface.Throws() call IRepositoryInterface.Throws() call IRepositoryInterface.Throws() = try call IRepositoryInterface.Throws() call IRepositoryInterface.Throws() call IRepositoryInterface.Throws() call IRepositoryInterface.Throws() call IRepositoryInterface.Throws() catch RepositoryInterfaceImpl IRepositoryInterface public public decl_stmt RepositoryInterfaceImpl = new decl_stmt IRepositoryInterface = call IRepositoryInterface.Throws() call IRepositoryInterface.Throws() call IRepositoryInterface.Throws() call IRepositoryInterface.Throws() call IRepositoryInterface.Throws() = try call IRepositoryInterface.Throws() call IRepositoryInterface.Throws() call IRepositoryInterface.Throws() call IRepositoryInterface.Throws() call IRepositoryInterface.Throws() catch public public new public public new public public new public public new IRepositoryInterface private private decl_stmt IRepositoryInterface = = try call IRepositoryInterface.Throws() call IRepositoryInterface.Throws() call IRepositoryInterface.Throws() call IRepositoryInterface.Throws() call IRepositoryInterface.Throws() catch catch MapPersistenceExceptionTranslator ProxyFactory private private decl_stmt MapPersistenceExceptionTranslator = new call MapPersistenceExceptionTranslator.AddTranslation() call MapPersistenceExceptionTranslator.AddTranslation() call MapPersistenceExceptionTranslator.AddTranslation() call MapPersistenceExceptionTranslator.AddTranslation() call MapPersistenceExceptionTranslator.AddTranslation() new decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new call ProxyFactory.AddInterface() call ProxyFactory.AddInterface() call ProxyFactory.AddInterface() call ProxyFactory.AddInterface() call ProxyFactory.AddInterface() typeof return call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) protected virtual protected virtual new typeof