Spring.Aspects System using System.Collections.Generic using System.Text.RegularExpressions using System.Threading using AopAlliance.Intercept using Common.Logging using Spring.Core.TypeConversion using Spring.Expressions using class attribute Spring.Aspects.RetryAdvice super super AbstractExceptionHandlerAdvice string ILog string string SleepHandler TimeSpanConverter string string RetryExceptionHandler return = return = return = int decl IDictionary object public override public override decl_stmt System.Collections.Generic.IDictionary < = new < call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() decl_stmt int = decl_stmt object = do try = break catch = if call RetryExceptionHandler.CanHandleException() call RetryExceptionHandler.CanHandleException() call RetryExceptionHandler.CanHandleException() call RetryExceptionHandler.CanHandleException() call RetryExceptionHandler.CanHandleException() ++ if == throw else if call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() + = else throw <= call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + + return TimeSpan decimal IExpression object decimal private static private static < if else try decl_stmt Spring.Expressions.IExpression = decl_stmt object = call Spring.Expressions.IExpression.GetValue(object) call Spring.Expressions.IExpression.GetValue(object) call Spring.Expressions.IExpression.GetValue(object) call Spring.Expressions.IExpression.GetValue(object) call Spring.Expressions.IExpression.GetValue(object) decl_stmt decimal = call object.ToString() call object.ToString() call object.ToString() call object.ToString() call object.ToString() decl_stmt decimal = * decl_stmt TimeSpan = catch call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() + + new catch call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() + + new RetryExceptionHandler public override public override if == throw new decl_stmt Spring.Aspects.RetryExceptionHandler = if == throw new + + = RetryExceptionHandler string Match ParsedAdviceExpression protected virtual protected virtual decl_stmt Spring.Aspects.ParsedAdviceExpression = if ! call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() + return decl_stmt Spring.Aspects.RetryExceptionHandler = new = = decl_stmt System.IO.Compression.Match = if = = try decl_stmt string = = call System.ComponentModel.TimeSpanConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,object) call System.ComponentModel.TimeSpanConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,object) call System.ComponentModel.TimeSpanConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,object) call System.ComponentModel.TimeSpanConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,object) call System.ComponentModel.TimeSpanConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,object) catch call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() + return return else = if = = = return else return RegexOptions Regex protected virtual protected virtual decl_stmt RegexOptions = | | decl_stmt System.Text.RegularExpressions.Regex = new return call System.Text.RegularExpressions.Regex.Match(String,String,RegexOptions) call System.Text.RegularExpressions.Regex.Match(String,String,RegexOptions) call System.Text.RegularExpressions.Regex.Match(String,String,RegexOptions) call System.Text.RegularExpressions.Regex.Match(String,String,RegexOptions) call System.Text.RegularExpressions.Regex.Match(String,String,RegexOptions) protected override protected override if !=