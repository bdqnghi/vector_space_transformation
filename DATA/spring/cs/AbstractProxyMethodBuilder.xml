Spring.Proxy System using System.Reflection using System.Reflection.Emit using Spring.Util using class Spring.Proxy.AbstractProxyMethodBuilder super super IProxyMethodBuilder IProxyTypeGenerator bool TypeBuilder MethodBuilder ILGenerator public virtual public virtual decl_stmt System.Reflection.Emit.MethodBuilder = decl_stmt System.Reflection.Emit.ILGenerator = call System.Reflection.Emit.MethodBuilder.GetILGenerator(int) call System.Reflection.Emit.MethodBuilder.GetILGenerator(int) call System.Reflection.Emit.MethodBuilder.GetILGenerator(int) call System.Reflection.Emit.MethodBuilder.GetILGenerator(int) call System.Reflection.Emit.MethodBuilder.GetILGenerator(int) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) if || != && != call TypeBuilder.DefineMethodOverride() call TypeBuilder.DefineMethodOverride() call TypeBuilder.DefineMethodOverride() call TypeBuilder.DefineMethodOverride() call TypeBuilder.DefineMethodOverride() return protected virtual protected virtual call Spring.Proxy.IProxyTypeGenerator.PushProxy(ILGenerator) call Spring.Proxy.IProxyTypeGenerator.PushProxy(ILGenerator) call Spring.Proxy.IProxyTypeGenerator.PushProxy(ILGenerator) call Spring.Proxy.IProxyTypeGenerator.PushProxy(ILGenerator) call Spring.Proxy.IProxyTypeGenerator.PushProxy(ILGenerator) protected virtual protected virtual call IProxyTypeGenerator.PushTarget() call IProxyTypeGenerator.PushTarget() call IProxyTypeGenerator.PushTarget() call IProxyTypeGenerator.PushTarget() call IProxyTypeGenerator.PushTarget() MethodBuilder string MethodAttributes protected virtual protected virtual decl_stmt System.Reflection.Emit.MethodBuilder decl_stmt string decl_stmt MethodAttributes if == = = | | | else = | | | if || != - = |= else = |= if != && || |= = call TypeBuilder.DefineMethod() call TypeBuilder.DefineMethod() call TypeBuilder.DefineMethod() call TypeBuilder.DefineMethod() call TypeBuilder.DefineMethod() return decl System decl GenericTypeParameterBuilder decl Type decl Type protected protected if decl_stmt System.Type = decl_stmt System.Reflection.Emit.GenericTypeParameterBuilder = for = < ++ decl_stmt System.Type = decl_stmt Generic < = new < foreach in if else call decl System.Add() call decl System.Add() call decl System.Add() call decl System.Add() call decl System.Add() call decl System.ToArray() call decl System.ToArray() call decl System.ToArray() call decl System.ToArray() call decl System.ToArray() decl ParameterInfo protected virtual protected virtual decl_stmt System.Reflection.ParameterInfo = for = < ++ + protected virtual protected virtual decl ParameterInfo protected virtual protected virtual decl_stmt System.Reflection.ParameterInfo = for = < ++ + Label protected virtual protected virtual decl_stmt Label = ConstructorInfo protected static protected static decl_stmt System.Reflection.ConstructorInfo = new typeof string