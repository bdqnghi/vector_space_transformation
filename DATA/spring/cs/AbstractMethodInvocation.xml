Spring.Aop.Framework System using System.Collections using System.Reflection using System.Text using AopAlliance.Intercept using Spring.Util using class attribute Spring.Aop.Framework.AbstractMethodInvocation super super IMethodInvocation Type object int IList object MethodInfo decl object return protected protected = return return protected protected = return return protected protected = return = return = return return = InterceptorAndDynamicMethodMatcher object IMethodInvocation public virtual public virtual if == || == return decl_stmt object = decl_stmt InterceptorAndDynamicMethodMatcher = as decl_stmt AopAlliance.Intercept.IMethodInvocation = if != if call InterceptorAndDynamicMethodMatcher.MethodMatcher() call InterceptorAndDynamicMethodMatcher.MethodMatcher() call InterceptorAndDynamicMethodMatcher.MethodMatcher() call InterceptorAndDynamicMethodMatcher.MethodMatcher() call InterceptorAndDynamicMethodMatcher.MethodMatcher() call InterceptorAndDynamicMethodMatcher.MethodMatcher() call InterceptorAndDynamicMethodMatcher.MethodMatcher() call InterceptorAndDynamicMethodMatcher.MethodMatcher() call InterceptorAndDynamicMethodMatcher.MethodMatcher() return call InterceptorAndDynamicMethodMatcher.Interceptor() call InterceptorAndDynamicMethodMatcher.Interceptor() call InterceptorAndDynamicMethodMatcher.Interceptor() call InterceptorAndDynamicMethodMatcher.Interceptor() call InterceptorAndDynamicMethodMatcher.Interceptor() call InterceptorAndDynamicMethodMatcher.Interceptor() call InterceptorAndDynamicMethodMatcher.Interceptor() call InterceptorAndDynamicMethodMatcher.Interceptor() call InterceptorAndDynamicMethodMatcher.Interceptor() else return call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() else return protected virtual protected virtual StringBuilder public override public override decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) != : call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int)