Spring.Data.Common System using System.Data using Spring.Expressions using Spring.Reflection.Dynamic using Spring.Util using class Spring.Data.Common.DbProvider super super IDbProvider IDynamicProperty IDynamicConstructor string IDynamicConstructor IDynamicConstructor IDynamicConstructor IDbMetadata IDynamicConstructor var public public decl_stmt var = call IDynamicConstructor.Invoke() call IDynamicConstructor.Invoke() call IDynamicConstructor.Invoke() call IDynamicConstructor.Invoke() call IDynamicConstructor.Invoke() as if != && != call Spring.Reflection.Dynamic.IDynamicProperty.SetValue(object,object,object) call Spring.Reflection.Dynamic.IDynamicProperty.SetValue(object,object,object) call Spring.Reflection.Dynamic.IDynamicProperty.SetValue(object,object,object) call Spring.Reflection.Dynamic.IDynamicProperty.SetValue(object,object,object) call Spring.Reflection.Dynamic.IDynamicProperty.SetValue(object,object,object) return public public return call IDynamicConstructor.Invoke() call IDynamicConstructor.Invoke() call IDynamicConstructor.Invoke() call IDynamicConstructor.Invoke() call IDynamicConstructor.Invoke() IDbConnection public public decl_stmt System.Data.IDbConnection = call IDynamicConstructor.Invoke() call IDynamicConstructor.Invoke() call IDynamicConstructor.Invoke() call IDynamicConstructor.Invoke() call IDynamicConstructor.Invoke() as if != = return public public return call IDynamicConstructor.Invoke() call IDynamicConstructor.Invoke() call IDynamicConstructor.Invoke() call IDynamicConstructor.Invoke() call IDynamicConstructor.Invoke() as public public return call IDynamicConstructor.Invoke() call IDynamicConstructor.Invoke() call IDynamicConstructor.Invoke() call IDynamicConstructor.Invoke() call IDynamicConstructor.Invoke() as public public if if return + else return else return public public if if return + else return else return return return = public public if ! return else return + public public if is return else return