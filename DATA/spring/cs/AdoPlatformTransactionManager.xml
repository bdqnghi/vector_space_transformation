Spring.Data.Core System using System.Data using Common.Logging using Spring.Data.Common using Spring.Data.Support using Spring.Objects.Factory using Spring.Transaction using Spring.Transaction.Support using class Spring.Data.Core.AdoPlatformTransactionManager super super AbstractPlatformTransactionManager super IResourceTransactionManager super IInitializingObject ILog IDbProvider return = DbProviderTransactionObject ConnectionHolder protected override protected override decl_stmt DbProviderTransactionObject = new = decl_stmt Spring.Data.Support.ConnectionHolder = call DbProviderTransactionObject.SetConnectionHolder() call DbProviderTransactionObject.SetConnectionHolder() call DbProviderTransactionObject.SetConnectionHolder() call DbProviderTransactionObject.SetConnectionHolder() call DbProviderTransactionObject.SetConnectionHolder() return DbProviderTransactionObject protected override protected override decl_stmt DbProviderTransactionObject = return != && IDbConnection IDbTransaction DbProviderTransactionObject int IDbConnection protected override protected override decl_stmt DbProviderTransactionObject = decl_stmt System.Data.IDbConnection = if == throw new try if == || decl_stmt System.Data.IDbConnection = if + + + + call System.Data.IDbConnection.Open() call System.Data.IDbConnection.Open() call System.Data.IDbConnection.Open() call System.Data.IDbConnection.Open() call System.Data.IDbConnection.Open() decl_stmt System.Data.IDbTransaction = call System.Data.IDbConnection.BeginTransaction(IsolationLevel) call System.Data.IDbConnection.BeginTransaction(IsolationLevel) call System.Data.IDbConnection.BeginTransaction(IsolationLevel) call System.Data.IDbConnection.BeginTransaction(IsolationLevel) call System.Data.IDbConnection.BeginTransaction(IsolationLevel) call DbProviderTransactionObject.SetConnectionHolder() call DbProviderTransactionObject.SetConnectionHolder() call DbProviderTransactionObject.SetConnectionHolder() call DbProviderTransactionObject.SetConnectionHolder() call DbProviderTransactionObject.SetConnectionHolder() new = = = decl_stmt int = if != = if catch throw new DbProviderTransactionObject ConnectionHolder protected override protected override decl_stmt DbProviderTransactionObject = = decl_stmt Spring.Data.Support.ConnectionHolder = return ConnectionHolder protected override protected override decl_stmt Spring.Data.Support.ConnectionHolder = IDbTransaction DbProviderTransactionObject IDbConnection protected override protected override decl_stmt DbProviderTransactionObject = decl_stmt System.Data.IDbTransaction = if decl_stmt System.Data.IDbConnection = + + + + try call System.Data.IDbTransaction.Commit() call System.Data.IDbTransaction.Commit() call System.Data.IDbTransaction.Commit() call System.Data.IDbTransaction.Commit() call System.Data.IDbTransaction.Commit() catch throw new IDbTransaction DbProviderTransactionObject IDbConnection protected override protected override decl_stmt DbProviderTransactionObject = decl_stmt System.Data.IDbConnection = decl_stmt System.Data.IDbTransaction = if + + + + try call System.Data.IDbTransaction.Rollback() call System.Data.IDbTransaction.Rollback() call System.Data.IDbTransaction.Rollback() call System.Data.IDbTransaction.Rollback() call System.Data.IDbTransaction.Rollback() catch throw new DbProviderTransactionObject IDbConnection protected override protected override decl_stmt DbProviderTransactionObject = if decl_stmt System.Data.IDbConnection = + + + + call DbProviderTransactionObject.SetRollbackOnly() call DbProviderTransactionObject.SetRollbackOnly() call DbProviderTransactionObject.SetRollbackOnly() call DbProviderTransactionObject.SetRollbackOnly() call DbProviderTransactionObject.SetRollbackOnly() DbProviderTransactionObject IDbConnection protected override protected override decl_stmt DbProviderTransactionObject = if decl_stmt System.Data.IDbConnection = if + + + + call DbProviderTransactionObject.ConnectionHolder() call DbProviderTransactionObject.ConnectionHolder() call DbProviderTransactionObject.ConnectionHolder() call DbProviderTransactionObject.ConnectionHolder() call DbProviderTransactionObject.ConnectionHolder() call DbProviderTransactionObject.ConnectionHolder() call DbProviderTransactionObject.ConnectionHolder() call DbProviderTransactionObject.ConnectionHolder() call DbProviderTransactionObject.ConnectionHolder() public public = = return return != && public public = return public public if == throw new return