Spring.Expressions System using System.Collections using System.Collections.Generic using System.Reflection using System.Runtime.Serialization using Spring.Expressions.Processors using Spring.Util using Spring.Reflection.Dynamic using class attribute Spring.Expressions.MethodNode super super NodeWithArguments decl int IDictionary BindingFlags int Type SafeMethod bool int bool IDictionary string object int decl object decl object IMethodCallProcessor ICollectionProcessor protected override protected override decl_stmt string = decl_stmt object = decl_stmt Spring.Expressions.Processors.ICollectionProcessor = decl_stmt Spring.Expressions.Processors.IMethodCallProcessor = lock if == || is = if == && != decl_stmt object out = as = if == && != decl_stmt object out = as if != if decl_stmt int = = == if ! = if != return call ICollectionProcessor.Process() call ICollectionProcessor.Process() call ICollectionProcessor.Process() call ICollectionProcessor.Process() call ICollectionProcessor.Process() else if != return call IMethodCallProcessor.Process() call IMethodCallProcessor.Process() call IMethodCallProcessor.Process() call IMethodCallProcessor.Process() call IMethodCallProcessor.Process() else if != decl_stmt object = : return call Spring.Reflection.Dynamic.SafeMethod.Invoke(object,object) call Spring.Reflection.Dynamic.SafeMethod.Invoke(object,object) call Spring.Reflection.Dynamic.SafeMethod.Invoke(object,object) call Spring.Reflection.Dynamic.SafeMethod.Invoke(object,object) call Spring.Reflection.Dynamic.SafeMethod.Invoke(object,object) else throw new int object private private decl_stmt int = for = < ++ decl_stmt object = if != += * call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() return ParameterInfo Type MethodInfo decl ParameterInfo private private decl_stmt System.Type = is as : decl_stmt System.Reflection.MethodInfo = if == = typeof if == return else decl_stmt System.Reflection.ParameterInfo = call MethodInfo.GetParameters() call MethodInfo.GetParameters() call MethodInfo.GetParameters() call MethodInfo.GetParameters() call MethodInfo.GetParameters() if > decl_stmt System.Reflection.ParameterInfo = - = call System.Reflection.ParameterInfo.GetCustomAttributes(Type,bool) call System.Reflection.ParameterInfo.GetCustomAttributes(Type,bool) call System.Reflection.ParameterInfo.GetCustomAttributes(Type,bool) call System.Reflection.ParameterInfo.GetCustomAttributes(Type,bool) call System.Reflection.ParameterInfo.GetCustomAttributes(Type,bool) typeof > if = call ParameterInfo.ParameterType() call ParameterInfo.ParameterType() call ParameterInfo.ParameterType() call ParameterInfo.ParameterType() call ParameterInfo.ParameterType() call ParameterInfo.ParameterType() call ParameterInfo.ParameterType() call ParameterInfo.ParameterType() call ParameterInfo.ParameterType() = = new = decl IList MethodInfo public static public static decl_stmt System.Reflection.MethodInfo = try = | catch decl_stmt System.Collections.Generic.IList < = if > = return decl List ParameterInfo decl MethodInfo decl ParameterInfo private static < private static < decl_stmt System.Reflection.MethodInfo = | decl_stmt System.Collections.Generic.List < = new < foreach in if == decl_stmt System.Reflection.ParameterInfo = if == call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() else if > decl_stmt System.Reflection.ParameterInfo = - if call System.Reflection.ParameterInfo.GetCustomAttributes(Type,bool) call System.Reflection.ParameterInfo.GetCustomAttributes(Type,bool) call System.Reflection.ParameterInfo.GetCustomAttributes(Type,bool) call System.Reflection.ParameterInfo.GetCustomAttributes(Type,bool) call System.Reflection.ParameterInfo.GetCustomAttributes(Type,bool) typeof > call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() return