Spring.Objects.Factory.Support System using System.Collections using System.Collections.Generic using System.Collections.Specialized using System.Globalization using System.Runtime.Remoting using Common.Logging using Spring.Core.TypeConversion using Spring.Expressions using Spring.Objects.Factory.Config using class Spring.Objects.Factory.Support.ObjectDefinitionValueResolver AbstractObjectFactory ILog object public virtual public virtual decl_stmt object = = return PropertyValue ExpressionHolder IDictionary object RuntimeObjectReference decl IDictionary PropertyValue Type object object TypedStringValue ObjectDefinitionHolder IObjectDefinition private private decl_stmt object = if = else if is = else if is decl_stmt Spring.Objects.Factory.Config.ObjectDefinitionHolder = = else if is decl_stmt Spring.Objects.Factory.Config.IObjectDefinition = = else if is decl_stmt Spring.Objects.Factory.Config.RuntimeObjectReference = = else if is decl_stmt Spring.Objects.Factory.Config.ExpressionHolder = decl_stmt object = decl_stmt System.Collections.Generic.IDictionary < = if != decl_stmt Spring.Objects.PropertyValue = call ExpressionHolder.Properties() call ExpressionHolder.Properties() call ExpressionHolder.Properties() call ExpressionHolder.Properties() call ExpressionHolder.Properties() call ExpressionHolder.Properties() call ExpressionHolder.Properties() call ExpressionHolder.Properties() call ExpressionHolder.Properties() = == : decl_stmt Spring.Objects.PropertyValue = call ExpressionHolder.Properties() call ExpressionHolder.Properties() call ExpressionHolder.Properties() call ExpressionHolder.Properties() call ExpressionHolder.Properties() call ExpressionHolder.Properties() call ExpressionHolder.Properties() call ExpressionHolder.Properties() call ExpressionHolder.Properties() decl_stmt object = == : if is < = < if is decl_stmt System.Collections.Generic.IDictionary = = new < foreach in call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() string else if != throw new if == = new < call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() = call ExpressionHolder.Expression() call ExpressionHolder.Expression() call ExpressionHolder.Expression() call ExpressionHolder.Expression() call ExpressionHolder.Expression() call ExpressionHolder.Expression() call ExpressionHolder.Expression() call ExpressionHolder.Expression() call ExpressionHolder.Expression() else if is = else if is decl_stmt Spring.Objects.Factory.Config.TypedStringValue = try decl_stmt System.Type = if != = else = catch throw new + else = return protected virtual protected virtual if return return object String object RootObjectDefinition protected virtual protected virtual decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = call Spring.Objects.Factory.Support.AbstractObjectFactory.GetMergedObjectDefinition(string,IObjectDefinition) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetMergedObjectDefinition(string,IObjectDefinition) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetMergedObjectDefinition(string,IObjectDefinition) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetMergedObjectDefinition(string,IObjectDefinition) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetMergedObjectDefinition(string,IObjectDefinition) decl_stmt System.String = if = = decl_stmt object decl_stmt object try = call AbstractObjectFactory.InstantiateObject() call AbstractObjectFactory.InstantiateObject() call AbstractObjectFactory.InstantiateObject() call AbstractObjectFactory.InstantiateObject() call AbstractObjectFactory.InstantiateObject() = call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObjectForInstance(object,string,string,RootObjectDefinition) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObjectForInstance(object,string,string,RootObjectDefinition) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObjectForInstance(object,string,string,RootObjectDefinition) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObjectForInstance(object,string,string,RootObjectDefinition) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObjectForInstance(object,string,string,RootObjectDefinition) catch throw if && is call AbstractObjectFactory.DisposableInnerObjects() call AbstractObjectFactory.DisposableInnerObjects() call AbstractObjectFactory.DisposableInnerObjects() call AbstractObjectFactory.DisposableInnerObjects() call AbstractObjectFactory.DisposableInnerObjects() call AbstractObjectFactory.DisposableInnerObjects() call AbstractObjectFactory.DisposableInnerObjects() call AbstractObjectFactory.DisposableInnerObjects() call AbstractObjectFactory.DisposableInnerObjects() return int string private private decl_stmt string = decl_stmt int = while ++ = + + return protected virtual protected virtual region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion try if if == throw new + return call AbstractObjectFactory.ParentObjectFactory() call AbstractObjectFactory.ParentObjectFactory() call AbstractObjectFactory.ParentObjectFactory() call AbstractObjectFactory.ParentObjectFactory() call AbstractObjectFactory.ParentObjectFactory() call AbstractObjectFactory.ParentObjectFactory() call AbstractObjectFactory.ParentObjectFactory() call AbstractObjectFactory.ParentObjectFactory() call AbstractObjectFactory.ParentObjectFactory() return call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(string,Type,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(string,Type,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(string,Type,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(string,Type,object) call Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(string,Type,object) catch throw