Spring.Expressions System using System.Collections using System.Collections.Generic using System.Reflection using System.Runtime.Serialization using Spring.Core using Spring.Util using Spring.Reflection.Dynamic using class attribute Spring.Expressions.IndexerNode super super NodeWithArguments BindingFlags SafeProperty protected override protected override if == throw new try if is return else if is return else if is return else if is string return string else return catch throw new catch throw new catch throw new catch throw new catch throw new catch throw new protected override protected override if == throw new try if is else if is else if is else catch throw new catch throw new catch throw new catch throw new catch throw new catch throw new EvaluationContext internal internal < lock decl_stmt EvaluationContext = new return decl Int32 int private private decl_stmt int = decl_stmt Int32 = new for = < ++ = return private private return int private private return private private return int decl object private private decl_stmt object = return call Spring.Reflection.Dynamic.SafeProperty.GetValue(object) call Spring.Reflection.Dynamic.SafeProperty.GetValue(object) call Spring.Reflection.Dynamic.SafeProperty.GetValue(object) call Spring.Reflection.Dynamic.SafeProperty.GetValue(object) call Spring.Reflection.Dynamic.SafeProperty.GetValue(object) decl Int32 int private private decl_stmt int = decl_stmt Int32 = new for = < ++ = private private int = private private = decl object private private decl_stmt object = call Spring.Reflection.Dynamic.SafeProperty.SetValue(object,object,object) call Spring.Reflection.Dynamic.SafeProperty.SetValue(object,object,object) call Spring.Reflection.Dynamic.SafeProperty.SetValue(object,object,object) call Spring.Reflection.Dynamic.SafeProperty.SetValue(object,object,object) call Spring.Reflection.Dynamic.SafeProperty.SetValue(object,object,object) decl object PropertyInfo decl Type Type decl object string private private decl_stmt object = if == lock if == decl_stmt System.Type = decl_stmt System.Type = decl_stmt string = decl_stmt object = call Type.GetCustomAttributes() call Type.GetCustomAttributes() call Type.GetCustomAttributes() call Type.GetCustomAttributes() call Type.GetCustomAttributes() typeof if != && > = decl_stmt System.Reflection.PropertyInfo = call System.Type.GetProperty(String,BindingFlags) call System.Type.GetProperty(String,BindingFlags) call System.Type.GetProperty(String,BindingFlags) call System.Type.GetProperty(String,BindingFlags) call System.Type.GetProperty(String,BindingFlags) if == throw new = new return