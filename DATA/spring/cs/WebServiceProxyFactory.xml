Spring.Web.Services System using System.Collections using System.Xml.Schema using System.Xml.Serialization using System.Net using System.Reflection using System.Reflection.Emit using System.Web.Services using System.Web.Services.Description using System.Web.Services.Protocols using System.Web.Services.Discovery using Spring.Objects.Factory using Spring.Objects.Factory.Config using Spring.Proxy using Spring.Util using Spring.Core.IO using class Spring.Web.Services.WebServiceProxyFactory super super IConfigurableFactoryObject super IInitializingObject Type decl Common string string decl Logging NetworkCredential IResource Type IObjectDefinition Type IList NetworkCredential decl ILog return = return = return = return = return = return = return = return = return = return = return != : public virtual public virtual if == return return return = public virtual public virtual protected virtual protected virtual if == && == throw new if == throw new if ! throw new if throw new + + IProxyTypeBuilder Type protected virtual protected virtual decl_stmt Spring.Proxy.IProxyTypeBuilder if != = new = else = new = = = = decl_stmt System.Type = call Spring.Proxy.IProxyTypeBuilder.BuildProxyType() call Spring.Proxy.IProxyTypeBuilder.BuildProxyType() call Spring.Proxy.IProxyTypeBuilder.BuildProxyType() call Spring.Proxy.IProxyTypeBuilder.BuildProxyType() call Spring.Proxy.IProxyTypeBuilder.BuildProxyType() = call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) region region if if != call decl Common.Debug() call decl Common.Debug() call decl Common.Debug() call decl Common.Debug() call decl Common.Debug() else if != call decl Common.Debug() call decl Common.Debug() call decl Common.Debug() call decl Common.Debug() call decl Common.Debug() endregion DiscoveryClientDocumentCollection DiscoveryClientProtocol private private try if is || is decl_stmt System.Web.Services.Discovery.DiscoveryClientProtocol = new = = = call System.Web.Services.Discovery.DiscoveryClientProtocol.DiscoverAny(string) call System.Web.Services.Discovery.DiscoveryClientProtocol.DiscoverAny(string) call System.Web.Services.Discovery.DiscoveryClientProtocol.DiscoverAny(string) call System.Web.Services.Discovery.DiscoveryClientProtocol.DiscoverAny(string) call System.Web.Services.Discovery.DiscoveryClientProtocol.DiscoverAny(string) call System.Web.Services.Discovery.DiscoveryClientProtocol.ResolveAll() call System.Web.Services.Discovery.DiscoveryClientProtocol.ResolveAll() call System.Web.Services.Discovery.DiscoveryClientProtocol.ResolveAll() call System.Web.Services.Discovery.DiscoveryClientProtocol.ResolveAll() call System.Web.Services.Discovery.DiscoveryClientProtocol.ResolveAll() return else decl_stmt System.Web.Services.Discovery.DiscoveryClientDocumentCollection = new = return catch throw new IWebProxy private private decl_stmt System.Net.IWebProxy = if != = new if != if == = = return IEnumerator Uri CredentialCache private private if != decl_stmt System.Net.CredentialCache = new decl_stmt System.Uri = new - decl_stmt System.Collections.Generic.IEnumerator = while call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Net.CredentialCache.Add(Uri,string,NetworkCredential) call System.Net.CredentialCache.Add(Uri,string,NetworkCredential) call System.Net.CredentialCache.Add(Uri,string,NetworkCredential) call System.Net.CredentialCache.Add(Uri,string,NetworkCredential) call System.Net.CredentialCache.Add(Uri,string,NetworkCredential) return else return TypeBuilder public override public override if == || == throw new decl_stmt TypeBuilder = foreach in new return call TypeBuilder.CreateType() call TypeBuilder.CreateType() call TypeBuilder.CreateType() call TypeBuilder.CreateType() call TypeBuilder.CreateType() public override public override MethodAttributes ILGenerator ConstructorBuilder protected override protected override decl_stmt MethodAttributes = | | | decl_stmt System.Reflection.Emit.ConstructorBuilder = decl_stmt System.Reflection.Emit.ILGenerator = call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) | call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) protected override protected override IList protected override protected override decl_stmt System.Collections.Generic.IList = call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) return IList protected override protected override decl_stmt System.Collections.Generic.IList = call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) return bool bool decl ReflectionUtils bool IList XmlMemberMapping protected override protected override decl_stmt System.Collections.Generic.IList = if != if != typeof if > decl_stmt System.Xml.Serialization.XmlMemberMapping = decl_stmt bool = != + decl_stmt bool = != decl_stmt bool = != && != if || || if call XmlMemberMapping.TypeName() call XmlMemberMapping.TypeName() call XmlMemberMapping.TypeName() call XmlMemberMapping.TypeName() call XmlMemberMapping.TypeName() call XmlMemberMapping.TypeName() call XmlMemberMapping.TypeName() call XmlMemberMapping.TypeName() call XmlMemberMapping.TypeName() if || decl_stmt CustomAttributeBuilderBuilder = new typeof if call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() if call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() if decl_stmt CustomAttributeBuilderBuilder = new typeof call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() else if || decl_stmt CustomAttributeBuilderBuilder = new typeof if call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() if call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() return XmlSchemas private private = new decl_stmt System.Xml.Serialization.XmlSchemas = new foreach in if is if is call System.Xml.Serialization.XmlSchemas.Add(XmlSchema,bool) call System.Xml.Serialization.XmlSchemas.Add(XmlSchema,bool) call System.Xml.Serialization.XmlSchemas.Add(XmlSchema,bool) call System.Xml.Serialization.XmlSchemas.Add(XmlSchema,bool) call System.Xml.Serialization.XmlSchemas.Add(XmlSchema,bool) foreach in foreach in if == call System.Xml.Serialization.XmlSchemas.Add(XmlSchema,bool) call System.Xml.Serialization.XmlSchemas.Add(XmlSchema,bool) call System.Xml.Serialization.XmlSchemas.Add(XmlSchema,bool) call System.Xml.Serialization.XmlSchemas.Add(XmlSchema,bool) call System.Xml.Serialization.XmlSchemas.Add(XmlSchema,bool) = new = = private private if != foreach in foreach in if == return throw new else foreach in foreach in region region if call decl Common.Info() call decl Common.Info() call decl Common.Info() call decl Common.Info() call decl Common.Info() endregion return throw new SoapAddressBinding private private foreach in foreach in foreach in if == decl_stmt SoapAddressBinding = typeof return throw new PortType private private decl_stmt PortType = foreach in if == return throw new private private foreach in if return throw new SoapSchemaMember decl SoapSchemaMember private private if == decl_stmt System.Xml.Serialization.SoapSchemaMember = new for = < ++ decl_stmt System.Xml.Serialization.SoapSchemaMember = new = = = return else return SoapBodyBinding SoapBodyBinding Message string string Message private private = = = typeof decl_stmt string = ! && != : decl_stmt SoapBodyBinding = typeof if != throw new decl_stmt System.ServiceModel.Channels.Message = = = if != decl_stmt string = ! && != : + decl_stmt SoapBodyBinding = typeof decl_stmt System.ServiceModel.Channels.Message = = decl ReflectionUtils private private decl_stmt CustomAttributeBuilderBuilder = new typeof call decl ReflectionUtils.AddContructorArgument() call decl ReflectionUtils.AddContructorArgument() call decl ReflectionUtils.AddContructorArgument() call decl ReflectionUtils.AddContructorArgument() call decl ReflectionUtils.AddContructorArgument() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() return call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() decl ReflectionUtils string string decl CustomAttributeBuilderBuilder string private static private static decl_stmt CustomAttributeBuilderBuilder decl_stmt string = decl_stmt string = if == = new typeof else = new typeof call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddContructorArgument() call decl ReflectionUtils.AddContructorArgument() call decl ReflectionUtils.AddContructorArgument() call decl ReflectionUtils.AddContructorArgument() call decl ReflectionUtils.AddContructorArgument() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() if > && != call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() if != call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() if == call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() else decl_stmt string = decl_stmt string = if > && != + call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() if != call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() return call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() Type LocalBuilder ArrayList LocalBuilder int int ArrayList protected override protected override decl_stmt System.Collections.ArrayList = new decl_stmt System.Collections.ArrayList = new foreach in if || call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) else call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) decl_stmt System.Reflection.Emit.LocalBuilder = typeof typeof decl_stmt int = foreach in + if ++ decl_stmt System.Reflection.Emit.LocalBuilder = typeof decl_stmt int = == typeof : foreach in + decl_stmt System.Type = if else ++ if != typeof if else InterfaceMapping protected override protected override decl_stmt InterfaceMapping = = = = return