Spring.Transaction.Interceptor System using System.Reflection using NUnit.Framework using Rhino.Mocks using Spring.Data using Spring.Objects using class attribute Spring.Transaction.Interceptor.AbstractTransactionAspectTests MockRepository public public = new TestObjectMgr IPlatformTransactionManager ITestObjectMgr AttributesTransactionAttributeSource public public decl_stmt Spring.Transaction.IPlatformTransactionManager = decl_stmt Spring.Transaction.Interceptor.AttributesTransactionAttributeSource = new decl_stmt Spring.Data.TestObjectMgr = new decl_stmt Spring.Data.ITestObjectMgr = call Spring.Data.ITestObjectMgr.DeleteTwoTestObjects(string,string) call Spring.Data.ITestObjectMgr.DeleteTwoTestObjects(string,string) call Spring.Data.ITestObjectMgr.DeleteTwoTestObjects(string,string) call Spring.Data.ITestObjectMgr.DeleteTwoTestObjects(string,string) call Spring.Data.ITestObjectMgr.DeleteTwoTestObjects(string,string) ITransactionStatus ITestObject IPlatformTransactionManager MethodMapTransactionAttributeSource ITransactionAttribute MethodInfo TestObject UnexpectedRollbackException public public decl_stmt Spring.Transaction.Interceptor.ITransactionAttribute = new decl_stmt System.Reflection.MethodInfo = typeof decl_stmt Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource = new call Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource.AddTransactionalMethod(MethodInfo,ITransactionAttribute) call Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource.AddTransactionalMethod(MethodInfo,ITransactionAttribute) call Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource.AddTransactionalMethod(MethodInfo,ITransactionAttribute) call Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource.AddTransactionalMethod(MethodInfo,ITransactionAttribute) call Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource.AddTransactionalMethod(MethodInfo,ITransactionAttribute) decl_stmt Spring.Transaction.IPlatformTransactionManager = decl_stmt Spring.Transaction.ITransactionStatus = call IPlatformTransactionManager.GetTransaction() call IPlatformTransactionManager.GetTransaction() call IPlatformTransactionManager.GetTransaction() call IPlatformTransactionManager.GetTransaction() call IPlatformTransactionManager.GetTransaction() decl_stmt UnexpectedRollbackException = new call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() decl_stmt Spring.Data.NHibernate.TestObject = new decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = try call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() catch == call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() private private return call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() typeof ITransactionStatus ITestObject IPlatformTransactionManager MethodMapTransactionAttributeSource ITransactionAttribute MethodInfo RollbackTestObject public public decl_stmt Spring.Transaction.Interceptor.ITransactionAttribute = new decl_stmt System.Reflection.MethodInfo = typeof decl_stmt Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource = new call Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource.AddTransactionalMethod(MethodInfo,ITransactionAttribute) call Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource.AddTransactionalMethod(MethodInfo,ITransactionAttribute) call Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource.AddTransactionalMethod(MethodInfo,ITransactionAttribute) call Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource.AddTransactionalMethod(MethodInfo,ITransactionAttribute) call Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource.AddTransactionalMethod(MethodInfo,ITransactionAttribute) decl_stmt Spring.Transaction.ITransactionStatus = decl_stmt Spring.Transaction.IPlatformTransactionManager = call IPlatformTransactionManager.GetTransaction() call IPlatformTransactionManager.GetTransaction() call IPlatformTransactionManager.GetTransaction() call IPlatformTransactionManager.GetTransaction() call IPlatformTransactionManager.GetTransaction() call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() decl_stmt RollbackTestObject = new decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call Spring.Aop.Framework.AutoProxy.ITestObject.GetDescription() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() public public new public public new public public new public public new ITransactionStatus ITestObject IPlatformTransactionManager MethodMapTransactionAttributeSource ITransactionAttribute MethodInfo TransactionSystemException TestObject private private decl_stmt Spring.Transaction.Interceptor.ITransactionAttribute = new decl_stmt System.Reflection.MethodInfo = typeof decl_stmt Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource = new call Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource.AddTransactionalMethod(MethodInfo,ITransactionAttribute) call Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource.AddTransactionalMethod(MethodInfo,ITransactionAttribute) call Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource.AddTransactionalMethod(MethodInfo,ITransactionAttribute) call Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource.AddTransactionalMethod(MethodInfo,ITransactionAttribute) call Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource.AddTransactionalMethod(MethodInfo,ITransactionAttribute) decl_stmt Spring.Transaction.ITransactionStatus = decl_stmt Spring.Transaction.IPlatformTransactionManager = call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() typeof call IPlatformTransactionManager.GetTransaction() call IPlatformTransactionManager.GetTransaction() call IPlatformTransactionManager.GetTransaction() call IPlatformTransactionManager.GetTransaction() call IPlatformTransactionManager.GetTransaction() if call Spring.Transaction.IPlatformTransactionManager.Rollback(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Rollback(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Rollback(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Rollback(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Rollback(ITransactionStatus) else call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) decl_stmt TransactionSystemException = new if else call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() decl_stmt Spring.Data.NHibernate.TestObject = new decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = try call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) catch if else call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() private private return call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() typeof