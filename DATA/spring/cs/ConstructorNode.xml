Spring.Expressions System using System.Collections using System.Collections.Generic using System.Reflection using System.Runtime.Serialization using Spring.Core.TypeResolution using Spring.Util using Spring.Reflection.Dynamic using class attribute Spring.Expressions.ConstructorNode super super NodeWithArguments Type bool int IDictionary SafeConstructor IDictionary object decl object decl object protected override protected override decl_stmt object = decl_stmt System.Collections.Generic.IDictionary = if == lock if == = decl_stmt object = : decl_stmt object = call SafeConstructor.Invoke() call SafeConstructor.Invoke() call SafeConstructor.Invoke() call SafeConstructor.Invoke() call SafeConstructor.Invoke() if != return protected virtual protected virtual return ParameterInfo ConstructorInfo decl ParameterInfo SafeConstructor Type private private decl_stmt Spring.Reflection.Dynamic.SafeConstructor = decl_stmt System.Type = decl_stmt System.Reflection.ConstructorInfo = if == throw new + else decl_stmt System.Reflection.ParameterInfo = call ConstructorInfo.GetParameters() call ConstructorInfo.GetParameters() call ConstructorInfo.GetParameters() call ConstructorInfo.GetParameters() call ConstructorInfo.GetParameters() if > decl_stmt System.Reflection.ParameterInfo = - = call System.Reflection.ParameterInfo.GetCustomAttributes(Type,bool) call System.Reflection.ParameterInfo.GetCustomAttributes(Type,bool) call System.Reflection.ParameterInfo.GetCustomAttributes(Type,bool) call System.Reflection.ParameterInfo.GetCustomAttributes(Type,bool) call System.Reflection.ParameterInfo.GetCustomAttributes(Type,bool) typeof > if = call ParameterInfo.ParameterType() call ParameterInfo.ParameterType() call ParameterInfo.ParameterType() call ParameterInfo.ParameterType() call ParameterInfo.ParameterType() call ParameterInfo.ParameterType() call ParameterInfo.ParameterType() call ParameterInfo.ParameterType() call ParameterInfo.ParameterType() = = new if != = new foreach in = return IExpression private private foreach in decl_stmt Spring.Expressions.IExpression = call Spring.Expressions.IExpression.SetValue(object,object) call Spring.Expressions.IExpression.SetValue(object,object) call Spring.Expressions.IExpression.SetValue(object,object) call Spring.Expressions.IExpression.SetValue(object,object) call Spring.Expressions.IExpression.SetValue(object,object) decl IList private static private static decl_stmt System.Collections.Generic.IList < = if > return return decl ConstructorInfo decl List decl ParameterInfo ParameterInfo private static < private static < decl_stmt System.Reflection.ConstructorInfo = | | decl_stmt System.Collections.Generic.List < = new < foreach in decl_stmt System.Reflection.ParameterInfo = if == call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() else if > decl_stmt System.Reflection.ParameterInfo = - if call System.Reflection.ParameterInfo.GetCustomAttributes(Type,bool) call System.Reflection.ParameterInfo.GetCustomAttributes(Type,bool) call System.Reflection.ParameterInfo.GetCustomAttributes(Type,bool) call System.Reflection.ParameterInfo.GetCustomAttributes(Type,bool) call System.Reflection.ParameterInfo.GetCustomAttributes(Type,bool) typeof > call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() return