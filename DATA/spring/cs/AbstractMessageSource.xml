Spring.Context.Support System using System.Collections.Generic using System.Globalization using Common.Logging using class Spring.Context.Support.AbstractMessageSource super super IHierarchicalMessageSource bool ILog IMessageSource return = return = public public return public public return public public params params params return string string public public params params params decl_stmt string = if != return decl_stmt string = if != return throw new string string public public params params params decl_stmt string = if != return if == decl_stmt string = if != return return string string decl IList public public decl_stmt System.Collections.Generic.IList < = if == = new for = < ++ decl_stmt string = if != return if != return if > decl_stmt string = if != return throw new > - : object public public decl_stmt object = if != return if != return return object public public decl_stmt object = if != return if != return return public public if != string protected protected if == return if == = if != && > = decl_stmt string = if != return return AbstractMessageSource protected protected if != decl_stmt Spring.Context.Support.AbstractMessageSource = as if != return call Spring.Context.Support.AbstractMessageSource.GetMessageInternal(string,object,CultureInfo) call Spring.Context.Support.AbstractMessageSource.GetMessageInternal(string,object,CultureInfo) call Spring.Context.Support.AbstractMessageSource.GetMessageInternal(string,object,CultureInfo) call Spring.Context.Support.AbstractMessageSource.GetMessageInternal(string,object,CultureInfo) call Spring.Context.Support.AbstractMessageSource.GetMessageInternal(string,object,CultureInfo) else return return protected virtual protected virtual if return return protected virtual protected virtual return protected virtual protected virtual if == || == || == return return IMessageSourceResolvable decl object protected virtual protected virtual if == return new decl_stmt object = new for = < ++ decl_stmt Spring.Context.IMessageSourceResolvable = as if != = else = return protected protected if == = if == return return protected protected if == =