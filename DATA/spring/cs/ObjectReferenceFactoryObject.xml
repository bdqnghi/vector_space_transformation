Spring.Objects.Factory.Config System using Spring.Util using class attribute Spring.Objects.Factory.Config.ObjectReferenceFactoryObject super super IFactoryObject super IObjectFactoryAware IObjectFactory string = public public return call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) return call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) return call Spring.Objects.Factory.IObjectFactory.IsSingleton(string) call Spring.Objects.Factory.IObjectFactory.IsSingleton(string) call Spring.Objects.Factory.IObjectFactory.IsSingleton(string) call Spring.Objects.Factory.IObjectFactory.IsSingleton(string) call Spring.Objects.Factory.IObjectFactory.IsSingleton(string) = if throw new if ! call Spring.Objects.Factory.IObjectFactory.ContainsObject(string) call Spring.Objects.Factory.IObjectFactory.ContainsObject(string) call Spring.Objects.Factory.IObjectFactory.ContainsObject(string) call Spring.Objects.Factory.IObjectFactory.ContainsObject(string) call Spring.Objects.Factory.IObjectFactory.ContainsObject(string) throw new call IObjectFactory.ToString() call IObjectFactory.ToString() call IObjectFactory.ToString() call IObjectFactory.ToString() call IObjectFactory.ToString()