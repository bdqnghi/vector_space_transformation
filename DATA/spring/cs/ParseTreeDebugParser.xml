Spring.Expressions.Parser.antlr.debug System using System.Collections.Stack antlr using antlr.collections.impl.BitSet class Spring.Expressions.Parser.antlr.debug.ParseTreeDebugParser super super LLkParser Stack ParseTreeRule int public public return public public return public override public override public override public override public override public override ParseTreeRule ParseTreeToken protected protected if > return decl_stmt Spring.Expressions.Parser.antlr.ParseTreeRule = call System.Collections.Generic.Stack.Peek() call System.Collections.Generic.Stack.Peek() call System.Collections.Generic.Stack.Peek() call System.Collections.Generic.Stack.Peek() call System.Collections.Generic.Stack.Peek() decl_stmt Spring.Expressions.Parser.antlr.ParseTreeToken = if == = new new else = new call ParseTreeRule.addChild() call ParseTreeRule.addChild() call ParseTreeRule.addChild() call ParseTreeRule.addChild() call ParseTreeRule.addChild() ParseTreeRule ParseTreeRule public override public override if > return decl_stmt Spring.Expressions.Parser.antlr.ParseTreeRule = new if > decl_stmt Spring.Expressions.Parser.antlr.ParseTreeRule = call System.Collections.Generic.Stack.Peek() call System.Collections.Generic.Stack.Peek() call System.Collections.Generic.Stack.Peek() call System.Collections.Generic.Stack.Peek() call System.Collections.Generic.Stack.Peek() call ParseTreeRule.addChild() call ParseTreeRule.addChild() call ParseTreeRule.addChild() call ParseTreeRule.addChild() call ParseTreeRule.addChild() call System.Collections.Generic.Stack.Push(Object) call System.Collections.Generic.Stack.Push(Object) call System.Collections.Generic.Stack.Push(Object) call System.Collections.Generic.Stack.Push(Object) call System.Collections.Generic.Stack.Push(Object) ++ public override public override if > return = call System.Collections.Generic.Stack.Pop() call System.Collections.Generic.Stack.Pop() call System.Collections.Generic.Stack.Pop() call System.Collections.Generic.Stack.Pop() call System.Collections.Generic.Stack.Pop()