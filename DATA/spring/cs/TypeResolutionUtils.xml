Spring.Core.TypeResolution System using System.Collections.Generic using System.Globalization using System.Text.RegularExpressions using System.Reflection using Spring.Util using class Spring.Core.TypeResolution.TypeResolutionUtils ITypeResolver Regex Type public static public static decl_stmt System.Type = if == = call ITypeResolver.Resolve() call ITypeResolver.Resolve() call ITypeResolver.Resolve() call ITypeResolver.Resolve() call ITypeResolver.Resolve() return Type decl List string public static < public static < decl_stmt System.Collections.Generic.List < = new < for = < ++ decl_stmt string = decl_stmt System.Type = if ! throw new call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call System.Type.GetInterfaces() call System.Type.GetInterfaces() call System.Type.GetInterfaces() call System.Type.GetInterfaces() call System.Type.GetInterfaces() return decl string string Match decl ParameterInfo string public static public static decl_stmt System.IO.Compression.Match = call System.Text.RegularExpressions.Regex.Match(String,String,RegexOptions) call System.Text.RegularExpressions.Regex.Match(String,String,RegexOptions) call System.Text.RegularExpressions.Regex.Match(String,String,RegexOptions) call System.Text.RegularExpressions.Regex.Match(String,String,RegexOptions) call System.Text.RegularExpressions.Regex.Match(String,String,RegexOptions) if ! throw new decl_stmt string = if ! return if > decl_stmt string = decl_stmt string = == new : decl_stmt System.Reflection.ParameterInfo = if != return for = < ++ if != return return