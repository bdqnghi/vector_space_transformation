Spring.Remoting System using System.Collections using System.Reflection using System.Reflection.Emit using System.Runtime.Remoting using Spring.Core.TypeResolution using Spring.Proxy using Spring.Objects.Factory using Spring.Remoting.Support using Spring.Util using class Spring.Remoting.SaoExporter super super ConfigurableLifetime super IObjectFactoryAware super IInitializingObject super IDisposable string decl Common string decl string string string decl ILog decl Logging IDictionary SaoExporter object public static public static decl_stmt Spring.Remoting.SaoExporter lock = decl_stmt object = call Spring.Remoting.SaoExporter.GetTargetInstance() call Spring.Remoting.SaoExporter.GetTargetInstance() call Spring.Remoting.SaoExporter.GetTargetInstance() call Spring.Remoting.SaoExporter.GetTargetInstance() call Spring.Remoting.SaoExporter.GetTargetInstance() return return = return = return = return = = public public public public protected virtual protected virtual if lock call decl Logging.Remove() call decl Logging.Remove() call decl Logging.Remove() call decl Logging.Remove() call decl Logging.Remove() = = private private return call string.GetObject() call string.GetObject() call string.GetObject() call string.GetObject() call string.GetObject() private private if == throw new if == throw new Type IProxyTypeBuilder string ConstructorInfo Type private private if != throw new decl_stmt Spring.Proxy.IProxyTypeBuilder = new decl_stmt System.Type = if == = if = new = typeof object else if != && > = = decl_stmt System.Type = call Spring.Proxy.IProxyTypeBuilder.BuildProxyType() call Spring.Proxy.IProxyTypeBuilder.BuildProxyType() call Spring.Proxy.IProxyTypeBuilder.BuildProxyType() call Spring.Proxy.IProxyTypeBuilder.BuildProxyType() call Spring.Proxy.IProxyTypeBuilder.BuildProxyType() decl_stmt string = != + + : decl_stmt System.Reflection.ConstructorInfo = call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) = call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) region region if call decl Common.Debug() call decl Common.Debug() call decl Common.Debug() call decl Common.Debug() call decl Common.Debug() endregion public override public override MethodAttributes ILGenerator ConstructorBuilder protected override protected override decl_stmt MethodAttributes = | | | decl_stmt System.Reflection.Emit.ConstructorBuilder = decl_stmt System.Reflection.Emit.ILGenerator = call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) protected override protected override