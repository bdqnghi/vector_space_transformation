Spring.Objects.Factory.Support System using System.Collections using System.Collections.Generic using System.Collections.Specialized using System.ComponentModel using Common.Logging using Spring.Collections using Spring.Collections.Generic using Spring.Core using Spring.Core.TypeConversion using Spring.Objects.Factory.Config using Spring.Threading using Spring.Util using System.Threading using System.Linq using class attribute Spring.Objects.Factory.Support.AbstractObjectFactory super super IConfigurableObjectFactory ISet bool OrderedDictionary decl Dictionary IObjectFactory ILog SynchronizedHashtable ISet bool LogicalThreadContextSetVariable OrderedDictionary bool object bool decl Collections decl Generic decl Dictionary ISet OrderedDictionary object decl Spring decl HashSet IDictionary ISet decl_stmt Spring.Collections.ISet = as if == = return public public private private return new protected override protected override if return if == return if == return - return return return return return return public public public < return typeof public public return public virtual public virtual public virtual public virtual protected virtual protected virtual lock = call System.Web.Util.OrderedDictionary.Add(KeyValuePair) call System.Web.Util.OrderedDictionary.Add(KeyValuePair) call System.Web.Util.OrderedDictionary.Add(KeyValuePair) call System.Web.Util.OrderedDictionary.Add(KeyValuePair) call System.Web.Util.OrderedDictionary.Add(KeyValuePair) string string protected protected decl_stmt string = lock decl_stmt string = string return != : string protected protected decl_stmt string = if = + return protected protected lock return call bool.Contains() call bool.Contains() call bool.Contains() call bool.Contains() call bool.Contains() public virtual public virtual return protected internal virtual protected internal virtual return ?? IObjectDefinition RootObjectDefinition protected internal virtual protected internal virtual if == return decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition lock = as if != return if == = else decl_stmt Spring.Objects.Factory.Config.IObjectDefinition = if ! = else if is = if == throw new + = call RootObjectDefinition.OverrideFrom() call RootObjectDefinition.OverrideFrom() call RootObjectDefinition.OverrideFrom() call RootObjectDefinition.OverrideFrom() call RootObjectDefinition.OverrideFrom() if && return RootObjectDefinition protected protected decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = if = as return protected protected return return = protected virtual protected virtual return new protected virtual protected virtual try return catch call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() + return IFactoryObject protected virtual protected virtual if ! return try decl_stmt Spring.Objects.Factory.IFactoryObject = return catch call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() return protected virtual protected virtual if == || return return object IFactoryObject protected internal virtual protected internal virtual if && ! typeof throw new if ! typeof region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion return if ! typeof || region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion return region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion decl_stmt object = if == call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out if == region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion decl_stmt Spring.Objects.Factory.IFactoryObject = if == && = if && lock if ! call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out = if != = else = if == throw new + + else region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion return IConfigurableFactoryObject object private private decl_stmt object try = catch throw new catch throw new if == && throw new if is decl_stmt Spring.Objects.Factory.Config.IConfigurableFactoryObject = region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion if != if != try = catch throw new return protected virtual protected virtual return protected protected if ! = return protected protected return Type protected protected decl_stmt System.Type = return != && protected protected try if return return catch throw new RootObjectDefinition object string protected protected decl_stmt string = decl_stmt object = if != return is else decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = if != return && typeof else if != return else throw new + + protected protected lock decl List object public virtual < public virtual < lock decl_stmt System.Collections.Generic.List < = new < foreach in decl_stmt object = if != && call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() && ! call decl List.Contains() call decl List.Contains() call decl List.Contains() call decl List.Contains() call decl List.Contains() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() return object Type string IObjectFactory Type Type RootObjectDefinition public public decl_stmt string = decl_stmt System.Type = != : typeof object decl_stmt object = if != if is if ! decl_stmt System.Type = return != && call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) else return call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() else return ! && call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() else decl_stmt Spring.Objects.Factory.IObjectFactory = if != && ! return call Spring.Objects.Factory.IObjectFactory.IsTypeMatch(string,Type) call Spring.Objects.Factory.IObjectFactory.IsTypeMatch(string,Type) call Spring.Objects.Factory.IObjectFactory.IsTypeMatch(string,Type) call Spring.Objects.Factory.IObjectFactory.IsTypeMatch(string,Type) call Spring.Objects.Factory.IObjectFactory.IsTypeMatch(string,Type) decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = decl_stmt System.Type = if == return if typeof if ! decl_stmt System.Type = return != && call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) else return call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) else return ! && call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) public public public < return typeof object string IObjectFactory IFactoryObject RootObjectDefinition Type public virtual public virtual decl_stmt string = decl_stmt object = if != decl_stmt Spring.Objects.Factory.IFactoryObject = as if != & ! return else return call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() else decl_stmt Spring.Objects.Factory.IObjectFactory = if != && ! return call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = decl_stmt System.Type = if != && typeof if ! return else return else return ! : protected virtual protected virtual return decl IEnumerable public virtual < public virtual < lock decl_stmt System.Collections.Generic.IEnumerable < = call bool.Keys() call bool.Keys() call bool.Keys() call bool.Keys() call bool.Keys() call bool.Keys() call bool.Keys() call bool.Keys() call bool.Keys() call bool.Keys() call bool.Keys() call bool.Keys() call bool.Keys() < return new < public virtual public virtual lock return object object protected virtual protected virtual lock decl_stmt object = call bool.Remove() call bool.Remove() call bool.Remove() call bool.Remove() call bool.Remove() call System.Web.Util.OrderedDictionary.Remove(TKey) call System.Web.Util.OrderedDictionary.Remove(TKey) call System.Web.Util.OrderedDictionary.Remove(TKey) call System.Web.Util.OrderedDictionary.Remove(TKey) call System.Web.Util.OrderedDictionary.Remove(TKey) decl_stmt object = if != Type protected protected params params params if decl_stmt System.Type = if != && && ! typeof && ! throw new if != if throw new + if && typeof throw new + return return return = string public public decl_stmt string = return || && ! || IObjectFactory object RootObjectDefinition IFactoryObject string public public decl_stmt string = decl_stmt object = if != decl_stmt Spring.Objects.Factory.IFactoryObject = as if != return || else return ! else decl_stmt Spring.Objects.Factory.IObjectFactory = if != && ! return call Spring.Objects.Factory.IObjectFactory.IsSingleton(string) call Spring.Objects.Factory.IObjectFactory.IsSingleton(string) call Spring.Objects.Factory.IObjectFactory.IsSingleton(string) call Spring.Objects.Factory.IObjectFactory.IsSingleton(string) call Spring.Objects.Factory.IObjectFactory.IsSingleton(string) decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = if == throw new if if typeof if return decl_stmt Spring.Objects.Factory.IFactoryObject = return else return ! else return IFactoryObject RootObjectDefinition string IObjectFactory public public decl_stmt string = decl_stmt Spring.Objects.Factory.IObjectFactory = if != && ! return call Spring.Objects.Factory.IObjectFactory.IsPrototype(string) call Spring.Objects.Factory.IObjectFactory.IsPrototype(string) call Spring.Objects.Factory.IObjectFactory.IsPrototype(string) call Spring.Objects.Factory.IObjectFactory.IsPrototype(string) call Spring.Objects.Factory.IObjectFactory.IsPrototype(string) decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = if return ! || typeof else if && typeof decl_stmt Spring.Objects.Factory.IFactoryObject = return ! else return IObjectFactory string public public decl_stmt string = if || return ! || decl_stmt Spring.Objects.Factory.IObjectFactory = return != && call Spring.Objects.Factory.IObjectFactory.ContainsObject(string) call Spring.Objects.Factory.IObjectFactory.ContainsObject(string) call Spring.Objects.Factory.IObjectFactory.ContainsObject(string) call Spring.Objects.Factory.IObjectFactory.ContainsObject(string) call Spring.Objects.Factory.IObjectFactory.ContainsObject(string) bool decl List string public < public < decl_stmt string = decl_stmt bool = if || decl_stmt System.Collections.Generic.List < = new < lock foreach in if == string ! call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() string return if != return throw new return public public return public public public < return typeof public public return public public public < return public public return public public return object RootObjectDefinition bool object string object int protected protected decl_stmt object = new decl_stmt int const const = decl_stmt bool = try decl_stmt string = ref region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() new * endregion decl_stmt object = if == && ! decl_stmt object = if != region region if if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + + else call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion = return if throw new decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = = if == if != return throw new + + if != || = = if != = if = else if decl_stmt object = = else try = finally try catch throw new return catch lock if > -- = region region if call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() new * endregion throw finally if ! lock if > -- region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() new * endregion protected virtual protected virtual if && new protected protected return != && is || != || private private if != && != && ! throw new return object protected virtual protected virtual lock decl_stmt object = if == region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion try = finally region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion return ArrayList public virtual public virtual region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion lock decl_stmt System.Collections.ArrayList = new call System.Collections.ArrayList.Reverse() call System.Collections.ArrayList.Reverse() call System.Collections.ArrayList.Reverse() call System.Collections.ArrayList.Reverse() call System.Collections.ArrayList.Reverse() foreach in public public public public return || private private private private if ! throw new + + private private return private private if ! throw new + + call System.Web.Util.OrderedDictionary.Remove(TKey) call System.Web.Util.OrderedDictionary.Remove(TKey) call System.Web.Util.OrderedDictionary.Remove(TKey) call System.Web.Util.OrderedDictionary.Remove(TKey) call System.Web.Util.OrderedDictionary.Remove(TKey) private private if throw new call System.Web.Util.OrderedDictionary.Add(KeyValuePair) call System.Web.Util.OrderedDictionary.Add(KeyValuePair) call System.Web.Util.OrderedDictionary.Add(KeyValuePair) call System.Web.Util.OrderedDictionary.Add(KeyValuePair) call System.Web.Util.OrderedDictionary.Add(KeyValuePair) private private return public public call Spring.Collections.ISet.Add(object) call Spring.Collections.ISet.Add(object) call Spring.Collections.ISet.Add(object) call Spring.Collections.ISet.Add(object) call Spring.Collections.ISet.Add(object) string public public decl_stmt string = foreach in = return public public if is = if ! if typeof = if typeof = return object public public region region region region endregion if == region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion return region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion lock decl_stmt object = if != throw new = public public object public public lock decl_stmt object = if != throw new public public lock return call bool.Contains() call bool.Contains() call bool.Contains() call bool.Contains() call bool.Contains() lock return lock return public virtual public virtual lock return public public if call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() return call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() public public return || private private lock if ! call System.Web.Util.OrderedDictionary.Contains(KeyValuePair) call System.Web.Util.OrderedDictionary.Contains(KeyValuePair) call System.Web.Util.OrderedDictionary.Contains(KeyValuePair) call System.Web.Util.OrderedDictionary.Contains(KeyValuePair) call System.Web.Util.OrderedDictionary.Contains(KeyValuePair) call System.Web.Util.OrderedDictionary.Add(KeyValuePair) call System.Web.Util.OrderedDictionary.Add(KeyValuePair) call System.Web.Util.OrderedDictionary.Add(KeyValuePair) call System.Web.Util.OrderedDictionary.Add(KeyValuePair) call System.Web.Util.OrderedDictionary.Add(KeyValuePair) new return