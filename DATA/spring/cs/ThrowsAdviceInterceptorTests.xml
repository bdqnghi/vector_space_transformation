Spring.Aop.Framework.Adapter System using System.Reflection using System.Runtime.Remoting using System.Web using AopAlliance.Intercept using NUnit.Framework using Rhino.Mocks using Spring.Util using class attribute Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptorTests typeof public typeof public new new typeof public typeof public new object IMethodInvocation MyThrowsHandler MockRepository ThrowsAdviceInterceptor public public decl_stmt MockRepository = new decl_stmt AopAlliance.Intercept.IMethodInvocation = call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() typeof decl_stmt MyThrowsHandler = new decl_stmt Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor = new decl_stmt object = new call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() MockRepository IMethodInvocation Exception MyThrowsHandler ThrowsAdviceInterceptor public public decl_stmt MyThrowsHandler = new decl_stmt Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor = new decl_stmt System.Exception = new decl_stmt MockRepository = new decl_stmt AopAlliance.Intercept.IMethodInvocation = call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() typeof call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() try call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) catch call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() MockRepository IMethodInvocation HttpException MyThrowsHandler ThrowsAdviceInterceptor public public decl_stmt MyThrowsHandler = new decl_stmt Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor = new decl_stmt System.Web.HttpException = new decl_stmt MockRepository = new decl_stmt AopAlliance.Intercept.IMethodInvocation = call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() typeof typeof object new new call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() try call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) catch call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() MyThrowsHandler ThrowsAdviceInterceptor Exception MockRepository IMethodInvocation public public decl_stmt MyThrowsHandler = new decl_stmt Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor = new decl_stmt System.Exception = new new decl_stmt MockRepository = new decl_stmt AopAlliance.Intercept.IMethodInvocation = call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() typeof call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() try call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) catch call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() + call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() + call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() object typeof public typeof public decl_stmt object = new new MockRepository IMethodInvocation RemotingTimeoutException MyThrowsHandler ThrowsAdviceInterceptor public public decl_stmt MyThrowsHandler = new decl_stmt Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor = new decl_stmt RemotingTimeoutException = new decl_stmt MockRepository = new decl_stmt AopAlliance.Intercept.IMethodInvocation = call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() typeof call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() try call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) catch call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() Exception MockRepository IMethodInvocation MyThrowsHandler RemotingTimeoutException ThrowsAdviceInterceptor public public decl_stmt System.Exception = new decl_stmt MyThrowsHandler = new decl_stmt Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor = new decl_stmt RemotingTimeoutException = new decl_stmt MockRepository = new decl_stmt AopAlliance.Intercept.IMethodInvocation = call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() typeof call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call IMethodInvocation.Proceed() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() try call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) call Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(IMethodInvocation) catch call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MyThrowsHandler.GetCalls() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() public public public public public override public override throw public public public virtual public virtual public public throw new return = public virtual public virtual if != throw return