Spring.Remoting System using NUnit.Framework using Rhino.Mocks using Spring.Aop.Framework using Spring.Core.IO using Spring.Objects using Spring.Objects.Factory using Spring.Objects.Factory.Support using Spring.Objects.Factory.Xml using class attribute Spring.Remoting.SaoExporterTests super super BaseRemotingTestFixture SaoExporter typeof public typeof public decl_stmt Spring.Remoting.SaoExporter = new call Spring.Remoting.SaoExporter.AfterPropertiesSet() call Spring.Remoting.SaoExporter.AfterPropertiesSet() call Spring.Remoting.SaoExporter.AfterPropertiesSet() call Spring.Remoting.SaoExporter.AfterPropertiesSet() call Spring.Remoting.SaoExporter.AfterPropertiesSet() SaoExporter typeof public typeof public using = new decl_stmt Spring.Remoting.SaoExporter = new = = = call Spring.Remoting.SaoExporter.AfterPropertiesSet() call Spring.Remoting.SaoExporter.AfterPropertiesSet() call Spring.Remoting.SaoExporter.AfterPropertiesSet() call Spring.Remoting.SaoExporter.AfterPropertiesSet() call Spring.Remoting.SaoExporter.AfterPropertiesSet() SaoExporter public public using = new new decl_stmt Spring.Remoting.SaoExporter = new = = = call Spring.Remoting.SaoExporter.AfterPropertiesSet() call Spring.Remoting.SaoExporter.AfterPropertiesSet() call Spring.Remoting.SaoExporter.AfterPropertiesSet() call Spring.Remoting.SaoExporter.AfterPropertiesSet() call Spring.Remoting.SaoExporter.AfterPropertiesSet() SaoExporter public public using = new new typeof decl_stmt Spring.Remoting.SaoExporter = new = = = call Spring.Remoting.SaoExporter.AfterPropertiesSet() call Spring.Remoting.SaoExporter.AfterPropertiesSet() call Spring.Remoting.SaoExporter.AfterPropertiesSet() call Spring.Remoting.SaoExporter.AfterPropertiesSet() call Spring.Remoting.SaoExporter.AfterPropertiesSet() MockRepository IFactoryObject SaoExporter = public = public using = new decl_stmt MockRepository = new decl_stmt Spring.Objects.Factory.IFactoryObject = call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() typeof typeof call IFactoryObject.GetObject() call IFactoryObject.GetObject() call IFactoryObject.GetObject() call IFactoryObject.GetObject() call IFactoryObject.GetObject() new call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() decl_stmt Spring.Remoting.SaoExporter = new = = = call Spring.Remoting.SaoExporter.AfterPropertiesSet() call Spring.Remoting.SaoExporter.AfterPropertiesSet() call Spring.Remoting.SaoExporter.AfterPropertiesSet() call Spring.Remoting.SaoExporter.AfterPropertiesSet() call Spring.Remoting.SaoExporter.AfterPropertiesSet() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() SaoExporter TypeLoadException XmlObjectDefinitionReader = public = public using = new decl_stmt Spring.Objects.Factory.Xml.XmlObjectDefinitionReader = new call Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.LoadObjectDefinitions(IResource) call Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.LoadObjectDefinitions(IResource) call Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.LoadObjectDefinitions(IResource) call Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.LoadObjectDefinitions(IResource) call Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.LoadObjectDefinitions(IResource) new try decl_stmt Spring.Remoting.SaoExporter = catch decl_stmt System.TypeLoadException = ISimpleCounter private private decl_stmt Spring.Remoting.ISimpleCounter = typeof + call Spring.Remoting.ISimpleCounter.Count() call Spring.Remoting.ISimpleCounter.Count() call Spring.Remoting.ISimpleCounter.Count() call Spring.Remoting.ISimpleCounter.Count() call Spring.Remoting.ISimpleCounter.Count() call Spring.Remoting.ISimpleCounter.Count() call Spring.Remoting.ISimpleCounter.Count() call Spring.Remoting.ISimpleCounter.Count() call Spring.Remoting.ISimpleCounter.Count() call Spring.Remoting.ISimpleCounter.Count()