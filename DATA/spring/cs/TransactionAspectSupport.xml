Spring.Transaction.Interceptor System using System.Collections.Specialized using System.Reflection using Common.Logging using Spring.Objects.Factory using Spring.Threading using Spring.Util using using IsolationLevel===System.Data.IsolationLevel class attribute Spring.Transaction.Interceptor.TransactionAspectSupport super super IInitializingObject string ITransactionAttributeSource ILog IPlatformTransactionManager return != = return TransactionInfo public public decl_stmt TransactionInfo = as = public public return return return = return = return TransactionInfo decl_stmt TransactionInfo = as if == throw new return NameMatchTransactionAttributeSource decl_stmt Spring.Transaction.Interceptor.NameMatchTransactionAttributeSource = new = = public public if == throw new if == throw new + + ITransactionAttribute protected protected decl_stmt Spring.Transaction.Interceptor.ITransactionAttribute = call ITransactionAttributeSource.ReturnTransactionAttribute() call ITransactionAttributeSource.ReturnTransactionAttribute() call ITransactionAttributeSource.ReturnTransactionAttribute() call ITransactionAttributeSource.ReturnTransactionAttribute() call ITransactionAttributeSource.ReturnTransactionAttribute() return ITransactionAttribute TransactionInfo protected protected decl_stmt Spring.Transaction.Interceptor.ITransactionAttribute = if != && == = new decl_stmt TransactionInfo = new if != region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + endregion = call IPlatformTransactionManager.GetTransaction() call IPlatformTransactionManager.GetTransaction() call IPlatformTransactionManager.GetTransaction() call IPlatformTransactionManager.GetTransaction() call IPlatformTransactionManager.GetTransaction() else if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + + call TransactionInfo.BindToThread() call TransactionInfo.BindToThread() call TransactionInfo.BindToThread() call TransactionInfo.BindToThread() call TransactionInfo.BindToThread() return protected protected return protected protected if != && region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + + endregion call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) protected protected if != && if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + + + if try call Spring.Transaction.IPlatformTransactionManager.Rollback(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Rollback(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Rollback(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Rollback(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Rollback(ITransactionStatus) catch call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() throw else try call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) call Spring.Transaction.IPlatformTransactionManager.Commit(ITransactionStatus) catch call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() throw protected protected if !=