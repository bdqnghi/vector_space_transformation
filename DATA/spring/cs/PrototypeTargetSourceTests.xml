Spring.Aop.Target System using Common.Logging using Common.Logging.Simple using NUnit.Framework using Spring.Objects.Factory using Spring.Objects.Factory.Xml using Rhino.Mocks using class attribute Spring.Aop.Target.PrototypeTargetSourceTests public public = new IObjectFactory ISideEffectObject ISideEffectObject ISideEffectObject int public public decl_stmt int = decl_stmt Spring.Objects.Factory.IObjectFactory = new new decl_stmt Spring.Objects.Factory.ISideEffectObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.ISideEffectObject.doWork() call Spring.Objects.Factory.ISideEffectObject.doWork() call Spring.Objects.Factory.ISideEffectObject.doWork() call Spring.Objects.Factory.ISideEffectObject.doWork() call Spring.Objects.Factory.ISideEffectObject.doWork() + decl_stmt Spring.Objects.Factory.ISideEffectObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.ISideEffectObject.doWork() call Spring.Objects.Factory.ISideEffectObject.doWork() call Spring.Objects.Factory.ISideEffectObject.doWork() call Spring.Objects.Factory.ISideEffectObject.doWork() call Spring.Objects.Factory.ISideEffectObject.doWork() decl_stmt Spring.Objects.Factory.ISideEffectObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.ISideEffectObject.doWork() call Spring.Objects.Factory.ISideEffectObject.doWork() call Spring.Objects.Factory.ISideEffectObject.doWork() call Spring.Objects.Factory.ISideEffectObject.doWork() call Spring.Objects.Factory.ISideEffectObject.doWork() MockRepository PrototypeTargetSource SideEffectObject IObjectFactory public public decl_stmt MockRepository = new decl_stmt Spring.Objects.Factory.SideEffectObject = new decl_stmt Spring.Objects.Factory.IObjectFactory = < using call MockRepository.Record() call MockRepository.Record() call MockRepository.Record() call MockRepository.Record() call MockRepository.Record() call Spring.Objects.Factory.IObjectFactory.IsPrototype(string) call Spring.Objects.Factory.IObjectFactory.IsPrototype(string) call Spring.Objects.Factory.IObjectFactory.IsPrototype(string) call Spring.Objects.Factory.IObjectFactory.IsPrototype(string) call Spring.Objects.Factory.IObjectFactory.IsPrototype(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) typeof using call MockRepository.Playback() call MockRepository.Playback() call MockRepository.Playback() call MockRepository.Playback() call MockRepository.Playback() decl_stmt Spring.Aop.Target.PrototypeTargetSource = new = call SideEffectObject.GetType() call SideEffectObject.GetType() call SideEffectObject.GetType() call SideEffectObject.GetType() call SideEffectObject.GetType() PrototypeTargetSource public public decl_stmt Spring.Aop.Target.PrototypeTargetSource = new MockRepository PrototypeTargetSource IObjectFactory string public public decl_stmt MockRepository = new decl_stmt Spring.Objects.Factory.IObjectFactory = < decl_stmt string const const = using call MockRepository.Record() call MockRepository.Record() call MockRepository.Record() call MockRepository.Record() call MockRepository.Record() call Spring.Objects.Factory.IObjectFactory.IsPrototype(string) call Spring.Objects.Factory.IObjectFactory.IsPrototype(string) call Spring.Objects.Factory.IObjectFactory.IsPrototype(string) call Spring.Objects.Factory.IObjectFactory.IsPrototype(string) call Spring.Objects.Factory.IObjectFactory.IsPrototype(string) using call MockRepository.Playback() call MockRepository.Playback() call MockRepository.Playback() call MockRepository.Playback() call MockRepository.Playback() decl_stmt Spring.Aop.Target.PrototypeTargetSource = new = < = MockRepository PrototypeTargetSource IObjectFactory SideEffectObject public public decl_stmt MockRepository = new decl_stmt Spring.Objects.Factory.IObjectFactory = < decl_stmt Spring.Objects.Factory.SideEffectObject = new using call MockRepository.Record() call MockRepository.Record() call MockRepository.Record() call MockRepository.Record() call MockRepository.Record() call Spring.Objects.Factory.IObjectFactory.IsPrototype(string) call Spring.Objects.Factory.IObjectFactory.IsPrototype(string) call Spring.Objects.Factory.IObjectFactory.IsPrototype(string) call Spring.Objects.Factory.IObjectFactory.IsPrototype(string) call Spring.Objects.Factory.IObjectFactory.IsPrototype(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) typeof string using call MockRepository.Playback() call MockRepository.Playback() call MockRepository.Playback() call MockRepository.Playback() call MockRepository.Playback() decl_stmt Spring.Aop.Target.PrototypeTargetSource = new = = call Spring.Aop.Target.PrototypeTargetSource.GetTarget() call Spring.Aop.Target.PrototypeTargetSource.GetTarget() call Spring.Aop.Target.PrototypeTargetSource.GetTarget() call Spring.Aop.Target.PrototypeTargetSource.GetTarget() call Spring.Aop.Target.PrototypeTargetSource.GetTarget() PrototypeTargetSource typeof public typeof public decl_stmt Spring.Aop.Target.PrototypeTargetSource = new call PrototypeTargetSource.AfterPropertiesSet() call PrototypeTargetSource.AfterPropertiesSet() call PrototypeTargetSource.AfterPropertiesSet() call PrototypeTargetSource.AfterPropertiesSet() call PrototypeTargetSource.AfterPropertiesSet()