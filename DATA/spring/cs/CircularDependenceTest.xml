System using System.Text using Spring.Context using Spring.Web.Conversation using Common.Logging using class .CircularDependenceTest super super IApplicationContextAware IApplicationContext ILog IConversationState StringBuilder IConversationState protected protected decl_stmt Spring.Web.Conversation.IConversationState = decl_stmt Spring.Web.Conversation.IConversationState = decl_stmt System.Text.StringBuilder = new try call IConversationState.InnerConversations() call IConversationState.InnerConversations() call IConversationState.InnerConversations() call IConversationState.InnerConversations() call IConversationState.InnerConversations() call IConversationState.InnerConversations() call IConversationState.InnerConversations() call IConversationState.InnerConversations() call IConversationState.InnerConversations() call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) catch call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() if ! call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) catch call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) = call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) =