Spring.Messaging.Listener System using System.Messaging using System.Transactions using Common.Logging using Spring.Transaction using class Spring.Messaging.Listener.DistributedTxMessageListenerContainer super super AbstractTransactionalMessageListenerContainer ILog IDistributedTransactionExceptionHandler return = public override public override if == = Message protected override protected override region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion decl_stmt System.ServiceModel.Channels.Message try = catch if == region region if call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() endregion return else lock throw if == region region if call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() call ILog.Trace() + + endregion return try region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + + + + endregion if != if return catch throw finally call Message.Dispose() call Message.Dispose() call Message.Dispose() call Message.Dispose() call Message.Dispose() return IDistributedTransactionExceptionHandler protected virtual protected virtual decl_stmt Spring.Messaging.Listener.IDistributedTransactionExceptionHandler = if != call Spring.Messaging.Listener.IDistributedTransactionExceptionHandler.OnException(Exception,Message) call Spring.Messaging.Listener.IDistributedTransactionExceptionHandler.OnException(Exception,Message) call Spring.Messaging.Listener.IDistributedTransactionExceptionHandler.OnException(Exception,Message) call Spring.Messaging.Listener.IDistributedTransactionExceptionHandler.OnException(Exception,Message) call Spring.Messaging.Listener.IDistributedTransactionExceptionHandler.OnException(Exception,Message)