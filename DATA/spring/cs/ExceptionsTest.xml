Spring System using System.Globalization using System.IO using System.Reflection using System.Runtime.Serialization using System.Runtime.Serialization.Formatters.Binary using NUnit.Framework using class Spring.ExceptionsTest super super StandardsComplianceTest Assembly private private if == return return public public public public decl FieldInfo bool decl FieldInfo protected override protected override decl_stmt bool = + if return if ! typeof typeof typeof if typeof typeof else typeof typeof + decl_stmt System.Reflection.FieldInfo = | | if != foreach in + + + decl_stmt System.Reflection.FieldInfo = | | | if != if | | == + if ! && ! ConstructorInfo private private params params params decl_stmt System.Reflection.ConstructorInfo = | | + + + + + + + + + + + + ConstructorInfo private private params params params decl_stmt System.Reflection.ConstructorInfo = | | + + + + + + + + + + + + ConstructorInfo private private params params params decl_stmt System.Reflection.ConstructorInfo = | | + + + + + + + + + + + + BinaryFormatter Exception MemoryStream Exception ConstructorInfo private private decl_stmt System.Reflection.ConstructorInfo = try call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) catch + + + = new typeof string try decl_stmt System.Exception = call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) new + catch + + + = new typeof string typeof try decl_stmt System.Exception = call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) new new + + catch + + + try = new typeof string decl_stmt System.Exception = call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) new decl_stmt System.Runtime.Serialization.Formatters.Binary.BinaryFormatter = new decl_stmt System.IO.MemoryStream = new call System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(Stream,object,bool) call System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(Stream,object,bool) call System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(Stream,object,bool) call System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(Stream,object,bool) call System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(Stream,object,bool) call System.IO.MemoryStream.Seek(long,SeekOrigin) call System.IO.MemoryStream.Seek(long,SeekOrigin) call System.IO.MemoryStream.Seek(long,SeekOrigin) call System.IO.MemoryStream.Seek(long,SeekOrigin) call System.IO.MemoryStream.Seek(long,SeekOrigin) decl_stmt System.Exception = call System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream,HeaderHandler) call System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream,HeaderHandler) call System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream,HeaderHandler) call System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream,HeaderHandler) call System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream,HeaderHandler) catch + + + return =