Spring.Objects.Factory.Support System using System.Collections using System.Collections.Generic using System.Globalization using System.Reflection using Common.Logging using Spring.Collections using Spring.Core.TypeResolution using Spring.Objects.Factory.Config using Spring.Util using class attribute Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory super super AbstractObjectFactory super IAutowireCapableObjectFactory IInstantiationStrategy decl IDictionary BindingFlags ILog ISet return = Type protected override protected override decl_stmt System.Type if == return if = else = return Type bool GenericArgumentsHolder int ISet decl MethodInfo decl string decl Type protected override protected override decl_stmt System.Type = decl_stmt bool = if = = else = if == return decl_stmt int = decl_stmt System.Reflection.MethodInfo = call System.Type.GetMethods() call System.Type.GetMethods() call System.Type.GetMethods() call System.Type.GetMethods() call System.Type.GetMethods() decl_stmt Spring.Collections.ISet = new foreach in decl_stmt Spring.Core.TypeResolution.GenericArgumentsHolder = new if == && && >= && == call Spring.Core.TypeResolution.GenericArgumentsHolder.GetGenericArguments() call Spring.Core.TypeResolution.GenericArgumentsHolder.GetGenericArguments() call Spring.Core.TypeResolution.GenericArgumentsHolder.GetGenericArguments() call Spring.Core.TypeResolution.GenericArgumentsHolder.GetGenericArguments() call Spring.Core.TypeResolution.GenericArgumentsHolder.GetGenericArguments() if decl_stmt string = call Spring.Core.TypeResolution.GenericArgumentsHolder.GetGenericArguments() call Spring.Core.TypeResolution.GenericArgumentsHolder.GetGenericArguments() call Spring.Core.TypeResolution.GenericArgumentsHolder.GetGenericArguments() call Spring.Core.TypeResolution.GenericArgumentsHolder.GetGenericArguments() call Spring.Core.TypeResolution.GenericArgumentsHolder.GetGenericArguments() decl_stmt System.Type = new for = < ++ = call Spring.Collections.ISet.Add(object) call Spring.Collections.ISet.Add(object) call Spring.Collections.ISet.Add(object) call Spring.Collections.ISet.Add(object) call Spring.Collections.ISet.Add(object) else call Spring.Collections.ISet.Add(object) call Spring.Collections.ISet.Add(object) call Spring.Collections.ISet.Add(object) call Spring.Collections.ISet.Add(object) call Spring.Collections.ISet.Add(object) if == return return RootObjectDefinition public override public override decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = if != call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() new public override public override new new object IInstantiationAwareObjectPostProcessor protected protected region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + endregion foreach in decl_stmt Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor = as if != decl_stmt object = call IInstantiationAwareObjectPostProcessor.PostProcessBeforeInstantiation() call IInstantiationAwareObjectPostProcessor.PostProcessBeforeInstantiation() call IInstantiationAwareObjectPostProcessor.PostProcessBeforeInstantiation() call IInstantiationAwareObjectPostProcessor.PostProcessBeforeInstantiation() call IInstantiationAwareObjectPostProcessor.PostProcessBeforeInstantiation() if != return return public virtual public virtual call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + + foreach in if is try catch call ILog.ErrorFormat() call ILog.ErrorFormat() call ILog.ErrorFormat() call ILog.ErrorFormat() call ILog.ErrorFormat() ObjectDefinitionValueResolver decl IList PropertyValue object PropertyValue MutablePropertyValues protected protected if == || == return decl_stmt Spring.Objects.Factory.Support.ObjectDefinitionValueResolver = decl_stmt Spring.Objects.MutablePropertyValues = new decl_stmt System.Collections.Generic.IList < = for = < ++ decl_stmt Spring.Objects.PropertyValue = decl_stmt object = call Spring.Objects.Factory.Support.ObjectDefinitionValueResolver.ResolveValueIfNecessary(string,IObjectDefinition,string,object) call Spring.Objects.Factory.Support.ObjectDefinitionValueResolver.ResolveValueIfNecessary(string,IObjectDefinition,string,object) call Spring.Objects.Factory.Support.ObjectDefinitionValueResolver.ResolveValueIfNecessary(string,IObjectDefinition,string,object) call Spring.Objects.Factory.Support.ObjectDefinitionValueResolver.ResolveValueIfNecessary(string,IObjectDefinition,string,object) call Spring.Objects.Factory.Support.ObjectDefinitionValueResolver.ResolveValueIfNecessary(string,IObjectDefinition,string,object) decl_stmt Spring.Objects.PropertyValue = new call Spring.Objects.MutablePropertyValues.SetPropertyValueAt(PropertyValue,int) call Spring.Objects.MutablePropertyValues.SetPropertyValueAt(PropertyValue,int) call Spring.Objects.MutablePropertyValues.SetPropertyValueAt(PropertyValue,int) call Spring.Objects.MutablePropertyValues.SetPropertyValueAt(PropertyValue,int) call Spring.Objects.MutablePropertyValues.SetPropertyValueAt(PropertyValue,int) try catch throw new + protected virtual protected virtual return new IPropertyValues ListSet string decl PropertyInfo protected protected decl_stmt ListSet = new decl_stmt Spring.Objects.IPropertyValues = decl_stmt System.Reflection.PropertyInfo = foreach in decl_stmt string = if && ! && ! call Spring.Objects.IPropertyValues.Contains(string) call Spring.Objects.IPropertyValues.Contains(string) call Spring.Objects.IPropertyValues.Contains(string) call Spring.Objects.IPropertyValues.Contains(string) call Spring.Objects.IPropertyValues.Contains(string) && ! call ListSet.Add() call ListSet.Add() call ListSet.Add() call ListSet.Add() call ListSet.Add() return typeof string ISet public override public override decl_stmt Spring.Collections.ISet = foreach in IInstantiationAwareObjectPostProcessor bool decl IList MutablePropertyValues bool bool IInstantiationAwareObjectPostProcessor IPropertyValues protected protected decl_stmt bool = if foreach in decl_stmt Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor = as if != if ! call Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor.PostProcessAfterInstantiation(object,string) call Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor.PostProcessAfterInstantiation(object,string) call Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor.PostProcessAfterInstantiation(object,string) call Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor.PostProcessAfterInstantiation(object,string) call Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor.PostProcessAfterInstantiation(object,string) = break if ! return decl_stmt Spring.Objects.IPropertyValues = if == if > throw new return if == || == decl_stmt Spring.Objects.MutablePropertyValues = new if == if == = decl_stmt bool = decl_stmt bool = != if || decl_stmt System.Collections.Generic.IList < = if foreach in decl_stmt Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor = as if != = call Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor.PostProcessPropertyValues(IPropertyValues,IList,object,string) call Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor.PostProcessPropertyValues(IPropertyValues,IList,object,string) call Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor.PostProcessPropertyValues(IPropertyValues,IList,object,string) call Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor.PostProcessPropertyValues(IPropertyValues,IList,object,string) call Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor.PostProcessPropertyValues(IPropertyValues,IList,object,string) if == return if RuntimeObjectReference object protected protected foreach in foreach in decl_stmt object = if is decl_stmt Spring.Objects.Factory.Config.RuntimeObjectReference = = else if is = else if is string = as string else throw new + decl string object protected protected decl_stmt string = foreach in if decl_stmt object = region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + endregion else region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + endregion decl IDictionary decl string Type protected protected decl_stmt string = foreach in decl_stmt System.Type = decl_stmt System.Collections.Generic.IDictionary < = if != && == region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + endregion else if != && > throw new + + else region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion public public call Spring.Collections.ISet.Add(object) call Spring.Collections.ISet.Add(object) call Spring.Collections.ISet.Add(object) call Spring.Collections.ISet.Add(object) call Spring.Collections.ISet.Add(object) object bool IObjectWrapper protected internal override protected internal override if != && > foreach in region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion try catch throw new + if return decl_stmt object = decl_stmt Spring.Objects.IObjectWrapper = decl_stmt bool = try if = if != return = = if && if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + + = if ! = catch if throw catch if throw new + return protected virtual protected virtual protected virtual protected virtual decl ConstructorInfo Type protected protected decl_stmt System.Type = if return decl_stmt System.Reflection.ConstructorInfo = if != || == || || ! return return protected virtual protected virtual return new decl ConstructorInfo SmartInstantiationAwareObjectPostProcessor protected virtual protected virtual if foreach in if typeof decl_stmt Spring.Objects.Factory.Config.SmartInstantiationAwareObjectPostProcessor = decl_stmt System.Reflection.ConstructorInfo = call SmartInstantiationAwareObjectPostProcessor.DetermineCandidateConstructors() call SmartInstantiationAwareObjectPostProcessor.DetermineCandidateConstructors() call SmartInstantiationAwareObjectPostProcessor.DetermineCandidateConstructors() call SmartInstantiationAwareObjectPostProcessor.DetermineCandidateConstructors() call SmartInstantiationAwareObjectPostProcessor.DetermineCandidateConstructors() if != return return ConstructorResolver protected virtual protected virtual decl_stmt Spring.Objects.Factory.Support.ConstructorResolver = new return call Spring.Objects.Factory.Support.ConstructorResolver.InstantiateUsingFactoryMethod(string,RootObjectDefinition,object) call Spring.Objects.Factory.Support.ConstructorResolver.InstantiateUsingFactoryMethod(string,RootObjectDefinition,object) call Spring.Objects.Factory.Support.ConstructorResolver.InstantiateUsingFactoryMethod(string,RootObjectDefinition,object) call Spring.Objects.Factory.Support.ConstructorResolver.InstantiateUsingFactoryMethod(string,RootObjectDefinition,object) call Spring.Objects.Factory.Support.ConstructorResolver.InstantiateUsingFactoryMethod(string,RootObjectDefinition,object) ConstructorResolver protected protected decl_stmt Spring.Objects.Factory.Support.ConstructorResolver = new return call Spring.Objects.Factory.Support.ConstructorResolver.AutowireConstructor(string,RootObjectDefinition,ConstructorInfo,object) call Spring.Objects.Factory.Support.ConstructorResolver.AutowireConstructor(string,RootObjectDefinition,ConstructorInfo,object) call Spring.Objects.Factory.Support.ConstructorResolver.AutowireConstructor(string,RootObjectDefinition,ConstructorInfo,object) call Spring.Objects.Factory.Support.ConstructorResolver.AutowireConstructor(string,RootObjectDefinition,ConstructorInfo,object) call Spring.Objects.Factory.Support.ConstructorResolver.AutowireConstructor(string,RootObjectDefinition,ConstructorInfo,object) decl IList IInstantiationAwareObjectPostProcessor DependencyCheckingMode protected protected decl_stmt DependencyCheckingMode = if == return decl_stmt System.Collections.Generic.IList < = if foreach in decl_stmt Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor = as if != = call Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor.PostProcessPropertyValues(IPropertyValues,IList,object,string) call Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor.PostProcessPropertyValues(IPropertyValues,IList,object,string) call Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor.PostProcessPropertyValues(IPropertyValues,IList,object,string) call Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor.PostProcessPropertyValues(IPropertyValues,IList,object,string) call Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor.PostProcessPropertyValues(IPropertyValues,IList,object,string) if == return decl IList DependencyCheckingMode private private < decl_stmt DependencyCheckingMode = decl_stmt System.Collections.Generic.IList < = if > throw new decl IList PropertyInfo decl List private < private < lock decl_stmt System.Collections.Generic.IList < if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out decl_stmt System.Collections.Generic.List < = new < for = - >= -- decl_stmt System.Reflection.PropertyInfo = if call decl List.RemoveAt() call decl List.RemoveAt() call decl List.RemoveAt() call decl List.RemoveAt() call decl List.RemoveAt() = call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() return bool bool bool private private decl_stmt bool = ! decl_stmt bool = decl_stmt bool = return || || MethodInfo protected virtual protected virtual if typeof region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion if region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion try decl_stmt System.Reflection.MethodInfo = if == throw new + + call MethodInfo.Invoke() call MethodInfo.Invoke() call MethodInfo.Invoke() call MethodInfo.Invoke() call MethodInfo.Invoke() catch throw new + + catch throw new + + MethodInfo decl object bool protected virtual protected virtual decl_stmt bool = decl_stmt System.Reflection.MethodInfo = if == = new typeof bool if != = if == region region call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() + + + + endregion else decl_stmt object = new : try call MethodInfo.Invoke() call MethodInfo.Invoke() call MethodInfo.Invoke() call MethodInfo.Invoke() call MethodInfo.Invoke() catch region region call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() + + + + endregion catch private private call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() protected override protected override using new call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() decl IList private private decl_stmt System.Collections.Generic.IList < = foreach in protected protected region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion try if if == throw new + return return catch throw RootObjectDefinition public override public override decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = if != return new return public override public override return new new object protected virtual protected virtual decl_stmt object = region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion if typeof region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion = if typeof region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion = = = return protected override protected override return object RootObjectDefinition public virtual public virtual decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = new if == return decl_stmt object = call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() new return RootObjectDefinition public virtual public virtual if != && != throw new decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = new new object public virtual public virtual region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + + endregion decl_stmt object = foreach in = if == throw new + return object public virtual public virtual region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + + endregion decl_stmt object = foreach in = if == throw new + return