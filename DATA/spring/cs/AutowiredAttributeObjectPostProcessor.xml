Spring.Objects.Factory.Attributes System using System.Collections using System.Collections.Generic using System.Reflection using System.Linq using Spring.Collections using Spring.Core using Spring.Objects.Factory.Config using Common.Logging using Spring.Objects.Factory.Support using class Spring.Objects.Factory.Attributes.AutowiredAttributeObjectPostProcessor super super InstantiationAwareObjectPostProcessorAdapter super IObjectFactoryAware super IOrdered IConfigurableListableObjectFactory decl IList decl IDictionary SynchronizedHashtable ILog int return private private = = public public if ! call decl IList.Contains() call decl IList.Contains() call decl IList.Contains() call decl IList.Contains() call decl IList.Contains() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() decl ConstructorInfo AutowiredAttribute decl ConstructorInfo decl IList ConstructorInfo ConstructorInfo public override public override decl_stmt System.Reflection.ConstructorInfo = call Spring.Collections.SynchronizedHashtable.ContainsKey(object) call Spring.Collections.SynchronizedHashtable.ContainsKey(object) call Spring.Collections.SynchronizedHashtable.ContainsKey(object) call Spring.Collections.SynchronizedHashtable.ContainsKey(object) call Spring.Collections.SynchronizedHashtable.ContainsKey(object) : if == lock = call Spring.Collections.SynchronizedHashtable.ContainsKey(object) call Spring.Collections.SynchronizedHashtable.ContainsKey(object) call Spring.Collections.SynchronizedHashtable.ContainsKey(object) call Spring.Collections.SynchronizedHashtable.ContainsKey(object) call Spring.Collections.SynchronizedHashtable.ContainsKey(object) : if == decl_stmt System.Reflection.ConstructorInfo = decl_stmt System.Collections.Generic.IList < = new < decl_stmt System.Reflection.ConstructorInfo = decl_stmt System.Reflection.ConstructorInfo = foreach in decl_stmt Spring.Objects.Factory.Attributes.AutowiredAttribute = typeof as if != if != throw new + + + if == throw new + if if > throw new + + + = call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() else if == = if > if == && != call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() = call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() else = new call Spring.Collections.SynchronizedHashtable.Add(object,object) call Spring.Collections.SynchronizedHashtable.Add(object,object) call Spring.Collections.SynchronizedHashtable.Add(object,object) call Spring.Collections.SynchronizedHashtable.Add(object,object) call Spring.Collections.SynchronizedHashtable.Add(object,object) return > : var var public override public override decl_stmt var = call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) as if != decl_stmt var = call var.CheckConfigMembers() call var.CheckConfigMembers() call var.CheckConfigMembers() call var.CheckConfigMembers() call var.CheckConfigMembers() return var public override public override < decl_stmt var = try call var.Inject() call var.Inject() call var.Inject() call var.Inject() call var.Inject() catch throw new return InjectionMetadata private private decl_stmt Spring.Objects.Factory.Attributes.InjectionMetadata if call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out return lock if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out = call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() return var var var var private private decl_stmt var = new < do foreach in decl_stmt var = new < foreach in | | decl_stmt var = decl_stmt var = if is = if != && == call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() new foreach in | | decl_stmt var = decl_stmt var = if is = if != && == call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() new foreach in | | decl_stmt var = decl_stmt var = if is = if != && == if call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() + continue if call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() + continue call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() new call var.InsertRange() call var.InsertRange() call var.InsertRange() call var.InsertRange() call var.InsertRange() = != && != typeof return new var var decl IList private static private static if == return decl_stmt var = call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) as if == return decl_stmt System.Collections.Generic.IList < = new < foreach in decl_stmt var = as string if ! call decl IList.Contains() call decl IList.Contains() call decl IList.Contains() call decl IList.Contains() call decl IList.Contains() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() = var private static private static if is decl_stmt var = return call IConfigurableListableObjectFactory.ResolveDependency() call IConfigurableListableObjectFactory.ResolveDependency() call IConfigurableListableObjectFactory.ResolveDependency() call IConfigurableListableObjectFactory.ResolveDependency() call IConfigurableListableObjectFactory.ResolveDependency() else if is return call IConfigurableListableObjectFactory.GetObject() call IConfigurableListableObjectFactory.GetObject() call IConfigurableListableObjectFactory.GetObject() call IConfigurableListableObjectFactory.GetObject() call IConfigurableListableObjectFactory.GetObject() else return var var var IList Object public override public override decl_stmt var = try decl_stmt System.Object if = else decl_stmt var = new decl_stmt System.Collections.Generic.IList = new = call IConfigurableListableObjectFactory.ResolveDependency() call IConfigurableListableObjectFactory.ResolveDependency() call IConfigurableListableObjectFactory.ResolveDependency() call IConfigurableListableObjectFactory.ResolveDependency() call IConfigurableListableObjectFactory.ResolveDependency() lock if ! if != || = if == decl_stmt var = as string if call IConfigurableListableObjectFactory.ContainsObject() call IConfigurableListableObjectFactory.ContainsObject() call IConfigurableListableObjectFactory.ContainsObject() call IConfigurableListableObjectFactory.ContainsObject() call IConfigurableListableObjectFactory.ContainsObject() if call IConfigurableListableObjectFactory.IsTypeMatch() call IConfigurableListableObjectFactory.IsTypeMatch() call IConfigurableListableObjectFactory.IsTypeMatch() call IConfigurableListableObjectFactory.IsTypeMatch() call IConfigurableListableObjectFactory.IsTypeMatch() call var.GetType() call var.GetType() call var.GetType() call var.GetType() call var.GetType() = new else = = if != call var.SetValue() call var.SetValue() call var.SetValue() call var.SetValue() call var.SetValue() catch throw new + var var IList Object var public override public override decl_stmt var = try decl_stmt System.Object if = else decl_stmt var = new decl_stmt System.Collections.Generic.IList = new = call IConfigurableListableObjectFactory.ResolveDependency() call IConfigurableListableObjectFactory.ResolveDependency() call IConfigurableListableObjectFactory.ResolveDependency() call IConfigurableListableObjectFactory.ResolveDependency() call IConfigurableListableObjectFactory.ResolveDependency() lock if ! if != || = if == decl_stmt var = as string if call IConfigurableListableObjectFactory.ContainsObject() call IConfigurableListableObjectFactory.ContainsObject() call IConfigurableListableObjectFactory.ContainsObject() call IConfigurableListableObjectFactory.ContainsObject() call IConfigurableListableObjectFactory.ContainsObject() if call IConfigurableListableObjectFactory.IsTypeMatch() call IConfigurableListableObjectFactory.IsTypeMatch() call IConfigurableListableObjectFactory.IsTypeMatch() call IConfigurableListableObjectFactory.IsTypeMatch() call IConfigurableListableObjectFactory.IsTypeMatch() call var.GetType() call var.GetType() call var.GetType() call var.GetType() call var.GetType() = new else = = if != call var.SetValue() call var.SetValue() call var.SetValue() call var.SetValue() call var.SetValue() catch throw new + string var decl Type MethodParameter decl Object MethodInfo IList public override public override decl_stmt System.Reflection.MethodInfo = as try decl_stmt System.Object if = else decl_stmt System.Type = call MethodInfo.GetParameters() call MethodInfo.GetParameters() call MethodInfo.GetParameters() call MethodInfo.GetParameters() call MethodInfo.GetParameters() = new decl_stmt var = new decl_stmt System.Collections.Generic.IList = new for = < ++ decl_stmt Spring.Core.MethodParameter = new = new = call IConfigurableListableObjectFactory.ResolveDependency() call IConfigurableListableObjectFactory.ResolveDependency() call IConfigurableListableObjectFactory.ResolveDependency() call IConfigurableListableObjectFactory.ResolveDependency() call IConfigurableListableObjectFactory.ResolveDependency() if == && ! = break lock if ! if != = new for = < ++ = if == for = < ++ decl_stmt string = as string if call IConfigurableListableObjectFactory.ContainsObject() call IConfigurableListableObjectFactory.ContainsObject() call IConfigurableListableObjectFactory.ContainsObject() call IConfigurableListableObjectFactory.ContainsObject() call IConfigurableListableObjectFactory.ContainsObject() if call IConfigurableListableObjectFactory.IsTypeMatch() call IConfigurableListableObjectFactory.IsTypeMatch() call IConfigurableListableObjectFactory.IsTypeMatch() call IConfigurableListableObjectFactory.IsTypeMatch() call IConfigurableListableObjectFactory.IsTypeMatch() = new else = = if != call MethodInfo.Invoke() call MethodInfo.Invoke() call MethodInfo.Invoke() call MethodInfo.Invoke() call MethodInfo.Invoke() catch throw new + decl Object private private if == return decl_stmt System.Object = new for = < ++ = return