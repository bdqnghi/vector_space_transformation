Spring.Web.Services System using System.Collections using System.Reflection using System.Reflection.Emit using System.Web.Services using Spring.Core.TypeResolution using Spring.Objects.Factory using Spring.Util using Spring.Proxy using class Spring.Web.Services.WebServiceExporter super super IInitializingObject super IObjectFactoryAware super IObjectNameAware super IDisposable decl string Type string IDictionary Type WsiProfiles string string string IObjectFactory string IList string IDictionary WebServiceExporter object public static public static decl_stmt Spring.Web.Services.WebServiceExporter lock = if == throw new decl_stmt object = call Spring.Web.Services.WebServiceExporter.GetTargetInstance() call Spring.Web.Services.WebServiceExporter.GetTargetInstance() call Spring.Web.Services.WebServiceExporter.GetTargetInstance() call Spring.Web.Services.WebServiceExporter.GetTargetInstance() call Spring.Web.Services.WebServiceExporter.GetTargetInstance() if == throw new return public public protected virtual protected virtual if lock call System.Collections.Generic.IDictionary.Remove(Object) call System.Collections.Generic.IDictionary.Remove(Object) call System.Collections.Generic.IDictionary.Remove(Object) call System.Collections.Generic.IDictionary.Remove(Object) call System.Collections.Generic.IDictionary.Remove(Object) = return = return = return = return = if == = return = return = return = return = return = protected protected return = protected protected return = public virtual public virtual public virtual public virtual return != : call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) protected virtual protected virtual if == throw new IProxyTypeBuilder protected virtual protected virtual decl_stmt Spring.Proxy.IProxyTypeBuilder = new = = = call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) if != && > = = = = call Spring.Proxy.IProxyTypeBuilder.BuildProxyType() call Spring.Proxy.IProxyTypeBuilder.BuildProxyType() call Spring.Proxy.IProxyTypeBuilder.BuildProxyType() call Spring.Proxy.IProxyTypeBuilder.BuildProxyType() call Spring.Proxy.IProxyTypeBuilder.BuildProxyType() private private return call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) decl ReflectionUtils private static private static decl_stmt CustomAttributeBuilderBuilder = new typeof if == call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() return call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() decl ReflectionUtils private static private static decl_stmt CustomAttributeBuilderBuilder = new typeof if call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() if call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() if call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() return call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() MethodAttributes ILGenerator ConstructorBuilder protected override protected override decl_stmt MethodAttributes = | | | decl_stmt System.Reflection.Emit.ConstructorBuilder = decl_stmt System.Reflection.Emit.ILGenerator = call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) bool IList bool protected override protected override decl_stmt System.Collections.Generic.IList = decl_stmt bool = decl_stmt bool = for = < ++ if typeof = = else if typeof = if ! call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) if ! call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) return bool IList protected override protected override decl_stmt System.Collections.Generic.IList = decl_stmt bool = foreach in if typeof = break if ! call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) typeof return protected override protected override return