Spring.Aspects.Exceptions System using System.Collections using System.Collections.Generic using System.Reflection using AopAlliance.Intercept using Common.Logging using Spring.Util using class attribute Spring.Aspects.Exceptions.ExceptionHandlerAdvice super super AbstractExceptionHandlerAdvice string string ILog ExceptionHandlerTable IList return = return = return = return Type Exception object public override public override try return catch decl_stmt System.Exception = throw catch decl_stmt object = if == return if call object.Equals() call object.Equals() call object.Equals() call object.Equals() call object.Equals() throw if call object.Equals() call object.Equals() call object.Equals() call object.Equals() call object.Equals() throw else if ! call object.Equals() call object.Equals() call object.Equals() call object.Equals() call object.Equals() return else decl_stmt System.Type = return && ! call System.Type.Equals(Object) call System.Type.Equals(Object) call System.Type.Equals(Object) call System.Type.Equals(Object) call System.Type.Equals(Object) typeof : string IExceptionHandler IExceptionHandler IList public override public override if == throw new decl_stmt System.Collections.Generic.IList = new foreach in decl_stmt string = as string if != decl_stmt Spring.Messaging.Listener.IExceptionHandler = if == throw new + + call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) decl_stmt Spring.Messaging.Listener.IExceptionHandler = as if != call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) = object decl Dictionary protected virtual protected virtual decl_stmt System.Collections.Generic.Dictionary < = new < call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() decl_stmt object = foreach in if != if = if ! return return ParsedAdviceExpression protected virtual protected virtual decl_stmt Spring.Aspects.ParsedAdviceExpression = if ! call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() + return return IExceptionHandler protected virtual protected virtual if >= decl_stmt Spring.Messaging.Listener.IExceptionHandler if call ExceptionHandlerTable.ContainsKey() call ExceptionHandlerTable.ContainsKey() call ExceptionHandlerTable.ContainsKey() call ExceptionHandlerTable.ContainsKey() call ExceptionHandlerTable.ContainsKey() = else = = = return else if >= decl_stmt Spring.Messaging.Listener.IExceptionHandler if call ExceptionHandlerTable.Contains() call ExceptionHandlerTable.Contains() call ExceptionHandlerTable.Contains() call ExceptionHandlerTable.Contains() call ExceptionHandlerTable.Contains() = else = = = return else if >= decl_stmt Spring.Messaging.Listener.IExceptionHandler if call ExceptionHandlerTable.Contains() call ExceptionHandlerTable.Contains() call ExceptionHandlerTable.Contains() call ExceptionHandlerTable.Contains() call ExceptionHandlerTable.Contains() = else = = = return else if >= decl_stmt Spring.Messaging.Listener.IExceptionHandler if call ExceptionHandlerTable.Contains() call ExceptionHandlerTable.Contains() call ExceptionHandlerTable.Contains() call ExceptionHandlerTable.Contains() call ExceptionHandlerTable.Contains() = else = = = return else if >= decl_stmt Spring.Messaging.Listener.IExceptionHandler if call ExceptionHandlerTable.Contains() call ExceptionHandlerTable.Contains() call ExceptionHandlerTable.Contains() call ExceptionHandlerTable.Contains() call ExceptionHandlerTable.Contains() = else = = return else if >= decl_stmt Spring.Messaging.Listener.IExceptionHandler if call ExceptionHandlerTable.Contains() call ExceptionHandlerTable.Contains() call ExceptionHandlerTable.Contains() call ExceptionHandlerTable.Contains() call ExceptionHandlerTable.Contains() = else = = = return else if >= decl_stmt Spring.Messaging.Listener.IExceptionHandler if call ExceptionHandlerTable.Contains() call ExceptionHandlerTable.Contains() call ExceptionHandlerTable.Contains() call ExceptionHandlerTable.Contains() call ExceptionHandlerTable.Contains() = else = = = return else call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() + return IExceptionHandler protected virtual protected virtual decl_stmt Spring.Messaging.Listener.IExceptionHandler = new return IExceptionHandler protected virtual protected virtual decl_stmt Spring.Messaging.Listener.IExceptionHandler = new return IExceptionHandler protected virtual protected virtual decl_stmt Spring.Messaging.Listener.IExceptionHandler = new return protected virtual protected virtual return new protected virtual protected virtual return new string int string int string protected protected decl_stmt int = + decl_stmt string = decl_stmt int = call string.IndexOf() call string.IndexOf() call string.IndexOf() call string.IndexOf() call string.IndexOf() decl_stmt string decl_stmt string if > = call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.Substring() = call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.Substring() else = if = else = if return else return private private foreach in public public lock = lock return public override public override typeof string typeof string return string