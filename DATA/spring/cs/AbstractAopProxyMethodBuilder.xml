Spring.Aop.Framework.DynamicProxy System using System.Collections using System.Reflection using System.Reflection.Emit using System.Runtime.Serialization using Spring.Proxy using class Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder super super AbstractProxyMethodBuilder FieldBuilder LocalBuilder LocalBuilder bool IAopProxyTypeGenerator LocalBuilder FieldBuilder LocalBuilder IDictionary LocalBuilder LocalBuilder IDictionary IDictionary protected override protected override = != typeof protected virtual protected virtual return + string protected virtual protected virtual decl_stmt string = call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) = typeof | | protected virtual protected virtual LocalBuilder decl Type protected protected if decl_stmt System.Type = decl_stmt System.Reflection.Emit.LocalBuilder = typeof typeof for = < ++ protected virtual protected virtual call IAopProxyTypeGenerator.PushAdvisedProxy() call IAopProxyTypeGenerator.PushAdvisedProxy() call IAopProxyTypeGenerator.PushAdvisedProxy() call IAopProxyTypeGenerator.PushAdvisedProxy() call IAopProxyTypeGenerator.PushAdvisedProxy() protected virtual protected virtual call IAopProxyTypeGenerator.PushAdvisedProxy() call IAopProxyTypeGenerator.PushAdvisedProxy() call IAopProxyTypeGenerator.PushAdvisedProxy() call IAopProxyTypeGenerator.PushAdvisedProxy() call IAopProxyTypeGenerator.PushAdvisedProxy() protected virtual protected virtual if return protected virtual protected virtual if != if return else protected virtual protected virtual = typeof = typeof = typeof if = typeof = typeof if = if call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) if call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) if call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) call System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,int,int) endif Label protected virtual protected virtual decl_stmt Label = Label Label protected virtual protected virtual decl_stmt Label = decl_stmt Label = if if if ! Type decl ParameterInfo protected virtual protected virtual decl_stmt System.Reflection.ParameterInfo = if else for = < ++ if + decl_stmt System.Type = Type protected protected if > typeof for = < ++ decl_stmt System.Type = + if = call Type.GetElementType() call Type.GetElementType() call Type.GetElementType() call Type.GetElementType() call Type.GetElementType() if || else Label protected virtual protected virtual decl_stmt Label = if protected static protected static if if == typeof int else if == typeof uint else if == typeof char else if == typeof bool else if == typeof float else if == typeof double else if == typeof short else if == typeof ushort else if == typeof long || == typeof ulong else else protected static protected static if if else if == typeof int else if == typeof short else if == typeof long || == typeof ulong else if == typeof char else if == typeof bool else if == typeof float else if == typeof double else else protected static protected static if ||