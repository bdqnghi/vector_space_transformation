Spring.Core System using System.Collections.Generic using System.Diagnostics using System.Linq using class attribute Spring.Core.AttributeAccessorSupport super super IAttributeAccessor decl IDictionary public virtual public virtual != if != call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() else public virtual public virtual != if call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() return return public virtual public virtual != if call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() return call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() return public public != return call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() return call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() decl string protected protected != decl_stmt string = foreach in var public override public override if == return if ! is return decl_stmt var = return call decl IDictionary.Equals() call decl IDictionary.Equals() call decl IDictionary.Equals() call decl IDictionary.Equals() call decl IDictionary.Equals() public override public override return call decl IDictionary.GetHashCode() call decl IDictionary.GetHashCode() call decl IDictionary.GetHashCode() call decl IDictionary.GetHashCode() call decl IDictionary.GetHashCode()