Spring.Expressions System using System.Collections using System.Collections.Generic using System.Threading using NUnit.Framework using Spring.Collections using class attribute Spring.Expressions.FunctionNodeTests StringLiteralNode IExpression FunctionNode decl Dictionary public public decl_stmt System.Collections.Generic.Dictionary < = new < decl_stmt Spring.Expressions.FunctionNode = new = decl_stmt Spring.Expressions.StringLiteralNode = new = call FunctionNode.addChild() call FunctionNode.addChild() call FunctionNode.addChild() call FunctionNode.addChild() call FunctionNode.addChild() decl_stmt Spring.Expressions.IExpression = call Spring.Expressions.IExpression.GetValue(object) call Spring.Expressions.IExpression.GetValue(object) call Spring.Expressions.IExpression.GetValue(object) call Spring.Expressions.IExpression.GetValue(object) call Spring.Expressions.IExpression.GetValue(object) StringLiteralNode IExpression FunctionNode decl Dictionary StringLiteralNode public public decl_stmt System.Collections.Generic.Dictionary < = new < = new decl_stmt Spring.Expressions.FunctionNode = new = decl_stmt Spring.Expressions.StringLiteralNode = new = call FunctionNode.addChild() call FunctionNode.addChild() call FunctionNode.addChild() call FunctionNode.addChild() call FunctionNode.addChild() decl_stmt Spring.Expressions.StringLiteralNode = new = call FunctionNode.addChild() call FunctionNode.addChild() call FunctionNode.addChild() call FunctionNode.addChild() call FunctionNode.addChild() decl_stmt Spring.Expressions.IExpression = call Spring.Expressions.IExpression.GetValue(object) call Spring.Expressions.IExpression.GetValue(object) call Spring.Expressions.IExpression.GetValue(object) call Spring.Expressions.IExpression.GetValue(object) call Spring.Expressions.IExpression.GetValue(object) private private return int decl Dictionary StopWatch WaitCallback StringLiteralNode FunctionNode public public decl_stmt System.Collections.Generic.Dictionary < = new < decl_stmt WaitCallback = = decl_stmt Spring.Expressions.FunctionNode = new = decl_stmt Spring.Expressions.StringLiteralNode = new = call FunctionNode.addChild() call FunctionNode.addChild() call FunctionNode.addChild() call FunctionNode.addChild() call FunctionNode.addChild() decl_stmt int = decl_stmt Spring.StopWatch = new using call Spring.StopWatch.Start(string) call Spring.StopWatch.Start(string) call Spring.StopWatch.Start(string) call Spring.StopWatch.Start(string) call Spring.StopWatch.Start(string) for = < ++ call StringLiteralNode.getText() call StringLiteralNode.getText() call StringLiteralNode.getText() call StringLiteralNode.getText() call StringLiteralNode.getText() using call Spring.StopWatch.Start(string) call Spring.StopWatch.Start(string) call Spring.StopWatch.Start(string) call Spring.StopWatch.Start(string) call Spring.StopWatch.Start(string) for = < ++ call FunctionNode.GetValue() call FunctionNode.GetValue() call FunctionNode.GetValue() call FunctionNode.GetValue() call FunctionNode.GetValue()