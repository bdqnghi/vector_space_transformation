Spring.Expressions System using System.Collections using System.Runtime.Serialization using Spring.Core.TypeResolution using Spring.Expressions.Parser.antlr.collections using class attribute Spring.Expressions.ArrayConstructorNode super super NodeWithArguments Type int AST decl int AST int ArrayList AST protected override protected override if == lock if == = decl_stmt Spring.Expressions.Parser.antlr.collections.AST = decl_stmt int = call Spring.Expressions.Parser.antlr.collections.AST.getNumberOfChildren() call Spring.Expressions.Parser.antlr.collections.AST.getNumberOfChildren() call Spring.Expressions.Parser.antlr.collections.AST.getNumberOfChildren() call Spring.Expressions.Parser.antlr.collections.AST.getNumberOfChildren() call Spring.Expressions.Parser.antlr.collections.AST.getNumberOfChildren() decl_stmt int = new if > decl_stmt int = decl_stmt Spring.Expressions.Parser.antlr.collections.AST = call Spring.Expressions.Parser.antlr.collections.AST.getFirstChild() call Spring.Expressions.Parser.antlr.collections.AST.getFirstChild() call Spring.Expressions.Parser.antlr.collections.AST.getFirstChild() call Spring.Expressions.Parser.antlr.collections.AST.getFirstChild() call Spring.Expressions.Parser.antlr.collections.AST.getFirstChild() while != ++ = int = call Spring.Expressions.Parser.antlr.collections.AST.getNextSibling() call Spring.Expressions.Parser.antlr.collections.AST.getNextSibling() call Spring.Expressions.Parser.antlr.collections.AST.getNextSibling() call Spring.Expressions.Parser.antlr.collections.AST.getNextSibling() call Spring.Expressions.Parser.antlr.collections.AST.getNextSibling() return else decl_stmt Spring.Expressions.Parser.antlr.collections.AST = if != decl_stmt System.Collections.ArrayList = return call System.Collections.ArrayList.ToArray(Type) call System.Collections.ArrayList.ToArray(Type) call System.Collections.ArrayList.ToArray(Type) call System.Collections.ArrayList.ToArray(Type) call System.Collections.ArrayList.ToArray(Type) throw new