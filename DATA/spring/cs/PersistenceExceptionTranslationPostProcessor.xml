Spring.Dao.Attributes System using Spring.Aop.Framework using Spring.Core using Spring.Dao using Spring.Dao.Support using Spring.Objects.Factory using Spring.Objects.Factory.Config using Spring.Stereotype using Spring.Util using class Spring.Dao.Attributes.PersistenceExceptionTranslationPostProcessor super super ProxyConfig super IObjectPostProcessor super IObjectFactoryAware super IOrdered PersistenceExceptionTranslationAdvisor Type = IListableObjectFactory decl_stmt Spring.Objects.Factory.IListableObjectFactory = as if == throw new = new return public public return Type ProxyFactory IAdvised public public decl_stmt Spring.Aop.Framework.IAdvised = as decl_stmt System.Type if != = else = if == return if if != call Spring.Aop.Framework.IAdvised.AddAdvisor(IAdvisor) call Spring.Aop.Framework.IAdvised.AddAdvisor(IAdvisor) call Spring.Aop.Framework.IAdvised.AddAdvisor(IAdvisor) call Spring.Aop.Framework.IAdvised.AddAdvisor(IAdvisor) call Spring.Aop.Framework.IAdvised.AddAdvisor(IAdvisor) return else decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new call ProxyFactory.CopyFrom() call ProxyFactory.CopyFrom() call ProxyFactory.CopyFrom() call ProxyFactory.CopyFrom() call ProxyFactory.CopyFrom() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() return call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) else return