Spring.Util System using System.Collections using System.Collections.Generic using System.Globalization using System.Reflection using System.Reflection.Emit using System.Security using System.Security.Permissions using System.Text using System.Runtime.CompilerServices using class Spring.Util.ReflectionUtils BindingFlags decl Dictionary MethodInfo public static public static return && == typeof <> StringBuilder string public static public static decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt string = for = < ++ call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) = call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) public static public static return MethodInfo bool decl MethodInfo int bool decl Type public static public static decl_stmt System.Reflection.MethodInfo = decl_stmt System.Reflection.MethodInfo = foreach in if == decl_stmt System.Type = < return decl_stmt bool = decl_stmt bool = == || == if ! && == for = < ++ = == if ! break if || if == = break if == decl_stmt int = if > - = + = return MethodInfo InterfaceMapping int public static public static decl_stmt System.Reflection.MethodInfo = if decl_stmt InterfaceMapping = decl_stmt int = = return public static public static return decl Type public static public static decl_stmt System.Type = new for = < ++ = return public static public static return decl string public static public static decl_stmt string = new for = < ++ = return bool MethodInfo bool decl MethodInfo public static public static decl_stmt System.Reflection.MethodInfo = if == = | | else decl_stmt System.Reflection.MethodInfo = | | foreach in if != continue if ! continue decl_stmt bool = if == = for = < ++ if != = break if ! continue decl_stmt bool = if == = if ! continue = break return public static public static public static < < where where return object int decl ParameterInfo Type bool bool decl object ParameterInfo MethodBase private static private static private static < < where where decl_stmt MethodBase = decl_stmt int = foreach in decl_stmt System.Reflection.ParameterInfo = decl_stmt bool = decl_stmt bool = decl_stmt object = == new : try if > decl_stmt System.Reflection.ParameterInfo = - if call System.Reflection.ParameterInfo.GetCustomAttributes(Type,bool) call System.Reflection.ParameterInfo.GetCustomAttributes(Type,bool) call System.Reflection.ParameterInfo.GetCustomAttributes(Type,bool) call System.Reflection.ParameterInfo.GetCustomAttributes(Type,bool) call System.Reflection.ParameterInfo.GetCustomAttributes(Type,bool) typeof > && >= = call ParameterInfo.ParameterType() call ParameterInfo.ParameterType() call ParameterInfo.ParameterType() call ParameterInfo.ParameterType() call ParameterInfo.ParameterType() call ParameterInfo.ParameterType() call ParameterInfo.ParameterType() call ParameterInfo.ParameterType() call ParameterInfo.ParameterType() if != = else for = < ++ decl_stmt System.Type = decl_stmt object = if == && && ! || != && ! call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() = break if == || != call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() = catch = if if return ++ if == = else throw new return public static public static public static < < where where return int Array int decl object public static public static decl_stmt object = new decl_stmt int = while < - = ++ decl_stmt System.Array = - decl_stmt int = while < call System.Array.SetValue(Object,int) call System.Array.SetValue(Object,int) call System.Array.SetValue(Object,int) call System.Array.SetValue(Object,int) call System.Array.SetValue(Object,int) ++ ++ - = return decl List public static < public static < if ! throw new decl_stmt System.Collections.Generic.List < = new < call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() return decl DefaultMemberAttribute public static public static decl_stmt System.Reflection.DefaultMemberAttribute = typeof if != foreach in if return return decl Type MethodInfo Type public static public static if == return decl_stmt System.Type = for = < ++ decl_stmt System.Type = if ! throw new + try decl_stmt System.Reflection.MethodInfo = call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) | | if != return catch return Array public static public static if ! return if == typeof return if == typeof return if == typeof return if decl_stmt System.Array = if == || == throw new return call System.Array.GetValue(int,int) call System.Array.GetValue(int,int) call System.Array.GetValue(int,int) call System.Array.GetValue(int,int) call System.Array.GetValue(int,int) return decl object public static public static decl_stmt object = new for = < ++ = return decl Type public static public static region region region region endregion decl_stmt System.Type = if != return for = < ++ if ! return return decl Type object public static public static if == || == return decl_stmt System.Type = new for = < ++ decl_stmt object = = != : typeof object return public static public static if return endif return new new public static public static if == || return return > decl MemberInfo public static public static decl_stmt System.Reflection.MemberInfo = new return MethodInfo string private static private static decl_stmt System.Reflection.MethodInfo = as decl_stmt string = as string return == decl IList IList decl object ConstructorInfo object IList ConstructorInfo decl PropertyInfo object decl IList PropertyInfo object public static public static region region region region if ! typeof throw new endregion decl_stmt System.Reflection.ConstructorInfo = if == && == = = call ConstructorInfo.GetParameters() call ConstructorInfo.GetParameters() call ConstructorInfo.GetParameters() call ConstructorInfo.GetParameters() call ConstructorInfo.GetParameters() if != decl_stmt object = try = call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) catch decl_stmt System.Collections.Generic.IList < = new < decl_stmt System.Collections.Generic.IList = new decl_stmt System.Collections.Generic.IList < = new < decl_stmt System.Collections.Generic.IList = new foreach in | if == typeof continue if if decl_stmt object = call System.Reflection.PropertyInfo.GetValue(Object) call System.Reflection.PropertyInfo.GetValue(Object) call System.Reflection.PropertyInfo.GetValue(Object) call System.Reflection.PropertyInfo.GetValue(Object) call System.Reflection.PropertyInfo.GetValue(Object) if != decl_stmt object = call System.Reflection.PropertyInfo.GetValue(Object) call System.Reflection.PropertyInfo.GetValue(Object) call System.Reflection.PropertyInfo.GetValue(Object) call System.Reflection.PropertyInfo.GetValue(Object) call System.Reflection.PropertyInfo.GetValue(Object) if == && == || != && call object.Equals() call object.Equals() call object.Equals() call object.Equals() call object.Equals() continue call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) else call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Reflection.PropertyInfo.GetValue(Object) call System.Reflection.PropertyInfo.GetValue(Object) call System.Reflection.PropertyInfo.GetValue(Object) call System.Reflection.PropertyInfo.GetValue(Object) call System.Reflection.PropertyInfo.GetValue(Object) if == decl_stmt System.Reflection.PropertyInfo = decl_stmt System.Reflection.ConstructorInfo = new if != = = new else = new if != = = new decl_stmt System.Reflection.PropertyInfo = new call decl IList.CopyTo() call decl IList.CopyTo() call decl IList.CopyTo() call decl IList.CopyTo() call decl IList.CopyTo() decl_stmt object = new call IList.CopyTo() call IList.CopyTo() call IList.CopyTo() call IList.CopyTo() call IList.CopyTo() return new else return new public static public static return new public static public static return public static public static return new public static public static params params params return decl FieldInfo decl PropertyInfo decl PropertyInfo IList decl object IList IList bool decl object ConstructorInfo Type IList decl Type decl object decl FieldInfo public static public static decl_stmt object = new decl_stmt System.Type = new decl_stmt System.Collections.Generic.IList = new decl_stmt System.Collections.Generic.IList = new for = < ++ = = decl_stmt System.Type = decl_stmt System.Reflection.PropertyInfo = call System.Type.GetProperties() call System.Type.GetProperties() call System.Type.GetProperties() call System.Type.GetProperties() call System.Type.GetProperties() | decl_stmt System.Reflection.FieldInfo = call System.Type.GetFields() call System.Type.GetFields() call System.Type.GetFields() call System.Type.GetFields() call System.Type.GetFields() | decl_stmt System.Collections.Generic.IList = new decl_stmt System.Collections.Generic.IList = new foreach in decl_stmt bool = for = < ++ if == call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) break else if == - = if for = < ++ if == call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) break else if == - throw new + + decl_stmt System.Reflection.ConstructorInfo = call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) decl_stmt System.Reflection.PropertyInfo = new call IList.CopyTo() call IList.CopyTo() call IList.CopyTo() call IList.CopyTo() call IList.CopyTo() decl_stmt object = new call IList.CopyTo() call IList.CopyTo() call IList.CopyTo() call IList.CopyTo() call IList.CopyTo() if == return new else decl_stmt System.Reflection.FieldInfo = new call IList.CopyTo() call IList.CopyTo() call IList.CopyTo() call IList.CopyTo() call IList.CopyTo() decl_stmt object = new call IList.CopyTo() call IList.CopyTo() call IList.CopyTo() call IList.CopyTo() call IList.CopyTo() return new decl IList decl object private static private static if == return decl_stmt System.Collections.Generic.IList < = as < if == return decl_stmt object = new for = < ++ = return ArrayList bool decl object decl IList public static public static decl_stmt System.Collections.ArrayList = new decl_stmt object = try decl_stmt System.Collections.Generic.IList < = if != call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) else if > if decl_stmt bool = foreach in if typeof = break if call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) else foreach in call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) else foreach in call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) catch call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) catch call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) call System.Collections.ArrayList.AddRange(ICollection) return BindingFlags MethodInfo MethodInfo decl MethodInfo public static public static decl_stmt BindingFlags = | | decl_stmt System.Reflection.MethodInfo = new for = < ++ decl_stmt System.Reflection.MethodInfo = decl_stmt System.Reflection.MethodInfo = if == || != && throw new = return public static public static return is as : public static public static if return call MethodInfo.Invoke() call MethodInfo.Invoke() call MethodInfo.Invoke() call MethodInfo.Invoke() call MethodInfo.Invoke() new return public static public static return public static public static return && == typeof <> decl object public static public static if return else if != && > && ! || || ! && || decl_stmt object = typeof foreach in if == return return decl List public static public static if decl_stmt System.Collections.Generic.List < = new < call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() return call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() else return Exception public static public static decl_stmt System.Exception = while != && ! is = = return Type Type Type public static public static decl_stmt System.Type = decl_stmt System.Type = decl_stmt System.Type if call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) = else if call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) = else throw new FieldInfo public static public static if == throw new if throw new decl_stmt System.Reflection.FieldInfo = | | | if != return call FieldInfo.GetValue() call FieldInfo.GetValue() call FieldInfo.GetValue() call FieldInfo.GetValue() call FieldInfo.GetValue() else throw new FieldInfo public static public static if == throw new if throw new if == throw new decl_stmt System.Reflection.FieldInfo = | | | if != if != throw new call FieldInfo.FieldType() call FieldInfo.FieldType() call FieldInfo.FieldType() call FieldInfo.FieldType() call FieldInfo.FieldType() call FieldInfo.FieldType() call FieldInfo.FieldType() call FieldInfo.FieldType() call FieldInfo.FieldType() call System.Reflection.FieldInfo.SetValue(Object,Object) call System.Reflection.FieldInfo.SetValue(Object,Object) call System.Reflection.FieldInfo.SetValue(Object,Object) call System.Reflection.FieldInfo.SetValue(Object,Object) call System.Reflection.FieldInfo.SetValue(Object,Object) else throw new MemberwiseCopyHandler private static private static decl_stmt MemberwiseCopyHandler = decl FieldInfo DynamicMethod MemberwiseCopyHandler ILGenerator private static private static decl_stmt MemberwiseCopyHandler if call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out return lock if call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out return decl_stmt System.Reflection.FieldInfo = new decl_stmt System.Reflection.Emit.DynamicMethod = new + new typeof object , typeof object , , decl_stmt System.Reflection.Emit.ILGenerator = call System.Reflection.Emit.DynamicMethod.GetILGenerator(int) call System.Reflection.Emit.DynamicMethod.GetILGenerator(int) call System.Reflection.Emit.DynamicMethod.GetILGenerator(int) call System.Reflection.Emit.DynamicMethod.GetILGenerator(int) call System.Reflection.Emit.DynamicMethod.GetILGenerator(int) call System.Reflection.Emit.ILGenerator.DeclareLocal(Type) call System.Reflection.Emit.ILGenerator.DeclareLocal(Type) call System.Reflection.Emit.ILGenerator.DeclareLocal(Type) call System.Reflection.Emit.ILGenerator.DeclareLocal(Type) call System.Reflection.Emit.ILGenerator.DeclareLocal(Type) call System.Reflection.Emit.ILGenerator.DeclareLocal(Type) call System.Reflection.Emit.ILGenerator.DeclareLocal(Type) call System.Reflection.Emit.ILGenerator.DeclareLocal(Type) call System.Reflection.Emit.ILGenerator.DeclareLocal(Type) call System.Reflection.Emit.ILGenerator.DeclareLocal(Type) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) foreach in call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) = call System.Reflection.Emit.DynamicMethod.CreateDelegate(System,Type) call System.Reflection.Emit.DynamicMethod.CreateDelegate(System,Type) call System.Reflection.Emit.DynamicMethod.CreateDelegate(System,Type) call System.Reflection.Emit.DynamicMethod.CreateDelegate(System,Type) call System.Reflection.Emit.DynamicMethod.CreateDelegate(System,Type) typeof