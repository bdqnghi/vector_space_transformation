Spring.Objects.Factory.Config System using System.Reflection using System.Text using Spring.Core using Spring.Core.TypeResolution using Spring.Util using class attribute Spring.Objects.Factory.Config.PropertyRetrievingFactoryObject super super AbstractFactoryObject super IInitializingObject object ObjectWrapper Type decl object PropertyInfo string TypeAssemblyHolder string StringBuilder int decl_stmt Spring.Core.TypeResolution.TypeAssemblyHolder = new decl_stmt string = decl_stmt int = do try = call string.LastIndexOf() call string.LastIndexOf() call string.LastIndexOf() call string.LastIndexOf() call string.LastIndexOf() region region region region if == - || == throw new + + endregion = call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.Substring() decl_stmt System.Text.StringBuilder = new if call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) = call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) catch == = call TypeAssemblyHolder.TypeName() call TypeAssemblyHolder.TypeName() call TypeAssemblyHolder.TypeName() call TypeAssemblyHolder.TypeName() call TypeAssemblyHolder.TypeName() call TypeAssemblyHolder.TypeName() call TypeAssemblyHolder.TypeName() call TypeAssemblyHolder.TypeName() call TypeAssemblyHolder.TypeName() + return if != = return = return = = new return = return == : return = int Type string string BindingFlags public override public override if == && == throw new if == throw new decl_stmt System.Type = decl_stmt BindingFlags = | if == |= = if == - = call System.Type.GetProperty(String,BindingFlags) call System.Type.GetProperty(String,BindingFlags) call System.Type.GetProperty(String,BindingFlags) call System.Type.GetProperty(String,BindingFlags) call System.Type.GetProperty(String,BindingFlags) else decl_stmt string = decl_stmt int = call string.IndexOf() call string.IndexOf() call string.IndexOf() call string.IndexOf() call string.IndexOf() decl_stmt string = call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.Substring() = call System.Type.GetProperty(String,BindingFlags) call System.Type.GetProperty(String,BindingFlags) call System.Type.GetProperty(String,BindingFlags) call System.Type.GetProperty(String,BindingFlags) call System.Type.GetProperty(String,BindingFlags) = new = call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.Substring() + else |= = = call ObjectWrapper.GetPropertyInfo() call ObjectWrapper.GetPropertyInfo() call ObjectWrapper.GetPropertyInfo() call ObjectWrapper.GetPropertyInfo() call ObjectWrapper.GetPropertyInfo() if == throw new if ! throw new object object protected override protected override decl_stmt object = decl_stmt object = if != = try if == && != = call ObjectWrapper.GetPropertyValue() call ObjectWrapper.GetPropertyValue() call ObjectWrapper.GetPropertyValue() call ObjectWrapper.GetPropertyValue() call ObjectWrapper.GetPropertyValue() else = catch throw new return