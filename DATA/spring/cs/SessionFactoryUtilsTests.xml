Spring.Data.NHibernate System.Collections using System.Data using System.Data.SqlClient using System.IO using NHibernate using NHibernate.Cfg using NHibernate.Connection using NHibernate.Driver using NHibernate.Engine using NUnit.Framework using Rhino.Mocks using Spring.Data.Common using class attribute Spring.Data.NHibernate.SessionFactoryUtilsTests ISessionFactoryImplementor IConnectionProvider IDriver IDbProvider MockRepository public public decl_stmt MockRepository = new decl_stmt ISessionFactoryImplementor = call MockRepository.CreateMultiMock() call MockRepository.CreateMultiMock() call MockRepository.CreateMultiMock() call MockRepository.CreateMultiMock() call MockRepository.CreateMultiMock() typeof typeof decl_stmt IDriver = call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() typeof call IDriver.CreateCommand() call IDriver.CreateCommand() call IDriver.CreateCommand() call IDriver.CreateCommand() call IDriver.CreateCommand() new decl_stmt IConnectionProvider = call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() call MockRepository.DynamicMock() typeof call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() decl_stmt Spring.Data.Common.IDbProvider = typeof call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll()