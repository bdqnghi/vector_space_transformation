Spring.Aop.Framework System using System.IO using System.Security.Policy using System.Collections using System.Reflection using System.Text using System.Threading using System.Web using AopAlliance.Aop using AopAlliance.Intercept using NUnit.Framework using Rhino.Mocks using Spring.Aop.Advice using Spring.Aop.Framework.Adapter using Spring.Aop.Interceptor using Spring.Aop.Support using Spring.Aop.Target using Spring.Context using Spring.Core.IO using Spring.Objects using Spring.Objects.Factory using Spring.Objects.Factory.Support using Spring.Objects.Factory.Xml using Spring.Proxy using Spring.Threading using class attribute Spring.Aop.Framework.ProxyFactoryObjectTests MockRepository IObjectFactory public public = new = new new ITestObject Exception public public decl_stmt System.Exception = new decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) try call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) catch ITestObject public public decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) ProxyFactoryObject IObjectFactory CountingBeforeAdvice ITestObject public public decl_stmt Spring.Objects.Factory.IObjectFactory = new new decl_stmt Spring.Aop.Framework.CountingBeforeAdvice = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() call CountingBeforeAdvice.GetCalls() decl_stmt Spring.Aop.Framework.ProxyFactoryObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) typeof IObjectFactory ProxyFactoryObject ITestObject public public decl_stmt Spring.Objects.Factory.IObjectFactory = new new decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() decl_stmt Spring.Aop.Framework.ProxyFactoryObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) typeof IObjectFactory IFactoryObject public public decl_stmt Spring.Objects.Factory.IObjectFactory = new new call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) decl_stmt Spring.Objects.Factory.IFactoryObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) typeof ITestObject ITestObject NopInterceptor IAdvised IAdvised int public public decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) = = decl_stmt Spring.Aop.Framework.IAdvised = decl_stmt Spring.Aop.Framework.IAdvised = decl_stmt int = decl_stmt Spring.Aop.Interceptor.NopInterceptor = new call Spring.Aop.Framework.IAdvised.AddAdvice(int,IAdvice) call Spring.Aop.Framework.IAdvised.AddAdvice(int,IAdvice) call Spring.Aop.Framework.IAdvised.AddAdvice(int,IAdvice) call Spring.Aop.Framework.IAdvised.AddAdvice(int,IAdvice) call Spring.Aop.Framework.IAdvised.AddAdvice(int,IAdvice) + = ITestObject ITestObject public public decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) != ISideEffectObject ISideEffectObject IObjectFactory int ISideEffectObject public public decl_stmt Spring.Objects.Factory.IObjectFactory = new new decl_stmt int = decl_stmt Spring.Objects.Factory.ISideEffectObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.ISideEffectObject.doWork() call Spring.Objects.Factory.ISideEffectObject.doWork() call Spring.Objects.Factory.ISideEffectObject.doWork() call Spring.Objects.Factory.ISideEffectObject.doWork() call Spring.Objects.Factory.ISideEffectObject.doWork() + = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) decl_stmt Spring.Objects.Factory.ISideEffectObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.ISideEffectObject.doWork() call Spring.Objects.Factory.ISideEffectObject.doWork() call Spring.Objects.Factory.ISideEffectObject.doWork() call Spring.Objects.Factory.ISideEffectObject.doWork() call Spring.Objects.Factory.ISideEffectObject.doWork() + decl_stmt Spring.Objects.Factory.ISideEffectObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) == + String ITestObject TestObject public public decl_stmt System.String = decl_stmt Spring.Data.NHibernate.TestObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) = decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() ITestObject IAdvised Exception string public public decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) decl_stmt string = decl_stmt Spring.Aop.Framework.IAdvised = decl_stmt System.Exception = new call Spring.Aop.Framework.IAdvised.AddAdvice(int,IAdvice) call Spring.Aop.Framework.IAdvised.AddAdvice(int,IAdvice) call Spring.Aop.Framework.IAdvised.AddAdvice(int,IAdvice) call Spring.Aop.Framework.IAdvised.AddAdvice(int,IAdvice) call Spring.Aop.Framework.IAdvised.AddAdvice(int,IAdvice) new try = catch ITimeStamped IIntroductionAdvisor ITimeStamped object ITestObject int long TimestampIntroductionInterceptor DebugAdvice object ProxyFactoryObject public public try decl_stmt Spring.Aop.Framework.ITimeStamped = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) catch decl_stmt Spring.Aop.Framework.ProxyFactoryObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) decl_stmt long = decl_stmt Spring.Aop.Framework.TimestampIntroductionInterceptor = new = new decl_stmt Spring.Aop.IIntroductionAdvisor = new typeof decl_stmt int = call ProxyFactoryObject.AddIntroduction() call ProxyFactoryObject.AddIntroduction() call ProxyFactoryObject.AddIntroduction() call ProxyFactoryObject.AddIntroduction() call ProxyFactoryObject.AddIntroduction() == + decl_stmt Spring.Aop.Framework.ITimeStamped = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) == new call ProxyFactoryObject.RemoveIntroduction() call ProxyFactoryObject.RemoveIntroduction() call ProxyFactoryObject.RemoveIntroduction() call ProxyFactoryObject.RemoveIntroduction() call ProxyFactoryObject.RemoveIntroduction() == decl_stmt object = try = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) catch = call ProxyFactoryObject.RemoveAdvice() call ProxyFactoryObject.RemoveAdvice() call ProxyFactoryObject.RemoveAdvice() call ProxyFactoryObject.RemoveAdvice() call ProxyFactoryObject.RemoveAdvice() new == decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = decl_stmt Spring.Aop.Advice.DebugAdvice = new call ProxyFactoryObject.AddAdvice() call ProxyFactoryObject.AddAdvice() call ProxyFactoryObject.AddAdvice() call ProxyFactoryObject.AddAdvice() call ProxyFactoryObject.AddAdvice() decl_stmt object = call ProxyFactoryObject.RemoveAdvice() call ProxyFactoryObject.RemoveAdvice() call ProxyFactoryObject.RemoveAdvice() call ProxyFactoryObject.RemoveAdvice() call ProxyFactoryObject.RemoveAdvice() = == ITimeStamped IIntroductionAdvisor ITimeStamped object ITestObject int long TimestampIntroductionInterceptor DebugAdvice object IAdvised public public try decl_stmt Spring.Aop.Framework.ITimeStamped = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) catch decl_stmt Spring.Aop.Framework.IAdvised = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) decl_stmt long = decl_stmt Spring.Aop.Framework.TimestampIntroductionInterceptor = new = new decl_stmt Spring.Aop.IIntroductionAdvisor = new typeof decl_stmt int = call Spring.Aop.Framework.IAdvised.AddIntroduction(IIntroductionAdvisor) call Spring.Aop.Framework.IAdvised.AddIntroduction(IIntroductionAdvisor) call Spring.Aop.Framework.IAdvised.AddIntroduction(IIntroductionAdvisor) call Spring.Aop.Framework.IAdvised.AddIntroduction(IIntroductionAdvisor) call Spring.Aop.Framework.IAdvised.AddIntroduction(IIntroductionAdvisor) == + decl_stmt Spring.Aop.Framework.ITimeStamped = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) == new call Spring.Aop.Framework.IAdvised.RemoveIntroduction(IIntroductionAdvisor) call Spring.Aop.Framework.IAdvised.RemoveIntroduction(IIntroductionAdvisor) call Spring.Aop.Framework.IAdvised.RemoveIntroduction(IIntroductionAdvisor) call Spring.Aop.Framework.IAdvised.RemoveIntroduction(IIntroductionAdvisor) call Spring.Aop.Framework.IAdvised.RemoveIntroduction(IIntroductionAdvisor) == decl_stmt object = try = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) catch decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) = = call Spring.Aop.Framework.IAdvised.RemoveAdvice(IAdvice) call Spring.Aop.Framework.IAdvised.RemoveAdvice(IAdvice) call Spring.Aop.Framework.IAdvised.RemoveAdvice(IAdvice) call Spring.Aop.Framework.IAdvised.RemoveAdvice(IAdvice) call Spring.Aop.Framework.IAdvised.RemoveAdvice(IAdvice) new == decl_stmt Spring.Aop.Advice.DebugAdvice = new call Spring.Aop.Framework.IAdvised.AddAdvice(int,IAdvice) call Spring.Aop.Framework.IAdvised.AddAdvice(int,IAdvice) call Spring.Aop.Framework.IAdvised.AddAdvice(int,IAdvice) call Spring.Aop.Framework.IAdvised.AddAdvice(int,IAdvice) call Spring.Aop.Framework.IAdvised.AddAdvice(int,IAdvice) decl_stmt object = call Spring.Aop.Framework.IAdvised.RemoveAdvice(IAdvice) call Spring.Aop.Framework.IAdvised.RemoveAdvice(IAdvice) call Spring.Aop.Framework.IAdvised.RemoveAdvice(IAdvice) call Spring.Aop.Framework.IAdvised.RemoveAdvice(IAdvice) call Spring.Aop.Framework.IAdvised.RemoveAdvice(IAdvice) = == IAdvised NopInterceptor ITestObject object public public decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) decl_stmt Spring.Aop.Framework.IAdvised = decl_stmt object = decl_stmt Spring.Aop.Interceptor.NopInterceptor = new call Spring.Aop.Framework.IAdvised.AddAdvice(int,IAdvice) call Spring.Aop.Framework.IAdvised.AddAdvice(int,IAdvice) call Spring.Aop.Framework.IAdvised.AddAdvice(int,IAdvice) call Spring.Aop.Framework.IAdvised.AddAdvice(int,IAdvice) call Spring.Aop.Framework.IAdvised.AddAdvice(int,IAdvice) = ITestObject object public public decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) == decl_stmt object = == = = = call ITestObject.ToString() call ITestObject.ToString() call ITestObject.ToString() call ITestObject.ToString() call ITestObject.ToString() CountingBeforeAdvice decl ThrowsAdviceInterceptorTests decl MyThrowsHandler decl ThrowsAdviceInterceptorTests IObjectFactory public public decl_stmt Spring.Objects.Factory.IObjectFactory = new new decl_stmt MyThrowsHandler = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) decl_stmt Spring.Aop.Framework.CountingBeforeAdvice = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call decl MyThrowsHandler.GetCalls() call decl MyThrowsHandler.GetCalls() call decl MyThrowsHandler.GetCalls() call decl MyThrowsHandler.GetCalls() call decl MyThrowsHandler.GetCalls() call decl ThrowsAdviceInterceptorTests.GetCalls() call decl ThrowsAdviceInterceptorTests.GetCalls() call decl ThrowsAdviceInterceptorTests.GetCalls() call decl ThrowsAdviceInterceptorTests.GetCalls() call decl ThrowsAdviceInterceptorTests.GetCalls() decl_stmt Spring.Aop.Framework.Adapter.IEcho = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) = call decl MyThrowsHandler.GetCalls() call decl MyThrowsHandler.GetCalls() call decl MyThrowsHandler.GetCalls() call decl MyThrowsHandler.GetCalls() call decl MyThrowsHandler.GetCalls() call decl ThrowsAdviceInterceptorTests.GetCalls() call decl ThrowsAdviceInterceptorTests.GetCalls() call decl ThrowsAdviceInterceptorTests.GetCalls() call decl ThrowsAdviceInterceptorTests.GetCalls() call decl ThrowsAdviceInterceptorTests.GetCalls() decl_stmt System.Exception = new try call CountingBeforeAdvice.EchoException() call CountingBeforeAdvice.EchoException() call CountingBeforeAdvice.EchoException() call CountingBeforeAdvice.EchoException() call CountingBeforeAdvice.EchoException() catch call decl ThrowsAdviceInterceptorTests.GetCalls() call decl ThrowsAdviceInterceptorTests.GetCalls() call decl ThrowsAdviceInterceptorTests.GetCalls() call decl ThrowsAdviceInterceptorTests.GetCalls() call decl ThrowsAdviceInterceptorTests.GetCalls() = new try call CountingBeforeAdvice.EchoException() call CountingBeforeAdvice.EchoException() call CountingBeforeAdvice.EchoException() call CountingBeforeAdvice.EchoException() call CountingBeforeAdvice.EchoException() catch call decl ThrowsAdviceInterceptorTests.GetCalls() call decl ThrowsAdviceInterceptorTests.GetCalls() call decl ThrowsAdviceInterceptorTests.GetCalls() call decl ThrowsAdviceInterceptorTests.GetCalls() call decl ThrowsAdviceInterceptorTests.GetCalls() ProxyFactoryObject IApplicationEventListener IAddedGlobalInterface typeof public typeof public decl_stmt IAddedGlobalInterface = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) == - decl_stmt Spring.Aop.Framework.ProxyFactoryObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() = == decl_stmt Spring.Context.IApplicationEventListener = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) = == - = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) ProxyFactoryObject ICommand GoodCommand IObjectFactory ICommand public public decl_stmt GoodCommand = new decl_stmt Spring.Objects.Factory.IObjectFactory = call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() typeof call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() decl_stmt Spring.Aop.Framework.ProxyFactoryObject = new = new typeof = = = call ProxyFactoryObject.AddAdvice() call ProxyFactoryObject.AddAdvice() call ProxyFactoryObject.AddAdvice() call ProxyFactoryObject.AddAdvice() call ProxyFactoryObject.AddAdvice() new decl_stmt Spring.AopQuickStart.Commands.ICommand = call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() decl_stmt Spring.AopQuickStart.Commands.ICommand = call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() ProxyFactoryObject ICommand GoodCommand IObjectFactory ICommand public public decl_stmt GoodCommand = new decl_stmt Spring.Objects.Factory.IObjectFactory = call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() typeof call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() decl_stmt Spring.Aop.Framework.ProxyFactoryObject = new = new typeof = = = call ProxyFactoryObject.AddAdvice() call ProxyFactoryObject.AddAdvice() call ProxyFactoryObject.AddAdvice() call ProxyFactoryObject.AddAdvice() call ProxyFactoryObject.AddAdvice() new decl_stmt Spring.AopQuickStart.Commands.ICommand = call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() decl_stmt Spring.AopQuickStart.Commands.ICommand = call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() ProxyFactoryObject private private decl_stmt Spring.Aop.Framework.ProxyFactoryObject = new call ProxyFactoryObject.AddInterface() call ProxyFactoryObject.AddInterface() call ProxyFactoryObject.AddInterface() call ProxyFactoryObject.AddInterface() call ProxyFactoryObject.AddInterface() typeof = call ProxyFactoryObject.AddAdvisor() call ProxyFactoryObject.AddAdvisor() call ProxyFactoryObject.AddAdvisor() call ProxyFactoryObject.AddAdvisor() call ProxyFactoryObject.AddAdvisor() new call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() return ProxyFactoryObject public public decl_stmt Spring.Aop.Framework.ProxyFactoryObject = try call ProxyFactoryObject.AddAdvisor() call ProxyFactoryObject.AddAdvisor() call ProxyFactoryObject.AddAdvisor() call ProxyFactoryObject.AddAdvisor() call ProxyFactoryObject.AddAdvisor() new catch ProxyFactoryObject typeof public typeof public decl_stmt Spring.Aop.Framework.ProxyFactoryObject = = call ProxyFactoryObject.RemoveAdvisor() call ProxyFactoryObject.RemoveAdvisor() call ProxyFactoryObject.RemoveAdvisor() call ProxyFactoryObject.RemoveAdvisor() call ProxyFactoryObject.RemoveAdvisor() new ProxyFactoryObject typeof public typeof public decl_stmt Spring.Aop.Framework.ProxyFactoryObject = = call ProxyFactoryObject.ReplaceAdvisor() call ProxyFactoryObject.ReplaceAdvisor() call ProxyFactoryObject.ReplaceAdvisor() call ProxyFactoryObject.ReplaceAdvisor() call ProxyFactoryObject.ReplaceAdvisor() new new GoodCommand NopInterceptor ICommand ICommand ProxyFactoryObject IObjectFactory public public decl_stmt GoodCommand = new decl_stmt Spring.Aop.Interceptor.NopInterceptor = new decl_stmt Spring.Objects.Factory.IObjectFactory = call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() typeof call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) typeof call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() decl_stmt Spring.Aop.Framework.ProxyFactoryObject = new = new typeof = = new = decl_stmt Spring.AopQuickStart.Commands.ICommand = call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() decl_stmt Spring.AopQuickStart.Commands.ICommand = call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call ICommand.Execute() call ICommand.Execute() call ICommand.Execute() call ICommand.Execute() call ICommand.Execute() call ICommand.Execute() call ICommand.Execute() call ICommand.Execute() call ICommand.Execute() call ICommand.Execute() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() MockRepository ProxyFactoryObject NopInterceptor GoodCommand IObjectFactory public public decl_stmt GoodCommand = new decl_stmt Spring.Aop.Interceptor.NopInterceptor = new decl_stmt MockRepository = new decl_stmt Spring.Objects.Factory.IObjectFactory = call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() typeof decl_stmt Spring.Aop.Framework.ProxyFactoryObject = new = new typeof = = new = using call MockRepository.Unordered() call MockRepository.Unordered() call MockRepository.Unordered() call MockRepository.Unordered() call MockRepository.Unordered() call Spring.Objects.Factory.IObjectFactory.IsSingleton(string) call Spring.Objects.Factory.IObjectFactory.IsSingleton(string) call Spring.Objects.Factory.IObjectFactory.IsSingleton(string) call Spring.Objects.Factory.IObjectFactory.IsSingleton(string) call Spring.Objects.Factory.IObjectFactory.IsSingleton(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call Spring.Objects.Factory.IObjectFactory.GetType(string) call GoodCommand.GetType() call GoodCommand.GetType() call GoodCommand.GetType() call GoodCommand.GetType() call GoodCommand.GetType() call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() ProxyFactoryObject RootObjectDefinition DefaultListableObjectFactory RootObjectDefinition public public try decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = new typeof decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = new typeof decl_stmt Spring.Objects.Factory.Support.DefaultListableObjectFactory = new call Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(string,IObjectDefinition) call Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(string,IObjectDefinition) call Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(string,IObjectDefinition) call Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(string,IObjectDefinition) call Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(string,IObjectDefinition) call Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(string,IObjectDefinition) call Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(string,IObjectDefinition) call Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(string,IObjectDefinition) call Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(string,IObjectDefinition) call Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(string,IObjectDefinition) decl_stmt Spring.Aop.Framework.ProxyFactoryObject = new = new typeof = = new = call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() finally = ProxyFactoryObject RootObjectDefinition DefaultListableObjectFactory RootObjectDefinition public public try decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = new typeof decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = new typeof decl_stmt Spring.Objects.Factory.Support.DefaultListableObjectFactory = new call Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(string,IObjectDefinition) call Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(string,IObjectDefinition) call Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(string,IObjectDefinition) call Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(string,IObjectDefinition) call Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(string,IObjectDefinition) call Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(string,IObjectDefinition) call Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(string,IObjectDefinition) call Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(string,IObjectDefinition) call Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(string,IObjectDefinition) call Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(string,IObjectDefinition) decl_stmt Spring.Aop.Framework.ProxyFactoryObject = new = new typeof = = new = call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() finally = return = public public ProxyFactoryObject IObjectFactory public public decl_stmt Spring.Objects.Factory.IObjectFactory = call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() typeof decl_stmt Spring.Aop.Framework.ProxyFactoryObject = new = new typeof = = new = try call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() catch ProxyFactoryObject ICommand DoesntImplementAnyInterfaces IObjectFactory IAdvised public public decl_stmt Spring.Objects.Factory.IObjectFactory = call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() call MockRepository.CreateMock() typeof decl_stmt Spring.Aop.Framework.ProxyFactoryObject = new = new = new = decl_stmt Spring.Aop.Framework.IAdvised = call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() as decl_stmt Spring.AopQuickStart.Commands.ICommand = call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() as decl_stmt DoesntImplementAnyInterfaces = call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() as ProxyFactoryObject typeof public typeof public decl_stmt Spring.Aop.Framework.ProxyFactoryObject = new = ProxyFactoryObject typeof public typeof public decl_stmt Spring.Aop.Framework.ProxyFactoryObject = new = new typeof ProxyFactoryObject typeof public typeof public decl_stmt Spring.Aop.Framework.ProxyFactoryObject = new = new ProxyFactoryObject typeof public typeof public decl_stmt Spring.Aop.Framework.ProxyFactoryObject = new = new ProxyFactoryObject ICommand public public decl_stmt Spring.Aop.Framework.ProxyFactoryObject = new call ProxyFactoryObject.AddInterface() call ProxyFactoryObject.AddInterface() call ProxyFactoryObject.AddInterface() call ProxyFactoryObject.AddInterface() call ProxyFactoryObject.AddInterface() typeof call ProxyFactoryObject.AddAdvice() call ProxyFactoryObject.AddAdvice() call ProxyFactoryObject.AddAdvice() call ProxyFactoryObject.AddAdvice() call ProxyFactoryObject.AddAdvice() new = new decl_stmt Spring.AopQuickStart.Commands.ICommand = call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() try call ICommand.Execute() call ICommand.Execute() call ICommand.Execute() call ICommand.Execute() call ICommand.Execute() catch catch IObjectFactory ProxyFactoryObject ITestObject public public decl_stmt Spring.Objects.Factory.IObjectFactory = new new decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() call ITestObject.Name() decl_stmt Spring.Aop.Framework.ProxyFactoryObject = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) typeof typeof call ProxyFactoryObject.TargetSource() call ProxyFactoryObject.TargetSource() call ProxyFactoryObject.TargetSource() call ProxyFactoryObject.TargetSource() call ProxyFactoryObject.TargetSource() call ProxyFactoryObject.TargetSource() call ProxyFactoryObject.TargetSource() call ProxyFactoryObject.TargetSource() call ProxyFactoryObject.TargetSource() AppDomain AppDomainSetup ICommand object IAdvised ProxyFactoryObject = public = public decl_stmt System.AppDomain = try decl_stmt System.AppDomainSetup = new = = new decl_stmt object = call AppDomain.CreateInstanceAndUnwrap() call AppDomain.CreateInstanceAndUnwrap() call AppDomain.CreateInstanceAndUnwrap() call AppDomain.CreateInstanceAndUnwrap() call AppDomain.CreateInstanceAndUnwrap() typeof decl_stmt Spring.Aop.Framework.ProxyFactoryObject = new call ProxyFactoryObject.AddInterface() call ProxyFactoryObject.AddInterface() call ProxyFactoryObject.AddInterface() call ProxyFactoryObject.AddInterface() call ProxyFactoryObject.AddInterface() typeof call ProxyFactoryObject.AddAdvice() call ProxyFactoryObject.AddAdvice() call ProxyFactoryObject.AddAdvice() call ProxyFactoryObject.AddAdvice() call ProxyFactoryObject.AddAdvice() new = decl_stmt Spring.Aop.Framework.IAdvised = call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() as decl_stmt Spring.AopQuickStart.Commands.ICommand = call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() as call ICommand.Execute() call ICommand.Execute() call ICommand.Execute() call ICommand.Execute() call ICommand.Execute() finally string XmlObjectFactory IResource MemoryStream HelperInterface2 = public = public decl_stmt string const const = decl_stmt System.IO.MemoryStream = new new decl_stmt Spring.Core.IO.IResource = new decl_stmt Spring.Objects.Factory.Xml.XmlObjectFactory = new decl_stmt HelperInterface2 = call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call HelperInterface2.SecondDoSomething() call HelperInterface2.SecondDoSomething() call HelperInterface2.SecondDoSomething() call HelperInterface2.SecondDoSomething() call HelperInterface2.SecondDoSomething() int decl AsyncTestMethod public public decl_stmt int const const = decl_stmt Spring.Threading.AsyncTestMethod = new for = < ++ = new new for = < ++ for = < ++ ITestObject ITestObject ProxyFactoryObject private private decl_stmt Spring.Aop.Framework.ProxyFactoryObject = decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = for = < ++ decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() as = ProxyFactoryObject Type Type public public decl_stmt Spring.Aop.Framework.ProxyFactoryObject = decl_stmt System.Type = call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() decl_stmt System.Type = call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() ProxyFactoryObject Type Type public public decl_stmt Spring.Aop.Framework.ProxyFactoryObject = decl_stmt System.Type = call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() = new decl_stmt System.Type = call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() call Spring.Aop.Framework.ProxyFactoryObject.GetObject() public public public public if return private private try catch = public public throw new public public public public public public return public static public static public override public override return == typeof return = public public throw