Spring.Transaction.Interceptor System using System.Collections.Generic using System.Collections.Specialized using Spring.Aop using Spring.Aop.Framework using Spring.Aop.Framework.Adapter using Spring.Aop.Framework.DynamicProxy using Spring.Aop.Support using Spring.Aop.Target using Spring.Core.TypeResolution using Spring.Objects.Factory using class Spring.Transaction.Interceptor.TransactionProxyFactoryObject super super ProxyConfig super IFactoryObject super IInitializingObject decl object decl object object IAdvisorAdapterRegistry object decl IList TransactionInterceptor TruePointcut = = = = = = = = = if != return call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() else if != && is return call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() else return public public return return IAdvisor ProxyFactory public public call TransactionInterceptor.AfterPropertiesSet() call TransactionInterceptor.AfterPropertiesSet() call TransactionInterceptor.AfterPropertiesSet() call TransactionInterceptor.AfterPropertiesSet() call TransactionInterceptor.AfterPropertiesSet() if == throw new decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new if != for = < ++ call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call IAdvisorAdapterRegistry.Wrap() call IAdvisorAdapterRegistry.Wrap() call IAdvisorAdapterRegistry.Wrap() call IAdvisorAdapterRegistry.Wrap() call IAdvisorAdapterRegistry.Wrap() if != decl_stmt Spring.Aop.IAdvisor = new call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() else call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() new if != for = < ++ call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call IAdvisorAdapterRegistry.Wrap() call IAdvisorAdapterRegistry.Wrap() call IAdvisorAdapterRegistry.Wrap() call IAdvisorAdapterRegistry.Wrap() call IAdvisorAdapterRegistry.Wrap() call ProxyFactory.CopyFrom() call ProxyFactory.CopyFrom() call ProxyFactory.CopyFrom() call ProxyFactory.CopyFrom() call ProxyFactory.CopyFrom() = if != = else if ! if is throw new + = = call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) protected protected if is return else return new