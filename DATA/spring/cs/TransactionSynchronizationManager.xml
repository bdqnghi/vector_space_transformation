Spring.Transaction.Support System using System.Collections using System.Data using System.Globalization using System.Threading using Spring.Core using Spring.Threading using Spring.Util using class Spring.Transaction.Support.TransactionSynchronizationManager string string decl Common string string decl ILog decl Logging string IDictionary decl_stmt System.Collections.Generic.IDictionary = as if != return else return new public static public static return object IDictionary public static public static decl_stmt System.Collections.Generic.IDictionary = as if == return if ! call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) return decl_stmt object = if != && call decl Common.Debug() call decl Common.Debug() call decl Common.Debug() call decl Common.Debug() call decl Common.Debug() + + + + + + return IDictionary public static public static decl_stmt System.Collections.Generic.IDictionary = as if == = new if call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) throw new + + + + + + call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) if call decl Common.Debug() call decl Common.Debug() call decl Common.Debug() call decl Common.Debug() call decl Common.Debug() + + + + + + Object IDictionary public static public static decl_stmt System.Collections.Generic.IDictionary = as if == || ! call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) throw new + + + + decl_stmt System.Object = call System.Collections.Generic.IDictionary.Remove(Object) call System.Collections.Generic.IDictionary.Remove(Object) call System.Collections.Generic.IDictionary.Remove(Object) call System.Collections.Generic.IDictionary.Remove(Object) call System.Collections.Generic.IDictionary.Remove(Object) if == if call decl Common.Debug() call decl Common.Debug() call decl Common.Debug() call decl Common.Debug() call decl Common.Debug() + + + + + + return ArrayList public static public static if throw new if call decl Common.Debug() call decl Common.Debug() call decl Common.Debug() call decl Common.Debug() call decl Common.Debug() decl_stmt System.Collections.ArrayList = new public static public static if ! throw new if call decl Common.Debug() call decl Common.Debug() call decl Common.Debug() call decl Common.Debug() call decl Common.Debug() public static public static = = = = object ArrayList public static public static if ! throw new decl_stmt System.Collections.ArrayList = as if != decl_stmt object = lock call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) private static private static return == : + + object ArrayList if ! throw new decl_stmt System.Collections.ArrayList = as if != decl_stmt object = lock return else return new IList decl_stmt System.Collections.Generic.IList = as return != return != if else return as string return != if else object decl_stmt object = if != return else return