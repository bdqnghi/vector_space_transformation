Spring.Aop.Framework System using System.Threading using AopAlliance.Aop using NUnit.Framework using Spring.Objects using AopAlliance.Intercept using Spring.Threading using Spring.Util using class attribute Spring.Aop.Framework.AopContextTests public public try do catch typeof public typeof public object string object public public decl_stmt string = decl_stmt object = decl_stmt object = typeof public typeof public = public = public int StopWatch ITestObject object PeformanceTestAopContextInterceptor ITestObject ITestObject public public decl_stmt int = decl_stmt Spring.StopWatch = new decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = new using call Spring.StopWatch.Start(string) call Spring.StopWatch.Start(string) call Spring.StopWatch.Start(string) call Spring.StopWatch.Start(string) call Spring.StopWatch.Start(string) for = < ++ decl_stmt object = call ITestObject.DoSomething() call ITestObject.DoSomething() call ITestObject.DoSomething() call ITestObject.DoSomething() call ITestObject.DoSomething() decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = new using call Spring.StopWatch.Start(string) call Spring.StopWatch.Start(string) call Spring.StopWatch.Start(string) call Spring.StopWatch.Start(string) call Spring.StopWatch.Start(string) for = < ++ decl_stmt object = call ITestObject.DoSomething() call ITestObject.DoSomething() call ITestObject.DoSomething() call ITestObject.DoSomething() call ITestObject.DoSomething() decl_stmt PeformanceTestAopContextInterceptor = new decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = using call Spring.StopWatch.Start(string) call Spring.StopWatch.Start(string) call Spring.StopWatch.Start(string) call Spring.StopWatch.Start(string) call Spring.StopWatch.Start(string) for = < ++ decl_stmt object = call ITestObject.DoSomething() call ITestObject.DoSomething() call ITestObject.DoSomething() call ITestObject.DoSomething() call ITestObject.DoSomething() = new = using call Spring.StopWatch.Start(string) call Spring.StopWatch.Start(string) call Spring.StopWatch.Start(string) call Spring.StopWatch.Start(string) call Spring.StopWatch.Start(string) for = < ++ decl_stmt object = call ITestObject.DoSomething() call ITestObject.DoSomething() call ITestObject.DoSomething() call ITestObject.DoSomething() call ITestObject.DoSomething() Object public public ++ decl_stmt System.Object = return AsyncTestMethod AsyncTestMethod = public = public decl_stmt Spring.Threading.AsyncTestMethod = new new decl_stmt Spring.Threading.AsyncTestMethod = new new call AsyncTestMethod.Start() call AsyncTestMethod.Start() call AsyncTestMethod.Start() call AsyncTestMethod.Start() call AsyncTestMethod.Start() call AsyncTestMethod.Start() call AsyncTestMethod.Start() call AsyncTestMethod.Start() call AsyncTestMethod.Start() call AsyncTestMethod.Start() call AsyncTestMethod.AssertNoException() call AsyncTestMethod.AssertNoException() call AsyncTestMethod.AssertNoException() call AsyncTestMethod.AssertNoException() call AsyncTestMethod.AssertNoException() call AsyncTestMethod.AssertNoException() call AsyncTestMethod.AssertNoException() call AsyncTestMethod.AssertNoException() call AsyncTestMethod.AssertNoException() call AsyncTestMethod.AssertNoException() string public virtual public virtual if != return decl_stmt string = return TestAopContextInterceptor ITestObject private private decl_stmt TestAopContextInterceptor = new decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call ITestObject.DoSomething() call ITestObject.DoSomething() call ITestObject.DoSomething() call ITestObject.DoSomething() call ITestObject.DoSomething() ITestObject ITestObject ITestObject ITestObject private private decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = new decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = new decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = return ProxyFactory private private decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new = call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() return call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) as Object public public ++ decl_stmt System.Object = return