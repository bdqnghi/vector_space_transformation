Spring.Data.NHibernate System using System.Collections using System.Collections.Generic using Common.Logging using NHibernate using NHibernate.Connection using NHibernate.Driver using NHibernate.Engine using Spring.Collections using Spring.Context using Spring.Dao using Spring.Data.Common using Spring.Data.Support using Spring.Objects.Factory.Config using Spring.Threading using Spring.Transaction.Support using Spring.Util using class Spring.Data.NHibernate.SessionFactoryUtils string ILog int SessionHolder public static public static try decl_stmt Spring.Data.NHibernate.SessionHolder = if != && ! if != return else return else if != return else return catch throw new public static public static try return catch throw new public static public static try return catch throw new public static public static return private static private static try return catch throw new ISession ISession SessionHolder SessionHolder FlushMode private static private static decl_stmt Spring.Data.NHibernate.SessionHolder = if != && ! decl_stmt Spring.Messaging.Ems.Common.ISession = if && = if != && ! call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() new = decl_stmt FlushMode = if == && ! = = else = if != return decl_stmt Spring.Messaging.Ems.Common.ISession = if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() decl_stmt Spring.Data.NHibernate.SessionHolder = if == = new else call Spring.Data.NHibernate.SessionHolder.AddSession(object,ISession) call Spring.Data.NHibernate.SessionHolder.AddSession(object,ISession) call Spring.Data.NHibernate.SessionHolder.AddSession(object,ISession) call Spring.Data.NHibernate.SessionHolder.AddSession(object,ISession) call Spring.Data.NHibernate.SessionHolder.AddSession(object,ISession) if = new = if != if ! && ! throw new + return ISession internal static internal static call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() decl_stmt Spring.Messaging.Ems.Common.ISession = != : return public static public static if != call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() try catch call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() catch call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() SessionHolder public static public static if == return decl_stmt Spring.Data.NHibernate.SessionHolder = return != && call SessionHolder.ContainsSession() call SessionHolder.ContainsSession() call SessionHolder.ContainsSession() call SessionHolder.ContainsSession() call SessionHolder.ContainsSession() string public static public static try decl_stmt string = != : return + catch call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() + + call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() + + if != call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() + + throw new public static public static if is return new if is return new if is return new if is return new if is return new if is return new if is return new if is return new if is return new if is return new if is return new if is return new return new public static public static if == return if ! IDictionary Set internal static internal static decl_stmt System.Collections.Generic.IDictionary = as if != && != && call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() = decl_stmt Spring.Collections.Set = call System.Data.Common.Utils.Set.Add(TElement) call System.Data.Common.Utils.Set.Add(TElement) call System.Data.Common.Utils.Set.Add(TElement) call System.Data.Common.Utils.Set.Add(TElement) call System.Data.Common.Utils.Set.Add(TElement) else IDictionary public static public static call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() decl_stmt System.Collections.Generic.IDictionary = as if == = new call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) new IDictionary public static public static if == throw new decl_stmt System.Collections.Generic.IDictionary = as return != && call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) IDictionary Set public static public static decl_stmt System.Collections.Generic.IDictionary = as if == || ! call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) throw new + + call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() decl_stmt Spring.Collections.Set = call System.Collections.Generic.IDictionary.Remove(Object) call System.Collections.Generic.IDictionary.Remove(Object) call System.Collections.Generic.IDictionary.Remove(Object) call System.Collections.Generic.IDictionary.Remove(Object) call System.Collections.Generic.IDictionary.Remove(Object) foreach in if == SessionHolder public static public static if == throw new decl_stmt Spring.Data.NHibernate.SessionHolder = if != && SessionHolder public static public static if == throw new if != decl_stmt Spring.Data.NHibernate.SessionHolder = if != && decl IList decl ValueHolder string decl ConstructorArgumentValues IConfigurableApplicationContext IObjectDefinition DriverBase ConstructorArgumentValues string Type ISessionFactoryImplementor ConnectionProvider IObjectDefinition ConstructorArgumentValues public static public static decl_stmt ISessionFactoryImplementor = as if != decl_stmt ConnectionProvider = as if != decl_stmt Spring.Context.IConfigurableApplicationContext = as if == throw new decl_stmt DriverBase = as if != decl_stmt System.Type = call DriverBase.CreateCommand() call DriverBase.CreateCommand() call DriverBase.CreateCommand() call DriverBase.CreateCommand() call DriverBase.CreateCommand() decl_stmt System.Collections.Generic.IList < = call IConfigurableApplicationContext.GetObjectNamesForType() call IConfigurableApplicationContext.GetObjectNamesForType() call IConfigurableApplicationContext.GetObjectNamesForType() call IConfigurableApplicationContext.GetObjectNamesForType() call IConfigurableApplicationContext.GetObjectNamesForType() typeof decl_stmt string = foreach in decl_stmt Spring.Objects.Factory.Config.IObjectDefinition = call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() decl_stmt Spring.Objects.Factory.Config.ConstructorArgumentValues = decl_stmt ValueHolder = as decl_stmt Spring.Objects.Factory.Config.IObjectDefinition = decl_stmt Spring.Objects.Factory.Config.ConstructorArgumentValues = decl_stmt string = call IObjectDefinition.GetArgumentValue() call IObjectDefinition.GetArgumentValue() call IObjectDefinition.GetArgumentValue() call IObjectDefinition.GetArgumentValue() call IObjectDefinition.GetArgumentValue() typeof string as string if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() decl_stmt Spring.Data.Common.IDbProvider = return else call ILog.Info() call ILog.Info() call ILog.Info() call ILog.Info() call ILog.Info() return IDbProvider public static public static decl_stmt Spring.Data.Common.IDbProvider = if != return new call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() return new