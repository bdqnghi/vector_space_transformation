Spring.Web.Support System using System.Collections using System.Reflection using System.Reflection.Emit using System.Web.UI using Spring.Context using Spring.Proxy using Spring.Util using class Spring.Web.Support.InterceptControlCollectionStrategy super super IInterceptionStrategy Hashtable Hashtable decl MethodInfo Type ControlCollection public public decl_stmt System.Type = if || ! return try decl_stmt System.Web.UI.ControlCollection = = = catch return return ControlCollection CreateControlCollectionDelegate private static private static decl_stmt CreateControlCollectionDelegate = decl_stmt System.Web.UI.ControlCollection = return CreateControlCollectionDelegate internal static internal static decl_stmt CreateControlCollectionDelegate = if != return return Type DynamicMethod CreateControlCollectionDelegate ILGenerator ConstructorInfo private static private static typeof typeof decl_stmt CreateControlCollectionDelegate = if == lock = if == decl_stmt System.Type = decl_stmt System.Reflection.ConstructorInfo = call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) new typeof decl_stmt System.Reflection.Emit.DynamicMethod = new typeof new typeof decl_stmt System.Reflection.Emit.ILGenerator = call System.Reflection.Emit.DynamicMethod.GetILGenerator(int) call System.Reflection.Emit.DynamicMethod.GetILGenerator(int) call System.Reflection.Emit.DynamicMethod.GetILGenerator(int) call System.Reflection.Emit.DynamicMethod.GetILGenerator(int) call System.Reflection.Emit.DynamicMethod.GetILGenerator(int) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) = call System.Reflection.Emit.DynamicMethod.CreateDelegate(System,Type) call System.Reflection.Emit.DynamicMethod.CreateDelegate(System,Type) call System.Reflection.Emit.DynamicMethod.CreateDelegate(System,Type) call System.Reflection.Emit.DynamicMethod.CreateDelegate(System,Type) call System.Reflection.Emit.DynamicMethod.CreateDelegate(System,Type) typeof = return MethodInfo SupportsWebDependencyInjectionTypeBuilder Type private static private static typeof decl_stmt System.Type = if == lock decl_stmt System.Reflection.MethodInfo = && = if == decl_stmt Spring.Web.Support.SupportsWebDependencyInjectionTypeBuilder = new = call Spring.Web.Support.SupportsWebDependencyInjectionTypeBuilder.BuildProxyType() call Spring.Web.Support.SupportsWebDependencyInjectionTypeBuilder.BuildProxyType() call Spring.Web.Support.SupportsWebDependencyInjectionTypeBuilder.BuildProxyType() call Spring.Web.Support.SupportsWebDependencyInjectionTypeBuilder.BuildProxyType() call Spring.Web.Support.SupportsWebDependencyInjectionTypeBuilder.BuildProxyType() = return