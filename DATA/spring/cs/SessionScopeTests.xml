Spring.Data.NHibernate.Support System using NHibernate using NUnit.Framework using Rhino.Mocks using Spring.Transaction.Support using class attribute Spring.Data.NHibernate.Support.SessionScopeTests MockRepository ISessionFactory bool FlushMode IInterceptor public public = new = < = < = = public public using = new ISession SessionHolder public public using call MockRepository.Ordered() call MockRepository.Ordered() call MockRepository.Ordered() call MockRepository.Ordered() call MockRepository.Ordered() decl_stmt Spring.Messaging.Ems.Common.ISession = < call ISessionFactory.OpenSession() call ISessionFactory.OpenSession() call ISessionFactory.OpenSession() call ISessionFactory.OpenSession() call ISessionFactory.OpenSession() = call ISession.Close() call ISession.Close() call ISession.Close() call ISession.Close() call ISession.Close() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() using = new decl_stmt Spring.Data.NHibernate.SessionHolder = call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() typeof public typeof public using = new public public using = new SessionScope public public decl_stmt Spring.Data.NHibernate.Support.SessionScope = new call Spring.Data.NHibernate.Support.SessionScope.Dispose() call Spring.Data.NHibernate.Support.SessionScope.Dispose() call Spring.Data.NHibernate.Support.SessionScope.Dispose() call Spring.Data.NHibernate.Support.SessionScope.Dispose() call Spring.Data.NHibernate.Support.SessionScope.Dispose() SessionScope public public decl_stmt Spring.Data.NHibernate.Support.SessionScope = using = new call Spring.Data.NHibernate.Support.SessionScope.Close() call Spring.Data.NHibernate.Support.SessionScope.Close() call Spring.Data.NHibernate.Support.SessionScope.Close() call Spring.Data.NHibernate.Support.SessionScope.Close() call Spring.Data.NHibernate.Support.SessionScope.Close() using = new SessionScope public public decl_stmt Spring.Data.NHibernate.Support.SessionScope = using = new call Spring.Data.NHibernate.Support.SessionScope.Open() call Spring.Data.NHibernate.Support.SessionScope.Open() call Spring.Data.NHibernate.Support.SessionScope.Open() call Spring.Data.NHibernate.Support.SessionScope.Open() call Spring.Data.NHibernate.Support.SessionScope.Open() call Spring.Data.NHibernate.Support.SessionScope.Close() call Spring.Data.NHibernate.Support.SessionScope.Close() call Spring.Data.NHibernate.Support.SessionScope.Close() call Spring.Data.NHibernate.Support.SessionScope.Close() call Spring.Data.NHibernate.Support.SessionScope.Close() SessionScope SessionHolder public public decl_stmt Spring.Data.NHibernate.Support.SessionScope = using = new decl_stmt Spring.Data.NHibernate.SessionHolder = as SessionScope ISession SessionHolder public public decl_stmt Spring.Messaging.Ems.Common.ISession = < call ISessionFactory.OpenSession() call ISessionFactory.OpenSession() call ISessionFactory.OpenSession() call ISessionFactory.OpenSession() call ISessionFactory.OpenSession() = call ISession.Close() call ISession.Close() call ISession.Close() call ISession.Close() call ISession.Close() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() decl_stmt Spring.Data.NHibernate.Support.SessionScope = using = new decl_stmt Spring.Data.NHibernate.SessionHolder = call SessionHolder.ContainsSession() call SessionHolder.ContainsSession() call SessionHolder.ContainsSession() call SessionHolder.ContainsSession() call SessionHolder.ContainsSession() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() SessionScope public public decl_stmt Spring.Data.NHibernate.Support.SessionScope = using = new using = new protected override protected override return public virtual public virtual return SessionScope ISession TestSessionScopeSettings SessionHolder public public decl_stmt TestSessionScopeSettings = call MockRepository.PartialMock() call MockRepository.PartialMock() call MockRepository.PartialMock() call MockRepository.PartialMock() call MockRepository.PartialMock() typeof decl_stmt Spring.Messaging.Ems.Common.ISession = < = decl_stmt Spring.Data.NHibernate.Support.SessionScope = new using call MockRepository.Ordered() call MockRepository.Ordered() call MockRepository.Ordered() call MockRepository.Ordered() call MockRepository.Ordered() call TestSessionScopeSettings.DoResolveEntityInterceptor() call TestSessionScopeSettings.DoResolveEntityInterceptor() call TestSessionScopeSettings.DoResolveEntityInterceptor() call TestSessionScopeSettings.DoResolveEntityInterceptor() call TestSessionScopeSettings.DoResolveEntityInterceptor() call ISessionFactory.OpenSession() call ISessionFactory.OpenSession() call ISessionFactory.OpenSession() call ISessionFactory.OpenSession() call ISessionFactory.OpenSession() = call ISession.Close() call ISession.Close() call ISession.Close() call ISession.Close() call ISession.Close() call TestSessionScopeSettings.DoResolveEntityInterceptor() call TestSessionScopeSettings.DoResolveEntityInterceptor() call TestSessionScopeSettings.DoResolveEntityInterceptor() call TestSessionScopeSettings.DoResolveEntityInterceptor() call TestSessionScopeSettings.DoResolveEntityInterceptor() call ISessionFactory.OpenSession() call ISessionFactory.OpenSession() call ISessionFactory.OpenSession() call ISessionFactory.OpenSession() call ISessionFactory.OpenSession() = call ISession.Close() call ISession.Close() call ISession.Close() call ISession.Close() call ISession.Close() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call Spring.Data.NHibernate.Support.SessionScope.Open() call Spring.Data.NHibernate.Support.SessionScope.Open() call Spring.Data.NHibernate.Support.SessionScope.Open() call Spring.Data.NHibernate.Support.SessionScope.Open() call Spring.Data.NHibernate.Support.SessionScope.Open() decl_stmt Spring.Data.NHibernate.SessionHolder = call SessionHolder.ContainsSession() call SessionHolder.ContainsSession() call SessionHolder.ContainsSession() call SessionHolder.ContainsSession() call SessionHolder.ContainsSession() call Spring.Data.NHibernate.Support.SessionScope.Close() call Spring.Data.NHibernate.Support.SessionScope.Close() call Spring.Data.NHibernate.Support.SessionScope.Close() call Spring.Data.NHibernate.Support.SessionScope.Close() call Spring.Data.NHibernate.Support.SessionScope.Close() call Spring.Data.NHibernate.Support.SessionScope.Open() call Spring.Data.NHibernate.Support.SessionScope.Open() call Spring.Data.NHibernate.Support.SessionScope.Open() call Spring.Data.NHibernate.Support.SessionScope.Open() call Spring.Data.NHibernate.Support.SessionScope.Open() = call SessionHolder.ContainsSession() call SessionHolder.ContainsSession() call SessionHolder.ContainsSession() call SessionHolder.ContainsSession() call SessionHolder.ContainsSession() call Spring.Data.NHibernate.Support.SessionScope.Close() call Spring.Data.NHibernate.Support.SessionScope.Close() call Spring.Data.NHibernate.Support.SessionScope.Close() call Spring.Data.NHibernate.Support.SessionScope.Close() call Spring.Data.NHibernate.Support.SessionScope.Close() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll()