Spring.Objects.Factory.Xml System using System.Collections using System.Collections.Generic using System.Collections.Specialized using System.Globalization using System.IO using System.Xml using Common.Logging using Spring.Collections using Spring.Core.IO using Spring.Core.TypeResolution using Spring.Objects.Factory.Config using Spring.Objects.Factory.Support using Spring.Util using class attribute comment Spring.Objects.Factory.Xml.ObjectsNamespaceParser super super AbstractObjectDefinitionParser super INamespaceParser string ILog public public public override public override return ObjectDefinitionHolder protected override protected override if == else if == else if == decl_stmt Spring.Objects.Factory.Config.ObjectDefinitionHolder = if != return as return public public return string string private private decl_stmt string = decl_stmt string = IResource string protected virtual protected virtual decl_stmt string = try region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion decl_stmt Spring.Core.IO.IResource = catch XmlElement RuntimeObjectReference XmlAttribute IEventHandlerValue protected virtual protected virtual decl_stmt Spring.Objects.IEventHandlerValue = decl_stmt System.Xml.XmlElement = as decl_stmt System.Xml.XmlAttribute = if + + return switch case case decl_stmt Spring.Objects.Factory.Config.RuntimeObjectReference = new = break case = == object : object break ObjectDefinitionHolder protected protected decl_stmt Spring.Objects.Factory.Config.ObjectDefinitionHolder = try = if == return catch throw catch = region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion return ObjectDefinitionHolder protected protected decl_stmt Spring.Objects.Factory.Config.ObjectDefinitionHolder = return protected protected protected protected return protected internal virtual protected internal virtual < return string string MutablePropertyValues string string bool string string AbstractObjectDefinition int string MethodOverrides string string decl string ConstructorArgumentValues string ParserContext string EventValues string protected internal virtual protected internal virtual decl_stmt string = try if = if throw new + + decl_stmt string = decl_stmt Spring.Objects.Factory.Support.AbstractObjectDefinition = decl_stmt Spring.Objects.Factory.Xml.ParserContext = new decl_stmt Spring.Objects.MutablePropertyValues = decl_stmt Spring.Objects.Factory.Config.ConstructorArgumentValues = decl_stmt Spring.Objects.Factory.Config.EventValues = decl_stmt Spring.Objects.Factory.Support.MethodOverrides = decl_stmt bool = && != && call string.ToLower() call string.ToLower() call string.ToLower() call string.ToLower() call string.ToLower() if ! = = = = if decl_stmt string = = = = decl_stmt string = if = = decl_stmt string = if = = decl_stmt string = if || if ! decl_stmt string = call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() call ParserContext.ParserHelper() = else = decl_stmt string = if = = decl_stmt string = if != if = else if = decl_stmt string = if != if = else if = if = decl_stmt string = if && = = decl_stmt string = if decl_stmt int = if > += + = decl_stmt string = if = return catch catch return MethodOverrides protected protected decl_stmt Spring.Objects.Factory.Support.MethodOverrides = new foreach in foreach in return string string protected protected decl_stmt string = decl_stmt string = if throw new if throw new new ReplacedMethodOverride string string string XmlElement protected protected decl_stmt string = decl_stmt string = if throw new if throw new decl_stmt Spring.Objects.Factory.Support.ReplacedMethodOverride = new foreach in decl_stmt System.Xml.XmlElement = decl_stmt string = if throw new call Spring.Objects.Factory.Support.ReplacedMethodOverride.AddTypeIdentifier(string) call Spring.Objects.Factory.Support.ReplacedMethodOverride.AddTypeIdentifier(string) call Spring.Objects.Factory.Support.ReplacedMethodOverride.AddTypeIdentifier(string) call Spring.Objects.Factory.Support.ReplacedMethodOverride.AddTypeIdentifier(string) call Spring.Objects.Factory.Support.ReplacedMethodOverride.AddTypeIdentifier(string) ConstructorArgumentValues protected protected decl_stmt Spring.Objects.Factory.Config.ConstructorArgumentValues = new foreach in return EventValues protected protected decl_stmt Spring.Objects.Factory.Config.EventValues = new foreach in return ObjectMetadataAttribute string string protected protected foreach in decl_stmt string = decl_stmt string = decl_stmt Spring.Objects.ObjectMetadataAttribute = new = public public foreach in var string var string string string var public public decl_stmt string = decl_stmt string = if throw new decl_stmt var = new = if ! call var.SetAttribute() call var.SetAttribute() call var.SetAttribute() call var.SetAttribute() call var.SetAttribute() foreach in decl_stmt var = as decl_stmt string = decl_stmt string = if ! && ! decl_stmt var = new = call var.AddMetadataAttribute() call var.AddMetadataAttribute() call var.AddMetadataAttribute() call var.AddMetadataAttribute() call var.AddMetadataAttribute() else throw new MutablePropertyValues protected virtual protected virtual decl_stmt Spring.Objects.MutablePropertyValues = new foreach in return string string int object string protected virtual protected virtual decl_stmt object = decl_stmt string = decl_stmt string = decl_stmt string = if && throw new if try decl_stmt int = if < throw new if else catch throw new else if if if call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() else if else string object protected protected decl_stmt string = if throw new decl_stmt object = new XmlElement XmlAttribute XmlAttribute XmlElement XmlAttribute XmlNodeList protected virtual protected virtual decl_stmt System.Xml.XmlAttribute = if != return decl_stmt System.Xml.XmlAttribute = if != return new decl_stmt System.Xml.XmlAttribute = if != return new decl_stmt System.Xml.XmlNodeList = decl_stmt System.Xml.XmlElement = for = < ++ decl_stmt System.Xml.XmlElement = call XmlNodeList.Item() call XmlNodeList.Item() call XmlNodeList.Item() call XmlNodeList.Item() call XmlNodeList.Item() as if != if else = if == throw new return protected virtual protected virtual if == switch case return case return case return case return case return case return case return case return case return case return default: throw new + + return string private static private static decl_stmt string = if = if throw new return string private private decl_stmt string = if = if = if throw new return new return new string private private decl_stmt string = if return else return new ExpressionHolder string private private decl_stmt string = decl_stmt Spring.Objects.Factory.Config.ExpressionHolder = new = return XmlNodeList ManagedList string XmlElement protected virtual protected virtual decl_stmt string = decl_stmt System.Xml.XmlNodeList = decl_stmt Spring.Objects.Factory.Config.ManagedList = new if = = foreach in decl_stmt System.Xml.XmlElement = as if != call ManagedList.Add() call ManagedList.Add() call ManagedList.Add() call ManagedList.Add() call ManagedList.Add() return string private private decl_stmt string = if = return object XmlNodeList ManagedSet string XmlElement protected protected decl_stmt string = decl_stmt System.Xml.XmlNodeList = decl_stmt Spring.Objects.Factory.Config.ManagedSet = new if = = foreach in decl_stmt System.Xml.XmlElement = as if != decl_stmt object = call ManagedSet.Add() call ManagedSet.Add() call ManagedSet.Add() call ManagedSet.Add() call ManagedSet.Add() return XmlElement ExpressionHolder XmlAttribute XmlNodeList ManagedDictionary string XmlNode XmlAttribute XmlAttribute XmlAttribute XmlNodeList object XmlAttribute RuntimeObjectReference string XmlNodeList protected protected decl_stmt Spring.Objects.Factory.Config.ManagedDictionary = new decl_stmt string = decl_stmt string = if = if = = decl_stmt System.Xml.XmlNodeList = foreach in region region decl_stmt object = decl_stmt System.Xml.XmlAttribute = if != = else decl_stmt System.Xml.XmlAttribute = if != = new else decl_stmt System.Xml.XmlNode = if == throw new + decl_stmt System.Xml.XmlElement = decl_stmt System.Xml.XmlNodeList = call System.Xml.XmlElement.GetElementsByTagName(string) call System.Xml.XmlElement.GetElementsByTagName(string) call System.Xml.XmlElement.GetElementsByTagName(string) call System.Xml.XmlElement.GetElementsByTagName(string) call System.Xml.XmlElement.GetElementsByTagName(string) if == || == throw new + = call XmlNodeList.Item() call XmlNodeList.Item() call XmlNodeList.Item() call XmlNodeList.Item() call XmlNodeList.Item() endregion region region decl_stmt System.Xml.XmlAttribute = if != = else if != decl_stmt System.Xml.XmlAttribute = decl_stmt Spring.Objects.Factory.Config.RuntimeObjectReference = new = else if != decl_stmt System.Xml.XmlAttribute = decl_stmt Spring.Objects.Factory.Config.ExpressionHolder = new = else decl_stmt System.Xml.XmlNode = if != decl_stmt System.Xml.XmlNodeList = if == || == throw new + = call XmlNodeList.Item() call XmlNodeList.Item() call XmlNodeList.Item() call XmlNodeList.Item() call XmlNodeList.Item() endregion return XmlNamespaceManager protected virtual protected virtual decl_stmt System.Xml.XmlNamespaceManager = new new call System.Xml.XmlNamespaceManager.AddNamespace(string,string) call System.Xml.XmlNamespaceManager.AddNamespace(string,string) call System.Xml.XmlNamespaceManager.AddNamespace(string,string) call System.Xml.XmlNamespaceManager.AddNamespace(string,string) call System.Xml.XmlNamespaceManager.AddNamespace(string,string) return + + XmlNamespaceManager protected protected decl_stmt System.Xml.XmlNamespaceManager = new new call System.Xml.XmlNamespaceManager.AddNamespace(string,string) call System.Xml.XmlNamespaceManager.AddNamespace(string,string) call System.Xml.XmlNamespaceManager.AddNamespace(string,string) call System.Xml.XmlNamespaceManager.AddNamespace(string,string) call System.Xml.XmlNamespaceManager.AddNamespace(string,string) return + + string string decl string string ManagedNameValueCollection XmlNodeList protected protected decl_stmt Spring.Objects.Factory.Config.ManagedNameValueCollection = new = decl_stmt System.Xml.XmlNodeList = foreach in decl_stmt string = decl_stmt string = decl_stmt string = if decl_stmt string = call string.Split() call string.Split() call string.Split() call string.Split() call string.Split() call string.ToCharArray() call string.ToCharArray() call string.ToCharArray() call string.ToCharArray() call string.ToCharArray() foreach in call ManagedNameValueCollection.Add() call ManagedNameValueCollection.Add() call ManagedNameValueCollection.Add() call ManagedNameValueCollection.Add() call ManagedNameValueCollection.Add() else call ManagedNameValueCollection.Add() call ManagedNameValueCollection.Add() call ManagedNameValueCollection.Add() call ManagedNameValueCollection.Add() call ManagedNameValueCollection.Add() return bool string bool protected protected if == return decl_stmt string = decl_stmt bool = == decl_stmt bool = == : return : DependencyCheckingMode protected protected decl_stmt DependencyCheckingMode = if try = typeof catch region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion return AutoWiringMode protected protected decl_stmt AutoWiringMode = if try = typeof catch region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion return private private return private static private static return private private return :