Spring.ServiceModel System using System.Collections using System.Collections.Generic using System.Reflection using System.Reflection.Emit using System.ServiceModel using System.Net.Security using Spring.Objects.Factory.Config using Spring.Util using Spring.Objects using Spring.Objects.Factory using Spring.Objects.Factory.Support using Spring.Proxy using Spring.ServiceModel.Support using class Spring.ServiceModel.ServiceExporter super super IFactoryObject super IInitializingObject super IObjectFactoryAware super IObjectNameAware Type bool IDictionary Type string string string Type string string ProtectionLevel IList SessionMode DefaultListableObjectFactory return = return = return = return = return = return = return = return = return = return = return = protected protected return if is = else throw new public public public public return return typeof return protected protected return = protected virtual protected virtual if == throw new if != && ! throw new IProxyTypeBuilder protected virtual protected virtual decl_stmt Spring.Proxy.IProxyTypeBuilder = new = = = call Spring.Proxy.IProxyTypeBuilder.BuildProxyType() call Spring.Proxy.IProxyTypeBuilder.BuildProxyType() call Spring.Proxy.IProxyTypeBuilder.BuildProxyType() call Spring.Proxy.IProxyTypeBuilder.BuildProxyType() call Spring.Proxy.IProxyTypeBuilder.BuildProxyType() decl ReflectionUtils private static private static decl_stmt CustomAttributeBuilderBuilder = new typeof if call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() if call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() if call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() if != call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() if != call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() if != call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() call decl ReflectionUtils.AddPropertyValue() return call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() call decl ReflectionUtils.Build() bool IList protected override protected override decl_stmt System.Collections.Generic.IList = decl_stmt bool = for = < ++ if typeof = = if ! call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) return bool IList protected override protected override decl_stmt System.Collections.Generic.IList = decl_stmt bool = foreach in if typeof = break if ! call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) typeof return decl IList protected override < protected override < < if == decl_stmt System.Collections.Generic.IList < = if > throw new return else return new ConstructorResolver ConstructorInstantiationInfo IObjectWrapper string object decl PropertyInfo RootObjectDefinition CustomAttributeBuilder decl object protected override protected override foreach in if is else if is else if is else if is decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = = = decl_stmt string = call Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(string,IObjectDefinition) call Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(string,IObjectDefinition) call Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(string,IObjectDefinition) call Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(string,IObjectDefinition) call Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(string,IObjectDefinition) decl_stmt Spring.Objects.Factory.Support.ConstructorResolver = new new new decl_stmt Spring.Util.ConstructorInstantiationInfo = call ConstructorResolver.GetConstructorInstantiationInfo() call ConstructorResolver.GetConstructorInstantiationInfo() call ConstructorResolver.GetConstructorInstantiationInfo() call ConstructorResolver.GetConstructorInstantiationInfo() call ConstructorResolver.GetConstructorInstantiationInfo() if == decl_stmt System.Reflection.Emit.CustomAttributeBuilder = new else decl_stmt object = call DefaultListableObjectFactory.GetObject() call DefaultListableObjectFactory.GetObject() call DefaultListableObjectFactory.GetObject() call DefaultListableObjectFactory.GetObject() call DefaultListableObjectFactory.GetObject() decl_stmt Spring.Objects.IObjectWrapper = new decl_stmt System.Reflection.PropertyInfo = call Spring.Objects.IObjectWrapper.GetPropertyInfos() call Spring.Objects.IObjectWrapper.GetPropertyInfos() call Spring.Objects.IObjectWrapper.GetPropertyInfos() call Spring.Objects.IObjectWrapper.GetPropertyInfos() call Spring.Objects.IObjectWrapper.GetPropertyInfos() decl_stmt object = new for = < ++ = call Spring.Objects.IObjectWrapper.GetPropertyValue(string) call Spring.Objects.IObjectWrapper.GetPropertyValue(string) call Spring.Objects.IObjectWrapper.GetPropertyValue(string) call Spring.Objects.IObjectWrapper.GetPropertyValue(string) call Spring.Objects.IObjectWrapper.GetPropertyValue(string) decl_stmt System.Reflection.Emit.CustomAttributeBuilder = new