Spring.Objects.Factory.Support System using System.Collections using System.Globalization using System.Reflection using System.Reflection.Emit using System.Text using Spring.Collections using Spring.Core using Spring.Util using Spring.Reflection.Dynamic using class attribute Spring.Objects.Factory.Support.MethodInjectingInstantiationStrategy super super SimpleInstantiationStrategy string IDictionary protected override protected override return protected override protected override return object Type IObjectWrapper private private decl_stmt System.Type = decl_stmt object = call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) decl_stmt Spring.Objects.IObjectWrapper = new call Spring.Objects.IObjectWrapper.SetPropertyValue(PropertyValue) call Spring.Objects.IObjectWrapper.SetPropertyValue(PropertyValue) call Spring.Objects.IObjectWrapper.SetPropertyValue(PropertyValue) call Spring.Objects.IObjectWrapper.SetPropertyValue(PropertyValue) call Spring.Objects.IObjectWrapper.SetPropertyValue(PropertyValue) new call Spring.Objects.IObjectWrapper.SetPropertyValue(PropertyValue) call Spring.Objects.IObjectWrapper.SetPropertyValue(PropertyValue) call Spring.Objects.IObjectWrapper.SetPropertyValue(PropertyValue) call Spring.Objects.IObjectWrapper.SetPropertyValue(PropertyValue) call Spring.Objects.IObjectWrapper.SetPropertyValue(PropertyValue) new return ModuleBuilder Type private private lock decl_stmt System.Type = if == region region if + endregion decl_stmt ModuleBuilder = = new = return TypeBuilder public public decl_stmt TypeBuilder = return call TypeBuilder.CreateType() call TypeBuilder.CreateType() call TypeBuilder.CreateType() call TypeBuilder.CreateType() call TypeBuilder.CreateType() return private private return string private private decl_stmt string = return | private private = typeof = typeof return ConstructorBuilder decl ConstructorInfo int ILGenerator ConstructorInfo MethodAttributes private private decl_stmt System.Reflection.ConstructorInfo = | | for = < ++ decl_stmt System.Reflection.ConstructorInfo = if || decl_stmt MethodAttributes = | | | decl_stmt System.Reflection.Emit.ConstructorBuilder = call ConstructorInfo.GetParameters() call ConstructorInfo.GetParameters() call ConstructorInfo.GetParameters() call ConstructorInfo.GetParameters() call ConstructorInfo.GetParameters() decl_stmt System.Reflection.Emit.ILGenerator = call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) call System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int) decl_stmt int = call ConstructorInfo.GetParameters() call ConstructorInfo.GetParameters() call ConstructorInfo.GetParameters() call ConstructorInfo.GetParameters() call ConstructorInfo.GetParameters() call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) for = <= ++ call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) return FieldBuilder decl MethodInfo MethodOverride MethodInfo private private decl_stmt System.Reflection.MethodInfo = | | for = < ++ decl_stmt System.Reflection.MethodInfo = decl_stmt Spring.Objects.Factory.Support.MethodOverride = if != if ! || throw new decl_stmt System.Reflection.Emit.FieldBuilder = if is = else if call MethodInfo.GetParameters() call MethodInfo.GetParameters() call MethodInfo.GetParameters() call MethodInfo.GetParameters() call MethodInfo.GetParameters() > throw new if == typeof throw new = return MethodBuilder ILGenerator LocalBuilder decl ParameterInfo private private decl_stmt System.Reflection.ParameterInfo = decl_stmt System.Reflection.Emit.MethodBuilder = decl_stmt System.Reflection.Emit.ILGenerator = call System.Reflection.Emit.MethodBuilder.GetILGenerator(int) call System.Reflection.Emit.MethodBuilder.GetILGenerator(int) call System.Reflection.Emit.MethodBuilder.GetILGenerator(int) call System.Reflection.Emit.MethodBuilder.GetILGenerator(int) call System.Reflection.Emit.MethodBuilder.GetILGenerator(int) decl_stmt System.Reflection.Emit.LocalBuilder = call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) private static private static if != else LocalBuilder private static private static decl_stmt System.Reflection.Emit.LocalBuilder = if != typeof = return LocalBuilder ParameterInfo private static private static typeof | typeof decl_stmt System.Reflection.Emit.LocalBuilder = typeof typeof object for = < ++ + decl_stmt System.Reflection.ParameterInfo = if || PropertyBuilder MethodBuilder ILGenerator private private decl_stmt System.Reflection.Emit.MethodBuilder = + | typeof new typeof decl_stmt System.Reflection.Emit.ILGenerator = call System.Reflection.Emit.MethodBuilder.GetILGenerator(int) call System.Reflection.Emit.MethodBuilder.GetILGenerator(int) call System.Reflection.Emit.MethodBuilder.GetILGenerator(int) call System.Reflection.Emit.MethodBuilder.GetILGenerator(int) call System.Reflection.Emit.MethodBuilder.GetILGenerator(int) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) call System.Reflection.Emit.ILGenerator.Emit(OpCode,sbyte) decl_stmt System.Reflection.Emit.PropertyBuilder = typeof call System.Reflection.Emit.PropertyBuilder.SetSetMethod(MethodBuilder) call System.Reflection.Emit.PropertyBuilder.SetSetMethod(MethodBuilder) call System.Reflection.Emit.PropertyBuilder.SetSetMethod(MethodBuilder) call System.Reflection.Emit.PropertyBuilder.SetSetMethod(MethodBuilder) call System.Reflection.Emit.PropertyBuilder.SetSetMethod(MethodBuilder) MethodAttributes private private decl_stmt MethodAttributes = | | | if return | return