Spring.Aspects System using System.Collections using NUnit.Framework using Spring.Aop.Framework using class attribute Spring.Aspects.RetryAdviceTests public public public public public public TestSleepHandler ITestRemoteService private static private static decl_stmt TestSleepHandler = new decl_stmt Spring.Aspects.ITestRemoteService = call Spring.Aspects.ITestRemoteService.DoTransfer() call Spring.Aspects.ITestRemoteService.DoTransfer() call Spring.Aspects.ITestRemoteService.DoTransfer() call Spring.Aspects.ITestRemoteService.DoTransfer() call Spring.Aspects.ITestRemoteService.DoTransfer() = try call Spring.Aspects.ITestRemoteService.DoTransfer() call Spring.Aspects.ITestRemoteService.DoTransfer() call Spring.Aspects.ITestRemoteService.DoTransfer() call Spring.Aspects.ITestRemoteService.DoTransfer() call Spring.Aspects.ITestRemoteService.DoTransfer() catch TestSleepHandler ITestRemoteService private static private static decl_stmt TestSleepHandler = new decl_stmt Spring.Aspects.ITestRemoteService = try call ITestRemoteService.DoTransfer2() call ITestRemoteService.DoTransfer2() call ITestRemoteService.DoTransfer2() call ITestRemoteService.DoTransfer2() call ITestRemoteService.DoTransfer2() catch private static private static for = < ++ if else * + + public public RetryAdvice TestRemoteService ProxyFactory ITestRemoteService private static private static decl_stmt TestRemoteService = new = decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new decl_stmt Spring.Aspects.RetryAdvice = new new if if = else = else if = else = call Spring.Aspects.RetryAdvice.AfterPropertiesSet() call Spring.Aspects.RetryAdvice.AfterPropertiesSet() call Spring.Aspects.RetryAdvice.AfterPropertiesSet() call Spring.Aspects.RetryAdvice.AfterPropertiesSet() call Spring.Aspects.RetryAdvice.AfterPropertiesSet() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() decl_stmt Spring.Aspects.ITestRemoteService = call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) as return