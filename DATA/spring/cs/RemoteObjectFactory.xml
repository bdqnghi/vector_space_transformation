Spring.Remoting System using System.Reflection using System.Reflection.Emit using Spring.Proxy using Spring.Objects.Factory using Spring.Remoting.Support using Spring.Util using Spring.Core.TypeResolution using class Spring.Remoting.RemoteObjectFactory super super ConfigurableLifetime super IInitializingObject super IFactoryObject decl string ConstructorInfo object Type return = return = return = public public return != : call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() public public if == return call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) new return private private if == throw new if ! typeof throw new IProxyTypeBuilder Type private private decl_stmt Spring.Proxy.IProxyTypeBuilder = new = call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() = if != && > = decl_stmt System.Type = call Spring.Proxy.IProxyTypeBuilder.BuildProxyType() call Spring.Proxy.IProxyTypeBuilder.BuildProxyType() call Spring.Proxy.IProxyTypeBuilder.BuildProxyType() call Spring.Proxy.IProxyTypeBuilder.BuildProxyType() call Spring.Proxy.IProxyTypeBuilder.BuildProxyType() = call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) new