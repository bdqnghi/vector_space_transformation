Spring.Context.Attributes System using System.Collections.Generic using System.IO using System.Linq using System.Reflection using Common.Logging using Spring.Context.Attributes.TypeFilters using Spring.Util using Spring.Objects.Factory.Xml using class attribute Spring.Context.Attributes.AssemblyTypeScanner super super IAssemblyTypeScanner string decl List decl List decl IList decl List DocumentDefaultsDefinition decl List decl IList ILog decl List decl List return = if = return = public public public < call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() new typeof return public public public < call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() == typeof return public public public < call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() == typeof return public public < call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() == return decl IList public virtual < public virtual < decl_stmt System.Collections.Generic.IList < = new < foreach in call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() new foreach in foreach in if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() return public public < call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() return public public < call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() return public public if != call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() return public public < call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() return public public if != call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() return var private < private < decl_stmt var = new < call var.AddRange() call var.AddRange() call var.AddRange() call var.AddRange() call var.AddRange() call var.AddRange() call var.AddRange() call var.AddRange() call var.AddRange() call var.AddRange() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() return decl IEnumerable Assembly decl IList string private < private < decl_stmt System.Collections.Generic.IEnumerable < = decl_stmt System.Collections.Generic.IList < = new < foreach in if ! decl_stmt System.Reflection.Assembly = if != decl_stmt string = call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() return Assembly private private decl_stmt System.Reflection.Assembly = try = catch call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() return private private return : var protected virtual < protected virtual < < decl_stmt var = call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() return protected virtual protected virtual if > && call decl List.Any() call decl List.Any() call decl List.Any() call decl List.Any() call decl List.Any() return return string bool protected virtual protected virtual decl_stmt bool = call decl List.Any() call decl List.Any() call decl List.Any() call decl List.Any() call decl List.Any() if decl_stmt string = call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() return protected virtual protected virtual if > && call decl List.Any() call decl List.Any() call decl List.Any() call decl List.Any() call decl List.Any() return return protected virtual protected virtual if == && == call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() if == && == call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() if == call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() decl IEnumerable decl IList bool string bool private < private < decl_stmt System.Collections.Generic.IList < = new < decl_stmt System.Collections.Generic.IEnumerable < = foreach in decl_stmt string = decl_stmt bool = ! call decl IList.Any() call decl IList.Any() call decl IList.Any() call decl IList.Any() call decl IList.Any() decl_stmt bool = call decl IList.Any() call decl IList.Any() call decl IList.Any() call decl IList.Any() call decl IList.Any() if || call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() return