Spring.Data.NHibernate.Generic System using System.Collections.Generic using NHibernate using NHibernate.Type using Spring.Aop.Framework using Spring.Dao using Spring.Data.Common using Spring.Data.Support using Spring.Objects.Factory using class Spring.Data.NHibernate.Generic.HibernateTemplate super super HibernateAccessor super IHibernateOperations decl NHibernate return = return = return = return = return = = return = = return = return = return = return = return = return return = public public call decl NHibernate.Clear() call decl NHibernate.Clear() call decl NHibernate.Clear() call decl NHibernate.Clear() call decl NHibernate.Clear() public public call decl NHibernate.Delete() call decl NHibernate.Delete() call decl NHibernate.Delete() call decl NHibernate.Delete() call decl NHibernate.Delete() public public call decl NHibernate.Delete() call decl NHibernate.Delete() call decl NHibernate.Delete() call decl NHibernate.Delete() call decl NHibernate.Delete() public public return call decl NHibernate.Delete() call decl NHibernate.Delete() call decl NHibernate.Delete() call decl NHibernate.Delete() call decl NHibernate.Delete() public public return call decl NHibernate.Delete() call decl NHibernate.Delete() call decl NHibernate.Delete() call decl NHibernate.Delete() call decl NHibernate.Delete() public public return call decl NHibernate.Delete() call decl NHibernate.Delete() call decl NHibernate.Delete() call decl NHibernate.Delete() call decl NHibernate.Delete() public public call decl NHibernate.Flush() call decl NHibernate.Flush() call decl NHibernate.Flush() call decl NHibernate.Flush() call decl NHibernate.Flush() public public call decl NHibernate.Load() call decl NHibernate.Load() call decl NHibernate.Load() call decl NHibernate.Load() call decl NHibernate.Load() public public call decl NHibernate.Refresh() call decl NHibernate.Refresh() call decl NHibernate.Refresh() call decl NHibernate.Refresh() call decl NHibernate.Refresh() public public call decl NHibernate.Refresh() call decl NHibernate.Refresh() call decl NHibernate.Refresh() call decl NHibernate.Refresh() call decl NHibernate.Refresh() public public return call decl NHibernate.Contains() call decl NHibernate.Contains() call decl NHibernate.Contains() call decl NHibernate.Contains() call decl NHibernate.Contains() public public call decl NHibernate.Evict() call decl NHibernate.Evict() call decl NHibernate.Evict() call decl NHibernate.Evict() call decl NHibernate.Evict() public public call decl NHibernate.Lock() call decl NHibernate.Lock() call decl NHibernate.Lock() call decl NHibernate.Lock() call decl NHibernate.Lock() public public return call decl NHibernate.Save() call decl NHibernate.Save() call decl NHibernate.Save() call decl NHibernate.Save() call decl NHibernate.Save() public public call decl NHibernate.Save() call decl NHibernate.Save() call decl NHibernate.Save() call decl NHibernate.Save() call decl NHibernate.Save() public public call decl NHibernate.Update() call decl NHibernate.Update() call decl NHibernate.Update() call decl NHibernate.Update() call decl NHibernate.Update() public public call decl NHibernate.Update() call decl NHibernate.Update() call decl NHibernate.Update() call decl NHibernate.Update() call decl NHibernate.Update() public public call decl NHibernate.SaveOrUpdate() call decl NHibernate.SaveOrUpdate() call decl NHibernate.SaveOrUpdate() call decl NHibernate.SaveOrUpdate() call decl NHibernate.SaveOrUpdate() public public return call decl NHibernate.SaveOrUpdateCopy() call decl NHibernate.SaveOrUpdateCopy() call decl NHibernate.SaveOrUpdateCopy() call decl NHibernate.SaveOrUpdateCopy() call decl NHibernate.SaveOrUpdateCopy() public public return call decl NHibernate.Merge() call decl NHibernate.Merge() call decl NHibernate.Merge() call decl NHibernate.Merge() call decl NHibernate.Merge() public public public < return < public public public < return new < public public public < return < public public public < return new < public < public < public < < return new < public < public < public < < return < public < public < public < < return < new public < public < public < < return < new new public < public < public < < return < public < public < public < < if != && != && != throw new return new < public < public < public < < return < public < public < public < < return < new new new public < public < public < < return < public < public < public < < if != throw new if != && != throw new return new < public < public < public < < return < public < public < public < < return < new public < public < public < < return < new new public < public < public < < return < public < public < public < < if != && != && != throw new return new < public < public < public < < return < public < public < public < < return < new new new public < public < public < < return < public < public < public < < if != && != && != throw new if != && != && != throw new return new < public < public < public < < return new < public < public < public < < return new < public public public < < return < new < public public public < < return < new < public public public < < return < IDbProvider bool ISession T FlushModeHolder ISession public public public < < decl_stmt Spring.Messaging.Ems.Common.ISession = decl_stmt bool = if decl_stmt FlushModeHolder = new try = decl_stmt Spring.Messaging.Ems.Common.ISession = : call decl NHibernate.CreateSessionProxy() call decl NHibernate.CreateSessionProxy() call decl NHibernate.CreateSessionProxy() call decl NHibernate.CreateSessionProxy() call decl NHibernate.CreateSessionProxy() decl_stmt T = return catch decl_stmt Spring.Data.Common.IDbProvider = if != && call Spring.Data.Common.IDbProvider.IsDataAccessException(Exception) call Spring.Data.Common.IDbProvider.IsDataAccessException(Exception) call Spring.Data.Common.IDbProvider.IsDataAccessException(Exception) call Spring.Data.Common.IDbProvider.IsDataAccessException(Exception) call Spring.Data.Common.IDbProvider.IsDataAccessException(Exception) throw else throw new catch throw catch decl_stmt Spring.Data.Common.IDbProvider = if != && call Spring.Data.Common.IDbProvider.IsDataAccessException(Exception) call Spring.Data.Common.IDbProvider.IsDataAccessException(Exception) call Spring.Data.Common.IDbProvider.IsDataAccessException(Exception) call Spring.Data.Common.IDbProvider.IsDataAccessException(Exception) call Spring.Data.Common.IDbProvider.IsDataAccessException(Exception) throw else throw finally if if = else IDbProvider bool ISession decl IList FlushModeHolder ISession public < public < public < < < decl_stmt Spring.Messaging.Ems.Common.ISession = decl_stmt bool = decl_stmt FlushModeHolder = new try = decl_stmt Spring.Messaging.Ems.Common.ISession = : call decl NHibernate.CreateSessionProxy() call decl NHibernate.CreateSessionProxy() call decl NHibernate.CreateSessionProxy() call decl NHibernate.CreateSessionProxy() call decl NHibernate.CreateSessionProxy() decl_stmt System.Collections.Generic.IList < = return catch decl_stmt Spring.Data.Common.IDbProvider = if != && call Spring.Data.Common.IDbProvider.IsDataAccessException(Exception) call Spring.Data.Common.IDbProvider.IsDataAccessException(Exception) call Spring.Data.Common.IDbProvider.IsDataAccessException(Exception) call Spring.Data.Common.IDbProvider.IsDataAccessException(Exception) call Spring.Data.Common.IDbProvider.IsDataAccessException(Exception) throw else throw catch throw catch decl_stmt Spring.Data.Common.IDbProvider = if != && call Spring.Data.Common.IDbProvider.IsDataAccessException(Exception) call Spring.Data.Common.IDbProvider.IsDataAccessException(Exception) call Spring.Data.Common.IDbProvider.IsDataAccessException(Exception) call Spring.Data.Common.IDbProvider.IsDataAccessException(Exception) call Spring.Data.Common.IDbProvider.IsDataAccessException(Exception) throw else throw finally if if = else public < public < public < < < return < new < public < public < public < < < return < new < public < public < public < < < return <