Spring.Objects.Factory.Config System.Collections.Specialized using Common.Logging using Common.Logging.Simple using NUnit.Framework using Rhino.Mocks using Spring.Context.Support using Spring.Core.IO using Spring.Objects.Factory.Xml using class attribute Spring.Objects.Factory.Config.PropertyOverrideConfigurerTests MockRepository public public = new public public = new TestObject StaticApplicationContext TestObject MutablePropertyValues public public decl_stmt Spring.Context.Support.StaticApplicationContext = new call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof new call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof new decl_stmt Spring.Objects.MutablePropertyValues = new call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof = new call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() decl_stmt Spring.Data.NHibernate.TestObject = call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() decl_stmt Spring.Data.NHibernate.TestObject = call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() TestObject StaticApplicationContext MutablePropertyValues public public decl_stmt Spring.Context.Support.StaticApplicationContext = new decl_stmt Spring.Objects.MutablePropertyValues = new call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof = new call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() decl_stmt Spring.Data.NHibernate.TestObject = call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() TestObject TestObject StaticApplicationContext MutablePropertyValues public public decl_stmt Spring.Context.Support.StaticApplicationContext = new decl_stmt Spring.Objects.MutablePropertyValues = new call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) new call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof new call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof new = new call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() decl_stmt Spring.Data.NHibernate.TestObject = call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() decl_stmt Spring.Data.NHibernate.TestObject = call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() TestObject StaticApplicationContext MutablePropertyValues public public decl_stmt Spring.Context.Support.StaticApplicationContext = new decl_stmt Spring.Objects.MutablePropertyValues = new call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) new call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof = new call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Objects.MutablePropertyValues.Add(string,object) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) call Spring.Context.Support.StaticApplicationContext.RegisterSingleton(string,Type,MutablePropertyValues) typeof call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() call StaticApplicationContext.Refresh() decl_stmt Spring.Data.NHibernate.TestObject = call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() call StaticApplicationContext.GetObject() IConfigurableListableObjectFactory IConfigurableListableObjectFactory NameValueCollection PropertyOverrideConfigurer public public decl_stmt Spring.Objects.Factory.Config.IConfigurableListableObjectFactory = < decl_stmt Spring.Objects.Factory.Config.IConfigurableListableObjectFactory = decl_stmt Spring.Objects.Factory.Config.PropertyOverrideConfigurer = new decl_stmt System.Collections.Specialized.NameValueCollection = new call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) = call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() try call PropertyOverrideConfigurer.PostProcessObjectFactory() call PropertyOverrideConfigurer.PostProcessObjectFactory() call PropertyOverrideConfigurer.PostProcessObjectFactory() call PropertyOverrideConfigurer.PostProcessObjectFactory() call PropertyOverrideConfigurer.PostProcessObjectFactory() catch call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() PropertyOverrideConfigurer IConfigurableListableObjectFactory IConfigurableListableObjectFactory TestObject NameValueCollection string public public decl_stmt string const const = decl_stmt Spring.Data.NHibernate.TestObject = new decl_stmt Spring.Objects.Factory.Config.IConfigurableListableObjectFactory = < call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) call Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(string) decl_stmt Spring.Objects.Factory.Config.IConfigurableListableObjectFactory = decl_stmt Spring.Objects.Factory.Config.PropertyOverrideConfigurer = new decl_stmt System.Collections.Specialized.NameValueCollection = new call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) call System.Collections.Specialized.NameValueCollection.Add(NameValueCollection) = call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call MockRepository.ReplayAll() call PropertyOverrideConfigurer.PostProcessObjectFactory() call PropertyOverrideConfigurer.PostProcessObjectFactory() call PropertyOverrideConfigurer.PostProcessObjectFactory() call PropertyOverrideConfigurer.PostProcessObjectFactory() call PropertyOverrideConfigurer.PostProcessObjectFactory() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() call MockRepository.VerifyAll() TestObject XmlObjectFactory IResource PropertyOverrideConfigurer public public decl_stmt Spring.Core.IO.IResource = new decl_stmt Spring.Objects.Factory.Xml.XmlObjectFactory = new decl_stmt Spring.Objects.Factory.Config.PropertyOverrideConfigurer = call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call PropertyOverrideConfigurer.PostProcessObjectFactory() call PropertyOverrideConfigurer.PostProcessObjectFactory() call PropertyOverrideConfigurer.PostProcessObjectFactory() call PropertyOverrideConfigurer.PostProcessObjectFactory() call PropertyOverrideConfigurer.PostProcessObjectFactory() decl_stmt Spring.Data.NHibernate.TestObject = call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject() call XmlObjectFactory.GetObject()