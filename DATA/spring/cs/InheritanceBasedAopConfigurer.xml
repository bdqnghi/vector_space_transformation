Spring.Aop.Framework.AutoProxy System using System.Collections using System.Collections.Generic using AopAlliance.Aop using Spring.Util using Spring.Objects.Factory using Spring.Objects.Factory.Config using Spring.Objects.Factory.Support using Spring.Aop.Framework.Adapter using Spring.Aop.Framework.DynamicProxy using Spring.Core using class Spring.Aop.Framework.AutoProxy.InheritanceBasedAopConfigurer super super IObjectFactoryPostProcessor super IObjectFactoryAware super IOrdered bool IObjectFactory bool IAdvisorAdapterRegistry decl string IList int bool = = return = return = return = = var string decl IList InheritanceAopProxyTypeBuilder ProxyFactory Type public public decl_stmt System.Collections.Generic.IList < = for = < ++ decl_stmt string = if decl_stmt var = as if == || continue decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = decl_stmt Spring.Aop.Framework.DynamicProxy.InheritanceAopProxyTypeBuilder = new = decl_stmt System.Type = call Spring.Aop.Framework.DynamicProxy.InheritanceAopProxyTypeBuilder.BuildProxyType() call Spring.Aop.Framework.DynamicProxy.InheritanceAopProxyTypeBuilder.BuildProxyType() call Spring.Aop.Framework.DynamicProxy.InheritanceAopProxyTypeBuilder.BuildProxyType() call Spring.Aop.Framework.DynamicProxy.InheritanceAopProxyTypeBuilder.BuildProxyType() call Spring.Aop.Framework.DynamicProxy.InheritanceAopProxyTypeBuilder.BuildProxyType() = call var.ConstructorArgumentValues() call var.ConstructorArgumentValues() call var.ConstructorArgumentValues() call var.ConstructorArgumentValues() call var.ConstructorArgumentValues() call var.ConstructorArgumentValues() call var.ConstructorArgumentValues() call var.ConstructorArgumentValues() call var.ConstructorArgumentValues() return = protected virtual protected virtual return typeof || typeof || typeof || typeof || typeof decl IList ProxyFactory protected virtual protected virtual decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new = = new if ! = decl_stmt System.Collections.Generic.IList < = foreach in if is call ProxyFactory.AddIntroduction() call ProxyFactory.AddIntroduction() call ProxyFactory.AddIntroduction() call ProxyFactory.AddIntroduction() call ProxyFactory.AddIntroduction() else call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() call ProxyFactory.AddAdvisor() return string protected virtual protected virtual if != for = < ++ decl_stmt string = string if return return decl List object private < private < decl_stmt System.Collections.Generic.List < = new < foreach in decl_stmt object = call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) call Spring.Objects.Factory.IObjectFactory.GetObject(string) if is call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() else call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call IAdvisorAdapterRegistry.Wrap() call IAdvisorAdapterRegistry.Wrap() call IAdvisorAdapterRegistry.Wrap() call IAdvisorAdapterRegistry.Wrap() call IAdvisorAdapterRegistry.Wrap() return public public return return public public return