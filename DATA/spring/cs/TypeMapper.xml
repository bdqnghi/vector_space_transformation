Spring.Messaging.Nms.Support.Converter System using System.Collections using Spring.Core.TypeResolution using class Spring.Messaging.Nms.Support.Converter.TypeMapper super super ITypeMapper string string string IDictionary bool Type IDictionary return = return = public public if call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) return as string else if typeof return if return else return return = string public public if call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) return as else if return if != decl_stmt string = + + + + return return return = return = public public if != && == throw new if != && == throw new string Type IDictionary string private private decl_stmt System.Collections.Generic.IDictionary = new foreach in decl_stmt string = decl_stmt System.Type = as if == decl_stmt string = = call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) =