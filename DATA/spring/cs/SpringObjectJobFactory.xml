Spring.Scheduling.Quartz Quartz using Quartz.Spi using Spring.Objects using class Spring.Scheduling.Quartz.SpringObjectJobFactory super super AdaptableJobFactory super ISchedulerContextAware SchedulerContext decl string = = ObjectWrapper MutablePropertyValues string protected override protected override decl_stmt ObjectWrapper = new if decl_stmt Spring.Objects.MutablePropertyValues = new if != call Spring.Objects.MutablePropertyValues.AddAll(IDictionary) call Spring.Objects.MutablePropertyValues.AddAll(IDictionary) call Spring.Objects.MutablePropertyValues.AddAll(IDictionary) call Spring.Objects.MutablePropertyValues.AddAll(IDictionary) call Spring.Objects.MutablePropertyValues.AddAll(IDictionary) call Spring.Objects.MutablePropertyValues.AddAll(IDictionary) call Spring.Objects.MutablePropertyValues.AddAll(IDictionary) call Spring.Objects.MutablePropertyValues.AddAll(IDictionary) call Spring.Objects.MutablePropertyValues.AddAll(IDictionary) call Spring.Objects.MutablePropertyValues.AddAll(IDictionary) call Spring.Objects.MutablePropertyValues.AddAll(IDictionary) call Spring.Objects.MutablePropertyValues.AddAll(IDictionary) call Spring.Objects.MutablePropertyValues.AddAll(IDictionary) call Spring.Objects.MutablePropertyValues.AddAll(IDictionary) call Spring.Objects.MutablePropertyValues.AddAll(IDictionary) if != for = < ++ decl_stmt string = if call Spring.Objects.MutablePropertyValues.Contains(string) call Spring.Objects.MutablePropertyValues.Contains(string) call Spring.Objects.MutablePropertyValues.Contains(string) call Spring.Objects.MutablePropertyValues.Contains(string) call Spring.Objects.MutablePropertyValues.Contains(string) call Spring.Objects.MutablePropertyValues.Remove(string) call Spring.Objects.MutablePropertyValues.Remove(string) call Spring.Objects.MutablePropertyValues.Remove(string) call Spring.Objects.MutablePropertyValues.Remove(string) call Spring.Objects.MutablePropertyValues.Remove(string) call ObjectWrapper.SetPropertyValues() call ObjectWrapper.SetPropertyValues() call ObjectWrapper.SetPropertyValues() call ObjectWrapper.SetPropertyValues() call ObjectWrapper.SetPropertyValues() else call ObjectWrapper.SetPropertyValues() call ObjectWrapper.SetPropertyValues() call ObjectWrapper.SetPropertyValues() call ObjectWrapper.SetPropertyValues() call ObjectWrapper.SetPropertyValues() return protected virtual protected virtual return ! is