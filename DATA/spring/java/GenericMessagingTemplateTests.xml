org.springframework.messaging.core java.util.List import java.util.concurrent.CountDownLatch import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicReference import org.junit.Before import org.junit.Test import org.springframework.messaging.Message import org.springframework.messaging.MessageChannel import org.springframework.messaging.MessageDeliveryException import org.springframework.messaging.MessageHandler import org.springframework.messaging.MessageHeaders import org.springframework.messaging.MessagingException import org.springframework.messaging.StubMessageChannel import org.springframework.messaging.SubscribableChannel import org.springframework.messaging.support.ExecutorSubscribableChannel import org.springframework.messaging.support.GenericMessage import org.springframework.messaging.support.MessageHeaderAccessor import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor import static static org.junit.Assert.* import class org.springframework.messaging.core.GenericMessagingTemplateTests StubMessageChannel GenericMessagingTemplate ThreadPoolTaskExecutor public public = new = new new = new MessageChannel String SubscribableChannel public public decl_stmt org.springframework.messaging.SubscribableChannel = new call org.springframework.messaging.SubscribableChannel.subscribe(MessageHandler) call org.springframework.messaging.SubscribableChannel.subscribe(MessageHandler) call org.springframework.messaging.SubscribableChannel.subscribe(MessageHandler) call org.springframework.messaging.SubscribableChannel.subscribe(MessageHandler) call org.springframework.messaging.SubscribableChannel.subscribe(MessageHandler) new public public < throws decl_stmt org.springframework.messaging.MessageChannel = call org.springframework.messaging.MessageChannel.send(Message) call org.springframework.messaging.MessageChannel.send(Message) call org.springframework.messaging.MessageChannel.send(Message) call org.springframework.messaging.MessageChannel.send(Message) call org.springframework.messaging.MessageChannel.send(Message) new < decl_stmt java.lang.String = MessageChannel public public < throws decl_stmt org.springframework.messaging.MessageChannel = call org.springframework.messaging.MessageChannel.send(Message) call org.springframework.messaging.MessageChannel.send(Message) call org.springframework.messaging.MessageChannel.send(Message) call org.springframework.messaging.MessageChannel.send(Message) call org.springframework.messaging.MessageChannel.send(Message) new < MessageChannel String decl AtomicReference String CountDownLatch SubscribableChannel public public throws decl_stmt java.util.concurrent.atomic.AtomicReference final final final < = new < decl_stmt java.util.concurrent.CountDownLatch final final = new decl_stmt org.springframework.messaging.SubscribableChannel = new call org.springframework.messaging.SubscribableChannel.subscribe(MessageHandler) call org.springframework.messaging.SubscribableChannel.subscribe(MessageHandler) call org.springframework.messaging.SubscribableChannel.subscribe(MessageHandler) call org.springframework.messaging.SubscribableChannel.subscribe(MessageHandler) call org.springframework.messaging.SubscribableChannel.subscribe(MessageHandler) new public public < throws try decl_stmt org.springframework.messaging.MessageChannel = call org.springframework.messaging.MessageChannel.send(Message) call org.springframework.messaging.MessageChannel.send(Message) call org.springframework.messaging.MessageChannel.send(Message) call org.springframework.messaging.MessageChannel.send(Message) call org.springframework.messaging.MessageChannel.send(Message) new < call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() new catch call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() catch decl_stmt java.lang.String = decl_stmt java.lang.String = if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() new + + finally call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) if call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() != throw new call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() String MessageChannel String public public < throws try decl_stmt org.springframework.messaging.MessageChannel = call org.springframework.messaging.MessageChannel.send(Message) call org.springframework.messaging.MessageChannel.send(Message) call org.springframework.messaging.MessageChannel.send(Message) call org.springframework.messaging.MessageChannel.send(Message) call org.springframework.messaging.MessageChannel.send(Message) new < new catch catch decl_stmt java.lang.String = decl_stmt java.lang.String = if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) new + + finally MessageHeaders decl Message decl List MessageHeaderAccessor public public decl_stmt org.springframework.messaging.support.MessageHeaderAccessor = new call org.springframework.messaging.support.MessageHeaderAccessor.setHeader(String,Object) call org.springframework.messaging.support.MessageHeaderAccessor.setHeader(String,Object) call org.springframework.messaging.support.MessageHeaderAccessor.setHeader(String,Object) call org.springframework.messaging.support.MessageHeaderAccessor.setHeader(String,Object) call org.springframework.messaging.support.MessageHeaderAccessor.setHeader(String,Object) call org.springframework.messaging.support.MessageHeaderAccessor.setLeaveMutable(boolean) call org.springframework.messaging.support.MessageHeaderAccessor.setLeaveMutable(boolean) call org.springframework.messaging.support.MessageHeaderAccessor.setLeaveMutable(boolean) call org.springframework.messaging.support.MessageHeaderAccessor.setLeaveMutable(boolean) call org.springframework.messaging.support.MessageHeaderAccessor.setLeaveMutable(boolean) decl_stmt org.springframework.messaging.MessageHeaders = call org.springframework.messaging.support.MessageHeaderAccessor.getMessageHeaders() call org.springframework.messaging.support.MessageHeaderAccessor.getMessageHeaders() call org.springframework.messaging.support.MessageHeaderAccessor.getMessageHeaders() call org.springframework.messaging.support.MessageHeaderAccessor.getMessageHeaders() call org.springframework.messaging.support.MessageHeaderAccessor.getMessageHeaders() decl_stmt java.util.List < < = decl_stmt org.springframework.messaging.Message < = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl Message.getHeaders() call decl Message.getHeaders() call decl Message.getHeaders() call decl Message.getHeaders() call decl Message.getHeaders() call org.springframework.messaging.support.MessageHeaderAccessor.isMutable() call org.springframework.messaging.support.MessageHeaderAccessor.isMutable() call org.springframework.messaging.support.MessageHeaderAccessor.isMutable() call org.springframework.messaging.support.MessageHeaderAccessor.isMutable() call org.springframework.messaging.support.MessageHeaderAccessor.isMutable() public public throws return