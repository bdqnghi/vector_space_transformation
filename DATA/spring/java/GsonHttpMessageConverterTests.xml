org.springframework.http.converter.json java.io.IOException import java.lang.reflect.Type import java.nio.charset.Charset import java.util.ArrayList import java.util.HashMap import java.util.List import java.util.Map import com.google.gson.reflect.TypeToken import org.junit.Test import org.springframework.core.ParameterizedTypeReference import org.springframework.http.MediaType import org.springframework.http.MockHttpInputMessage import org.springframework.http.MockHttpOutputMessage import org.springframework.http.converter.HttpMessageNotReadableException import static static org.junit.Assert.* import class org.springframework.http.converter.json.GsonHttpMessageConverterTests Charset GsonHttpMessageConverter public public new new public public new new public public new new String MockHttpInputMessage MyBean public public throws decl_stmt java.lang.String = + decl_stmt org.springframework.http.MockHttpInputMessage = new call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call org.springframework.http.MockHttpInputMessage.getHeaders() call org.springframework.http.MockHttpInputMessage.getHeaders() call org.springframework.http.MockHttpInputMessage.getHeaders() call org.springframework.http.MockHttpInputMessage.getHeaders() call org.springframework.http.MockHttpInputMessage.getHeaders() new decl_stmt org.springframework.context.annotation.MyBean = call MyBean.getString() call MyBean.getString() call MyBean.getString() call MyBean.getString() call MyBean.getString() call MyBean.getNumber() call MyBean.getNumber() call MyBean.getNumber() call MyBean.getNumber() call MyBean.getNumber() call MyBean.getFraction() call MyBean.getFraction() call MyBean.getFraction() call MyBean.getFraction() call MyBean.getFraction() new call MyBean.getArray() call MyBean.getArray() call MyBean.getArray() call MyBean.getArray() call MyBean.getArray() call MyBean.isBool() call MyBean.isBool() call MyBean.isBool() call MyBean.isBool() call MyBean.isBool() new call MyBean.getBytes() call MyBean.getBytes() call MyBean.getBytes() call MyBean.getBytes() call MyBean.getBytes() String decl byte Number decl HashMap decl List decl List MockHttpInputMessage public public throws decl_stmt java.lang.String = + decl_stmt org.springframework.http.MockHttpInputMessage = new call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call org.springframework.http.MockHttpInputMessage.getHeaders() call org.springframework.http.MockHttpInputMessage.getHeaders() call org.springframework.http.MockHttpInputMessage.getHeaders() call org.springframework.http.MockHttpInputMessage.getHeaders() call org.springframework.http.MockHttpInputMessage.getHeaders() new decl_stmt HashMap < = < call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() decl_stmt java.lang.Number = call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() = call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() decl_stmt java.util.List < = new < call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() decl_stmt byte = new decl_stmt java.util.List < = < call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() for = < ++ = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new MyBean MockHttpOutputMessage String Charset public public throws decl_stmt org.springframework.http.MockHttpOutputMessage = new decl_stmt org.springframework.context.annotation.MyBean = new call MyBean.setString() call MyBean.setString() call MyBean.setString() call MyBean.setString() call MyBean.setString() call MyBean.setNumber() call MyBean.setNumber() call MyBean.setNumber() call MyBean.setNumber() call MyBean.setNumber() call MyBean.setFraction() call MyBean.setFraction() call MyBean.setFraction() call MyBean.setFraction() call MyBean.setFraction() call MyBean.setArray() call MyBean.setArray() call MyBean.setArray() call MyBean.setArray() call MyBean.setArray() new call MyBean.setBool() call MyBean.setBool() call MyBean.setBool() call MyBean.setBool() call MyBean.setBool() call MyBean.setBytes() call MyBean.setBytes() call MyBean.setBytes() call MyBean.setBytes() call MyBean.setBytes() new decl_stmt java.nio.charset.Charset = decl_stmt java.lang.String = call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) new call org.springframework.http.MockHttpOutputMessage.getHeaders() call org.springframework.http.MockHttpOutputMessage.getHeaders() call org.springframework.http.MockHttpOutputMessage.getHeaders() call org.springframework.http.MockHttpOutputMessage.getHeaders() call org.springframework.http.MockHttpOutputMessage.getHeaders() String MockHttpOutputMessage MediaType Charset public public throws decl_stmt java.nio.charset.Charset = decl_stmt org.springframework.http.MediaType = new decl_stmt org.springframework.http.MockHttpOutputMessage = new decl_stmt java.lang.String = + + call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getHeaders() call org.springframework.http.MockHttpOutputMessage.getHeaders() call org.springframework.http.MockHttpOutputMessage.getHeaders() call org.springframework.http.MockHttpOutputMessage.getHeaders() call org.springframework.http.MockHttpOutputMessage.getHeaders() String MockHttpInputMessage = public = public throws decl_stmt java.lang.String = decl_stmt org.springframework.http.MockHttpInputMessage = new call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call org.springframework.http.MockHttpInputMessage.getHeaders() call org.springframework.http.MockHttpInputMessage.getHeaders() call org.springframework.http.MockHttpInputMessage.getHeaders() call org.springframework.http.MockHttpInputMessage.getHeaders() call org.springframework.http.MockHttpInputMessage.getHeaders() new String MyBean decl List GsonHttpMessageConverter MockHttpInputMessage public public throws decl_stmt org.springframework.http.converter.json.GsonHttpMessageConverter = new protected < protected < if instanceof && < return new < < else return decl_stmt java.lang.String = + decl_stmt org.springframework.http.MockHttpInputMessage = new call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call org.springframework.http.MockHttpInputMessage.getHeaders() call org.springframework.http.MockHttpInputMessage.getHeaders() call org.springframework.http.MockHttpInputMessage.getHeaders() call org.springframework.http.MockHttpInputMessage.getHeaders() call org.springframework.http.MockHttpInputMessage.getHeaders() new decl_stmt java.util.List < = < call org.springframework.http.converter.json.GsonHttpMessageConverter.read(Type,Class,HttpInputMessage) call org.springframework.http.converter.json.GsonHttpMessageConverter.read(Type,Class,HttpInputMessage) call org.springframework.http.converter.json.GsonHttpMessageConverter.read(Type,Class,HttpInputMessage) call org.springframework.http.converter.json.GsonHttpMessageConverter.read(Type,Class,HttpInputMessage) call org.springframework.http.converter.json.GsonHttpMessageConverter.read(Type,Class,HttpInputMessage) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt org.springframework.context.annotation.MyBean = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call MyBean.getString() call MyBean.getString() call MyBean.getString() call MyBean.getString() call MyBean.getString() call MyBean.getNumber() call MyBean.getNumber() call MyBean.getNumber() call MyBean.getNumber() call MyBean.getNumber() call MyBean.getFraction() call MyBean.getFraction() call MyBean.getFraction() call MyBean.getFraction() call MyBean.getFraction() new call MyBean.getArray() call MyBean.getArray() call MyBean.getArray() call MyBean.getArray() call MyBean.getArray() call MyBean.isBool() call MyBean.isBool() call MyBean.isBool() call MyBean.isBool() call MyBean.isBool() new call MyBean.getBytes() call MyBean.getBytes() call MyBean.getBytes() call MyBean.getBytes() call MyBean.getBytes() protected < protected < if instanceof && < return new < < else return String GsonHttpMessageConverter decl List decl ParameterizedTypeReference MyBean MockHttpInputMessage public public throws decl_stmt org.springframework.core.ParameterizedTypeReference < < = new < < decl_stmt java.lang.String = + decl_stmt org.springframework.http.MockHttpInputMessage = new call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call org.springframework.http.MockHttpInputMessage.getHeaders() call org.springframework.http.MockHttpInputMessage.getHeaders() call org.springframework.http.MockHttpInputMessage.getHeaders() call org.springframework.http.MockHttpInputMessage.getHeaders() call org.springframework.http.MockHttpInputMessage.getHeaders() new decl_stmt org.springframework.http.converter.json.GsonHttpMessageConverter = new decl_stmt java.util.List < = < call org.springframework.http.converter.json.GsonHttpMessageConverter.read(Type,Class,HttpInputMessage) call org.springframework.http.converter.json.GsonHttpMessageConverter.read(Type,Class,HttpInputMessage) call org.springframework.http.converter.json.GsonHttpMessageConverter.read(Type,Class,HttpInputMessage) call org.springframework.http.converter.json.GsonHttpMessageConverter.read(Type,Class,HttpInputMessage) call org.springframework.http.converter.json.GsonHttpMessageConverter.read(Type,Class,HttpInputMessage) call decl ParameterizedTypeReference.getType() call decl ParameterizedTypeReference.getType() call decl ParameterizedTypeReference.getType() call decl ParameterizedTypeReference.getType() call decl ParameterizedTypeReference.getType() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt org.springframework.context.annotation.MyBean = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call MyBean.getString() call MyBean.getString() call MyBean.getString() call MyBean.getString() call MyBean.getString() call MyBean.getNumber() call MyBean.getNumber() call MyBean.getNumber() call MyBean.getNumber() call MyBean.getNumber() call MyBean.getFraction() call MyBean.getFraction() call MyBean.getFraction() call MyBean.getFraction() call MyBean.getFraction() new call MyBean.getArray() call MyBean.getArray() call MyBean.getArray() call MyBean.getArray() call MyBean.getArray() call MyBean.isBool() call MyBean.isBool() call MyBean.isBool() call MyBean.isBool() call MyBean.isBool() new call MyBean.getBytes() call MyBean.getBytes() call MyBean.getBytes() call MyBean.getBytes() call MyBean.getBytes() MockHttpOutputMessage public public throws decl_stmt org.springframework.http.MockHttpOutputMessage = new call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) MockHttpOutputMessage public public throws decl_stmt org.springframework.http.MockHttpOutputMessage = new call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) public public return public public = public public return public public = public public return public public = public public return public public = public public return public public = public public return public public =