org.springframework.core java.io.IOException import java.io.ObjectInputStream import java.io.Serializable import java.lang.reflect.Field import java.lang.reflect.GenericArrayType import java.lang.reflect.InvocationHandler import java.lang.reflect.InvocationTargetException import java.lang.reflect.Method import java.lang.reflect.ParameterizedType import java.lang.reflect.Proxy import java.lang.reflect.Type import java.lang.reflect.TypeVariable import java.lang.reflect.WildcardType import org.springframework.util.Assert import org.springframework.util.ConcurrentReferenceHashMap import org.springframework.util.ReflectionUtils import class org.springframework.core.SerializableTypeWrapper decl ConcurrentReferenceHashMap public static public static return new public static public static return new public static public static final final final < return new public public return public public return int decl Type public static public static final final final < decl_stmt org.springframework.asm.Type = new for = < ++ decl_stmt int final final = = new public public return return public public return int decl Type public static public static final final final < decl_stmt org.springframework.asm.Type = new for = < ++ decl_stmt int final final = = new public public return return public public return Type public static < extends extends public static < extends extends decl_stmt org.springframework.asm.Type = while instanceof = return Type ClassLoader InvocationHandler static static final final if instanceof || == return decl_stmt org.springframework.asm.Type = if != return for < : if decl_stmt java.lang.ClassLoader = decl_stmt java.lang.ClassLoader = decl_stmt java.lang.reflect.InvocationHandler = new = return throw new + public public return Object decl Type public public throws if decl_stmt java.lang.Object = if instanceof = return else if return else if return if == && == return new - else if == && == decl_stmt org.springframework.asm.Type = new for = < ++ = new return try return catch throw public public return public public return private private throws try = catch throw new public public return public public return private private throws try if != = new else = new catch throw new Object public public decl_stmt java.lang.Object = if == = = return instanceof : public public return private private throws = == || ==