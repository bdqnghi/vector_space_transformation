org.springframework.web.client java.io.IOException import java.lang.reflect.Type import java.util.List import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.http.MediaType import org.springframework.http.client.ClientHttpResponse import org.springframework.http.converter.GenericHttpMessageConverter import org.springframework.http.converter.HttpMessageConverter import org.springframework.util.Assert import class super super implements Type Log decl Class decl List MediaType MessageBodyClientHttpResponseWrapper decl GenericHttpMessageConverter public public throws decl_stmt org.springframework.web.client.MessageBodyClientHttpResponseWrapper = new if ! call org.springframework.web.client.MessageBodyClientHttpResponseWrapper.hasMessageBody() call org.springframework.web.client.MessageBodyClientHttpResponseWrapper.hasMessageBody() call org.springframework.web.client.MessageBodyClientHttpResponseWrapper.hasMessageBody() call org.springframework.web.client.MessageBodyClientHttpResponseWrapper.hasMessageBody() call org.springframework.web.client.MessageBodyClientHttpResponseWrapper.hasMessageBody() || call org.springframework.web.client.MessageBodyClientHttpResponseWrapper.hasEmptyMessageBody() call org.springframework.web.client.MessageBodyClientHttpResponseWrapper.hasEmptyMessageBody() call org.springframework.web.client.MessageBodyClientHttpResponseWrapper.hasEmptyMessageBody() call org.springframework.web.client.MessageBodyClientHttpResponseWrapper.hasEmptyMessageBody() call org.springframework.web.client.MessageBodyClientHttpResponseWrapper.hasEmptyMessageBody() return decl_stmt org.springframework.http.MediaType = for < : if instanceof decl_stmt org.springframework.http.converter.GenericHttpMessageConverter < = < if call decl GenericHttpMessageConverter.canRead() call decl GenericHttpMessageConverter.canRead() call decl GenericHttpMessageConverter.canRead() call decl GenericHttpMessageConverter.canRead() call decl GenericHttpMessageConverter.canRead() if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + + + + return call decl GenericHttpMessageConverter.read() call decl GenericHttpMessageConverter.read() call decl GenericHttpMessageConverter.read() call decl GenericHttpMessageConverter.read() call decl GenericHttpMessageConverter.read() if != if if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + + + + return throw new + + + + + MediaType private private decl_stmt org.springframework.http.MediaType = if == if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() = return