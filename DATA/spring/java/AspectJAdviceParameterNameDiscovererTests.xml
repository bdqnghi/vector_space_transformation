org.springframework.aop.aspectj java.lang.reflect.Method import org.aspectj.lang.JoinPoint import org.junit.Test import org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.AmbiguousBindingException import static static org.junit.Assert.* import class org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscovererTests public public public public public public public public public public public public public public public public public public public public public public public public public public public public new public public new public public new public public public public new public public new public public public public public public new public public public public public public new public public new new new new new public public public public public public new public public new new new new new public public public public public public new public public public public public public new public public public public new public public new public public new public public new public public new public public new new new decl Method protected protected decl_stmt com.sun.jdi.Method = for = < ++ if return + + return protected protected decl String String String AspectJAdviceParameterNameDiscoverer protected protected decl_stmt org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer = new call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setRaiseExceptions(boolean) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setRaiseExceptions(boolean) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setRaiseExceptions(boolean) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setRaiseExceptions(boolean) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setRaiseExceptions(boolean) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setReturningName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setReturningName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setReturningName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setReturningName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setReturningName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setThrowingName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setThrowingName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setThrowingName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setThrowingName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setThrowingName(String) decl_stmt java.lang.String = call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.getParameterNames(Constructor) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.getParameterNames(Constructor) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.getParameterNames(Constructor) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.getParameterNames(Constructor) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.getParameterNames(Constructor) decl_stmt java.lang.String = decl_stmt java.lang.String = + + + + + + + + for = < ++ + + + + + + protected protected < AspectJAdviceParameterNameDiscoverer protected protected < decl_stmt org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer = new call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setRaiseExceptions(boolean) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setRaiseExceptions(boolean) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setRaiseExceptions(boolean) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setRaiseExceptions(boolean) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setRaiseExceptions(boolean) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setReturningName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setReturningName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setReturningName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setReturningName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setReturningName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setThrowingName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setThrowingName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setThrowingName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setThrowingName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setThrowingName(String) try call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.getParameterNames(Constructor) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.getParameterNames(Constructor) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.getParameterNames(Constructor) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.getParameterNames(Constructor) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.getParameterNames(Constructor) + + + + catch + StringBuffer private static private static decl_stmt java.lang.StringBuffer = new call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) for = < ++ call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) if + < call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) return call java.lang.StringBuffer.toString() call java.lang.StringBuffer.toString() call java.lang.StringBuffer.toString() call java.lang.StringBuffer.toString() call java.lang.StringBuffer.toString()