org.springframework.expression.spel java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.List import org.junit.Before import org.junit.Test import org.springframework.core.MethodParameter import org.springframework.core.convert.ConversionService import org.springframework.core.convert.TypeDescriptor import org.springframework.core.convert.support.DefaultConversionService import org.springframework.expression.EvaluationException import org.springframework.expression.Expression import org.springframework.expression.TypeConverter import org.springframework.expression.spel.support.StandardEvaluationContext import static static org.junit.Assert.* import class org.springframework.expression.spel.ExpressionWithConversionTests super super extends decl List TypeDescriptor TypeDescriptor decl List public public throws = new = new decl List TypeConvertorUsingConversionService decl Class public public throws decl_stmt TypeConvertorUsingConversionService = new decl_stmt java.lang.Class < = call org.springframework.core.convert.TypeDescriptor.getElementTypeDescriptor() call org.springframework.core.convert.TypeDescriptor.getElementTypeDescriptor() call org.springframework.core.convert.TypeDescriptor.getElementTypeDescriptor() call org.springframework.core.convert.TypeDescriptor.getElementTypeDescriptor() call org.springframework.core.convert.TypeDescriptor.getElementTypeDescriptor() decl_stmt java.util.List < = < call TypeConvertorUsingConversionService.convertValue() call TypeConvertorUsingConversionService.convertValue() call TypeConvertorUsingConversionService.convertValue() call TypeConvertorUsingConversionService.convertValue() call TypeConvertorUsingConversionService.convertValue() = call org.springframework.core.convert.TypeDescriptor.getElementTypeDescriptor() call org.springframework.core.convert.TypeDescriptor.getElementTypeDescriptor() call org.springframework.core.convert.TypeDescriptor.getElementTypeDescriptor() call org.springframework.core.convert.TypeDescriptor.getElementTypeDescriptor() call org.springframework.core.convert.TypeDescriptor.getElementTypeDescriptor() = < call TypeConvertorUsingConversionService.convertValue() call TypeConvertorUsingConversionService.convertValue() call TypeConvertorUsingConversionService.convertValue() call TypeConvertorUsingConversionService.convertValue() call TypeConvertorUsingConversionService.convertValue() Expression StandardEvaluationContext decl Class public public throws decl_stmt org.springframework.expression.spel.support.StandardEvaluationContext = decl_stmt org.springframework.expression.Expression = call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.spel.support.StandardEvaluationContext.setTypeConverter(TypeConverter) call org.springframework.expression.spel.support.StandardEvaluationContext.setTypeConverter(TypeConverter) call org.springframework.expression.spel.support.StandardEvaluationContext.setTypeConverter(TypeConverter) call org.springframework.expression.spel.support.StandardEvaluationContext.setTypeConverter(TypeConverter) call org.springframework.expression.spel.support.StandardEvaluationContext.setTypeConverter(TypeConverter) new call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() decl_stmt java.lang.Class < = TypeDescriptor int int StandardEvaluationContext public public throws class class public public < decl_stmt int = for : += return decl_stmt org.springframework.expression.spel.support.StandardEvaluationContext = new decl_stmt org.springframework.core.convert.TypeDescriptor = new new call org.springframework.expression.spel.support.StandardEvaluationContext.getTypeConverter() call org.springframework.expression.spel.support.StandardEvaluationContext.getTypeConverter() call org.springframework.expression.spel.support.StandardEvaluationContext.getTypeConverter() call org.springframework.expression.spel.support.StandardEvaluationContext.getTypeConverter() call org.springframework.expression.spel.support.StandardEvaluationContext.getTypeConverter() call org.springframework.expression.spel.support.StandardEvaluationContext.getTypeConverter() call org.springframework.expression.spel.support.StandardEvaluationContext.getTypeConverter() call org.springframework.expression.spel.support.StandardEvaluationContext.getTypeConverter() call org.springframework.expression.spel.support.StandardEvaluationContext.getTypeConverter() call org.springframework.expression.spel.support.StandardEvaluationContext.getTypeConverter() call org.springframework.expression.spel.support.StandardEvaluationContext.setVariable(String,Object) call org.springframework.expression.spel.support.StandardEvaluationContext.setVariable(String,Object) call org.springframework.expression.spel.support.StandardEvaluationContext.setVariable(String,Object) call org.springframework.expression.spel.support.StandardEvaluationContext.setVariable(String,Object) call org.springframework.expression.spel.support.StandardEvaluationContext.setVariable(String,Object) new decl_stmt int = + int public public < decl_stmt int = for : += return Expression Foo Foo StandardEvaluationContext decl Collection public public decl_stmt org.springframework.beans.Foo = new decl_stmt java.util.Collection < = decl_stmt org.springframework.expression.spel.support.StandardEvaluationContext = new decl_stmt org.springframework.expression.Expression = call org.springframework.expression.Expression.setValue(Object,Object) call org.springframework.expression.Expression.setValue(Object,Object) call org.springframework.expression.Expression.setValue(Object,Object) call org.springframework.expression.Expression.setValue(Object,Object) call org.springframework.expression.Expression.setValue(Object,Object) decl_stmt org.springframework.beans.Foo = call Foo.getFoos() call Foo.getFoos() call Foo.getFoos() call Foo.getFoos() call Foo.getFoos() = call org.springframework.expression.spel.support.StandardEvaluationContext.setVariable(String,Object) call org.springframework.expression.spel.support.StandardEvaluationContext.setVariable(String,Object) call org.springframework.expression.spel.support.StandardEvaluationContext.setVariable(String,Object) call org.springframework.expression.spel.support.StandardEvaluationContext.setVariable(String,Object) call org.springframework.expression.spel.support.StandardEvaluationContext.setVariable(String,Object) call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() = call Foo.getFoos() call Foo.getFoos() call Foo.getFoos() call Foo.getFoos() call Foo.getFoos() = call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() = call Foo.getFoos() call Foo.getFoos() call Foo.getFoos() call Foo.getFoos() call Foo.getFoos() = call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() = call Foo.getFoos() call Foo.getFoos() call Foo.getFoos() call Foo.getFoos() call Foo.getFoos() public public return public public throws return public public < = public < public < return public < public < return public < public < return