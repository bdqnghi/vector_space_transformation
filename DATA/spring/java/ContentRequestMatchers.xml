org.springframework.test.web.client.match java.io.ByteArrayInputStream import java.io.IOException import java.io.InputStream import javax.xml.transform.Source import javax.xml.transform.dom.DOMSource import org.hamcrest.Matcher import org.w3c.dom.Node import org.springframework.http.HttpHeaders import org.springframework.http.HttpInputMessage import org.springframework.http.MediaType import org.springframework.http.client.ClientHttpRequest import org.springframework.http.converter.FormHttpMessageConverter import org.springframework.mock.http.client.MockClientHttpRequest import org.springframework.test.util.XmlExpectationsHelper import org.springframework.test.web.client.RequestMatcher import org.springframework.util.MultiValueMap import static static org.hamcrest.MatcherAssert.* import static static org.springframework.test.util.AssertionErrors.* import class org.springframework.test.web.client.match.ContentRequestMatchers XmlExpectationsHelper public public return MediaType public public final final return new public public throws decl_stmt org.springframework.http.MediaType = != MediaType public public throws decl_stmt org.springframework.http.MediaType = != public public return MediaType public public final final return new public public throws decl_stmt org.springframework.http.MediaType = != + + + + call org.springframework.http.MediaType.isCompatibleWith(MediaType) call org.springframework.http.MediaType.isCompatibleWith(MediaType) call org.springframework.http.MediaType.isCompatibleWith(MediaType) call org.springframework.http.MediaType.isCompatibleWith(MediaType) call org.springframework.http.MediaType.isCompatibleWith(MediaType) MediaType public public throws decl_stmt org.springframework.http.MediaType = != + + + + call org.springframework.http.MediaType.isCompatibleWith(MediaType) call org.springframework.http.MediaType.isCompatibleWith(MediaType) call org.springframework.http.MediaType.isCompatibleWith(MediaType) call org.springframework.http.MediaType.isCompatibleWith(MediaType) call org.springframework.http.MediaType.isCompatibleWith(MediaType) MockClientHttpRequest public public final final final < super super return new public public throws decl_stmt org.springframework.mock.http.client.MockClientHttpRequest = call MockClientHttpRequest.getBodyAsString() call MockClientHttpRequest.getBodyAsString() call MockClientHttpRequest.getBodyAsString() call MockClientHttpRequest.getBodyAsString() call MockClientHttpRequest.getBodyAsString() MockClientHttpRequest public public throws decl_stmt org.springframework.mock.http.client.MockClientHttpRequest = call MockClientHttpRequest.getBodyAsString() call MockClientHttpRequest.getBodyAsString() call MockClientHttpRequest.getBodyAsString() call MockClientHttpRequest.getBodyAsString() call MockClientHttpRequest.getBodyAsString() MockClientHttpRequest public public final final return new public public throws decl_stmt org.springframework.mock.http.client.MockClientHttpRequest = call MockClientHttpRequest.getBodyAsString() call MockClientHttpRequest.getBodyAsString() call MockClientHttpRequest.getBodyAsString() call MockClientHttpRequest.getBodyAsString() call MockClientHttpRequest.getBodyAsString() MockClientHttpRequest public public throws decl_stmt org.springframework.mock.http.client.MockClientHttpRequest = call MockClientHttpRequest.getBodyAsString() call MockClientHttpRequest.getBodyAsString() call MockClientHttpRequest.getBodyAsString() call MockClientHttpRequest.getBodyAsString() call MockClientHttpRequest.getBodyAsString() MockClientHttpRequest public public final final final return new public public throws decl_stmt org.springframework.mock.http.client.MockClientHttpRequest = call MockClientHttpRequest.getBodyAsBytes() call MockClientHttpRequest.getBodyAsBytes() call MockClientHttpRequest.getBodyAsBytes() call MockClientHttpRequest.getBodyAsBytes() call MockClientHttpRequest.getBodyAsBytes() MockClientHttpRequest public public throws decl_stmt org.springframework.mock.http.client.MockClientHttpRequest = call MockClientHttpRequest.getBodyAsBytes() call MockClientHttpRequest.getBodyAsBytes() call MockClientHttpRequest.getBodyAsBytes() call MockClientHttpRequest.getBodyAsBytes() call MockClientHttpRequest.getBodyAsBytes() MockClientHttpRequest HttpInputMessage FormHttpMessageConverter public public final final final < return new public public final final throws decl_stmt org.springframework.http.HttpInputMessage = new public public throws decl_stmt org.springframework.mock.http.client.MockClientHttpRequest = return new call MockClientHttpRequest.getBodyAsBytes() call MockClientHttpRequest.getBodyAsBytes() call MockClientHttpRequest.getBodyAsBytes() call MockClientHttpRequest.getBodyAsBytes() call MockClientHttpRequest.getBodyAsBytes() public public return decl_stmt org.springframework.http.converter.FormHttpMessageConverter = new call org.springframework.http.converter.FormHttpMessageConverter.read(Class,HttpInputMessage) call org.springframework.http.converter.FormHttpMessageConverter.read(Class,HttpInputMessage) call org.springframework.http.converter.FormHttpMessageConverter.read(Class,HttpInputMessage) call org.springframework.http.converter.FormHttpMessageConverter.read(Class,HttpInputMessage) call org.springframework.http.converter.FormHttpMessageConverter.read(Class,HttpInputMessage) MockClientHttpRequest HttpInputMessage FormHttpMessageConverter public public final final throws decl_stmt org.springframework.http.HttpInputMessage = new public public throws decl_stmt org.springframework.mock.http.client.MockClientHttpRequest = return new call MockClientHttpRequest.getBodyAsBytes() call MockClientHttpRequest.getBodyAsBytes() call MockClientHttpRequest.getBodyAsBytes() call MockClientHttpRequest.getBodyAsBytes() call MockClientHttpRequest.getBodyAsBytes() public public return decl_stmt org.springframework.http.converter.FormHttpMessageConverter = new call org.springframework.http.converter.FormHttpMessageConverter.read(Class,HttpInputMessage) call org.springframework.http.converter.FormHttpMessageConverter.read(Class,HttpInputMessage) call org.springframework.http.converter.FormHttpMessageConverter.read(Class,HttpInputMessage) call org.springframework.http.converter.FormHttpMessageConverter.read(Class,HttpInputMessage) call org.springframework.http.converter.FormHttpMessageConverter.read(Class,HttpInputMessage) MockClientHttpRequest public public throws decl_stmt org.springframework.mock.http.client.MockClientHttpRequest = return new call MockClientHttpRequest.getBodyAsBytes() call MockClientHttpRequest.getBodyAsBytes() call MockClientHttpRequest.getBodyAsBytes() call MockClientHttpRequest.getBodyAsBytes() call MockClientHttpRequest.getBodyAsBytes() public public return public public final final return new protected protected throws call org.springframework.test.util.XmlExpectationsHelper.assertXmlEqual(String,String) call org.springframework.test.util.XmlExpectationsHelper.assertXmlEqual(String,String) call org.springframework.test.util.XmlExpectationsHelper.assertXmlEqual(String,String) call org.springframework.test.util.XmlExpectationsHelper.assertXmlEqual(String,String) call org.springframework.test.util.XmlExpectationsHelper.assertXmlEqual(String,String) protected protected throws call org.springframework.test.util.XmlExpectationsHelper.assertXmlEqual(String,String) call org.springframework.test.util.XmlExpectationsHelper.assertXmlEqual(String,String) call org.springframework.test.util.XmlExpectationsHelper.assertXmlEqual(String,String) call org.springframework.test.util.XmlExpectationsHelper.assertXmlEqual(String,String) call org.springframework.test.util.XmlExpectationsHelper.assertXmlEqual(String,String) public public final final final < super super return new protected protected throws call org.springframework.test.util.XmlExpectationsHelper.assertNode(String,Matcher) call org.springframework.test.util.XmlExpectationsHelper.assertNode(String,Matcher) call org.springframework.test.util.XmlExpectationsHelper.assertNode(String,Matcher) call org.springframework.test.util.XmlExpectationsHelper.assertNode(String,Matcher) call org.springframework.test.util.XmlExpectationsHelper.assertNode(String,Matcher) protected protected throws call org.springframework.test.util.XmlExpectationsHelper.assertNode(String,Matcher) call org.springframework.test.util.XmlExpectationsHelper.assertNode(String,Matcher) call org.springframework.test.util.XmlExpectationsHelper.assertNode(String,Matcher) call org.springframework.test.util.XmlExpectationsHelper.assertNode(String,Matcher) call org.springframework.test.util.XmlExpectationsHelper.assertNode(String,Matcher) public public final final final < super super return new protected protected throws call XmlExpectationsHelper.assertSource() call XmlExpectationsHelper.assertSource() call XmlExpectationsHelper.assertSource() call XmlExpectationsHelper.assertSource() call XmlExpectationsHelper.assertSource() protected protected throws call XmlExpectationsHelper.assertSource() call XmlExpectationsHelper.assertSource() call XmlExpectationsHelper.assertSource() call XmlExpectationsHelper.assertSource() call XmlExpectationsHelper.assertSource() MockClientHttpRequest public final public final throws try decl_stmt org.springframework.mock.http.client.MockClientHttpRequest = catch throw new +