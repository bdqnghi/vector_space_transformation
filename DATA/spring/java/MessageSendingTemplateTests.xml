org.springframework.messaging.core java.nio.charset.Charset import java.util.Arrays import java.util.HashMap import java.util.Map import org.junit.Before import org.junit.Test import org.springframework.messaging.Message import org.springframework.messaging.MessageHeaders import org.springframework.messaging.converter.CompositeMessageConverter import org.springframework.messaging.converter.MappingJackson2MessageConverter import org.springframework.messaging.converter.MessageConversionException import org.springframework.messaging.converter.MessageConverter import org.springframework.messaging.converter.StringMessageConverter import org.springframework.messaging.support.GenericMessage import org.springframework.messaging.support.MessageHeaderAccessor import org.springframework.util.MimeType import org.springframework.util.MimeTypeUtils import static static org.junit.Assert.* import class org.springframework.messaging.core.MessageSendingTemplateTests decl Map TestMessageSendingTemplate TestMessagePostProcessor public public = new = new = new <> decl Message public public decl_stmt org.springframework.messaging.Message < = new < decl Message public public decl_stmt org.springframework.messaging.Message < = new < decl Message = public = public decl_stmt org.springframework.messaging.Message < = new < public public public public public public public public MessageHeaders MessageHeaders MessageHeaderAccessor public public decl_stmt org.springframework.messaging.support.MessageHeaderAccessor = new call org.springframework.messaging.support.MessageHeaderAccessor.setHeader(String,Object) call org.springframework.messaging.support.MessageHeaderAccessor.setHeader(String,Object) call org.springframework.messaging.support.MessageHeaderAccessor.setHeader(String,Object) call org.springframework.messaging.support.MessageHeaderAccessor.setHeader(String,Object) call org.springframework.messaging.support.MessageHeaderAccessor.setHeader(String,Object) call org.springframework.messaging.support.MessageHeaderAccessor.setLeaveMutable(boolean) call org.springframework.messaging.support.MessageHeaderAccessor.setLeaveMutable(boolean) call org.springframework.messaging.support.MessageHeaderAccessor.setLeaveMutable(boolean) call org.springframework.messaging.support.MessageHeaderAccessor.setLeaveMutable(boolean) call org.springframework.messaging.support.MessageHeaderAccessor.setLeaveMutable(boolean) decl_stmt org.springframework.messaging.MessageHeaders = call org.springframework.messaging.support.MessageHeaderAccessor.getMessageHeaders() call org.springframework.messaging.support.MessageHeaderAccessor.getMessageHeaders() call org.springframework.messaging.support.MessageHeaderAccessor.getMessageHeaders() call org.springframework.messaging.support.MessageHeaderAccessor.getMessageHeaders() call org.springframework.messaging.support.MessageHeaderAccessor.getMessageHeaders() new decl_stmt org.springframework.messaging.MessageHeaders = new call org.springframework.messaging.MessageHeaders.get(Object,Class) call org.springframework.messaging.MessageHeaders.get(Object,Class) call org.springframework.messaging.MessageHeaders.get(Object,Class) call org.springframework.messaging.MessageHeaders.get(Object,Class) call org.springframework.messaging.MessageHeaders.get(Object,Class) call org.springframework.messaging.MessageHeaders.get(Object,Class) call org.springframework.messaging.MessageHeaders.get(Object,Class) call org.springframework.messaging.MessageHeaders.get(Object,Class) call org.springframework.messaging.MessageHeaders.get(Object,Class) call org.springframework.messaging.MessageHeaders.get(Object,Class) public public public public MessageConverter = public = public decl_stmt org.springframework.jms.support.converter.MessageConverter = new > new new protected protected < = =