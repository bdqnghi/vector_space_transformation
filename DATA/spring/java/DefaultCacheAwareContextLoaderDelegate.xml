org.springframework.test.context.cache org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.context.ApplicationContext import org.springframework.test.annotation.DirtiesContext.HierarchyMode import org.springframework.test.context.CacheAwareContextLoaderDelegate import org.springframework.test.context.ContextLoader import org.springframework.test.context.MergedContextConfiguration import org.springframework.test.context.SmartContextLoader import org.springframework.util.Assert import class org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate super super implements ContextCache Log ContextCache protected protected return ApplicationContext SmartContextLoader ContextLoader decl String protected protected throws decl_stmt org.springframework.test.context.ContextLoader = + decl_stmt org.springframework.context.ApplicationContext if instanceof decl_stmt org.springframework.test.context.SmartContextLoader = = call org.springframework.test.context.SmartContextLoader.loadContext(MergedContextConfiguration) call org.springframework.test.context.SmartContextLoader.loadContext(MergedContextConfiguration) call org.springframework.test.context.SmartContextLoader.loadContext(MergedContextConfiguration) call org.springframework.test.context.SmartContextLoader.loadContext(MergedContextConfiguration) call org.springframework.test.context.SmartContextLoader.loadContext(MergedContextConfiguration) else decl_stmt java.lang.String = + = call org.springframework.test.context.ContextLoader.loadContext(String) call org.springframework.test.context.ContextLoader.loadContext(String) call org.springframework.test.context.ContextLoader.loadContext(String) call org.springframework.test.context.ContextLoader.loadContext(String) call org.springframework.test.context.ContextLoader.loadContext(String) return ApplicationContext public public synchronized decl_stmt org.springframework.context.ApplicationContext = if == try = if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() catch throw new else if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() return public public synchronized