org.springframework.remoting.jaxws java.lang.reflect.InvocationTargetException import java.lang.reflect.Method import java.net.MalformedURLException import java.net.URL import java.util.HashMap import java.util.Map import javax.jws.WebService import javax.xml.namespace.QName import javax.xml.ws.BindingProvider import javax.xml.ws.ProtocolException import javax.xml.ws.Service import javax.xml.ws.WebServiceException import javax.xml.ws.WebServiceFeature import javax.xml.ws.soap.SOAPFaultException import org.aopalliance.intercept.MethodInterceptor import org.aopalliance.intercept.MethodInvocation import org.springframework.aop.support.AopUtils import org.springframework.beans.BeanUtils import org.springframework.beans.factory.BeanClassLoaderAware import org.springframework.beans.factory.InitializingBean import org.springframework.remoting.RemoteAccessException import org.springframework.remoting.RemoteConnectFailureException import org.springframework.remoting.RemoteLookupFailureException import org.springframework.remoting.RemoteProxyFailureException import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.StringUtils import class org.springframework.remoting.jaxws.JaxWsPortClientInterceptor super super extends super implements String decl WebServiceFeature decl Map QName boolean Object Object Service decl Class ClassLoader decl Object String String String String boolean boolean public public = public public return public public = public public return public public = public public return public public = public public return public public = public public return public public = public public return public public = public public return public public = public public return public public < = public < public < if == = new < return public public public public = public public = public public < if != && ! call decl Class.isInterface() call decl Class.isInterface() call decl Class.isInterface() call decl Class.isInterface() call decl Class.isInterface() throw new = public < public < return public public = public public = protected protected return public public if Object WebService Service decl Class public public decl_stmt java.lang.Class < = if == throw new decl_stmt WebService = call decl Class.getAnnotation() call decl Class.getAnnotation() call decl Class.getAnnotation() call decl Class.getAnnotation() call decl Class.getAnnotation() if != decl_stmt org.springframework.context.annotation.configuration.Service = if == = = != : decl_stmt java.lang.Object = != : = String String String String protected protected if == decl_stmt java.lang.String = if try new catch throw new + + if == decl_stmt java.lang.String = if if == decl_stmt java.lang.String = if if == decl_stmt java.lang.String = if protected protected synchronized return != protected final protected final return decl WebServiceFeature protected protected if != || != decl_stmt WebServiceFeature = if == = new for = < ++ = return != : else return != : decl Class private private if instanceof return else if instanceof return < else if instanceof try decl_stmt java.lang.Class < = return catch throw new + + else throw new + String String String decl Map String protected protected decl_stmt java.util.Map < = new < decl_stmt java.lang.String = if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt java.lang.String = if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt java.lang.String = if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt java.lang.String = if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() if ! call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() if ! instanceof throw new + + protected protected return public public throws if return + + + + synchronized if ! return protected protected throws try return catch throw new catch throw new + + catch throw new + + Method protected protected throws decl_stmt com.sun.jdi.Method = try return call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) catch throw catch throw new +