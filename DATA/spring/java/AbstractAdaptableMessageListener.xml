org.springframework.jms.listener.adapter javax.jms.BytesMessage import javax.jms.Destination import javax.jms.InvalidDestinationException import javax.jms.JMSException import javax.jms.Message import javax.jms.MessageListener import javax.jms.MessageProducer import javax.jms.Session import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.jms.listener.SessionAwareMessageListener import org.springframework.jms.support.JmsHeaderMapper import org.springframework.jms.support.JmsUtils import org.springframework.jms.support.SimpleJmsHeaderMapper import org.springframework.jms.support.converter.MessageConversionException import org.springframework.jms.support.converter.MessageConverter import org.springframework.jms.support.converter.MessagingMessageConverter import org.springframework.jms.support.converter.SimpleMessageConverter import org.springframework.jms.support.converter.SmartMessageConverter import org.springframework.jms.support.destination.DestinationResolver import org.springframework.jms.support.destination.DynamicDestinationResolver import org.springframework.util.Assert import class org.springframework.jms.listener.adapter.AbstractAdaptableMessageListener super super implements Log Object DestinationResolver MessagingMessageConverterAdapter MessageConverter public public = public public = new public public = new public public = protected protected return public public = protected protected return public public protected final protected final return public public try catch protected protected call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() MessageConverter protected protected try decl_stmt org.springframework.jms.support.converter.MessageConverter = if != return call org.springframework.jms.support.converter.MessageConverter.fromMessage(Message) call org.springframework.jms.support.converter.MessageConverter.fromMessage(Message) call org.springframework.jms.support.converter.MessageConverter.fromMessage(Message) call org.springframework.jms.support.converter.MessageConverter.fromMessage(Message) call org.springframework.jms.support.converter.MessageConverter.fromMessage(Message) return catch throw new Destination Message protected protected if != if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + try decl_stmt org.springframework.messaging.Message = decl_stmt javax.print.attribute.standard.Destination = catch throw new + + else if call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() + + Object MessageConverter protected protected throws decl_stmt java.lang.Object = instanceof < : decl_stmt org.springframework.jms.support.converter.MessageConverter = if != if instanceof return else return call MessageConverter.toMessage() call MessageConverter.toMessage() call MessageConverter.toMessage() call MessageConverter.toMessage() call MessageConverter.toMessage() if ! instanceof throw new + + return protected protected return String protected protected throws decl_stmt java.lang.String = if == = decl JmsResponse Destination private private throws if instanceof decl_stmt org.springframework.jms.listener.adapter.JmsResponse < = decl_stmt javax.print.attribute.standard.Destination = call decl JmsResponse.resolveDestination() call decl JmsResponse.resolveDestination() call decl JmsResponse.resolveDestination() call decl JmsResponse.resolveDestination() call decl JmsResponse.resolveDestination() if != return return Destination protected protected throws decl_stmt javax.print.attribute.standard.Destination = if == = if == throw new + return DestinationNameHolder protected protected throws if instanceof return if instanceof decl_stmt DestinationNameHolder = return return MessageProducer protected protected throws decl_stmt MessageProducer = try call MessageProducer.send() call MessageProducer.send() call MessageProducer.send() call MessageProducer.send() call MessageProducer.send() finally protected protected throws Object protected protected throws decl_stmt java.lang.Object = if instanceof try catch call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() return MessageConverter protected protected throws decl_stmt org.springframework.jms.support.converter.MessageConverter = if == throw new + + if instanceof return return call MessageConverter.toMessage() call MessageConverter.toMessage() call MessageConverter.toMessage() call MessageConverter.toMessage() call MessageConverter.toMessage()