org.springframework.messaging.support java.util.concurrent.atomic.AtomicInteger import org.junit.Before import org.junit.Rule import org.junit.Test import org.junit.rules.ExpectedException import org.mockito.ArgumentCaptor import org.mockito.Captor import org.mockito.Mock import org.mockito.MockitoAnnotations import org.springframework.core.task.TaskExecutor import org.springframework.messaging.Message import org.springframework.messaging.MessageChannel import org.springframework.messaging.MessageDeliveryException import org.springframework.messaging.MessageHandler import static static org.hamcrest.Matchers.* import static static org.junit.Assert.* import static static org.mockito.BDDMockito.* import class org.springframework.messaging.support.ExecutorSubscribableChannelTests ExpectedException decl ArgumentCaptor MessageHandler decl Message Object ExecutorSubscribableChannel public public public public throws call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expectMessage() call ExpectedException.expectMessage() call ExpectedException.expectMessage() call ExpectedException.expectMessage() call ExpectedException.expectMessage() BeforeHandleInterceptor public public decl_stmt BeforeHandleInterceptor = new call BeforeHandleInterceptor.getCounter() call BeforeHandleInterceptor.getCounter() call BeforeHandleInterceptor.getCounter() call BeforeHandleInterceptor.getCounter() call BeforeHandleInterceptor.getCounter() call BeforeHandleInterceptor.wasAfterHandledInvoked() call BeforeHandleInterceptor.wasAfterHandledInvoked() call BeforeHandleInterceptor.wasAfterHandledInvoked() call BeforeHandleInterceptor.wasAfterHandledInvoked() call BeforeHandleInterceptor.wasAfterHandledInvoked() BeforeHandleInterceptor ExecutorSubscribableChannel TaskExecutor public public throws decl_stmt BeforeHandleInterceptor = new decl_stmt org.springframework.core.task.TaskExecutor = decl_stmt org.springframework.messaging.support.ExecutorSubscribableChannel = new call org.springframework.messaging.support.ExecutorSubscribableChannel.addInterceptor(ChannelInterceptor) call org.springframework.messaging.support.ExecutorSubscribableChannel.addInterceptor(ChannelInterceptor) call org.springframework.messaging.support.ExecutorSubscribableChannel.addInterceptor(ChannelInterceptor) call org.springframework.messaging.support.ExecutorSubscribableChannel.addInterceptor(ChannelInterceptor) call org.springframework.messaging.support.ExecutorSubscribableChannel.addInterceptor(ChannelInterceptor) call ExecutorSubscribableChannel.subscribe() call ExecutorSubscribableChannel.subscribe() call ExecutorSubscribableChannel.subscribe() call ExecutorSubscribableChannel.subscribe() call ExecutorSubscribableChannel.subscribe() call ExecutorSubscribableChannel.send() call ExecutorSubscribableChannel.send() call ExecutorSubscribableChannel.send() call ExecutorSubscribableChannel.send() call ExecutorSubscribableChannel.send() call BeforeHandleInterceptor.getCounter() call BeforeHandleInterceptor.getCounter() call BeforeHandleInterceptor.getCounter() call BeforeHandleInterceptor.getCounter() call BeforeHandleInterceptor.getCounter() call BeforeHandleInterceptor.wasAfterHandledInvoked() call BeforeHandleInterceptor.wasAfterHandledInvoked() call BeforeHandleInterceptor.wasAfterHandledInvoked() call BeforeHandleInterceptor.wasAfterHandledInvoked() call BeforeHandleInterceptor.wasAfterHandledInvoked() public public throws public public throws RuntimeException MessageHandler public public throws decl_stmt RuntimeException = new decl_stmt org.springframework.messaging.MessageHandler = try catch public public throws call ExecutorSubscribableChannel.unsubscribe() call ExecutorSubscribableChannel.unsubscribe() call ExecutorSubscribableChannel.unsubscribe() call ExecutorSubscribableChannel.unsubscribe() call ExecutorSubscribableChannel.unsubscribe() decl Message BeforeHandleInterceptor public public decl_stmt org.springframework.messaging.Message < = decl_stmt BeforeHandleInterceptor = new call BeforeHandleInterceptor.setMessageToReturn() call BeforeHandleInterceptor.setMessageToReturn() call BeforeHandleInterceptor.setMessageToReturn() call BeforeHandleInterceptor.setMessageToReturn() call BeforeHandleInterceptor.setMessageToReturn() call BeforeHandleInterceptor.getCounter() call BeforeHandleInterceptor.getCounter() call BeforeHandleInterceptor.getCounter() call BeforeHandleInterceptor.getCounter() call BeforeHandleInterceptor.getCounter() call BeforeHandleInterceptor.wasAfterHandledInvoked() call BeforeHandleInterceptor.wasAfterHandledInvoked() call BeforeHandleInterceptor.wasAfterHandledInvoked() call BeforeHandleInterceptor.wasAfterHandledInvoked() call BeforeHandleInterceptor.wasAfterHandledInvoked() NullReturningBeforeHandleInterceptor BeforeHandleInterceptor public public decl_stmt BeforeHandleInterceptor = new decl_stmt NullReturningBeforeHandleInterceptor = new call BeforeHandleInterceptor.getCounter() call BeforeHandleInterceptor.getCounter() call BeforeHandleInterceptor.getCounter() call BeforeHandleInterceptor.getCounter() call BeforeHandleInterceptor.getCounter() call NullReturningBeforeHandleInterceptor.getCounter() call NullReturningBeforeHandleInterceptor.getCounter() call NullReturningBeforeHandleInterceptor.getCounter() call NullReturningBeforeHandleInterceptor.getCounter() call NullReturningBeforeHandleInterceptor.getCounter() call BeforeHandleInterceptor.wasAfterHandledInvoked() call BeforeHandleInterceptor.wasAfterHandledInvoked() call BeforeHandleInterceptor.wasAfterHandledInvoked() call BeforeHandleInterceptor.wasAfterHandledInvoked() call BeforeHandleInterceptor.wasAfterHandledInvoked() IllegalStateException BeforeHandleInterceptor public public decl_stmt IllegalStateException = new decl_stmt BeforeHandleInterceptor = new try catch call BeforeHandleInterceptor.getCounter() call BeforeHandleInterceptor.getCounter() call BeforeHandleInterceptor.getCounter() call BeforeHandleInterceptor.getCounter() call BeforeHandleInterceptor.getCounter() call BeforeHandleInterceptor.wasAfterHandledInvoked() call BeforeHandleInterceptor.wasAfterHandledInvoked() call BeforeHandleInterceptor.wasAfterHandledInvoked() call BeforeHandleInterceptor.wasAfterHandledInvoked() call BeforeHandleInterceptor.wasAfterHandledInvoked() public public return public public return public < public < < return public public < = public public < = public public = public < public < < if != throw return != : public < public < < return