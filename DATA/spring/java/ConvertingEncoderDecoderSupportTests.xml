org.springframework.web.socket.adapter.standard java.nio.ByteBuffer import javax.websocket.DecodeException import javax.websocket.Decoder import javax.websocket.EncodeException import javax.websocket.Encoder import org.junit.After import org.junit.Before import org.junit.Rule import org.junit.Test import org.junit.rules.ExpectedException import org.springframework.beans.factory.annotation.Autowired import org.springframework.context.annotation.Bean import org.springframework.context.annotation.Configuration import org.springframework.core.convert.ConversionService import org.springframework.core.convert.ConverterNotFoundException import org.springframework.core.convert.converter.Converter import org.springframework.core.convert.support.DefaultConversionService import org.springframework.core.convert.support.GenericConversionService import org.springframework.web.context.WebApplicationContext import org.springframework.web.context.support.AnnotationConfigWebApplicationContext import org.springframework.web.socket.ContextLoaderTestUtils import static static org.hamcrest.Matchers.* import static static org.junit.Assert.* import class org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests MyType ExpectedException String ByteBuffer WebApplicationContext public public public public AnnotationConfigWebApplicationContext private private < decl_stmt org.springframework.web.context.support.AnnotationConfigWebApplicationContext = new call org.springframework.web.context.support.AnnotationConfigWebApplicationContext.register(Class) call org.springframework.web.context.support.AnnotationConfigWebApplicationContext.register(Class) call org.springframework.web.context.support.AnnotationConfigWebApplicationContext.register(Class) call org.springframework.web.context.support.AnnotationConfigWebApplicationContext.register(Class) call org.springframework.web.context.support.AnnotationConfigWebApplicationContext.register(Class) call AnnotationConfigWebApplicationContext.refresh() call AnnotationConfigWebApplicationContext.refresh() call AnnotationConfigWebApplicationContext.refresh() call AnnotationConfigWebApplicationContext.refresh() call AnnotationConfigWebApplicationContext.refresh() = public public throws new public public throws call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expectCause() call ExpectedException.expectCause() call ExpectedException.expectCause() call ExpectedException.expectCause() call ExpectedException.expectCause() new public public throws new call ByteBuffer.array() call ByteBuffer.array() call ByteBuffer.array() call ByteBuffer.array() call ByteBuffer.array() public public throws call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expectCause() call ExpectedException.expectCause() call ExpectedException.expectCause() call ExpectedException.expectCause() call ExpectedException.expectCause() new decl Decoder public public throws decl_stmt com.sun.pept.encoding.Decoder < = new call decl Decoder.willDecode() call decl Decoder.willDecode() call decl Decoder.willDecode() call decl Decoder.willDecode() call decl Decoder.willDecode() call decl Decoder.decode() call decl Decoder.decode() call decl Decoder.decode() call decl Decoder.decode() call decl Decoder.decode() decl Decoder public public throws decl_stmt com.sun.pept.encoding.Decoder < = new call decl Decoder.willDecode() call decl Decoder.willDecode() call decl Decoder.willDecode() call decl Decoder.willDecode() call decl Decoder.willDecode() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expectCause() call ExpectedException.expectCause() call ExpectedException.expectCause() call ExpectedException.expectCause() call ExpectedException.expectCause() call decl Decoder.decode() call decl Decoder.decode() call decl Decoder.decode() call decl Decoder.decode() call decl Decoder.decode() decl Decoder public public throws decl_stmt com.sun.pept.encoding.Decoder < = new call decl Decoder.willDecode() call decl Decoder.willDecode() call decl Decoder.willDecode() call decl Decoder.willDecode() call decl Decoder.willDecode() call decl Decoder.decode() call decl Decoder.decode() call decl Decoder.decode() call decl Decoder.decode() call decl Decoder.decode() decl Decoder public public throws decl_stmt com.sun.pept.encoding.Decoder < = new call decl Decoder.willDecode() call decl Decoder.willDecode() call decl Decoder.willDecode() call decl Decoder.willDecode() call decl Decoder.willDecode() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expectCause() call ExpectedException.expectCause() call ExpectedException.expectCause() call ExpectedException.expectCause() call ExpectedException.expectCause() call decl Decoder.decode() call decl Decoder.decode() call decl Decoder.decode() call decl Decoder.decode() call decl Decoder.decode() String MyTextEncoderDecoder public public throws decl_stmt MyTextEncoderDecoder = new decl_stmt java.lang.String = call MyTextEncoderDecoder.encode() call MyTextEncoderDecoder.encode() call MyTextEncoderDecoder.encode() call MyTextEncoderDecoder.encode() call MyTextEncoderDecoder.encode() call MyTextEncoderDecoder.decode() call MyTextEncoderDecoder.decode() call MyTextEncoderDecoder.decode() call MyTextEncoderDecoder.decode() call MyTextEncoderDecoder.decode() ByteBuffer MyBinaryEncoderDecoder public public throws decl_stmt MyBinaryEncoderDecoder = new decl_stmt ByteBuffer = call MyBinaryEncoderDecoder.encode() call MyBinaryEncoderDecoder.encode() call MyBinaryEncoderDecoder.encode() call MyBinaryEncoderDecoder.encode() call MyBinaryEncoderDecoder.encode() call MyBinaryEncoderDecoder.decode() call MyBinaryEncoderDecoder.decode() call MyBinaryEncoderDecoder.decode() call MyBinaryEncoderDecoder.decode() call MyBinaryEncoderDecoder.decode() WithAutowire public public throws decl_stmt WithAutowire = new call WithAutowire.init() call WithAutowire.init() call WithAutowire.init() call WithAutowire.init() call WithAutowire.init() call WebApplicationContext.getBean() call WebApplicationContext.getBean() call WebApplicationContext.getBean() call WebApplicationContext.getBean() call WebApplicationContext.getBean() WithAutowire public public throws decl_stmt WithAutowire = new call WithAutowire.init() call WithAutowire.init() call WithAutowire.init() call WithAutowire.init() call WithAutowire.init() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expectMessage() call ExpectedException.expectMessage() call ExpectedException.expectMessage() call ExpectedException.expectMessage() call ExpectedException.expectMessage() call WithAutowire.encode() call WithAutowire.encode() call WithAutowire.encode() call WithAutowire.encode() call WithAutowire.encode() MyBinaryEncoder public public throws decl_stmt MyBinaryEncoder = new call MyBinaryEncoder.init() call MyBinaryEncoder.init() call MyBinaryEncoder.init() call MyBinaryEncoder.init() call MyBinaryEncoder.init() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expectMessage() call ExpectedException.expectMessage() call ExpectedException.expectMessage() call ExpectedException.expectMessage() call ExpectedException.expectMessage() call MyBinaryEncoder.encode() call MyBinaryEncoder.encode() call MyBinaryEncoder.encode() call MyBinaryEncoder.encode() call MyBinaryEncoder.encode() GenericConversionService public public decl_stmt org.springframework.core.convert.support.GenericConversionService = new call org.springframework.core.convert.support.GenericConversionService.addConverter(GenericConverter) call org.springframework.core.convert.support.GenericConversionService.addConverter(GenericConverter) call org.springframework.core.convert.support.GenericConversionService.addConverter(GenericConverter) call org.springframework.core.convert.support.GenericConversionService.addConverter(GenericConverter) call org.springframework.core.convert.support.GenericConversionService.addConverter(GenericConverter) new call org.springframework.core.convert.support.GenericConversionService.addConverter(GenericConverter) call org.springframework.core.convert.support.GenericConversionService.addConverter(GenericConverter) call org.springframework.core.convert.support.GenericConversionService.addConverter(GenericConverter) call org.springframework.core.convert.support.GenericConversionService.addConverter(GenericConverter) call org.springframework.core.convert.support.GenericConversionService.addConverter(GenericConverter) new call org.springframework.core.convert.support.GenericConversionService.addConverter(GenericConverter) call org.springframework.core.convert.support.GenericConversionService.addConverter(GenericConverter) call org.springframework.core.convert.support.GenericConversionService.addConverter(GenericConverter) call org.springframework.core.convert.support.GenericConversionService.addConverter(GenericConverter) call org.springframework.core.convert.support.GenericConversionService.addConverter(GenericConverter) new call org.springframework.core.convert.support.GenericConversionService.addConverter(GenericConverter) call org.springframework.core.convert.support.GenericConversionService.addConverter(GenericConverter) call org.springframework.core.convert.support.GenericConversionService.addConverter(GenericConverter) call org.springframework.core.convert.support.GenericConversionService.addConverter(GenericConverter) call org.springframework.core.convert.support.GenericConversionService.addConverter(GenericConverter) new return public public return new public public return public public return public public if instanceof return return public public return + public public return + public public return new public public return new new