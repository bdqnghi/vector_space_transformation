org.springframework.http.client static static org.junit.Assert.assertEquals import static static org.junit.Assert.assertTrue import static static org.junit.Assert.fail import java.io.IOException import java.net.URI import java.util.Arrays import java.util.Locale import java.util.concurrent.Future import org.junit.After import org.junit.Before import org.junit.Test import org.springframework.beans.factory.DisposableBean import org.springframework.beans.factory.InitializingBean import org.springframework.http.HttpMethod import org.springframework.http.HttpStatus import org.springframework.http.StreamingHttpOutputMessage import org.springframework.util.FileCopyUtils import org.springframework.util.StreamUtils import org.springframework.util.concurrent.ListenableFuture import org.springframework.util.concurrent.ListenableFutureCallback import class org.springframework.http.client.AbstractAsyncHttpRequestFactoryTestCase super super extends AsyncClientHttpRequestFactory public final public final throws = if instanceof public final public final throws if instanceof decl Future AsyncClientHttpRequest URI ClientHttpResponse public public throws decl_stmt java.net.URI = new + decl_stmt org.springframework.http.client.AsyncClientHttpRequest = call AsyncClientHttpRequest.getMethod() call AsyncClientHttpRequest.getMethod() call AsyncClientHttpRequest.getMethod() call AsyncClientHttpRequest.getMethod() call AsyncClientHttpRequest.getMethod() call AsyncClientHttpRequest.getURI() call AsyncClientHttpRequest.getURI() call AsyncClientHttpRequest.getURI() call AsyncClientHttpRequest.getURI() call AsyncClientHttpRequest.getURI() decl_stmt java.util.concurrent.Future < = call AsyncClientHttpRequest.executeAsync() call AsyncClientHttpRequest.executeAsync() call AsyncClientHttpRequest.executeAsync() call AsyncClientHttpRequest.executeAsync() call AsyncClientHttpRequest.executeAsync() decl_stmt org.springframework.http.client.ClientHttpResponse = call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() try call org.springframework.http.client.ClientHttpResponse.getStatusCode() call org.springframework.http.client.ClientHttpResponse.getStatusCode() call org.springframework.http.client.ClientHttpResponse.getStatusCode() call org.springframework.http.client.ClientHttpResponse.getStatusCode() call org.springframework.http.client.ClientHttpResponse.getStatusCode() finally call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() decl ListenableFuture AsyncClientHttpRequest URI ClientHttpResponse public public throws decl_stmt java.net.URI = new + decl_stmt org.springframework.http.client.AsyncClientHttpRequest = call AsyncClientHttpRequest.getMethod() call AsyncClientHttpRequest.getMethod() call AsyncClientHttpRequest.getMethod() call AsyncClientHttpRequest.getMethod() call AsyncClientHttpRequest.getMethod() call AsyncClientHttpRequest.getURI() call AsyncClientHttpRequest.getURI() call AsyncClientHttpRequest.getURI() call AsyncClientHttpRequest.getURI() call AsyncClientHttpRequest.getURI() decl_stmt org.springframework.util.concurrent.ListenableFuture < = call AsyncClientHttpRequest.executeAsync() call AsyncClientHttpRequest.executeAsync() call AsyncClientHttpRequest.executeAsync() call AsyncClientHttpRequest.executeAsync() call AsyncClientHttpRequest.executeAsync() call decl ListenableFuture.addCallback() call decl ListenableFuture.addCallback() call decl ListenableFuture.addCallback() call decl ListenableFuture.addCallback() call decl ListenableFuture.addCallback() new < public public try catch public public decl_stmt org.springframework.http.client.ClientHttpResponse = call decl ListenableFuture.get() call decl ListenableFuture.get() call decl ListenableFuture.get() call decl ListenableFuture.get() call decl ListenableFuture.get() try call org.springframework.http.client.ClientHttpResponse.getStatusCode() call org.springframework.http.client.ClientHttpResponse.getStatusCode() call org.springframework.http.client.ClientHttpResponse.getStatusCode() call org.springframework.http.client.ClientHttpResponse.getStatusCode() call org.springframework.http.client.ClientHttpResponse.getStatusCode() finally call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() public public try catch public public decl byte StreamingHttpOutputMessage String decl Future AsyncClientHttpRequest String decl byte String ClientHttpResponse public public throws decl_stmt org.springframework.http.client.AsyncClientHttpRequest = new + call AsyncClientHttpRequest.getMethod() call AsyncClientHttpRequest.getMethod() call AsyncClientHttpRequest.getMethod() call AsyncClientHttpRequest.getMethod() call AsyncClientHttpRequest.getMethod() decl_stmt java.lang.String = decl_stmt java.lang.String = call AsyncClientHttpRequest.getHeaders() call AsyncClientHttpRequest.getHeaders() call AsyncClientHttpRequest.getHeaders() call AsyncClientHttpRequest.getHeaders() call AsyncClientHttpRequest.getHeaders() decl_stmt java.lang.String = call AsyncClientHttpRequest.getHeaders() call AsyncClientHttpRequest.getHeaders() call AsyncClientHttpRequest.getHeaders() call AsyncClientHttpRequest.getHeaders() call AsyncClientHttpRequest.getHeaders() decl_stmt byte final final final = call AsyncClientHttpRequest.getHeaders() call AsyncClientHttpRequest.getHeaders() call AsyncClientHttpRequest.getHeaders() call AsyncClientHttpRequest.getHeaders() call AsyncClientHttpRequest.getHeaders() if instanceof decl_stmt org.springframework.http.StreamingHttpOutputMessage = call StreamingHttpOutputMessage.setBody() call StreamingHttpOutputMessage.setBody() call StreamingHttpOutputMessage.setBody() call StreamingHttpOutputMessage.setBody() call StreamingHttpOutputMessage.setBody() else call AsyncClientHttpRequest.getBody() call AsyncClientHttpRequest.getBody() call AsyncClientHttpRequest.getBody() call AsyncClientHttpRequest.getBody() call AsyncClientHttpRequest.getBody() decl_stmt java.util.concurrent.Future < = call AsyncClientHttpRequest.executeAsync() call AsyncClientHttpRequest.executeAsync() call AsyncClientHttpRequest.executeAsync() call AsyncClientHttpRequest.executeAsync() call AsyncClientHttpRequest.executeAsync() decl_stmt org.springframework.http.client.ClientHttpResponse = call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() try call org.springframework.http.client.ClientHttpResponse.getStatusCode() call org.springframework.http.client.ClientHttpResponse.getStatusCode() call org.springframework.http.client.ClientHttpResponse.getStatusCode() call org.springframework.http.client.ClientHttpResponse.getStatusCode() call org.springframework.http.client.ClientHttpResponse.getStatusCode() call ClientHttpResponse.getHeaders() call ClientHttpResponse.getHeaders() call ClientHttpResponse.getHeaders() call ClientHttpResponse.getHeaders() call ClientHttpResponse.getHeaders() call ClientHttpResponse.getHeaders() call ClientHttpResponse.getHeaders() call ClientHttpResponse.getHeaders() call ClientHttpResponse.getHeaders() call ClientHttpResponse.getHeaders() decl_stmt byte = call ClientHttpResponse.getBody() call ClientHttpResponse.getBody() call ClientHttpResponse.getBody() call ClientHttpResponse.getBody() call ClientHttpResponse.getBody() finally call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() decl byte decl Future StreamingHttpOutputMessage AsyncClientHttpRequest ClientHttpResponse public public throws decl_stmt org.springframework.http.client.AsyncClientHttpRequest = new + decl_stmt byte final final final = if instanceof decl_stmt org.springframework.http.StreamingHttpOutputMessage = call StreamingHttpOutputMessage.setBody() call StreamingHttpOutputMessage.setBody() call StreamingHttpOutputMessage.setBody() call StreamingHttpOutputMessage.setBody() call StreamingHttpOutputMessage.setBody() else call AsyncClientHttpRequest.getBody() call AsyncClientHttpRequest.getBody() call AsyncClientHttpRequest.getBody() call AsyncClientHttpRequest.getBody() call AsyncClientHttpRequest.getBody() decl_stmt java.util.concurrent.Future < = call AsyncClientHttpRequest.executeAsync() call AsyncClientHttpRequest.executeAsync() call AsyncClientHttpRequest.executeAsync() call AsyncClientHttpRequest.executeAsync() call AsyncClientHttpRequest.executeAsync() decl_stmt org.springframework.http.client.ClientHttpResponse = call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() try call AsyncClientHttpRequest.getBody() call AsyncClientHttpRequest.getBody() call AsyncClientHttpRequest.getBody() call AsyncClientHttpRequest.getBody() call AsyncClientHttpRequest.getBody() catch finally call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() decl byte decl Future AsyncClientHttpRequest ClientHttpResponse public public throws decl_stmt org.springframework.http.client.AsyncClientHttpRequest = new + call AsyncClientHttpRequest.getHeaders() call AsyncClientHttpRequest.getHeaders() call AsyncClientHttpRequest.getHeaders() call AsyncClientHttpRequest.getHeaders() call AsyncClientHttpRequest.getHeaders() decl_stmt byte = call AsyncClientHttpRequest.getBody() call AsyncClientHttpRequest.getBody() call AsyncClientHttpRequest.getBody() call AsyncClientHttpRequest.getBody() call AsyncClientHttpRequest.getBody() decl_stmt java.util.concurrent.Future < = call AsyncClientHttpRequest.executeAsync() call AsyncClientHttpRequest.executeAsync() call AsyncClientHttpRequest.executeAsync() call AsyncClientHttpRequest.executeAsync() call AsyncClientHttpRequest.executeAsync() decl_stmt org.springframework.http.client.ClientHttpResponse = call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() try call AsyncClientHttpRequest.getHeaders() call AsyncClientHttpRequest.getHeaders() call AsyncClientHttpRequest.getHeaders() call AsyncClientHttpRequest.getHeaders() call AsyncClientHttpRequest.getHeaders() catch finally call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() public public throws decl Future AsyncClientHttpRequest ClientHttpResponse protected protected throws decl_stmt org.springframework.http.client.ClientHttpResponse = try decl_stmt org.springframework.http.client.AsyncClientHttpRequest = new + + if == || == || == call AsyncClientHttpRequest.getBody() call AsyncClientHttpRequest.getBody() call AsyncClientHttpRequest.getBody() call AsyncClientHttpRequest.getBody() call AsyncClientHttpRequest.getBody() decl_stmt java.util.concurrent.Future < = call AsyncClientHttpRequest.executeAsync() call AsyncClientHttpRequest.executeAsync() call AsyncClientHttpRequest.executeAsync() call AsyncClientHttpRequest.executeAsync() call AsyncClientHttpRequest.executeAsync() = call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call org.springframework.http.client.ClientHttpResponse.getStatusCode() call org.springframework.http.client.ClientHttpResponse.getStatusCode() call org.springframework.http.client.ClientHttpResponse.getStatusCode() call org.springframework.http.client.ClientHttpResponse.getStatusCode() call org.springframework.http.client.ClientHttpResponse.getStatusCode() call AsyncClientHttpRequest.getMethod() call AsyncClientHttpRequest.getMethod() call AsyncClientHttpRequest.getMethod() call AsyncClientHttpRequest.getMethod() call AsyncClientHttpRequest.getMethod() finally if != call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close()