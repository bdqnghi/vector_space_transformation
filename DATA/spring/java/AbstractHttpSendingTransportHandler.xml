org.springframework.web.socket.sockjs.transport.handler java.io.IOException import java.io.UnsupportedEncodingException import java.util.regex.Pattern import org.springframework.http.MediaType import org.springframework.http.server.ServerHttpRequest import org.springframework.http.server.ServerHttpResponse import org.springframework.util.MultiValueMap import org.springframework.util.StringUtils import org.springframework.web.socket.WebSocketHandler import org.springframework.web.socket.sockjs.SockJsException import org.springframework.web.socket.sockjs.frame.SockJsFrame import org.springframework.web.socket.sockjs.frame.SockJsFrameFormat import org.springframework.web.socket.sockjs.transport.SockJsSession import org.springframework.web.socket.sockjs.transport.SockJsSessionFactory import org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession import org.springframework.web.util.UriComponentsBuilder import org.springframework.web.util.UriUtils import class org.springframework.web.socket.sockjs.transport.handler.AbstractHttpSendingTransportHandler super super extends super implements Pattern String AbstractHttpSockJsSession public final public final throws decl_stmt org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession = decl_stmt java.lang.String = call org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.setAcceptedProtocol(String) call org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.setAcceptedProtocol(String) call org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.setAcceptedProtocol(String) call org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.setAcceptedProtocol(String) call org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.setAcceptedProtocol(String) SockJsFrame String protected protected throws if if + + else if if + decl_stmt org.springframework.web.socket.sockjs.frame.SockJsFrame = try call org.springframework.web.socket.sockjs.frame.SockJsFrame.getContentBytes() call org.springframework.web.socket.sockjs.frame.SockJsFrame.getContentBytes() call org.springframework.web.socket.sockjs.frame.SockJsFrame.getContentBytes() call org.springframework.web.socket.sockjs.frame.SockJsFrame.getContentBytes() call org.springframework.web.socket.sockjs.frame.SockJsFrame.getContentBytes() catch throw new + else if ! if + + else if + + + decl_stmt java.lang.String = try call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) catch throw new + String decl MultiValueMap String String protected final protected final decl_stmt java.lang.String = decl_stmt org.springframework.util.MultiValueMap < = decl_stmt java.lang.String = call decl MultiValueMap.getFirst() call decl MultiValueMap.getFirst() call decl MultiValueMap.getFirst() call decl MultiValueMap.getFirst() call decl MultiValueMap.getFirst() if return try decl_stmt java.lang.String = return call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) : catch throw new