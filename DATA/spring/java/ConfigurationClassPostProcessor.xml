org.springframework.context.annotation java.beans.PropertyDescriptor import java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.Comparator import java.util.HashSet import java.util.LinkedHashMap import java.util.LinkedHashSet import java.util.List import java.util.Map import java.util.Set import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.aop.framework.autoproxy.AutoProxyUtils import org.springframework.beans.PropertyValues import org.springframework.beans.factory.BeanClassLoaderAware import org.springframework.beans.factory.BeanDefinitionStoreException import org.springframework.beans.factory.BeanFactory import org.springframework.beans.factory.BeanFactoryAware import org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor import org.springframework.beans.factory.config.BeanDefinition import org.springframework.beans.factory.config.BeanDefinitionHolder import org.springframework.beans.factory.config.BeanFactoryPostProcessor import org.springframework.beans.factory.config.BeanPostProcessor import org.springframework.beans.factory.config.ConfigurableListableBeanFactory import org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessorAdapter import org.springframework.beans.factory.config.SingletonBeanRegistry import org.springframework.beans.factory.parsing.FailFastProblemReporter import org.springframework.beans.factory.parsing.PassThroughSourceExtractor import org.springframework.beans.factory.parsing.ProblemReporter import org.springframework.beans.factory.parsing.SourceExtractor import org.springframework.beans.factory.support.AbstractBeanDefinition import org.springframework.beans.factory.support.BeanDefinitionRegistry import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor import org.springframework.beans.factory.support.BeanNameGenerator import org.springframework.beans.factory.support.RootBeanDefinition import org.springframework.context.EnvironmentAware import org.springframework.context.ResourceLoaderAware import org.springframework.context.annotation.ConfigurationClassEnhancer.EnhancedConfiguration import org.springframework.core.Ordered import org.springframework.core.PriorityOrdered import org.springframework.core.env.Environment import org.springframework.core.io.DefaultResourceLoader import org.springframework.core.io.ResourceLoader import org.springframework.core.type.AnnotationMetadata import org.springframework.core.type.classreading.CachingMetadataReaderFactory import org.springframework.core.type.classreading.MetadataReaderFactory import org.springframework.util.Assert import org.springframework.util.ClassUtils import static static org.springframework.context.annotation.AnnotationConfigUtils.* import class org.springframework.context.annotation.ConfigurationClassPostProcessor super super implements ConfigurationClassBeanDefinitionReader ClassLoader decl Set BeanNameGenerator BeanNameGenerator ResourceLoader MetadataReaderFactory boolean Environment decl Set boolean String ProblemReporter Log String String SourceExtractor protected protected return public public return public public = != : new public public = != : new public public = = public public = = = public public = public public = public public = if ! = new RootBeanDefinition RootBeanDefinition int public public decl_stmt org.springframework.beans.factory.support.RootBeanDefinition = new call RootBeanDefinition.setRole() call RootBeanDefinition.setRole() call RootBeanDefinition.setRole() call RootBeanDefinition.setRole() call RootBeanDefinition.setRole() decl_stmt org.springframework.beans.factory.support.RootBeanDefinition = new call RootBeanDefinition.setRole() call RootBeanDefinition.setRole() call RootBeanDefinition.setRole() call RootBeanDefinition.setRole() call RootBeanDefinition.setRole() decl_stmt int = if throw new + if throw new + int public public decl_stmt int = if throw new + if ! decl Set decl Set ConfigurationClassParser BeanDefinition BeanNameGenerator SingletonBeanRegistry int int decl Set decl String decl Set decl List decl String decl Set public public decl_stmt java.util.List < = new < decl_stmt java.lang.String = for : decl_stmt org.springframework.beans.factory.config.BeanDefinition = if || if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + else if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return new < public public decl_stmt int = decl_stmt int = return < - : > : decl_stmt org.springframework.beans.factory.config.SingletonBeanRegistry = if instanceof = if ! && call org.springframework.beans.factory.config.SingletonBeanRegistry.containsSingleton(String) call org.springframework.beans.factory.config.SingletonBeanRegistry.containsSingleton(String) call org.springframework.beans.factory.config.SingletonBeanRegistry.containsSingleton(String) call org.springframework.beans.factory.config.SingletonBeanRegistry.containsSingleton(String) call org.springframework.beans.factory.config.SingletonBeanRegistry.containsSingleton(String) decl_stmt org.springframework.beans.factory.support.BeanNameGenerator = call org.springframework.beans.factory.config.SingletonBeanRegistry.getSingleton(String) call org.springframework.beans.factory.config.SingletonBeanRegistry.getSingleton(String) call org.springframework.beans.factory.config.SingletonBeanRegistry.getSingleton(String) call org.springframework.beans.factory.config.SingletonBeanRegistry.getSingleton(String) call org.springframework.beans.factory.config.SingletonBeanRegistry.getSingleton(String) = = decl_stmt org.springframework.context.annotation.ConfigurationClassParser = new decl_stmt java.util.Set < = new < decl_stmt java.util.Set < = new < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() do call org.springframework.context.annotation.ConfigurationClassParser.parse(String,String) call org.springframework.context.annotation.ConfigurationClassParser.parse(String,String) call org.springframework.context.annotation.ConfigurationClassParser.parse(String,String) call org.springframework.context.annotation.ConfigurationClassParser.parse(String,String) call org.springframework.context.annotation.ConfigurationClassParser.parse(String,String) call org.springframework.context.annotation.ConfigurationClassParser.validate() call org.springframework.context.annotation.ConfigurationClassParser.validate() call org.springframework.context.annotation.ConfigurationClassParser.validate() call org.springframework.context.annotation.ConfigurationClassParser.validate() call org.springframework.context.annotation.ConfigurationClassParser.validate() decl_stmt java.util.Set < = new < call org.springframework.context.annotation.ConfigurationClassParser.getConfigurationClasses() call org.springframework.context.annotation.ConfigurationClassParser.getConfigurationClasses() call org.springframework.context.annotation.ConfigurationClassParser.getConfigurationClasses() call org.springframework.context.annotation.ConfigurationClassParser.getConfigurationClasses() call org.springframework.context.annotation.ConfigurationClassParser.getConfigurationClasses() call decl Set.removeAll() call decl Set.removeAll() call decl Set.removeAll() call decl Set.removeAll() call decl Set.removeAll() if == = new call org.springframework.context.annotation.ConfigurationClassParser.getImportRegistry() call org.springframework.context.annotation.ConfigurationClassParser.getImportRegistry() call org.springframework.context.annotation.ConfigurationClassParser.getImportRegistry() call org.springframework.context.annotation.ConfigurationClassParser.getImportRegistry() call org.springframework.context.annotation.ConfigurationClassParser.getImportRegistry() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.clear() call decl Set.clear() call decl Set.clear() call decl Set.clear() call decl Set.clear() if > decl_stmt java.lang.String = decl_stmt java.util.Set < = new < decl_stmt java.util.Set < = new < for : call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() for : if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() decl_stmt org.springframework.beans.factory.config.BeanDefinition = if && ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call org.springframework.beans.factory.config.BeanDefinition.getBeanClassName() call org.springframework.beans.factory.config.BeanDefinition.getBeanClassName() call org.springframework.beans.factory.config.BeanDefinition.getBeanClassName() call org.springframework.beans.factory.config.BeanDefinition.getBeanClassName() call org.springframework.beans.factory.config.BeanDefinition.getBeanClassName() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() new = ! call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() if != if ! call org.springframework.beans.factory.config.SingletonBeanRegistry.containsSingleton(String) call org.springframework.beans.factory.config.SingletonBeanRegistry.containsSingleton(String) call org.springframework.beans.factory.config.SingletonBeanRegistry.containsSingleton(String) call org.springframework.beans.factory.config.SingletonBeanRegistry.containsSingleton(String) call org.springframework.beans.factory.config.SingletonBeanRegistry.containsSingleton(String) call org.springframework.beans.factory.config.SingletonBeanRegistry.registerSingleton(String,Object) call org.springframework.beans.factory.config.SingletonBeanRegistry.registerSingleton(String,Object) call org.springframework.beans.factory.config.SingletonBeanRegistry.registerSingleton(String,Object) call org.springframework.beans.factory.config.SingletonBeanRegistry.registerSingleton(String,Object) call org.springframework.beans.factory.config.SingletonBeanRegistry.registerSingleton(String,Object) call org.springframework.context.annotation.ConfigurationClassParser.getImportRegistry() call org.springframework.context.annotation.ConfigurationClassParser.getImportRegistry() call org.springframework.context.annotation.ConfigurationClassParser.getImportRegistry() call org.springframework.context.annotation.ConfigurationClassParser.getImportRegistry() call org.springframework.context.annotation.ConfigurationClassParser.getImportRegistry() if instanceof int int public public decl_stmt int = decl_stmt int = return < - : > : ConfigurationClassEnhancer decl Class decl Map decl Class AbstractBeanDefinition public public decl_stmt java.util.Map < = new < for : decl_stmt org.springframework.beans.factory.config.BeanDefinition = if if ! instanceof throw new + + call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() return decl_stmt org.springframework.context.annotation.ConfigurationClassEnhancer = new for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt org.springframework.beans.factory.support.AbstractBeanDefinition = call AbstractBeanDefinition.setAttribute() call AbstractBeanDefinition.setAttribute() call AbstractBeanDefinition.setAttribute() call AbstractBeanDefinition.setAttribute() call AbstractBeanDefinition.setAttribute() try decl_stmt java.lang.Class < = call AbstractBeanDefinition.resolveBeanClass() call AbstractBeanDefinition.resolveBeanClass() call AbstractBeanDefinition.resolveBeanClass() call AbstractBeanDefinition.resolveBeanClass() call AbstractBeanDefinition.resolveBeanClass() decl_stmt java.lang.Class < = call ConfigurationClassEnhancer.enhance() call ConfigurationClassEnhancer.enhance() call ConfigurationClassEnhancer.enhance() call ConfigurationClassEnhancer.enhance() call ConfigurationClassEnhancer.enhance() if != if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call org.springframework.beans.factory.support.AbstractBeanDefinition.setBeanClass(Class) call org.springframework.beans.factory.support.AbstractBeanDefinition.setBeanClass(Class) call org.springframework.beans.factory.support.AbstractBeanDefinition.setBeanClass(Class) call org.springframework.beans.factory.support.AbstractBeanDefinition.setBeanClass(Class) call org.springframework.beans.factory.support.AbstractBeanDefinition.setBeanClass(Class) catch throw new + call org.springframework.beans.factory.support.AbstractBeanDefinition.getBeanClassName() call org.springframework.beans.factory.support.AbstractBeanDefinition.getBeanClassName() call org.springframework.beans.factory.support.AbstractBeanDefinition.getBeanClassName() call org.springframework.beans.factory.support.AbstractBeanDefinition.getBeanClassName() call org.springframework.beans.factory.support.AbstractBeanDefinition.getBeanClassName() public public = public public return AnnotationMetadata ImportRegistry public public if instanceof decl_stmt org.springframework.context.annotation.ImportRegistry = decl_stmt org.springframework.core.type.AnnotationMetadata = call ImportRegistry.getImportingClassFor() call ImportRegistry.getImportingClassFor() call ImportRegistry.getImportingClassFor() call ImportRegistry.getImportingClassFor() call ImportRegistry.getImportingClassFor() if != return public public return public public return public public = public public if instanceof return