org.springframework.web.servlet.config.annotation java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.List import org.junit.Before import org.junit.Test import org.mockito.Mockito import org.springframework.mock.web.test.MockHttpServletRequest import org.springframework.mock.web.test.MockHttpServletResponse import org.springframework.ui.ModelMap import org.springframework.util.AntPathMatcher import org.springframework.util.PathMatcher import org.springframework.web.context.request.WebRequest import org.springframework.web.context.request.WebRequestInterceptor import org.springframework.web.servlet.HandlerInterceptor import org.springframework.web.servlet.handler.MappedInterceptor import org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter import org.springframework.web.servlet.i18n.LocaleChangeInterceptor import org.springframework.web.servlet.theme.ThemeChangeInterceptor import static static org.junit.Assert.* import class org.springframework.web.servlet.config.annotation.InterceptorRegistryTests TestWebRequestInterceptor TestWebRequestInterceptor MockHttpServletRequest HandlerInterceptor HandlerInterceptor InterceptorRegistry MockHttpServletResponse public public = new = new = new decl List public public decl_stmt java.util.List < = decl List public public decl_stmt java.util.List < = public public decl List public public throws decl_stmt java.util.List < = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl List public public throws decl_stmt java.util.List < = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() PathMatcher MappedInterceptor public public decl_stmt org.springframework.util.PathMatcher = decl_stmt org.springframework.web.servlet.handler.MappedInterceptor = call org.springframework.web.servlet.handler.MappedInterceptor.getPathMatcher() call org.springframework.web.servlet.handler.MappedInterceptor.getPathMatcher() call org.springframework.web.servlet.handler.MappedInterceptor.getPathMatcher() call org.springframework.web.servlet.handler.MappedInterceptor.getPathMatcher() call org.springframework.web.servlet.handler.MappedInterceptor.getPathMatcher() decl List public public throws decl_stmt java.util.List < = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() public public decl List PathMatcher MappedInterceptor private < private < decl_stmt org.springframework.util.PathMatcher = new decl_stmt java.util.List < = new < for : if instanceof decl_stmt org.springframework.web.servlet.handler.MappedInterceptor = if call org.springframework.web.servlet.handler.MappedInterceptor.matches(String,PathMatcher) call org.springframework.web.servlet.handler.MappedInterceptor.matches(String,PathMatcher) call org.springframework.web.servlet.handler.MappedInterceptor.matches(String,PathMatcher) call org.springframework.web.servlet.handler.MappedInterceptor.matches(String,PathMatcher) call org.springframework.web.servlet.handler.MappedInterceptor.matches(String,PathMatcher) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call MappedInterceptor.getInterceptor() call MappedInterceptor.getInterceptor() call MappedInterceptor.getInterceptor() call MappedInterceptor.getInterceptor() call MappedInterceptor.getInterceptor() else if instanceof call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else + return private private throws instanceof public public throws = public public throws public public throws