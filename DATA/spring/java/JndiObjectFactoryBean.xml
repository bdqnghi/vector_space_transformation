org.springframework.jndi java.lang.reflect.Method import java.lang.reflect.Modifier import javax.naming.Context import javax.naming.NamingException import org.aopalliance.intercept.MethodInterceptor import org.aopalliance.intercept.MethodInvocation import org.springframework.aop.framework.ProxyFactory import org.springframework.beans.SimpleTypeConverter import org.springframework.beans.TypeConverter import org.springframework.beans.TypeMismatchException import org.springframework.beans.factory.BeanClassLoaderAware import org.springframework.beans.factory.BeanFactory import org.springframework.beans.factory.BeanFactoryAware import org.springframework.beans.factory.FactoryBean import org.springframework.beans.factory.config.ConfigurableBeanFactory import org.springframework.util.ClassUtils import class org.springframework.jndi.JndiObjectFactoryBean super super extends super implements Object ConfigurableBeanFactory ClassLoader boolean Object boolean boolean public public < = new < public public < = public public = public public = public public = public public = public public if instanceof = public public = TypeConverter public public throws if != || ! || ! || if != throw new = else if != && != && ! decl_stmt org.springframework.beans.TypeConverter = != : new try = call org.springframework.beans.TypeConverter.convertIfNecessary(Object,Class) call org.springframework.beans.TypeConverter.convertIfNecessary(Object,Class) call org.springframework.beans.TypeConverter.convertIfNecessary(Object,Class) call org.springframework.beans.TypeConverter.convertIfNecessary(Object,Class) call org.springframework.beans.TypeConverter.convertIfNecessary(Object,Class) catch throw new + + + + + + = ClassLoader protected protected throws decl_stmt java.lang.ClassLoader = try return catch throw catch if != if else if + return throw finally if != public public return public < public < if != if == return else if > return if != return else return public public return protected < protected < < return JndiObjectTargetSource decl Class ProxyFactory private static private static throws decl_stmt org.springframework.jndi.JndiObjectTargetSource = new call JndiObjectTargetSource.setJndiTemplate() call JndiObjectTargetSource.setJndiTemplate() call JndiObjectTargetSource.setJndiTemplate() call JndiObjectTargetSource.setJndiTemplate() call JndiObjectTargetSource.setJndiTemplate() call JndiObjectTargetSource.setJndiName() call JndiObjectTargetSource.setJndiName() call JndiObjectTargetSource.setJndiName() call JndiObjectTargetSource.setJndiName() call JndiObjectTargetSource.setJndiName() call JndiObjectTargetSource.setExpectedType() call JndiObjectTargetSource.setExpectedType() call JndiObjectTargetSource.setExpectedType() call JndiObjectTargetSource.setExpectedType() call JndiObjectTargetSource.setExpectedType() call JndiObjectTargetSource.setResourceRef() call JndiObjectTargetSource.setResourceRef() call JndiObjectTargetSource.setResourceRef() call JndiObjectTargetSource.setResourceRef() call JndiObjectTargetSource.setResourceRef() call org.springframework.jndi.JndiObjectTargetSource.setLookupOnStartup(boolean) call org.springframework.jndi.JndiObjectTargetSource.setLookupOnStartup(boolean) call org.springframework.jndi.JndiObjectTargetSource.setLookupOnStartup(boolean) call org.springframework.jndi.JndiObjectTargetSource.setLookupOnStartup(boolean) call org.springframework.jndi.JndiObjectTargetSource.setLookupOnStartup(boolean) call org.springframework.jndi.JndiObjectTargetSource.setCache(boolean) call org.springframework.jndi.JndiObjectTargetSource.setCache(boolean) call org.springframework.jndi.JndiObjectTargetSource.setCache(boolean) call org.springframework.jndi.JndiObjectTargetSource.setCache(boolean) call org.springframework.jndi.JndiObjectTargetSource.setCache(boolean) call org.springframework.jndi.JndiObjectTargetSource.afterPropertiesSet() call org.springframework.jndi.JndiObjectTargetSource.afterPropertiesSet() call org.springframework.jndi.JndiObjectTargetSource.afterPropertiesSet() call org.springframework.jndi.JndiObjectTargetSource.afterPropertiesSet() call org.springframework.jndi.JndiObjectTargetSource.afterPropertiesSet() decl_stmt org.springframework.aop.framework.ProxyFactory = new if != call ProxyFactory.setInterfaces() call ProxyFactory.setInterfaces() call ProxyFactory.setInterfaces() call ProxyFactory.setInterfaces() call ProxyFactory.setInterfaces() else decl_stmt java.lang.Class < = call org.springframework.jndi.JndiObjectTargetSource.getTargetClass() call org.springframework.jndi.JndiObjectTargetSource.getTargetClass() call org.springframework.jndi.JndiObjectTargetSource.getTargetClass() call org.springframework.jndi.JndiObjectTargetSource.getTargetClass() call org.springframework.jndi.JndiObjectTargetSource.getTargetClass() if == throw new decl_stmt java.lang.Class < = call org.springframework.jndi.JndiObjectTargetSource.getTargetClass() call org.springframework.jndi.JndiObjectTargetSource.getTargetClass() call org.springframework.jndi.JndiObjectTargetSource.getTargetClass() call org.springframework.jndi.JndiObjectTargetSource.getTargetClass() call org.springframework.jndi.JndiObjectTargetSource.getTargetClass() if == throw new for < : if call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() if call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() new call ProxyFactory.setTargetSource() call ProxyFactory.setTargetSource() call ProxyFactory.setTargetSource() call ProxyFactory.setTargetSource() call ProxyFactory.setTargetSource() return call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) Context public public throws decl_stmt sun.tools.tree.Context = : try return finally protected protected return !=