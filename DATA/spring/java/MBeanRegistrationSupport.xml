org.springframework.jmx.support java.util.LinkedHashSet import java.util.Set import javax.management.InstanceAlreadyExistsException import javax.management.InstanceNotFoundException import javax.management.JMException import javax.management.MBeanServer import javax.management.ObjectInstance import javax.management.ObjectName import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.core.Constants import org.springframework.util.Assert import class org.springframework.jmx.support.MBeanRegistrationSupport MBeanServer int decl Set Log RegistrationPolicy int Constants int public public = public final public final return public public call org.springframework.core.Constants.asNumber(String) call org.springframework.core.Constants.asNumber(String) call org.springframework.core.Constants.asNumber(String) call org.springframework.core.Constants.asNumber(String) call org.springframework.core.Constants.asNumber(String) public public public public = ObjectInstance ObjectName protected protected throws decl_stmt ObjectName synchronized decl_stmt javax.management.ObjectInstance = try = catch if == if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + else if == try if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + = catch call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + + throw else throw = != call javax.management.ObjectInstance.getObjectName() call javax.management.ObjectInstance.getObjectName() call javax.management.ObjectInstance.getObjectName() call javax.management.ObjectInstance.getObjectName() call javax.management.ObjectInstance.getObjectName() : if == = decl Set protected protected decl_stmt java.util.Set < synchronized = new < if ! call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() for : boolean protected protected decl_stmt boolean = synchronized if try if = else if call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() + + + catch if call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + + if protected final protected final synchronized return new protected protected protected protected protected protected