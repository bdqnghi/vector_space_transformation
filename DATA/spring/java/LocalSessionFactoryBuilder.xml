org.springframework.orm.hibernate4 java.io.IOException import java.lang.annotation.Annotation import java.lang.reflect.Method import java.util.Properties import java.util.Set import java.util.TreeSet import javax.persistence.AttributeConverter import javax.persistence.Embeddable import javax.persistence.Entity import javax.persistence.MappedSuperclass import javax.sql.DataSource import javax.transaction.TransactionManager import org.hibernate.HibernateException import org.hibernate.MappingException import org.hibernate.SessionFactory import org.hibernate.cache.spi.RegionFactory import org.hibernate.cfg.AvailableSettings import org.hibernate.cfg.Configuration import org.hibernate.cfg.Environment import org.hibernate.cfg.Settings import org.hibernate.engine.transaction.internal.jta.CMTTransactionFactory import org.hibernate.service.ServiceRegistry import org.springframework.core.io.Resource import org.springframework.core.io.ResourceLoader import org.springframework.core.io.support.PathMatchingResourcePatternResolver import org.springframework.core.io.support.ResourcePatternResolver import org.springframework.core.io.support.ResourcePatternUtils import org.springframework.core.type.classreading.CachingMetadataReaderFactory import org.springframework.core.type.classreading.MetadataReader import org.springframework.core.type.classreading.MetadataReaderFactory import org.springframework.core.type.filter.AnnotationTypeFilter import org.springframework.core.type.filter.TypeFilter import org.springframework.transaction.jta.JtaTransactionManager import org.springframework.util.Assert import org.springframework.util.ClassUtils import class annotation org.springframework.orm.hibernate4.LocalSessionFactoryBuilder super super extends String decl TypeFilter String ResourcePatternResolver TypeFilter RegionFactory decl TypeFilter JtaTransactionManager boolean public public if instanceof decl_stmt boolean = if + else decl_stmt org.springframework.transaction.jta.JtaTransactionManager = if call org.springframework.transaction.jta.JtaTransactionManager.getTransactionManager() call org.springframework.transaction.jta.JtaTransactionManager.getTransactionManager() call org.springframework.transaction.jta.JtaTransactionManager.getTransactionManager() call org.springframework.transaction.jta.JtaTransactionManager.getTransactionManager() call org.springframework.transaction.jta.JtaTransactionManager.getTransactionManager() == throw new new call org.springframework.transaction.jta.JtaTransactionManager.getTransactionManager() call org.springframework.transaction.jta.JtaTransactionManager.getTransactionManager() call org.springframework.transaction.jta.JtaTransactionManager.getTransactionManager() call org.springframework.transaction.jta.JtaTransactionManager.getTransactionManager() call org.springframework.transaction.jta.JtaTransactionManager.getTransactionManager() call org.springframework.transaction.jta.JtaTransactionManager.getUserTransaction() call org.springframework.transaction.jta.JtaTransactionManager.getUserTransaction() call org.springframework.transaction.jta.JtaTransactionManager.getUserTransaction() call org.springframework.transaction.jta.JtaTransactionManager.getUserTransaction() call org.springframework.transaction.jta.JtaTransactionManager.getUserTransaction() call org.springframework.transaction.jta.JtaTransactionManager.getTransactionSynchronizationRegistry() call org.springframework.transaction.jta.JtaTransactionManager.getTransactionSynchronizationRegistry() call org.springframework.transaction.jta.JtaTransactionManager.getTransactionSynchronizationRegistry() call org.springframework.transaction.jta.JtaTransactionManager.getTransactionSynchronizationRegistry() call org.springframework.transaction.jta.JtaTransactionManager.getTransactionSynchronizationRegistry() else if instanceof new else throw new + new return public public return public public return public public = return public public = return public public < for < : return public public for : return ClassLoader String MetadataReader decl Set String decl Set MetadataReaderFactory decl Set decl Resource public public throws decl_stmt java.util.Set < = new < decl_stmt java.util.Set < = new < decl_stmt java.util.Set < = new < try for : decl_stmt java.lang.String = + + decl_stmt org.springframework.core.io.Resource = decl_stmt org.springframework.core.type.classreading.MetadataReaderFactory = new for : if decl_stmt org.springframework.core.type.classreading.MetadataReader = call org.springframework.core.type.classreading.MetadataReaderFactory.getMetadataReader(Resource) call org.springframework.core.type.classreading.MetadataReaderFactory.getMetadataReader(Resource) call org.springframework.core.type.classreading.MetadataReaderFactory.getMetadataReader(Resource) call org.springframework.core.type.classreading.MetadataReaderFactory.getMetadataReader(Resource) call org.springframework.core.type.classreading.MetadataReaderFactory.getMetadataReader(Resource) decl_stmt java.lang.String = call org.springframework.core.type.classreading.MetadataReader.getClassMetadata() call org.springframework.core.type.classreading.MetadataReader.getClassMetadata() call org.springframework.core.type.classreading.MetadataReader.getClassMetadata() call org.springframework.core.type.classreading.MetadataReader.getClassMetadata() call org.springframework.core.type.classreading.MetadataReader.getClassMetadata() if call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() else if != && call TypeFilter.match() call TypeFilter.match() call TypeFilter.match() call TypeFilter.match() call TypeFilter.match() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() else if call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() - call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() catch throw new try decl_stmt java.lang.ClassLoader = for : call java.lang.ClassLoader.loadClass(String) call java.lang.ClassLoader.loadClass(String) call java.lang.ClassLoader.loadClass(String) call java.lang.ClassLoader.loadClass(String) call java.lang.ClassLoader.loadClass(String) for : call java.lang.ClassLoader.loadClass(String) call java.lang.ClassLoader.loadClass(String) call java.lang.ClassLoader.loadClass(String) call java.lang.ClassLoader.loadClass(String) call java.lang.ClassLoader.loadClass(String) for : catch throw new return private private throws if != for : if return return Method Settings public public throws decl_stmt Settings = if != try decl_stmt com.sun.jdi.Method = call Method.setAccessible() call Method.setAccessible() call Method.setAccessible() call Method.setAccessible() call Method.setAccessible() call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) catch throw new return ClassLoader boolean ClassLoader Thread public public throws decl_stmt java.lang.ClassLoader = decl_stmt java.lang.Thread = decl_stmt java.lang.ClassLoader = call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() decl_stmt boolean = != && ! call ClassLoader.equals() call ClassLoader.equals() call ClassLoader.equals() call ClassLoader.equals() call ClassLoader.equals() if call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) try return finally if call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) public static public static < < extends extends extends <