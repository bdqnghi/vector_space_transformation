org.springframework.expression.spel.ast org.springframework.asm.MethodVisitor import org.springframework.asm.Type import org.springframework.expression.EvaluationException import org.springframework.expression.TypedValue import org.springframework.expression.spel.CodeFlow import org.springframework.expression.spel.ExpressionState import org.springframework.expression.spel.SpelEvaluationException import org.springframework.expression.spel.SpelMessage import org.springframework.expression.spel.support.BooleanTypedValue import class org.springframework.expression.spel.ast.OperatorInstanceof super super extends decl Class TypedValue decl Class Object BooleanTypedValue TypedValue Object public public throws decl_stmt org.springframework.expression.TypedValue = decl_stmt org.springframework.expression.TypedValue = decl_stmt java.lang.Object = call TypedValue.getValue() call TypedValue.getValue() call TypedValue.getValue() call TypedValue.getValue() call TypedValue.getValue() decl_stmt java.lang.Object = call TypedValue.getValue() call TypedValue.getValue() call TypedValue.getValue() call TypedValue.getValue() call TypedValue.getValue() decl_stmt org.springframework.expression.spel.support.BooleanTypedValue = if == || ! instanceof < throw new == : call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() decl_stmt java.lang.Class < = < if == = else = call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() = = return public public return != && public public