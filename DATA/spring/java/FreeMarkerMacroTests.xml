org.springframework.web.servlet.view.freemarker java.io.FileWriter import java.io.InputStreamReader import java.util.HashMap import java.util.Map import javax.servlet.ServletException import javax.servlet.http.HttpServletResponse import freemarker.template.Configuration import freemarker.template.SimpleHash import freemarker.template.Template import freemarker.template.TemplateException import org.junit.Before import org.junit.Test import org.springframework.core.io.ClassPathResource import org.springframework.core.io.FileSystemResource import org.springframework.mock.web.test.MockHttpServletRequest import org.springframework.mock.web.test.MockHttpServletResponse import org.springframework.mock.web.test.MockServletContext import org.springframework.tests.sample.beans.TestBean import org.springframework.util.FileCopyUtils import org.springframework.util.StringUtils import org.springframework.web.context.support.StaticWebApplicationContext import org.springframework.web.servlet.DispatcherServlet import org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver import org.springframework.web.servlet.support.BindStatus import org.springframework.web.servlet.support.RequestContext import org.springframework.web.servlet.theme.FixedThemeResolver import org.springframework.web.servlet.view.DummyMacroRequestContext import static static org.junit.Assert.* import class org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests MockHttpServletRequest FreeMarkerConfigurer StaticWebApplicationContext MockHttpServletResponse String public public throws = new call org.springframework.web.context.support.StaticWebApplicationContext.setServletContext(ServletContext) call org.springframework.web.context.support.StaticWebApplicationContext.setServletContext(ServletContext) call org.springframework.web.context.support.StaticWebApplicationContext.setServletContext(ServletContext) call org.springframework.web.context.support.StaticWebApplicationContext.setServletContext(ServletContext) call org.springframework.web.context.support.StaticWebApplicationContext.setServletContext(ServletContext) new = new call FreeMarkerConfigurer.setTemplateLoaderPaths() call FreeMarkerConfigurer.setTemplateLoaderPaths() call FreeMarkerConfigurer.setTemplateLoaderPaths() call FreeMarkerConfigurer.setTemplateLoaderPaths() call FreeMarkerConfigurer.setTemplateLoaderPaths() + call org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer.afterPropertiesSet() call org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer.afterPropertiesSet() call org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer.afterPropertiesSet() call org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer.afterPropertiesSet() call org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer.afterPropertiesSet() call StaticWebApplicationContext.getDefaultListableBeanFactory() call StaticWebApplicationContext.getDefaultListableBeanFactory() call StaticWebApplicationContext.getDefaultListableBeanFactory() call StaticWebApplicationContext.getDefaultListableBeanFactory() call StaticWebApplicationContext.getDefaultListableBeanFactory() call StaticWebApplicationContext.refresh() call StaticWebApplicationContext.refresh() call StaticWebApplicationContext.refresh() call StaticWebApplicationContext.refresh() call StaticWebApplicationContext.refresh() = new call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) new call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) new = new BindStatus decl Map FreeMarkerView RequestContext public public throws decl_stmt org.springframework.web.servlet.view.freemarker.FreeMarkerView = new protected protected throws decl_stmt java.util.Map = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() instanceof decl_stmt org.springframework.web.servlet.support.RequestContext = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt org.springframework.web.servlet.support.BindStatus = call org.springframework.web.servlet.support.RequestContext.getBindStatus(String,boolean) call org.springframework.web.servlet.support.RequestContext.getBindStatus(String,boolean) call org.springframework.web.servlet.support.RequestContext.getBindStatus(String,boolean) call org.springframework.web.servlet.support.RequestContext.getBindStatus(String,boolean) call org.springframework.web.servlet.support.RequestContext.getBindStatus(String,boolean) call org.springframework.web.servlet.support.BindStatus.getExpression() call org.springframework.web.servlet.support.BindStatus.getExpression() call org.springframework.web.servlet.support.BindStatus.getExpression() call org.springframework.web.servlet.support.BindStatus.getExpression() call org.springframework.web.servlet.support.BindStatus.getExpression() call org.springframework.web.servlet.support.BindStatus.getValue() call org.springframework.web.servlet.support.BindStatus.getValue() call org.springframework.web.servlet.support.BindStatus.getValue() call org.springframework.web.servlet.support.BindStatus.getValue() call org.springframework.web.servlet.support.BindStatus.getValue() call FreeMarkerView.setUrl() call FreeMarkerView.setUrl() call FreeMarkerView.setUrl() call FreeMarkerView.setUrl() call FreeMarkerView.setUrl() call FreeMarkerView.setApplicationContext() call FreeMarkerView.setApplicationContext() call FreeMarkerView.setApplicationContext() call FreeMarkerView.setApplicationContext() call FreeMarkerView.setApplicationContext() call FreeMarkerView.setExposeSpringMacroHelpers() call FreeMarkerView.setExposeSpringMacroHelpers() call FreeMarkerView.setExposeSpringMacroHelpers() call FreeMarkerView.setExposeSpringMacroHelpers() call FreeMarkerView.setExposeSpringMacroHelpers() decl_stmt java.util.Map < = new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new call FreeMarkerView.render() call FreeMarkerView.render() call FreeMarkerView.render() call FreeMarkerView.render() call FreeMarkerView.render() BindStatus Map RequestContext protected protected throws decl_stmt java.util.Map = call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) instanceof decl_stmt org.springframework.web.servlet.support.RequestContext = call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) decl_stmt org.springframework.web.servlet.support.BindStatus = call org.springframework.web.servlet.support.RequestContext.getBindStatus(String,boolean) call org.springframework.web.servlet.support.RequestContext.getBindStatus(String,boolean) call org.springframework.web.servlet.support.RequestContext.getBindStatus(String,boolean) call org.springframework.web.servlet.support.RequestContext.getBindStatus(String,boolean) call org.springframework.web.servlet.support.RequestContext.getBindStatus(String,boolean) call org.springframework.web.servlet.support.BindStatus.getExpression() call org.springframework.web.servlet.support.BindStatus.getExpression() call org.springframework.web.servlet.support.BindStatus.getExpression() call org.springframework.web.servlet.support.BindStatus.getExpression() call org.springframework.web.servlet.support.BindStatus.getExpression() call org.springframework.web.servlet.support.BindStatus.getValue() call org.springframework.web.servlet.support.BindStatus.getValue() call org.springframework.web.servlet.support.BindStatus.getValue() call org.springframework.web.servlet.support.BindStatus.getValue() call org.springframework.web.servlet.support.BindStatus.getValue() decl Map String FreeMarkerView public public decl_stmt java.lang.String final final = decl_stmt org.springframework.web.servlet.view.freemarker.FreeMarkerView = new protected protected call FreeMarkerView.setUrl() call FreeMarkerView.setUrl() call FreeMarkerView.setUrl() call FreeMarkerView.setUrl() call FreeMarkerView.setUrl() call FreeMarkerView.setApplicationContext() call FreeMarkerView.setApplicationContext() call FreeMarkerView.setApplicationContext() call FreeMarkerView.setApplicationContext() call FreeMarkerView.setApplicationContext() call FreeMarkerView.setExposeSpringMacroHelpers() call FreeMarkerView.setExposeSpringMacroHelpers() call FreeMarkerView.setExposeSpringMacroHelpers() call FreeMarkerView.setExposeSpringMacroHelpers() call FreeMarkerView.setExposeSpringMacroHelpers() decl_stmt java.util.Map < = new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() try call FreeMarkerView.render() call FreeMarkerView.render() call FreeMarkerView.render() call FreeMarkerView.render() call FreeMarkerView.render() catch instanceof protected protected public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws String public public throws decl_stmt java.lang.String = + call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) + call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) String public public throws decl_stmt java.lang.String = + call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) + call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) public public throws String public public throws decl_stmt java.lang.String = + call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) + call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) FileSystemResource String DummyMacroRequestContext TestBean decl Map decl Map decl Map String decl Map TestBean Configuration FreeMarkerView private private throws decl_stmt java.lang.String = decl_stmt org.springframework.core.io.FileSystemResource = new + + new call org.springframework.core.io.FileSystemResource.getPath() call org.springframework.core.io.FileSystemResource.getPath() call org.springframework.core.io.FileSystemResource.getPath() call org.springframework.core.io.FileSystemResource.getPath() call org.springframework.core.io.FileSystemResource.getPath() decl_stmt org.springframework.web.servlet.view.DummyMacroRequestContext = new decl_stmt java.util.Map < = new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.springframework.web.servlet.view.DummyMacroRequestContext.setMessageMap(Map) call org.springframework.web.servlet.view.DummyMacroRequestContext.setMessageMap(Map) call org.springframework.web.servlet.view.DummyMacroRequestContext.setMessageMap(Map) call org.springframework.web.servlet.view.DummyMacroRequestContext.setMessageMap(Map) call org.springframework.web.servlet.view.DummyMacroRequestContext.setMessageMap(Map) decl_stmt java.util.Map < = new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.springframework.web.servlet.view.DummyMacroRequestContext.setThemeMessageMap(Map) call org.springframework.web.servlet.view.DummyMacroRequestContext.setThemeMessageMap(Map) call org.springframework.web.servlet.view.DummyMacroRequestContext.setThemeMessageMap(Map) call org.springframework.web.servlet.view.DummyMacroRequestContext.setThemeMessageMap(Map) call org.springframework.web.servlet.view.DummyMacroRequestContext.setThemeMessageMap(Map) call org.springframework.web.servlet.view.DummyMacroRequestContext.setContextPath(String) call org.springframework.web.servlet.view.DummyMacroRequestContext.setContextPath(String) call org.springframework.web.servlet.view.DummyMacroRequestContext.setContextPath(String) call org.springframework.web.servlet.view.DummyMacroRequestContext.setContextPath(String) call org.springframework.web.servlet.view.DummyMacroRequestContext.setContextPath(String) decl_stmt org.springframework.tests.sample.beans.TestBean = new decl_stmt org.springframework.tests.sample.beans.TestBean = new call org.springframework.tests.sample.beans.TestBean.setJedi(boolean) call org.springframework.tests.sample.beans.TestBean.setJedi(boolean) call org.springframework.tests.sample.beans.TestBean.setJedi(boolean) call org.springframework.tests.sample.beans.TestBean.setJedi(boolean) call org.springframework.tests.sample.beans.TestBean.setJedi(boolean) call org.springframework.tests.sample.beans.TestBean.setSpouse(ITestBean) call org.springframework.tests.sample.beans.TestBean.setSpouse(ITestBean) call org.springframework.tests.sample.beans.TestBean.setSpouse(ITestBean) call org.springframework.tests.sample.beans.TestBean.setSpouse(ITestBean) call org.springframework.tests.sample.beans.TestBean.setSpouse(ITestBean) call org.springframework.tests.sample.beans.TestBean.setJedi(boolean) call org.springframework.tests.sample.beans.TestBean.setJedi(boolean) call org.springframework.tests.sample.beans.TestBean.setJedi(boolean) call org.springframework.tests.sample.beans.TestBean.setJedi(boolean) call org.springframework.tests.sample.beans.TestBean.setJedi(boolean) call org.springframework.tests.sample.beans.TestBean.setStringArray(String) call org.springframework.tests.sample.beans.TestBean.setStringArray(String) call org.springframework.tests.sample.beans.TestBean.setStringArray(String) call org.springframework.tests.sample.beans.TestBean.setStringArray(String) call org.springframework.tests.sample.beans.TestBean.setStringArray(String) new call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) decl_stmt java.util.Map < = new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt Configuration = call org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer.getConfiguration() call org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer.getConfiguration() call org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer.getConfiguration() call org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer.getConfiguration() call org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer.getConfiguration() decl_stmt java.util.Map < = new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() decl_stmt org.springframework.web.servlet.view.freemarker.FreeMarkerView = new call FreeMarkerView.setBeanName() call FreeMarkerView.setBeanName() call FreeMarkerView.setBeanName() call FreeMarkerView.setBeanName() call FreeMarkerView.setBeanName() call FreeMarkerView.setUrl() call FreeMarkerView.setUrl() call FreeMarkerView.setUrl() call FreeMarkerView.setUrl() call FreeMarkerView.setUrl() call FreeMarkerView.setExposeSpringMacroHelpers() call FreeMarkerView.setExposeSpringMacroHelpers() call FreeMarkerView.setExposeSpringMacroHelpers() call FreeMarkerView.setExposeSpringMacroHelpers() call FreeMarkerView.setExposeSpringMacroHelpers() call org.springframework.web.servlet.view.freemarker.FreeMarkerView.setConfiguration(Configuration) call org.springframework.web.servlet.view.freemarker.FreeMarkerView.setConfiguration(Configuration) call org.springframework.web.servlet.view.freemarker.FreeMarkerView.setConfiguration(Configuration) call org.springframework.web.servlet.view.freemarker.FreeMarkerView.setConfiguration(Configuration) call org.springframework.web.servlet.view.freemarker.FreeMarkerView.setConfiguration(Configuration) call FreeMarkerView.setServletContext() call FreeMarkerView.setServletContext() call FreeMarkerView.setServletContext() call FreeMarkerView.setServletContext() call FreeMarkerView.setServletContext() new call FreeMarkerView.render() call FreeMarkerView.render() call FreeMarkerView.render() call FreeMarkerView.render() call FreeMarkerView.render() decl_stmt java.lang.String = call org.springframework.mock.web.MockHttpServletResponse.getContentAsString() call org.springframework.mock.web.MockHttpServletResponse.getContentAsString() call org.springframework.mock.web.MockHttpServletResponse.getContentAsString() call org.springframework.mock.web.MockHttpServletResponse.getContentAsString() call org.springframework.mock.web.MockHttpServletResponse.getContentAsString() = call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) return call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() decl String String ClassPathResource private private throws decl_stmt org.springframework.core.io.ClassPathResource = new call org.springframework.core.io.ClassPathResource.exists() call org.springframework.core.io.ClassPathResource.exists() call org.springframework.core.io.ClassPathResource.exists() call org.springframework.core.io.ClassPathResource.exists() call org.springframework.core.io.ClassPathResource.exists() decl_stmt java.lang.String = new call ClassPathResource.getInputStream() call ClassPathResource.getInputStream() call ClassPathResource.getInputStream() call ClassPathResource.getInputStream() call ClassPathResource.getInputStream() = call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) decl_stmt java.lang.String = for : if return return