org.springframework.dao.annotation java.lang.annotation.ElementType import java.lang.annotation.Retention import java.lang.annotation.RetentionPolicy import java.lang.annotation.Target import javax.persistence.PersistenceException import org.junit.Test import org.springframework.aop.framework.ProxyFactory import org.springframework.dao.DataAccessException import org.springframework.dao.InvalidDataAccessApiUsageException import org.springframework.dao.support.DataAccessUtilsTests.MapPersistenceExceptionTranslator import org.springframework.dao.support.PersistenceExceptionTranslator import org.springframework.stereotype.Repository import static static org.junit.Assert.* import class org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests RuntimeException PersistenceException MapPersistenceExceptionTranslator ProxyFactory protected protected decl_stmt MapPersistenceExceptionTranslator = new call MapPersistenceExceptionTranslator.addTranslation() call MapPersistenceExceptionTranslator.addTranslation() call MapPersistenceExceptionTranslator.addTranslation() call MapPersistenceExceptionTranslator.addTranslation() call MapPersistenceExceptionTranslator.addTranslation() new decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() return call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) protected protected new RepositoryInterfaceImpl RepositoryInterface public public decl_stmt RepositoryInterfaceImpl = new decl_stmt org.springframework.dao.annotation.RepositoryInterface = call org.springframework.dao.annotation.RepositoryInterface.noThrowsClause() call org.springframework.dao.annotation.RepositoryInterface.noThrowsClause() call org.springframework.dao.annotation.RepositoryInterface.noThrowsClause() call org.springframework.dao.annotation.RepositoryInterface.noThrowsClause() call org.springframework.dao.annotation.RepositoryInterface.noThrowsClause() call RepositoryInterface.throwsPersistenceException() call RepositoryInterface.throwsPersistenceException() call RepositoryInterface.throwsPersistenceException() call RepositoryInterface.throwsPersistenceException() call RepositoryInterface.throwsPersistenceException() call RepositoryInterfaceImpl.setBehavior() call RepositoryInterfaceImpl.setBehavior() call RepositoryInterfaceImpl.setBehavior() call RepositoryInterfaceImpl.setBehavior() call RepositoryInterfaceImpl.setBehavior() try call org.springframework.dao.annotation.RepositoryInterface.noThrowsClause() call org.springframework.dao.annotation.RepositoryInterface.noThrowsClause() call org.springframework.dao.annotation.RepositoryInterface.noThrowsClause() call org.springframework.dao.annotation.RepositoryInterface.noThrowsClause() call org.springframework.dao.annotation.RepositoryInterface.noThrowsClause() catch try call RepositoryInterface.throwsPersistenceException() call RepositoryInterface.throwsPersistenceException() call RepositoryInterface.throwsPersistenceException() call RepositoryInterface.throwsPersistenceException() call RepositoryInterface.throwsPersistenceException() catch RepositoryInterfaceImpl RepositoryInterface public public decl_stmt RepositoryInterfaceImpl = new decl_stmt org.springframework.dao.annotation.RepositoryInterface = call org.springframework.dao.annotation.RepositoryInterface.noThrowsClause() call org.springframework.dao.annotation.RepositoryInterface.noThrowsClause() call org.springframework.dao.annotation.RepositoryInterface.noThrowsClause() call org.springframework.dao.annotation.RepositoryInterface.noThrowsClause() call org.springframework.dao.annotation.RepositoryInterface.noThrowsClause() call RepositoryInterface.throwsPersistenceException() call RepositoryInterface.throwsPersistenceException() call RepositoryInterface.throwsPersistenceException() call RepositoryInterface.throwsPersistenceException() call RepositoryInterface.throwsPersistenceException() call RepositoryInterfaceImpl.setBehavior() call RepositoryInterfaceImpl.setBehavior() call RepositoryInterfaceImpl.setBehavior() call RepositoryInterfaceImpl.setBehavior() call RepositoryInterfaceImpl.setBehavior() try call org.springframework.dao.annotation.RepositoryInterface.noThrowsClause() call org.springframework.dao.annotation.RepositoryInterface.noThrowsClause() call org.springframework.dao.annotation.RepositoryInterface.noThrowsClause() call org.springframework.dao.annotation.RepositoryInterface.noThrowsClause() call org.springframework.dao.annotation.RepositoryInterface.noThrowsClause() catch try call RepositoryInterface.throwsPersistenceException() call RepositoryInterface.throwsPersistenceException() call RepositoryInterface.throwsPersistenceException() call RepositoryInterface.throwsPersistenceException() call RepositoryInterface.throwsPersistenceException() catch public public new public public new public public new public public new public public new RepositoryInterface private private decl_stmt org.springframework.dao.annotation.RepositoryInterface = try call org.springframework.dao.annotation.RepositoryInterface.noThrowsClause() call org.springframework.dao.annotation.RepositoryInterface.noThrowsClause() call org.springframework.dao.annotation.RepositoryInterface.noThrowsClause() call org.springframework.dao.annotation.RepositoryInterface.noThrowsClause() call org.springframework.dao.annotation.RepositoryInterface.noThrowsClause() catch catch try call RepositoryInterface.throwsPersistenceException() call RepositoryInterface.throwsPersistenceException() call RepositoryInterface.throwsPersistenceException() call RepositoryInterface.throwsPersistenceException() call RepositoryInterface.throwsPersistenceException() catch public public = public public if != throw public public throws if != throw