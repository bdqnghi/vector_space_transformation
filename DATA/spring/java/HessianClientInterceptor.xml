org.springframework.remoting.caucho java.lang.reflect.InvocationTargetException import java.lang.reflect.UndeclaredThrowableException import java.net.ConnectException import java.net.MalformedURLException import com.caucho.hessian.HessianException import com.caucho.hessian.client.HessianConnectionException import com.caucho.hessian.client.HessianConnectionFactory import com.caucho.hessian.client.HessianProxyFactory import com.caucho.hessian.client.HessianRuntimeException import com.caucho.hessian.io.SerializerFactory import org.aopalliance.intercept.MethodInterceptor import org.aopalliance.intercept.MethodInvocation import org.springframework.remoting.RemoteAccessException import org.springframework.remoting.RemoteConnectFailureException import org.springframework.remoting.RemoteLookupFailureException import org.springframework.remoting.RemoteProxyFailureException import org.springframework.remoting.support.UrlBasedRemoteAccessor import org.springframework.util.Assert import class org.springframework.remoting.caucho.HessianClientInterceptor super super extends super implements Object HessianProxyFactory public public = != : new public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public throws try = catch throw new + + protected protected throws return call HessianProxyFactory.create() call HessianProxyFactory.create() call HessianProxyFactory.create() call HessianProxyFactory.create() call HessianProxyFactory.create() UndeclaredThrowableException ClassLoader Throwable Throwable public public throws if == throw new + decl_stmt java.lang.ClassLoader = try return catch decl_stmt java.lang.Throwable = if instanceof = if instanceof throw else if instanceof || instanceof decl_stmt java.lang.Throwable = call java.lang.Throwable.getCause() call java.lang.Throwable.getCause() call java.lang.Throwable.getCause() call java.lang.Throwable.getCause() call java.lang.Throwable.getCause() throw != : else if instanceof decl_stmt java.lang.reflect.UndeclaredThrowableException = throw call java.lang.reflect.UndeclaredThrowableException.getUndeclaredThrowable() call java.lang.reflect.UndeclaredThrowableException.getUndeclaredThrowable() call java.lang.reflect.UndeclaredThrowableException.getUndeclaredThrowable() call java.lang.reflect.UndeclaredThrowableException.getUndeclaredThrowable() call java.lang.reflect.UndeclaredThrowableException.getUndeclaredThrowable() else throw catch throw new + + finally protected protected if instanceof || instanceof return new + + else return new + +