org.springframework.scripting.support java.util.HashMap import java.util.Iterator import java.util.Map import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.aop.TargetSource import org.springframework.aop.framework.AopInfrastructureBean import org.springframework.aop.framework.ProxyFactory import org.springframework.aop.support.DelegatingIntroductionInterceptor import org.springframework.asm.Type import org.springframework.beans.BeanUtils import org.springframework.beans.PropertyValue import org.springframework.beans.factory.BeanClassLoaderAware import org.springframework.beans.factory.BeanCreationException import org.springframework.beans.factory.BeanCurrentlyInCreationException import org.springframework.beans.factory.BeanDefinitionStoreException import org.springframework.beans.factory.BeanFactory import org.springframework.beans.factory.BeanFactoryAware import org.springframework.beans.factory.DisposableBean import org.springframework.beans.factory.FactoryBean import org.springframework.beans.factory.config.BeanDefinition import org.springframework.beans.factory.config.BeanPostProcessor import org.springframework.beans.factory.config.ConfigurableBeanFactory import org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessorAdapter import org.springframework.beans.factory.support.AbstractBeanDefinition import org.springframework.beans.factory.support.BeanDefinitionValidationException import org.springframework.beans.factory.support.DefaultListableBeanFactory import org.springframework.beans.factory.support.GenericBeanDefinition import org.springframework.cglib.core.Signature import org.springframework.cglib.proxy.InterfaceMaker import org.springframework.context.ResourceLoaderAware import org.springframework.core.Conventions import org.springframework.core.Ordered import org.springframework.core.io.DefaultResourceLoader import org.springframework.core.io.ResourceLoader import org.springframework.scripting.ScriptFactory import org.springframework.scripting.ScriptSource import org.springframework.util.ClassUtils import org.springframework.util.ObjectUtils import org.springframework.util.StringUtils import class org.springframework.scripting.support.ScriptFactoryPostProcessor super super extends super implements String String String ConfigurableBeanFactory String ResourceLoader decl Map ClassLoader boolean long String Log String DefaultListableBeanFactory public public = public public = public public = public public if ! instanceof throw new + + call ConfigurableBeanFactory.getClass() call ConfigurableBeanFactory.getClass() call ConfigurableBeanFactory.getClass() call ConfigurableBeanFactory.getClass() call ConfigurableBeanFactory.getClass() = for < = if instanceof public public = public public return BeanDefinition ScriptFactory decl Class String String Object ScriptSource public < public < < if ! return decl_stmt org.springframework.beans.factory.config.BeanDefinition = try decl_stmt java.lang.String = + decl_stmt java.lang.String = + decl_stmt org.springframework.scripting.ScriptFactory = decl_stmt org.springframework.scripting.ScriptSource = call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() decl_stmt java.lang.String = + decl_stmt java.lang.String = + decl_stmt org.springframework.scripting.ScriptFactory = decl_stmt org.springframework.scripting.ScriptSource = call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() decl_stmt java.lang.Class < = call org.springframework.scripting.ScriptFactory.getScriptedObjectType(ScriptSource) call org.springframework.scripting.ScriptFactory.getScriptedObjectType(ScriptSource) call org.springframework.scripting.ScriptFactory.getScriptedObjectType(ScriptSource) call org.springframework.scripting.ScriptFactory.getScriptedObjectType(ScriptSource) call org.springframework.scripting.ScriptFactory.getScriptedObjectType(ScriptSource) if != return else if ! return == : else if call org.springframework.beans.factory.config.BeanDefinition.isSingleton() call org.springframework.beans.factory.config.BeanDefinition.isSingleton() call org.springframework.beans.factory.config.BeanDefinition.isSingleton() call org.springframework.beans.factory.config.BeanDefinition.isSingleton() call org.springframework.beans.factory.config.BeanDefinition.isSingleton() decl_stmt java.lang.Object = if != return catch if instanceof && instanceof if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + + + else if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + return BeanDefinition long ScriptFactory RefreshableScriptTargetSource boolean boolean String String decl Class String ScriptSource public public < if ! return decl_stmt org.springframework.beans.factory.config.BeanDefinition = decl_stmt java.lang.String = + decl_stmt java.lang.String = + decl_stmt org.springframework.scripting.ScriptFactory = decl_stmt org.springframework.scripting.ScriptSource = call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() decl_stmt boolean = try decl_stmt java.lang.Class < = call org.springframework.scripting.ScriptFactory.getScriptedObjectType(ScriptSource) call org.springframework.scripting.ScriptFactory.getScriptedObjectType(ScriptSource) call org.springframework.scripting.ScriptFactory.getScriptedObjectType(ScriptSource) call org.springframework.scripting.ScriptFactory.getScriptedObjectType(ScriptSource) call org.springframework.scripting.ScriptFactory.getScriptedObjectType(ScriptSource) if != = catch throw new + decl_stmt long = if >= decl_stmt org.springframework.scripting.support.RefreshableScriptTargetSource = new decl_stmt boolean = decl_stmt java.lang.String = call BeanDefinition.getAttribute() call BeanDefinition.getAttribute() call BeanDefinition.getAttribute() call BeanDefinition.getAttribute() call BeanDefinition.getAttribute() if && == || ! throw new + + call boolean.setRefreshCheckDelay() call boolean.setRefreshCheckDelay() call boolean.setRefreshCheckDelay() call boolean.setRefreshCheckDelay() call boolean.setRefreshCheckDelay() return if = + return ScriptFactory BeanDefinition decl Class long ScriptSource protected protected synchronized if ! decl_stmt org.springframework.scripting.ScriptFactory = decl_stmt org.springframework.scripting.ScriptSource = call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() decl_stmt org.springframework.scripting.ScriptFactory = decl_stmt org.springframework.scripting.ScriptSource = call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() decl_stmt org.springframework.scripting.ScriptFactory = decl_stmt org.springframework.scripting.ScriptSource = call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() decl_stmt org.springframework.scripting.ScriptFactory = decl_stmt org.springframework.scripting.ScriptSource = call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() call org.springframework.scripting.ScriptFactory.getScriptSourceLocator() if call org.springframework.scripting.ScriptFactory.requiresConfigInterface() call org.springframework.scripting.ScriptFactory.requiresConfigInterface() call org.springframework.scripting.ScriptFactory.requiresConfigInterface() call org.springframework.scripting.ScriptFactory.requiresConfigInterface() call org.springframework.scripting.ScriptFactory.requiresConfigInterface() && ! decl_stmt java.lang.Class < = = decl_stmt org.springframework.beans.factory.config.BeanDefinition = decl_stmt long = if >= long Object protected protected decl_stmt long = decl_stmt java.lang.Object = if instanceof = else if instanceof = else if != throw new + + + + return boolean Object protected protected decl_stmt boolean = decl_stmt java.lang.Object = if instanceof = else if instanceof = else if != throw new + + + + return GenericBeanDefinition protected protected decl_stmt org.springframework.beans.factory.support.GenericBeanDefinition = new call GenericBeanDefinition.setBeanClassName() call GenericBeanDefinition.setBeanClassName() call GenericBeanDefinition.setBeanClassName() call GenericBeanDefinition.setBeanClassName() call GenericBeanDefinition.setBeanClassName() call GenericBeanDefinition.getConstructorArgumentValues() call GenericBeanDefinition.getConstructorArgumentValues() call GenericBeanDefinition.getConstructorArgumentValues() call GenericBeanDefinition.getConstructorArgumentValues() call GenericBeanDefinition.getConstructorArgumentValues() return ScriptSource protected protected synchronized decl_stmt org.springframework.scripting.ScriptSource = if == = return protected protected if return new call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() else return new call ResourceLoader.getResource() call ResourceLoader.getResource() call ResourceLoader.getResource() call ResourceLoader.getResource() call ResourceLoader.getResource() decl PropertyValue AbstractBeanDefinition String decl Class Signature String InterfaceMaker protected < protected < < decl_stmt InterfaceMaker = new decl_stmt org.springframework.beans.PropertyValue = for : decl_stmt java.lang.String = decl_stmt java.lang.Class < = decl_stmt java.lang.String = + decl_stmt sun.reflect.generics.tree.Signature = new new call InterfaceMaker.add() call InterfaceMaker.add() call InterfaceMaker.add() call InterfaceMaker.add() call InterfaceMaker.add() new if instanceof decl_stmt org.springframework.beans.factory.support.AbstractBeanDefinition = if call org.springframework.beans.factory.support.AbstractBeanDefinition.getInitMethodName() call org.springframework.beans.factory.support.AbstractBeanDefinition.getInitMethodName() call org.springframework.beans.factory.support.AbstractBeanDefinition.getInitMethodName() call org.springframework.beans.factory.support.AbstractBeanDefinition.getInitMethodName() call org.springframework.beans.factory.support.AbstractBeanDefinition.getInitMethodName() != decl_stmt sun.reflect.generics.tree.Signature = new call org.springframework.beans.factory.support.AbstractBeanDefinition.getInitMethodName() call org.springframework.beans.factory.support.AbstractBeanDefinition.getInitMethodName() call org.springframework.beans.factory.support.AbstractBeanDefinition.getInitMethodName() call org.springframework.beans.factory.support.AbstractBeanDefinition.getInitMethodName() call org.springframework.beans.factory.support.AbstractBeanDefinition.getInitMethodName() new call InterfaceMaker.add() call InterfaceMaker.add() call InterfaceMaker.add() call InterfaceMaker.add() call InterfaceMaker.add() new if call org.springframework.beans.factory.support.AbstractBeanDefinition.getDestroyMethodName() call org.springframework.beans.factory.support.AbstractBeanDefinition.getDestroyMethodName() call org.springframework.beans.factory.support.AbstractBeanDefinition.getDestroyMethodName() call org.springframework.beans.factory.support.AbstractBeanDefinition.getDestroyMethodName() call org.springframework.beans.factory.support.AbstractBeanDefinition.getDestroyMethodName() decl_stmt sun.reflect.generics.tree.Signature = new call org.springframework.beans.factory.support.AbstractBeanDefinition.getDestroyMethodName() call org.springframework.beans.factory.support.AbstractBeanDefinition.getDestroyMethodName() call org.springframework.beans.factory.support.AbstractBeanDefinition.getDestroyMethodName() call org.springframework.beans.factory.support.AbstractBeanDefinition.getDestroyMethodName() call org.springframework.beans.factory.support.AbstractBeanDefinition.getDestroyMethodName() new call InterfaceMaker.add() call InterfaceMaker.add() call InterfaceMaker.add() call InterfaceMaker.add() call InterfaceMaker.add() new return call InterfaceMaker.create() call InterfaceMaker.create() call InterfaceMaker.create() call InterfaceMaker.create() call InterfaceMaker.create() protected < protected < < return GenericBeanDefinition protected protected < decl_stmt org.springframework.beans.factory.support.GenericBeanDefinition = new call GenericBeanDefinition.setFactoryBeanName() call GenericBeanDefinition.setFactoryBeanName() call GenericBeanDefinition.setFactoryBeanName() call GenericBeanDefinition.setFactoryBeanName() call GenericBeanDefinition.setFactoryBeanName() call GenericBeanDefinition.setFactoryMethodName() call GenericBeanDefinition.setFactoryMethodName() call GenericBeanDefinition.setFactoryMethodName() call GenericBeanDefinition.setFactoryMethodName() call GenericBeanDefinition.setFactoryMethodName() call GenericBeanDefinition.getConstructorArgumentValues() call GenericBeanDefinition.getConstructorArgumentValues() call GenericBeanDefinition.getConstructorArgumentValues() call GenericBeanDefinition.getConstructorArgumentValues() call GenericBeanDefinition.getConstructorArgumentValues() call GenericBeanDefinition.getConstructorArgumentValues() call GenericBeanDefinition.getConstructorArgumentValues() call GenericBeanDefinition.getConstructorArgumentValues() call GenericBeanDefinition.getConstructorArgumentValues() call GenericBeanDefinition.getConstructorArgumentValues() call GenericBeanDefinition.getConstructorArgumentValues() call GenericBeanDefinition.getConstructorArgumentValues() call GenericBeanDefinition.getConstructorArgumentValues() call GenericBeanDefinition.getConstructorArgumentValues() call GenericBeanDefinition.getConstructorArgumentValues() return DelegatingIntroductionInterceptor ClassLoader ProxyFactory protected protected < decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.setTargetSource() call ProxyFactory.setTargetSource() call ProxyFactory.setTargetSource() call ProxyFactory.setTargetSource() call ProxyFactory.setTargetSource() decl_stmt java.lang.ClassLoader = if == = call ProxyFactory.setInterfaces() call ProxyFactory.setInterfaces() call ProxyFactory.setInterfaces() call ProxyFactory.setInterfaces() call ProxyFactory.setInterfaces() if = call ProxyFactory.setProxyTargetClass() call ProxyFactory.setProxyTargetClass() call ProxyFactory.setProxyTargetClass() call ProxyFactory.setProxyTargetClass() call ProxyFactory.setProxyTargetClass() decl_stmt org.springframework.aop.support.DelegatingIntroductionInterceptor = new call DelegatingIntroductionInterceptor.suppressInterface() call DelegatingIntroductionInterceptor.suppressInterface() call DelegatingIntroductionInterceptor.suppressInterface() call DelegatingIntroductionInterceptor.suppressInterface() call DelegatingIntroductionInterceptor.suppressInterface() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() return call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) public public