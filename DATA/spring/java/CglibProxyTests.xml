org.springframework.aop.framework java.io.Serializable import org.aopalliance.intercept.MethodInterceptor import org.aopalliance.intercept.MethodInvocation import org.junit.Test import test.mixin.LockMixinAdvisor import org.springframework.aop.ClassFilter import org.springframework.aop.MethodMatcher import org.springframework.aop.Pointcut import org.springframework.aop.support.AopUtils import org.springframework.aop.support.DefaultPointcutAdvisor import org.springframework.context.ApplicationContext import org.springframework.context.ApplicationContextException import org.springframework.context.support.ClassPathXmlApplicationContext import org.springframework.tests.aop.advice.CountingBeforeAdvice import org.springframework.tests.aop.interceptor.NopInterceptor import org.springframework.tests.sample.beans.ITestBean import org.springframework.tests.sample.beans.TestBean import static static org.hamcrest.CoreMatchers.* import static static org.junit.Assert.* import class annotation org.springframework.aop.framework.CglibProxyTests super super extends super implements String Pointcut MethodInterceptor Object protected protected decl_stmt java.lang.Object = return protected protected return new protected protected return = public = public new AdvisedSupport AopProxy = public = public decl_stmt org.springframework.aop.framework.AdvisedSupport = new call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) new decl_stmt org.springframework.aop.framework.AopProxy = call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) ProtectedMethodTestBean ProtectedMethodTestBean AdvisedSupport AopProxy public public decl_stmt ProtectedMethodTestBean = new = decl_stmt org.springframework.aop.framework.AdvisedSupport = new call org.springframework.aop.framework.AdvisedSupport.setTargetSource(TargetSource) call org.springframework.aop.framework.AdvisedSupport.setTargetSource(TargetSource) call org.springframework.aop.framework.AdvisedSupport.setTargetSource(TargetSource) call org.springframework.aop.framework.AdvisedSupport.setTargetSource(TargetSource) call org.springframework.aop.framework.AdvisedSupport.setTargetSource(TargetSource) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) new decl_stmt org.springframework.aop.framework.AopProxy = new decl_stmt ProtectedMethodTestBean = call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call ProtectedMethodTestBean.getClass() call ProtectedMethodTestBean.getClass() call ProtectedMethodTestBean.getClass() call ProtectedMethodTestBean.getClass() call ProtectedMethodTestBean.getClass() call ProtectedMethodTestBean.getClass() call ProtectedMethodTestBean.getClass() call ProtectedMethodTestBean.getClass() call ProtectedMethodTestBean.getClass() call ProtectedMethodTestBean.getClass() call ProtectedMethodTestBean.getString() call ProtectedMethodTestBean.getString() call ProtectedMethodTestBean.getString() call ProtectedMethodTestBean.getString() call ProtectedMethodTestBean.getString() PackageMethodTestBean PackageMethodTestBean AdvisedSupport AopProxy public public decl_stmt PackageMethodTestBean = new = decl_stmt org.springframework.aop.framework.AdvisedSupport = new call org.springframework.aop.framework.AdvisedSupport.setTargetSource(TargetSource) call org.springframework.aop.framework.AdvisedSupport.setTargetSource(TargetSource) call org.springframework.aop.framework.AdvisedSupport.setTargetSource(TargetSource) call org.springframework.aop.framework.AdvisedSupport.setTargetSource(TargetSource) call org.springframework.aop.framework.AdvisedSupport.setTargetSource(TargetSource) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) new decl_stmt org.springframework.aop.framework.AopProxy = new decl_stmt PackageMethodTestBean = call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call PackageMethodTestBean.getClass() call PackageMethodTestBean.getClass() call PackageMethodTestBean.getClass() call PackageMethodTestBean.getClass() call PackageMethodTestBean.getClass() call PackageMethodTestBean.getClass() call PackageMethodTestBean.getClass() call PackageMethodTestBean.getClass() call PackageMethodTestBean.getClass() call PackageMethodTestBean.getClass() call PackageMethodTestBean.getString() call PackageMethodTestBean.getString() call PackageMethodTestBean.getString() call PackageMethodTestBean.getString() call PackageMethodTestBean.getString() PackageMethodTestBean AopProxy PackageMethodTestBean AdvisedSupport ClassLoader public public decl_stmt java.lang.ClassLoader = new decl_stmt PackageMethodTestBean = new = decl_stmt org.springframework.aop.framework.AdvisedSupport = new call org.springframework.aop.framework.AdvisedSupport.setTargetSource(TargetSource) call org.springframework.aop.framework.AdvisedSupport.setTargetSource(TargetSource) call org.springframework.aop.framework.AdvisedSupport.setTargetSource(TargetSource) call org.springframework.aop.framework.AdvisedSupport.setTargetSource(TargetSource) call org.springframework.aop.framework.AdvisedSupport.setTargetSource(TargetSource) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) new decl_stmt org.springframework.aop.framework.AopProxy = new decl_stmt PackageMethodTestBean = call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call PackageMethodTestBean.getClass() call PackageMethodTestBean.getClass() call PackageMethodTestBean.getClass() call PackageMethodTestBean.getClass() call PackageMethodTestBean.getClass() call PackageMethodTestBean.getClass() call PackageMethodTestBean.getClass() call PackageMethodTestBean.getClass() call PackageMethodTestBean.getClass() call PackageMethodTestBean.getClass() call PackageMethodTestBean.getString() call PackageMethodTestBean.getString() call PackageMethodTestBean.getString() call PackageMethodTestBean.getString() call PackageMethodTestBean.getString() TestBean AopProxy TestBean Object AdvisedSupport public public throws decl_stmt org.springframework.tests.sample.beans.TestBean = new call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) decl_stmt org.springframework.aop.framework.AdvisedSupport = new call org.springframework.aop.framework.AdvisedSupport.setTargetSource(TargetSource) call org.springframework.aop.framework.AdvisedSupport.setTargetSource(TargetSource) call org.springframework.aop.framework.AdvisedSupport.setTargetSource(TargetSource) call org.springframework.aop.framework.AdvisedSupport.setTargetSource(TargetSource) call org.springframework.aop.framework.AdvisedSupport.setTargetSource(TargetSource) decl_stmt org.springframework.aop.framework.AopProxy = new decl_stmt java.lang.Object = call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) instanceof instanceof decl_stmt org.springframework.tests.sample.beans.TestBean = call org.springframework.tests.sample.beans.TestBean.getAge() call org.springframework.tests.sample.beans.TestBean.getAge() call org.springframework.tests.sample.beans.TestBean.getAge() call org.springframework.tests.sample.beans.TestBean.getAge() call org.springframework.tests.sample.beans.TestBean.getAge() CglibTestBean CglibTestBean AdvisedSupport AopProxy public public decl_stmt CglibTestBean = new call CglibTestBean.setName() call CglibTestBean.setName() call CglibTestBean.setName() call CglibTestBean.setName() call CglibTestBean.setName() decl_stmt org.springframework.aop.framework.AdvisedSupport = new call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) new decl_stmt org.springframework.aop.framework.AopProxy = new decl_stmt CglibTestBean = call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call CglibTestBean.getName() call CglibTestBean.getName() call CglibTestBean.getName() call CglibTestBean.getName() call CglibTestBean.getName() AdvisedSupport CglibTestBean CglibTestBean CglibAopProxy public public throws decl_stmt CglibTestBean = new call CglibTestBean.setName() call CglibTestBean.setName() call CglibTestBean.setName() call CglibTestBean.setName() call CglibTestBean.setName() decl_stmt org.springframework.aop.framework.AdvisedSupport = new call AdvisedSupport.setFrozen() call AdvisedSupport.setFrozen() call AdvisedSupport.setFrozen() call AdvisedSupport.setFrozen() call AdvisedSupport.setFrozen() call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) decl_stmt org.springframework.aop.framework.CglibAopProxy = new decl_stmt CglibTestBean = call org.springframework.aop.framework.CglibAopProxy.getProxy() call org.springframework.aop.framework.CglibAopProxy.getProxy() call org.springframework.aop.framework.CglibAopProxy.getProxy() call org.springframework.aop.framework.CglibAopProxy.getProxy() call org.springframework.aop.framework.CglibAopProxy.getProxy() call CglibTestBean.getName() call CglibTestBean.getName() call CglibTestBean.getName() call CglibTestBean.getName() call CglibTestBean.getName() ITestBean TestBean TestBean ITestBean public public decl_stmt org.springframework.tests.sample.beans.TestBean = new call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) decl_stmt org.springframework.tests.sample.beans.TestBean = new call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) decl_stmt org.springframework.scheduling.annotation.ITestBean = decl_stmt org.springframework.scheduling.annotation.ITestBean = call ITestBean.getClass() call ITestBean.getClass() call ITestBean.getClass() call ITestBean.getClass() call ITestBean.getClass() call ITestBean.getClass() call ITestBean.getClass() call ITestBean.getClass() call ITestBean.getClass() call ITestBean.getClass() call org.springframework.tests.sample.beans.TestBean.getAge() call org.springframework.tests.sample.beans.TestBean.getAge() call org.springframework.tests.sample.beans.TestBean.getAge() call org.springframework.tests.sample.beans.TestBean.getAge() call org.springframework.tests.sample.beans.TestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.tests.sample.beans.TestBean.getAge() call org.springframework.tests.sample.beans.TestBean.getAge() call org.springframework.tests.sample.beans.TestBean.getAge() call org.springframework.tests.sample.beans.TestBean.getAge() call org.springframework.tests.sample.beans.TestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() ProxyFactory private private decl_stmt org.springframework.aop.framework.ProxyFactory = new new < public public return public public return public public return public public return