org.springframework.test.context.junit4.rules java.util.concurrent.atomic.AtomicInteger import org.junit.AfterClass import org.junit.BeforeClass import org.junit.ClassRule import org.junit.Rule import org.junit.Test import org.junit.runner.RunWith import org.junit.runners.Parameterized import org.junit.runners.Parameterized.Parameter import org.junit.runners.Parameterized.Parameters import org.springframework.beans.factory.annotation.Autowired import org.springframework.context.ApplicationContext import org.springframework.test.context.ContextConfiguration import org.springframework.tests.sample.beans.Employee import org.springframework.tests.sample.beans.Pet import static static org.junit.Assert.* import class annotation annotation org.springframework.test.context.junit4.rules.ParameterizedSpringRuleTests ApplicationContext String Pet SpringMethodRule SpringClassRule AtomicInteger String = public static = public static return new public static public static call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) Employee public final public final call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() decl_stmt org.springframework.tests.sample.beans.Employee = + + call Employee.getName() call Employee.getName() call Employee.getName() call Employee.getName() call Employee.getName() public static public static call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get()