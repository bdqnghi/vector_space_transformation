org.springframework.web.servlet.resource static static org.junit.Assert.* import java.io.IOException import java.text.SimpleDateFormat import java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.List import java.util.Locale import java.util.TimeZone import javax.servlet.http.HttpServletResponse import org.hamcrest.Matchers import org.junit.Before import org.junit.Test import org.springframework.core.io.ClassPathResource import org.springframework.core.io.Resource import org.springframework.core.io.UrlResource import org.springframework.http.HttpMethod import org.springframework.http.HttpStatus import org.springframework.http.MediaType import org.springframework.mock.web.test.MockHttpServletRequest import org.springframework.mock.web.test.MockHttpServletResponse import org.springframework.mock.web.test.MockServletContext import org.springframework.util.StringUtils import org.springframework.web.HttpRequestMethodNotSupportedException import org.springframework.web.accept.ContentNegotiationManager import org.springframework.web.accept.ContentNegotiationManagerFactoryBean import org.springframework.web.servlet.HandlerMapping import class org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests ResourceHttpRequestHandler MockHttpServletRequest MockHttpServletResponse SimpleDateFormat decl List public public throws = new call SimpleDateFormat.setTimeZone() call SimpleDateFormat.setTimeZone() call SimpleDateFormat.setTimeZone() call SimpleDateFormat.setTimeZone() call SimpleDateFormat.setTimeZone() decl_stmt java.util.List < = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new = new new = new = new public public throws public public throws public public throws public public throws VersionResourceResolver public public throws decl_stmt org.springframework.web.servlet.resource.VersionResourceResolver = new new public public throws >= - + * public public throws <= / / public public throws public public throws public public throws public public throws decl List ContentNegotiationManager ContentNegotiationManagerFactoryBean public public throws decl_stmt org.springframework.web.accept.ContentNegotiationManagerFactoryBean = new call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.addMediaType(String,MediaType) call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.addMediaType(String,MediaType) call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.addMediaType(String,MediaType) call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.addMediaType(String,MediaType) call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.addMediaType(String,MediaType) new call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.afterPropertiesSet() call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.afterPropertiesSet() call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.afterPropertiesSet() call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.afterPropertiesSet() call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.afterPropertiesSet() decl_stmt org.springframework.web.accept.ContentNegotiationManager = call ContentNegotiationManagerFactoryBean.getObject() call ContentNegotiationManagerFactoryBean.getObject() call ContentNegotiationManagerFactoryBean.getObject() call ContentNegotiationManagerFactoryBean.getObject() call ContentNegotiationManagerFactoryBean.getObject() decl_stmt java.util.List < = new = new decl List ContentNegotiationManager ContentNegotiationManagerFactoryBean public public throws decl_stmt org.springframework.web.accept.ContentNegotiationManagerFactoryBean = new call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.setFavorPathExtension(boolean) call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.setFavorPathExtension(boolean) call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.setFavorPathExtension(boolean) call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.setFavorPathExtension(boolean) call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.setFavorPathExtension(boolean) call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.setDefaultContentType(MediaType) call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.setDefaultContentType(MediaType) call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.setDefaultContentType(MediaType) call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.setDefaultContentType(MediaType) call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.setDefaultContentType(MediaType) new call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.afterPropertiesSet() call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.afterPropertiesSet() call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.afterPropertiesSet() call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.afterPropertiesSet() call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.afterPropertiesSet() decl_stmt org.springframework.web.accept.ContentNegotiationManager = call ContentNegotiationManagerFactoryBean.getObject() call ContentNegotiationManagerFactoryBean.getObject() call ContentNegotiationManagerFactoryBean.getObject() call ContentNegotiationManagerFactoryBean.getObject() call ContentNegotiationManagerFactoryBean.getObject() decl_stmt java.util.List < = new = new public public throws for : = new = new String Resource Resource private private throws decl_stmt org.springframework.core.io.Resource = new = new decl_stmt org.springframework.core.io.Resource = new decl_stmt java.lang.String = call Resource.getURL() call Resource.getURL() call Resource.getURL() call Resource.getURL() call Resource.getURL() + + + + + + + + private private throws = new if ! && ! + public public throws = new public public throws char + char + char + char + char + char + + char + decl Resource PathResourceResolver public public throws decl_stmt org.springframework.web.servlet.resource.PathResourceResolver = decl_stmt org.springframework.core.io.Resource = call org.springframework.web.servlet.resource.PathResourceResolver.getAllowedLocations() call org.springframework.web.servlet.resource.PathResourceResolver.getAllowedLocations() call org.springframework.web.servlet.resource.PathResourceResolver.getAllowedLocations() call org.springframework.web.servlet.resource.PathResourceResolver.getAllowedLocations() call org.springframework.web.servlet.resource.PathResourceResolver.getAllowedLocations() ResourceHttpRequestHandler PathResourceResolver ClassPathResource decl Resource ClassPathResource public public throws decl_stmt org.springframework.core.io.ClassPathResource = new decl_stmt org.springframework.core.io.ClassPathResource = new decl_stmt org.springframework.web.servlet.resource.PathResourceResolver = new call org.springframework.web.servlet.resource.PathResourceResolver.setAllowedLocations(Resource) call org.springframework.web.servlet.resource.PathResourceResolver.setAllowedLocations(Resource) call org.springframework.web.servlet.resource.PathResourceResolver.setAllowedLocations(Resource) call org.springframework.web.servlet.resource.PathResourceResolver.setAllowedLocations(Resource) call org.springframework.web.servlet.resource.PathResourceResolver.setAllowedLocations(Resource) decl_stmt org.springframework.web.servlet.resource.ResourceHttpRequestHandler = new call org.springframework.web.servlet.resource.ResourceHttpRequestHandler.setResourceResolvers(List) call org.springframework.web.servlet.resource.ResourceHttpRequestHandler.setResourceResolvers(List) call org.springframework.web.servlet.resource.ResourceHttpRequestHandler.setResourceResolvers(List) call org.springframework.web.servlet.resource.ResourceHttpRequestHandler.setResourceResolvers(List) call org.springframework.web.servlet.resource.ResourceHttpRequestHandler.setResourceResolvers(List) call org.springframework.web.servlet.resource.ResourceHttpRequestHandler.setLocations(List) call org.springframework.web.servlet.resource.ResourceHttpRequestHandler.setLocations(List) call org.springframework.web.servlet.resource.ResourceHttpRequestHandler.setLocations(List) call org.springframework.web.servlet.resource.ResourceHttpRequestHandler.setLocations(List) call org.springframework.web.servlet.resource.ResourceHttpRequestHandler.setLocations(List) call org.springframework.web.servlet.resource.ResourceHttpRequestHandler.afterPropertiesSet() call org.springframework.web.servlet.resource.ResourceHttpRequestHandler.afterPropertiesSet() call org.springframework.web.servlet.resource.ResourceHttpRequestHandler.afterPropertiesSet() call org.springframework.web.servlet.resource.ResourceHttpRequestHandler.afterPropertiesSet() call org.springframework.web.servlet.resource.ResourceHttpRequestHandler.afterPropertiesSet() decl_stmt org.springframework.core.io.Resource = call org.springframework.web.servlet.resource.PathResourceResolver.getAllowedLocations() call org.springframework.web.servlet.resource.PathResourceResolver.getAllowedLocations() call org.springframework.web.servlet.resource.PathResourceResolver.getAllowedLocations() call org.springframework.web.servlet.resource.PathResourceResolver.getAllowedLocations() call org.springframework.web.servlet.resource.PathResourceResolver.getAllowedLocations() public public throws public public throws / * - public public throws public public throws public public throws = public = public throws = public = public throws public public throws for : = new = new private private throws public public throws public public throws public public throws public public throws public public throws public public throws String decl String String public public throws decl_stmt java.lang.String = + decl_stmt java.lang.String = decl_stmt java.lang.String = public public throws private private throws return call java.text.SimpleDateFormat.parse(String,ParsePosition) call java.text.SimpleDateFormat.parse(String,ParsePosition) call java.text.SimpleDateFormat.parse(String,ParsePosition) call java.text.SimpleDateFormat.parse(String,ParsePosition) call java.text.SimpleDateFormat.parse(String,ParsePosition) private private throws return new long private private throws decl_stmt long = new return call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) public public if return else if return else return