org.springframework.web.socket.sockjs.transport java.io.IOException import java.util.ArrayList import java.util.Arrays import java.util.Collection import java.util.Collections import java.util.HashMap import java.util.List import java.util.Map import java.util.concurrent.ConcurrentHashMap import java.util.concurrent.ScheduledFuture import org.springframework.context.Lifecycle import org.springframework.http.HttpMethod import org.springframework.http.HttpStatus import org.springframework.http.server.ServerHttpRequest import org.springframework.http.server.ServerHttpResponse import org.springframework.scheduling.TaskScheduler import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.CollectionUtils import org.springframework.web.socket.WebSocketHandler import org.springframework.web.socket.server.HandshakeFailureException import org.springframework.web.socket.server.HandshakeHandler import org.springframework.web.socket.server.HandshakeInterceptor import org.springframework.web.socket.server.support.HandshakeInterceptorChain import org.springframework.web.socket.sockjs.SockJsException import org.springframework.web.socket.sockjs.frame.Jackson2SockJsMessageCodec import org.springframework.web.socket.sockjs.frame.SockJsMessageCodec import org.springframework.web.socket.sockjs.support.AbstractSockJsService import class org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService super super extends super implements decl ScheduledFuture decl Map decl Map decl List boolean SockJsMessageCodec boolean public < public < return public public = public public != + return public public < if != public < public < return public public if ! = for : if instanceof public public if = for : if instanceof public public return TransportHandler decl Map HandshakeInterceptorChain HandshakeFailureException protected protected throws decl_stmt org.springframework.web.socket.sockjs.transport.TransportHandler = if ! instanceof return decl_stmt org.springframework.web.socket.server.support.HandshakeInterceptorChain = new decl_stmt HandshakeFailureException = try decl_stmt java.util.Map < = new < if ! call org.springframework.web.socket.server.support.HandshakeInterceptorChain.applyBeforeHandshake(ServerHttpRequest,ServerHttpResponse,Map) call org.springframework.web.socket.server.support.HandshakeInterceptorChain.applyBeforeHandshake(ServerHttpRequest,ServerHttpResponse,Map) call org.springframework.web.socket.server.support.HandshakeInterceptorChain.applyBeforeHandshake(ServerHttpRequest,ServerHttpResponse,Map) call org.springframework.web.socket.server.support.HandshakeInterceptorChain.applyBeforeHandshake(ServerHttpRequest,ServerHttpResponse,Map) call org.springframework.web.socket.server.support.HandshakeInterceptorChain.applyBeforeHandshake(ServerHttpRequest,ServerHttpResponse,Map) return call HandshakeInterceptorChain.applyAfterHandshake() call HandshakeInterceptorChain.applyAfterHandshake() call HandshakeInterceptorChain.applyAfterHandshake() call HandshakeInterceptorChain.applyAfterHandshake() call HandshakeInterceptorChain.applyAfterHandshake() catch = catch = new + finally if != call HandshakeInterceptorChain.applyAfterHandshake() call HandshakeInterceptorChain.applyAfterHandshake() call HandshakeInterceptorChain.applyAfterHandshake() call HandshakeInterceptorChain.applyAfterHandshake() call HandshakeInterceptorChain.applyAfterHandshake() throw TransportType HandshakeInterceptorChain HttpMethod SockJsException SockJsSessionFactory TransportHandler SockJsSession decl Map protected protected throws decl_stmt TransportType = if == if + return decl_stmt org.springframework.web.socket.sockjs.transport.TransportHandler = if == if + return decl_stmt org.springframework.web.socket.sockjs.SockJsException = decl_stmt org.springframework.web.socket.server.support.HandshakeInterceptorChain = new try decl_stmt HttpMethod = call TransportType.getHttpMethod() call TransportType.getHttpMethod() call TransportType.getHttpMethod() call TransportType.getHttpMethod() call TransportType.getHttpMethod() if != if == && call TransportType.supportsCors() call TransportType.supportsCors() call TransportType.supportsCors() call TransportType.supportsCors() call TransportType.supportsCors() if else if call TransportType.supportsCors() call TransportType.supportsCors() call TransportType.supportsCors() call TransportType.supportsCors() call TransportType.supportsCors() else return decl_stmt org.springframework.web.socket.sockjs.transport.SockJsSession = if == if instanceof decl_stmt java.util.Map < = new < if ! call org.springframework.web.socket.server.support.HandshakeInterceptorChain.applyBeforeHandshake(ServerHttpRequest,ServerHttpResponse,Map) call org.springframework.web.socket.server.support.HandshakeInterceptorChain.applyBeforeHandshake(ServerHttpRequest,ServerHttpResponse,Map) call org.springframework.web.socket.server.support.HandshakeInterceptorChain.applyBeforeHandshake(ServerHttpRequest,ServerHttpResponse,Map) call org.springframework.web.socket.server.support.HandshakeInterceptorChain.applyBeforeHandshake(ServerHttpRequest,ServerHttpResponse,Map) call org.springframework.web.socket.server.support.HandshakeInterceptorChain.applyBeforeHandshake(ServerHttpRequest,ServerHttpResponse,Map) return decl_stmt org.springframework.web.socket.sockjs.transport.SockJsSessionFactory = = else if + + + return else if call SockJsSession.getPrincipal() call SockJsSession.getPrincipal() call SockJsSession.getPrincipal() call SockJsSession.getPrincipal() call SockJsSession.getPrincipal() != if ! call SockJsSession.getPrincipal() call SockJsSession.getPrincipal() call SockJsSession.getPrincipal() call SockJsSession.getPrincipal() call SockJsSession.getPrincipal() return if call TransportType.sendsNoCacheInstruction() call TransportType.sendsNoCacheInstruction() call TransportType.sendsNoCacheInstruction() call TransportType.sendsNoCacheInstruction() call TransportType.sendsNoCacheInstruction() if call TransportType.supportsCors() call TransportType.supportsCors() call TransportType.supportsCors() call TransportType.supportsCors() call TransportType.supportsCors() if ! return call org.springframework.web.socket.sockjs.transport.TransportHandler.handleRequest(ServerHttpRequest,ServerHttpResponse,WebSocketHandler,SockJsSession) call org.springframework.web.socket.sockjs.transport.TransportHandler.handleRequest(ServerHttpRequest,ServerHttpResponse,WebSocketHandler,SockJsSession) call org.springframework.web.socket.sockjs.transport.TransportHandler.handleRequest(ServerHttpRequest,ServerHttpResponse,WebSocketHandler,SockJsSession) call org.springframework.web.socket.sockjs.transport.TransportHandler.handleRequest(ServerHttpRequest,ServerHttpResponse,WebSocketHandler,SockJsSession) call org.springframework.web.socket.sockjs.transport.TransportHandler.handleRequest(ServerHttpRequest,ServerHttpResponse,WebSocketHandler,SockJsSession) call HandshakeInterceptorChain.applyAfterHandshake() call HandshakeInterceptorChain.applyAfterHandshake() call HandshakeInterceptorChain.applyAfterHandshake() call HandshakeInterceptorChain.applyAfterHandshake() call HandshakeInterceptorChain.applyAfterHandshake() catch = catch = new + finally if != call HandshakeInterceptorChain.applyAfterHandshake() call HandshakeInterceptorChain.applyAfterHandshake() call HandshakeInterceptorChain.applyAfterHandshake() call HandshakeInterceptorChain.applyAfterHandshake() call HandshakeInterceptorChain.applyAfterHandshake() throw TransportType protected protected if ! return if ! decl_stmt TransportType = if == || ! call TransportType.supportsOrigin() call TransportType.supportsOrigin() call TransportType.supportsOrigin() call TransportType.supportsOrigin() call TransportType.supportsOrigin() if + + return return SockJsSession private private < decl_stmt org.springframework.web.socket.sockjs.transport.SockJsSession = if != return if == = return decl List private private synchronized if != return = new public public decl_stmt java.util.List < = new < for : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() try if > call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() catch + if && ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + + decl List public public decl_stmt java.util.List < = new < for : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() try if > call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() catch + if && ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + +