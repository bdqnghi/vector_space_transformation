org.springframework.oxm.jibx java.io.ByteArrayInputStream import java.io.ByteArrayOutputStream import java.io.IOException import java.io.InputStream import java.io.OutputStream import java.io.Reader import java.io.Writer import javax.xml.stream.XMLEventReader import javax.xml.stream.XMLEventWriter import javax.xml.stream.XMLStreamException import javax.xml.stream.XMLStreamReader import javax.xml.stream.XMLStreamWriter import javax.xml.transform.OutputKeys import javax.xml.transform.Result import javax.xml.transform.Source import javax.xml.transform.Transformer import javax.xml.transform.TransformerException import javax.xml.transform.TransformerFactory import javax.xml.transform.dom.DOMResult import javax.xml.transform.dom.DOMSource import javax.xml.transform.sax.SAXResult import javax.xml.transform.sax.SAXSource import javax.xml.transform.stream.StreamResult import javax.xml.transform.stream.StreamSource import org.jibx.runtime.BindingDirectory import org.jibx.runtime.IBindingFactory import org.jibx.runtime.IMarshallingContext import org.jibx.runtime.IUnmarshallingContext import org.jibx.runtime.IXMLReader import org.jibx.runtime.IXMLWriter import org.jibx.runtime.JiBXException import org.jibx.runtime.ValidationException import org.jibx.runtime.impl.MarshallingContext import org.jibx.runtime.impl.StAXReaderWrapper import org.jibx.runtime.impl.StAXWriter import org.jibx.runtime.impl.UnmarshallingContext import org.w3c.dom.Node import org.xml.sax.ContentHandler import org.xml.sax.InputSource import org.xml.sax.XMLReader import org.xml.sax.ext.LexicalHandler import org.springframework.beans.factory.InitializingBean import org.springframework.oxm.MarshallingFailureException import org.springframework.oxm.UnmarshallingFailureException import org.springframework.oxm.ValidationFailureException import org.springframework.oxm.XmlMappingException import org.springframework.oxm.support.AbstractMarshaller import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.StringUtils import org.springframework.util.xml.StaxUtils import class org.springframework.oxm.jibx.JibxMarshaller super super extends super implements String String int String String String Boolean TransformerFactory String String decl Class IBindingFactory String public public < = public public = public public = public public = public public = protected protected return public public = public public = public public = public public = public public = public public throws if != if if + + + + = else if + + = else if != if ! = if + + + + = else throw new String decl String public public < if != return == decl_stmt java.lang.String = decl_stmt java.lang.String = for : if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return return IMarshallingContext protected protected throws try decl_stmt IMarshallingContext = call IMarshallingContext.startDocument() call IMarshallingContext.startDocument() call IMarshallingContext.startDocument() call IMarshallingContext.startDocument() call IMarshallingContext.startDocument() catch throw IMarshallingContext protected protected throws try decl_stmt IMarshallingContext = call IMarshallingContext.startDocument() call IMarshallingContext.startDocument() call IMarshallingContext.startDocument() call IMarshallingContext.startDocument() call IMarshallingContext.startDocument() catch throw IXMLWriter private private throws if decl_stmt IXMLWriter = call IXMLWriter.writeDocType() call IXMLWriter.writeDocType() call IXMLWriter.writeDocType() call IXMLWriter.writeDocType() call IXMLWriter.writeDocType() Result protected protected throws try decl_stmt javax.naming.spi.Result = new catch throw new XMLStreamWriter protected protected decl_stmt XMLStreamWriter = IXMLWriter MarshallingContext protected protected throws try decl_stmt MarshallingContext = decl_stmt IXMLWriter = new call MarshallingContext.getNamespaces() call MarshallingContext.getNamespaces() call MarshallingContext.getNamespaces() call MarshallingContext.getNamespaces() call MarshallingContext.getNamespaces() call MarshallingContext.setXmlWriter() call MarshallingContext.setXmlWriter() call MarshallingContext.setXmlWriter() call MarshallingContext.setXmlWriter() call MarshallingContext.setXmlWriter() call MarshallingContext.marshalDocument() call MarshallingContext.marshalDocument() call MarshallingContext.marshalDocument() call MarshallingContext.marshalDocument() call MarshallingContext.marshalDocument() catch throw SAXResult protected protected throws try decl_stmt SAXResult = new call SAXResult.setLexicalHandler() call SAXResult.setLexicalHandler() call SAXResult.setLexicalHandler() call SAXResult.setLexicalHandler() call SAXResult.setLexicalHandler() catch throw new ByteArrayInputStream ByteArrayOutputStream Transformer private private throws try decl_stmt java.io.ByteArrayOutputStream = new decl_stmt ByteArrayInputStream = new call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() decl_stmt Transformer = call Transformer.transform() call Transformer.transform() call Transformer.transform() call Transformer.transform() call Transformer.transform() new catch throw new + + XMLStreamReader protected protected try decl_stmt XMLStreamReader = return catch return new UnmarshallingContext IXMLReader protected protected try decl_stmt UnmarshallingContext = decl_stmt IXMLReader = new call UnmarshallingContext.setDocument() call UnmarshallingContext.setDocument() call UnmarshallingContext.setDocument() call UnmarshallingContext.setDocument() call UnmarshallingContext.setDocument() return call UnmarshallingContext.unmarshalElement() call UnmarshallingContext.unmarshalElement() call UnmarshallingContext.unmarshalElement() call UnmarshallingContext.unmarshalElement() call UnmarshallingContext.unmarshalElement() catch throw IUnmarshallingContext protected protected throws try decl_stmt IUnmarshallingContext = return call IUnmarshallingContext.unmarshalDocument() call IUnmarshallingContext.unmarshalDocument() call IUnmarshallingContext.unmarshalDocument() call IUnmarshallingContext.unmarshalDocument() call IUnmarshallingContext.unmarshalDocument() catch throw IUnmarshallingContext protected protected throws try decl_stmt IUnmarshallingContext = return call IUnmarshallingContext.unmarshalDocument() call IUnmarshallingContext.unmarshalDocument() call IUnmarshallingContext.unmarshalDocument() call IUnmarshallingContext.unmarshalDocument() call IUnmarshallingContext.unmarshalDocument() catch throw protected protected throws try return new catch throw new protected protected throws return new Transformer ByteArrayOutputStream ByteArrayInputStream private private throws try decl_stmt Transformer = if != call Transformer.setOutputProperty() call Transformer.setOutputProperty() call Transformer.setOutputProperty() call Transformer.setOutputProperty() call Transformer.setOutputProperty() decl_stmt java.io.ByteArrayOutputStream = new call Transformer.transform() call Transformer.transform() call Transformer.transform() call Transformer.transform() call Transformer.transform() new decl_stmt ByteArrayInputStream = new call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() return catch throw new + + IMarshallingContext protected protected throws decl_stmt IMarshallingContext = call IMarshallingContext.setIndent() call IMarshallingContext.setIndent() call IMarshallingContext.setIndent() call IMarshallingContext.setIndent() call IMarshallingContext.setIndent() return protected protected throws return public public if instanceof return new else if return new else return new