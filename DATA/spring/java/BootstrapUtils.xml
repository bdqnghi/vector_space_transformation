org.springframework.test.context java.lang.reflect.Constructor import java.util.List import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.BeanUtils import org.springframework.core.annotation.AnnotatedElementUtils import org.springframework.core.annotation.AnnotationUtils import org.springframework.util.ClassUtils import org.springframework.util.MultiValueMap import class org.springframework.test.context.BootstrapUtils String String String String Log String decl Constructor CacheAwareContextLoaderDelegate decl Class static static < decl_stmt org.springframework.test.context.CacheAwareContextLoaderDelegate = decl_stmt java.lang.Class < extends extends = try = < extends extends decl_stmt java.lang.reflect.Constructor < extends extends = call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() return catch throw new + + decl Class private static private static decl_stmt java.lang.Class < extends extends = try = < extends extends if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() return catch throw new + + TestContextBootstrapper decl Class decl Class static static decl_stmt java.lang.Class < = decl_stmt java.lang.Class < = try = if == = if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() decl_stmt org.springframework.test.context.TestContextBootstrapper = call org.springframework.test.context.TestContextBootstrapper.setBootstrapContext(BootstrapContext) call org.springframework.test.context.TestContextBootstrapper.setBootstrapContext(BootstrapContext) call org.springframework.test.context.TestContextBootstrapper.setBootstrapContext(BootstrapContext) call org.springframework.test.context.TestContextBootstrapper.setBootstrapContext(BootstrapContext) call org.springframework.test.context.TestContextBootstrapper.setBootstrapContext(BootstrapContext) return catch if instanceof throw throw new + + decl MultiValueMap decl List private static < private static < < decl_stmt org.springframework.util.MultiValueMap < = decl_stmt java.util.List < = != call decl MultiValueMap.get() call decl MultiValueMap.get() call decl MultiValueMap.get() call decl MultiValueMap.get() call decl MultiValueMap.get() : if == return if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() != throw new + return < call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() ClassLoader private static < private static < < throws decl_stmt java.lang.ClassLoader = if return return