org.springframework.jms.config java.lang.reflect.Method import java.util.Arrays import org.springframework.aop.framework.AopProxyUtils import org.springframework.aop.support.AopUtils import org.springframework.beans.factory.BeanFactory import org.springframework.beans.factory.BeanFactoryAware import org.springframework.beans.factory.config.ConfigurableBeanFactory import org.springframework.beans.factory.config.EmbeddedValueResolver import org.springframework.core.annotation.AnnotatedElementUtils import org.springframework.jms.listener.MessageListenerContainer import org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter import org.springframework.jms.support.converter.MessageConverter import org.springframework.jms.support.destination.DestinationResolver import org.springframework.messaging.handler.annotation.SendTo import org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory import org.springframework.messaging.handler.invocation.InvocableHandlerMethod import org.springframework.util.Assert import org.springframework.util.StringUtils import org.springframework.util.StringValueResolver import class org.springframework.jms.config.MethodJmsListenerEndpoint super super extends super implements Method BeanFactory MessageHandlerMethodFactory Object StringValueResolver Method public public = public public return public public = public public return public public = decl Class public public if != return else if decl_stmt java.lang.Class < = return else return public public = public public = public public = if == && instanceof = new InvocableHandlerMethod MessagingMessageListenerAdapter String DestinationResolver MessageConverter protected protected != decl_stmt org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter = decl_stmt org.springframework.messaging.handler.invocation.InvocableHandlerMethod = call org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter.setHandlerMethod(InvocableHandlerMethod) call org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter.setHandlerMethod(InvocableHandlerMethod) call org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter.setHandlerMethod(InvocableHandlerMethod) call org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter.setHandlerMethod(InvocableHandlerMethod) call org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter.setHandlerMethod(InvocableHandlerMethod) decl_stmt java.lang.String = if if call MessagingMessageListenerAdapter.setDefaultResponseTopicName() call MessagingMessageListenerAdapter.setDefaultResponseTopicName() call MessagingMessageListenerAdapter.setDefaultResponseTopicName() call MessagingMessageListenerAdapter.setDefaultResponseTopicName() call MessagingMessageListenerAdapter.setDefaultResponseTopicName() else call MessagingMessageListenerAdapter.setDefaultResponseQueueName() call MessagingMessageListenerAdapter.setDefaultResponseQueueName() call MessagingMessageListenerAdapter.setDefaultResponseQueueName() call MessagingMessageListenerAdapter.setDefaultResponseQueueName() call MessagingMessageListenerAdapter.setDefaultResponseQueueName() decl_stmt org.springframework.jms.support.converter.MessageConverter = if != call MessagingMessageListenerAdapter.setMessageConverter() call MessagingMessageListenerAdapter.setMessageConverter() call MessagingMessageListenerAdapter.setMessageConverter() call MessagingMessageListenerAdapter.setMessageConverter() call MessagingMessageListenerAdapter.setMessageConverter() decl_stmt org.springframework.jms.support.destination.DestinationResolver = if != call MessagingMessageListenerAdapter.setDestinationResolver() call MessagingMessageListenerAdapter.setDestinationResolver() call MessagingMessageListenerAdapter.setDestinationResolver() call MessagingMessageListenerAdapter.setDestinationResolver() call MessagingMessageListenerAdapter.setDestinationResolver() return protected protected return new SendTo Method decl Object protected protected decl_stmt com.sun.jdi.Method = decl_stmt SendTo = if != decl_stmt java.lang.Object = call SendTo.value() call SendTo.value() call SendTo.value() call SendTo.value() call SendTo.value() if != throw new + + + + + + return return SendTo private private decl_stmt SendTo = if == = return private private return != : protected protected return