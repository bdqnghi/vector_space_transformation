org.springframework.aop.framework java.util.ArrayList import java.util.List import javax.accessibility.Accessible import javax.swing.JFrame import javax.swing.RootPaneContainer import org.aopalliance.intercept.MethodInterceptor import org.aopalliance.intercept.MethodInvocation import org.junit.Ignore import org.junit.Test import org.springframework.aop.Advisor import org.springframework.aop.interceptor.DebugInterceptor import org.springframework.aop.support.AopUtils import org.springframework.aop.support.DefaultIntroductionAdvisor import org.springframework.aop.support.DefaultPointcutAdvisor import org.springframework.aop.support.DelegatingIntroductionInterceptor import org.springframework.core.annotation.AnnotationAwareOrderComparator import org.springframework.core.annotation.Order import org.springframework.tests.TimeStamped import org.springframework.tests.aop.advice.CountingBeforeAdvice import org.springframework.tests.aop.interceptor.NopInterceptor import org.springframework.tests.sample.beans.IOther import org.springframework.tests.sample.beans.ITestBean import org.springframework.tests.sample.beans.TestBean import static static org.hamcrest.CoreMatchers.* import static static org.junit.Assert.* import class org.springframework.aop.framework.ProxyFactoryTests NopInterceptor Advised ProxyFactory TestBean Advisor public public decl_stmt org.springframework.tests.sample.beans.TestBean = new decl_stmt org.springframework.aop.framework.ProxyFactory = new decl_stmt org.springframework.tests.aop.interceptor.NopInterceptor = new decl_stmt org.springframework.aop.Advisor = new new decl_stmt org.springframework.aop.framework.Advised = call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.Advised.addAdvice(Advice) call org.springframework.aop.framework.Advised.addAdvice(Advice) call org.springframework.aop.framework.Advised.addAdvice(Advice) call org.springframework.aop.framework.Advised.addAdvice(Advice) call org.springframework.aop.framework.Advised.addAdvice(Advice) call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() - call ProxyFactory.indexOf() call ProxyFactory.indexOf() call ProxyFactory.indexOf() call ProxyFactory.indexOf() call ProxyFactory.indexOf() new call ProxyFactory.indexOf() call ProxyFactory.indexOf() call ProxyFactory.indexOf() call ProxyFactory.indexOf() call ProxyFactory.indexOf() call ProxyFactory.indexOf() call ProxyFactory.indexOf() call ProxyFactory.indexOf() call ProxyFactory.indexOf() call ProxyFactory.indexOf() - call org.springframework.aop.framework.Advised.indexOf(Advice) call org.springframework.aop.framework.Advised.indexOf(Advice) call org.springframework.aop.framework.Advised.indexOf(Advice) call org.springframework.aop.framework.Advised.indexOf(Advice) call org.springframework.aop.framework.Advised.indexOf(Advice) new CountingBeforeAdvice TestBean ITestBean ProxyFactory Advisor NopInterceptor public public decl_stmt org.springframework.tests.sample.beans.TestBean = new decl_stmt org.springframework.aop.framework.ProxyFactory = new decl_stmt org.springframework.tests.aop.interceptor.NopInterceptor = new decl_stmt org.springframework.tests.aop.advice.CountingBeforeAdvice = new decl_stmt org.springframework.aop.Advisor = new call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() decl_stmt org.springframework.scheduling.annotation.ITestBean = call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call ProxyFactory.removeAdvisor() call ProxyFactory.removeAdvisor() call ProxyFactory.removeAdvisor() call ProxyFactory.removeAdvisor() call ProxyFactory.removeAdvisor() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call ProxyFactory.removeAdvisor() call ProxyFactory.removeAdvisor() call ProxyFactory.removeAdvisor() call ProxyFactory.removeAdvisor() call ProxyFactory.removeAdvisor() new CountingBeforeAdvice TestBean NopInterceptor ITestBean ProxyFactory Advisor NopInterceptor public public decl_stmt org.springframework.tests.sample.beans.TestBean = new decl_stmt org.springframework.aop.framework.ProxyFactory = new decl_stmt org.springframework.tests.aop.interceptor.NopInterceptor = new decl_stmt org.springframework.tests.aop.advice.CountingBeforeAdvice = new decl_stmt org.springframework.aop.Advisor = new call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() decl_stmt org.springframework.tests.aop.interceptor.NopInterceptor = new call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() decl_stmt org.springframework.scheduling.annotation.ITestBean = call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call ProxyFactory.removeAdvisor() call ProxyFactory.removeAdvisor() call ProxyFactory.removeAdvisor() call ProxyFactory.removeAdvisor() call ProxyFactory.removeAdvisor() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call ProxyFactory.removeAdvisor() call ProxyFactory.removeAdvisor() call ProxyFactory.removeAdvisor() call ProxyFactory.removeAdvisor() call ProxyFactory.removeAdvisor() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() try call ProxyFactory.removeAdvisor() call ProxyFactory.removeAdvisor() call ProxyFactory.removeAdvisor() call ProxyFactory.removeAdvisor() call ProxyFactory.removeAdvisor() - catch try call ProxyFactory.removeAdvisor() call ProxyFactory.removeAdvisor() call ProxyFactory.removeAdvisor() call ProxyFactory.removeAdvisor() call ProxyFactory.removeAdvisor() catch call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() TestBean Advisor Advisor ITestBean ProxyFactory CountingBeforeAdvice CountingBeforeAdvice Advised NopInterceptor public public decl_stmt org.springframework.tests.sample.beans.TestBean = new decl_stmt org.springframework.aop.framework.ProxyFactory = new decl_stmt org.springframework.tests.aop.interceptor.NopInterceptor = new decl_stmt org.springframework.tests.aop.advice.CountingBeforeAdvice = new decl_stmt org.springframework.tests.aop.advice.CountingBeforeAdvice = new decl_stmt org.springframework.aop.Advisor = new decl_stmt org.springframework.aop.Advisor = new call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() decl_stmt org.springframework.scheduling.annotation.ITestBean = call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) decl_stmt org.springframework.aop.framework.Advised = call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call org.springframework.aop.framework.Advised.replaceAdvisor(Advisor,Advisor) call org.springframework.aop.framework.Advised.replaceAdvisor(Advisor,Advisor) call org.springframework.aop.framework.Advised.replaceAdvisor(Advisor,Advisor) call org.springframework.aop.framework.Advised.replaceAdvisor(Advisor,Advisor) call org.springframework.aop.framework.Advised.replaceAdvisor(Advisor,Advisor) new new call org.springframework.aop.framework.Advised.replaceAdvisor(Advisor,Advisor) call org.springframework.aop.framework.Advised.replaceAdvisor(Advisor,Advisor) call org.springframework.aop.framework.Advised.replaceAdvisor(Advisor,Advisor) call org.springframework.aop.framework.Advised.replaceAdvisor(Advisor,Advisor) call org.springframework.aop.framework.Advised.replaceAdvisor(Advisor,Advisor) call ProxyFactory.getAdvisors() call ProxyFactory.getAdvisors() call ProxyFactory.getAdvisors() call ProxyFactory.getAdvisors() call ProxyFactory.getAdvisors() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call CountingBeforeAdvice.getCalls() call ProxyFactory.replaceAdvisor() call ProxyFactory.replaceAdvisor() call ProxyFactory.replaceAdvisor() call ProxyFactory.replaceAdvisor() call ProxyFactory.replaceAdvisor() new TimeStamped ProxyFactory public public decl_stmt org.springframework.tests.TimeStamped = new public public throw new decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) public public throw new TimeStamped ProxyFactory TestBeanSubclass long TimestampIntroductionInterceptor ITestBean public public throws class class extends extends implements implements implements < public public throw new decl_stmt TestBeanSubclass = new decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.getProxiedInterfaces() call ProxyFactory.getProxiedInterfaces() call ProxyFactory.getProxiedInterfaces() call ProxyFactory.getProxiedInterfaces() call ProxyFactory.getProxiedInterfaces() decl_stmt org.springframework.scheduling.annotation.ITestBean = call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call TestBeanSubclass.setAge() call TestBeanSubclass.setAge() call TestBeanSubclass.setAge() call TestBeanSubclass.setAge() call TestBeanSubclass.setAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() == call TestBeanSubclass.getAge() call TestBeanSubclass.getAge() call TestBeanSubclass.getAge() call TestBeanSubclass.getAge() call TestBeanSubclass.getAge() decl_stmt long = decl_stmt org.springframework.tests.aop.interceptor.TimestampIntroductionInterceptor = new class class extends extends implements implements implements < public public throw new decl_stmt TestBeanSubclass = new decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.getProxiedInterfaces() call ProxyFactory.getProxiedInterfaces() call ProxyFactory.getProxiedInterfaces() call ProxyFactory.getProxiedInterfaces() call ProxyFactory.getProxiedInterfaces() decl_stmt org.springframework.scheduling.annotation.ITestBean = call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call TestBeanSubclass.setAge() call TestBeanSubclass.setAge() call TestBeanSubclass.setAge() call TestBeanSubclass.setAge() call TestBeanSubclass.setAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() == call TestBeanSubclass.getAge() call TestBeanSubclass.getAge() call TestBeanSubclass.getAge() call TestBeanSubclass.getAge() call TestBeanSubclass.getAge() decl_stmt long = decl_stmt org.springframework.tests.aop.interceptor.TimestampIntroductionInterceptor = new call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() new class class extends extends implements implements implements < public public throw new decl_stmt TestBeanSubclass = new decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.getProxiedInterfaces() call ProxyFactory.getProxiedInterfaces() call ProxyFactory.getProxiedInterfaces() call ProxyFactory.getProxiedInterfaces() call ProxyFactory.getProxiedInterfaces() decl_stmt org.springframework.scheduling.annotation.ITestBean = call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call TestBeanSubclass.setAge() call TestBeanSubclass.setAge() call TestBeanSubclass.setAge() call TestBeanSubclass.setAge() call TestBeanSubclass.setAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() == call TestBeanSubclass.getAge() call TestBeanSubclass.getAge() call TestBeanSubclass.getAge() call TestBeanSubclass.getAge() call TestBeanSubclass.getAge() decl_stmt long = decl_stmt org.springframework.tests.aop.interceptor.TimestampIntroductionInterceptor = new class class extends extends implements implements implements < public public throw new decl_stmt TestBeanSubclass = new decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.getProxiedInterfaces() call ProxyFactory.getProxiedInterfaces() call ProxyFactory.getProxiedInterfaces() call ProxyFactory.getProxiedInterfaces() call ProxyFactory.getProxiedInterfaces() decl_stmt org.springframework.scheduling.annotation.ITestBean = call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call TestBeanSubclass.setAge() call TestBeanSubclass.setAge() call TestBeanSubclass.setAge() call TestBeanSubclass.setAge() call TestBeanSubclass.setAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() == call TestBeanSubclass.getAge() call TestBeanSubclass.getAge() call TestBeanSubclass.getAge() call TestBeanSubclass.getAge() call TestBeanSubclass.getAge() decl_stmt long = decl_stmt org.springframework.tests.aop.interceptor.TimestampIntroductionInterceptor = new call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() new + decl_stmt org.springframework.tests.TimeStamped = call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) == public public throw new NopInterceptor ProxyFactory NopInterceptor public public class class implements implements public public throws throw new decl_stmt org.springframework.tests.aop.interceptor.NopInterceptor = new decl_stmt org.springframework.tests.aop.interceptor.NopInterceptor = new decl_stmt org.springframework.aop.framework.ProxyFactory = new new call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call ProxyFactory.adviceIncluded() call ProxyFactory.adviceIncluded() call ProxyFactory.adviceIncluded() call ProxyFactory.adviceIncluded() call ProxyFactory.adviceIncluded() ! call ProxyFactory.adviceIncluded() call ProxyFactory.adviceIncluded() call ProxyFactory.adviceIncluded() call ProxyFactory.adviceIncluded() call ProxyFactory.adviceIncluded() call ProxyFactory.countAdvicesOfType() call ProxyFactory.countAdvicesOfType() call ProxyFactory.countAdvicesOfType() call ProxyFactory.countAdvicesOfType() call ProxyFactory.countAdvicesOfType() == call ProxyFactory.countAdvicesOfType() call ProxyFactory.countAdvicesOfType() call ProxyFactory.countAdvicesOfType() call ProxyFactory.countAdvicesOfType() call ProxyFactory.countAdvicesOfType() == call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.adviceIncluded() call ProxyFactory.adviceIncluded() call ProxyFactory.adviceIncluded() call ProxyFactory.adviceIncluded() call ProxyFactory.adviceIncluded() call ProxyFactory.countAdvicesOfType() call ProxyFactory.countAdvicesOfType() call ProxyFactory.countAdvicesOfType() call ProxyFactory.countAdvicesOfType() call ProxyFactory.countAdvicesOfType() == public public throws throw new long ITestBean TimeStamped int TimestampIntroductionInterceptor DebugInterceptor ProxyFactory public public decl_stmt org.springframework.aop.framework.ProxyFactory = new new call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) instanceof decl_stmt long = decl_stmt org.springframework.tests.aop.interceptor.TimestampIntroductionInterceptor = new call TimestampIntroductionInterceptor.setTime() call TimestampIntroductionInterceptor.setTime() call TimestampIntroductionInterceptor.setTime() call TimestampIntroductionInterceptor.setTime() call TimestampIntroductionInterceptor.setTime() decl_stmt int = call ProxyFactory.getAdvisors() call ProxyFactory.getAdvisors() call ProxyFactory.getAdvisors() call ProxyFactory.getAdvisors() call ProxyFactory.getAdvisors() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() new call ProxyFactory.getAdvisors() call ProxyFactory.getAdvisors() call ProxyFactory.getAdvisors() call ProxyFactory.getAdvisors() call ProxyFactory.getAdvisors() == + decl_stmt org.springframework.tests.TimeStamped = call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call TimeStamped.getTimeStamp() call TimeStamped.getTimeStamp() call TimeStamped.getTimeStamp() call TimeStamped.getTimeStamp() call TimeStamped.getTimeStamp() == call ProxyFactory.removeAdvice() call ProxyFactory.removeAdvice() call ProxyFactory.removeAdvice() call ProxyFactory.removeAdvice() call ProxyFactory.removeAdvice() call ProxyFactory.getAdvisors() call ProxyFactory.getAdvisors() call ProxyFactory.getAdvisors() call ProxyFactory.getAdvisors() call ProxyFactory.getAdvisors() == try call TimeStamped.getTimeStamp() call TimeStamped.getTimeStamp() call TimeStamped.getTimeStamp() call TimeStamped.getTimeStamp() call TimeStamped.getTimeStamp() catch call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) instanceof call ProxyFactory.removeAdvice() call ProxyFactory.removeAdvice() call ProxyFactory.removeAdvice() call ProxyFactory.removeAdvice() call ProxyFactory.removeAdvice() new call ProxyFactory.getAdvisors() call ProxyFactory.getAdvisors() call ProxyFactory.getAdvisors() call ProxyFactory.getAdvisors() call ProxyFactory.getAdvisors() == decl_stmt org.springframework.scheduling.annotation.ITestBean = decl_stmt org.springframework.aop.interceptor.DebugInterceptor = new call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call org.springframework.scheduling.annotation.ITestBean.getSpouse() call org.springframework.scheduling.annotation.ITestBean.getSpouse() call org.springframework.scheduling.annotation.ITestBean.getSpouse() call org.springframework.scheduling.annotation.ITestBean.getSpouse() call org.springframework.scheduling.annotation.ITestBean.getSpouse() call org.springframework.aop.interceptor.DebugInterceptor.getCount() call org.springframework.aop.interceptor.DebugInterceptor.getCount() call org.springframework.aop.interceptor.DebugInterceptor.getCount() call org.springframework.aop.interceptor.DebugInterceptor.getCount() call org.springframework.aop.interceptor.DebugInterceptor.getCount() call ProxyFactory.removeAdvice() call ProxyFactory.removeAdvice() call ProxyFactory.removeAdvice() call ProxyFactory.removeAdvice() call ProxyFactory.removeAdvice() call org.springframework.scheduling.annotation.ITestBean.getSpouse() call org.springframework.scheduling.annotation.ITestBean.getSpouse() call org.springframework.scheduling.annotation.ITestBean.getSpouse() call org.springframework.scheduling.annotation.ITestBean.getSpouse() call org.springframework.scheduling.annotation.ITestBean.getSpouse() call org.springframework.aop.interceptor.DebugInterceptor.getCount() call org.springframework.aop.interceptor.DebugInterceptor.getCount() call org.springframework.aop.interceptor.DebugInterceptor.getCount() call org.springframework.aop.interceptor.DebugInterceptor.getCount() call org.springframework.aop.interceptor.DebugInterceptor.getCount() == Object ProxyFactory ProxyFactory Object public public decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.setTargetClass() call ProxyFactory.setTargetClass() call ProxyFactory.setTargetClass() call ProxyFactory.setTargetClass() call ProxyFactory.setTargetClass() decl_stmt java.lang.Object = call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) instanceof decl_stmt org.springframework.aop.framework.ProxyFactory = new decl_stmt java.lang.Object = call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) instanceof Object ProxyFactory ProxyFactory Object public public decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.setTargetClass() call ProxyFactory.setTargetClass() call ProxyFactory.setTargetClass() call ProxyFactory.setTargetClass() call ProxyFactory.setTargetClass() decl_stmt java.lang.Object = call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) instanceof decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.setProxyTargetClass() call ProxyFactory.setProxyTargetClass() call ProxyFactory.setProxyTargetClass() call ProxyFactory.setProxyTargetClass() call ProxyFactory.setProxyTargetClass() decl_stmt java.lang.Object = call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) instanceof JFrame Object ProxyFactory public public decl_stmt JFrame = new decl_stmt org.springframework.aop.framework.ProxyFactory = new decl_stmt java.lang.Object = call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) instanceof instanceof decl List Object Object public public decl_stmt java.lang.Object = new new decl_stmt java.lang.Object = new new decl_stmt java.util.List < = new < call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() ProxyFactory decl List ProxyFactory Object Object public public decl_stmt org.springframework.aop.framework.ProxyFactory = new new call ProxyFactory.setProxyTargetClass() call ProxyFactory.setProxyTargetClass() call ProxyFactory.setProxyTargetClass() call ProxyFactory.setProxyTargetClass() call ProxyFactory.setProxyTargetClass() decl_stmt org.springframework.aop.framework.ProxyFactory = new new call ProxyFactory.setProxyTargetClass() call ProxyFactory.setProxyTargetClass() call ProxyFactory.setProxyTargetClass() call ProxyFactory.setProxyTargetClass() call ProxyFactory.setProxyTargetClass() decl_stmt java.lang.Object = call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) decl_stmt java.lang.Object = call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) decl_stmt java.util.List < = new < call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() public public = public public return public public public public