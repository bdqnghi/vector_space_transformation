org.springframework.jdbc.datasource java.io.ByteArrayOutputStream import java.io.PrintWriter import java.sql.Connection import javax.sql.DataSource import org.junit.Test import static static org.hamcrest.Matchers.* import static static org.junit.Assert.* import static static org.mockito.BDDMockito.* import class org.springframework.jdbc.datasource.DelegatingDataSourceTests DataSource DelegatingDataSource Connection public public throws decl_stmt sun.rmi.transport.Connection = call javax.sql.DataSource.getConnection() call javax.sql.DataSource.getConnection() call javax.sql.DataSource.getConnection() call javax.sql.DataSource.getConnection() call javax.sql.DataSource.getConnection() call org.springframework.jdbc.datasource.DelegatingDataSource.getConnection(String,String) call org.springframework.jdbc.datasource.DelegatingDataSource.getConnection(String,String) call org.springframework.jdbc.datasource.DelegatingDataSource.getConnection(String,String) call org.springframework.jdbc.datasource.DelegatingDataSource.getConnection(String,String) call org.springframework.jdbc.datasource.DelegatingDataSource.getConnection(String,String) String Connection String public public throws decl_stmt sun.rmi.transport.Connection = decl_stmt java.lang.String = decl_stmt java.lang.String = call javax.sql.DataSource.getConnection() call javax.sql.DataSource.getConnection() call javax.sql.DataSource.getConnection() call javax.sql.DataSource.getConnection() call javax.sql.DataSource.getConnection() call org.springframework.jdbc.datasource.DelegatingDataSource.getConnection(String,String) call org.springframework.jdbc.datasource.DelegatingDataSource.getConnection(String,String) call org.springframework.jdbc.datasource.DelegatingDataSource.getConnection(String,String) call org.springframework.jdbc.datasource.DelegatingDataSource.getConnection(String,String) call org.springframework.jdbc.datasource.DelegatingDataSource.getConnection(String,String) PrintWriter public public throws decl_stmt PrintWriter = new new call DataSource.getLogWriter() call DataSource.getLogWriter() call DataSource.getLogWriter() call DataSource.getLogWriter() call DataSource.getLogWriter() call org.springframework.jdbc.datasource.DelegatingDataSource.getLogWriter() call org.springframework.jdbc.datasource.DelegatingDataSource.getLogWriter() call org.springframework.jdbc.datasource.DelegatingDataSource.getLogWriter() call org.springframework.jdbc.datasource.DelegatingDataSource.getLogWriter() call org.springframework.jdbc.datasource.DelegatingDataSource.getLogWriter() PrintWriter public public throws decl_stmt PrintWriter = new new call org.springframework.jdbc.datasource.DelegatingDataSource.setLogWriter(PrintWriter) call org.springframework.jdbc.datasource.DelegatingDataSource.setLogWriter(PrintWriter) call org.springframework.jdbc.datasource.DelegatingDataSource.setLogWriter(PrintWriter) call org.springframework.jdbc.datasource.DelegatingDataSource.setLogWriter(PrintWriter) call org.springframework.jdbc.datasource.DelegatingDataSource.setLogWriter(PrintWriter) int public public throws decl_stmt int = call DataSource.getLoginTimeout() call DataSource.getLoginTimeout() call DataSource.getLoginTimeout() call DataSource.getLoginTimeout() call DataSource.getLoginTimeout() call org.springframework.jdbc.datasource.DelegatingDataSource.getLoginTimeout() call org.springframework.jdbc.datasource.DelegatingDataSource.getLoginTimeout() call org.springframework.jdbc.datasource.DelegatingDataSource.getLoginTimeout() call org.springframework.jdbc.datasource.DelegatingDataSource.getLoginTimeout() call org.springframework.jdbc.datasource.DelegatingDataSource.getLoginTimeout() int public public throws decl_stmt int = call org.springframework.jdbc.datasource.DelegatingDataSource.setLoginTimeout(int) call org.springframework.jdbc.datasource.DelegatingDataSource.setLoginTimeout(int) call org.springframework.jdbc.datasource.DelegatingDataSource.setLoginTimeout(int) call org.springframework.jdbc.datasource.DelegatingDataSource.setLoginTimeout(int) call org.springframework.jdbc.datasource.DelegatingDataSource.setLoginTimeout(int) ExampleWrapper public public throws decl_stmt ExampleWrapper = call DataSource.unwrap() call DataSource.unwrap() call DataSource.unwrap() call DataSource.unwrap() call DataSource.unwrap() call org.springframework.jdbc.datasource.DelegatingDataSource.unwrap(Class) call org.springframework.jdbc.datasource.DelegatingDataSource.unwrap(Class) call org.springframework.jdbc.datasource.DelegatingDataSource.unwrap(Class) call org.springframework.jdbc.datasource.DelegatingDataSource.unwrap(Class) call org.springframework.jdbc.datasource.DelegatingDataSource.unwrap(Class) public public throws = new call org.springframework.jdbc.datasource.DelegatingDataSource.unwrap(Class) call org.springframework.jdbc.datasource.DelegatingDataSource.unwrap(Class) call org.springframework.jdbc.datasource.DelegatingDataSource.unwrap(Class) call org.springframework.jdbc.datasource.DelegatingDataSource.unwrap(Class) call org.springframework.jdbc.datasource.DelegatingDataSource.unwrap(Class) public public throws call DataSource.isWrapperFor() call DataSource.isWrapperFor() call DataSource.isWrapperFor() call DataSource.isWrapperFor() call DataSource.isWrapperFor() call org.springframework.jdbc.datasource.DelegatingDataSource.isWrapperFor(Class) call org.springframework.jdbc.datasource.DelegatingDataSource.isWrapperFor(Class) call org.springframework.jdbc.datasource.DelegatingDataSource.isWrapperFor(Class) call org.springframework.jdbc.datasource.DelegatingDataSource.isWrapperFor(Class) call org.springframework.jdbc.datasource.DelegatingDataSource.isWrapperFor(Class) public public throws = new call org.springframework.jdbc.datasource.DelegatingDataSource.isWrapperFor(Class) call org.springframework.jdbc.datasource.DelegatingDataSource.isWrapperFor(Class) call org.springframework.jdbc.datasource.DelegatingDataSource.isWrapperFor(Class) call org.springframework.jdbc.datasource.DelegatingDataSource.isWrapperFor(Class) call org.springframework.jdbc.datasource.DelegatingDataSource.isWrapperFor(Class)