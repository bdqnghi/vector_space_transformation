org.springframework.cache.jcache.interceptor javax.cache.annotation.CacheRemove import org.springframework.cache.Cache import org.springframework.cache.interceptor.CacheErrorHandler import org.springframework.cache.interceptor.CacheOperationInvocationContext import org.springframework.cache.interceptor.CacheOperationInvoker import class annotation org.springframework.cache.jcache.interceptor.CacheRemoveEntryInterceptor super super extends Throwable CacheRemoveOperation boolean Object protected protected < decl_stmt org.springframework.cache.jcache.interceptor.CacheRemoveOperation = decl_stmt boolean final final = call CacheRemoveOperation.isEarlyRemove() call CacheRemoveOperation.isEarlyRemove() call CacheRemoveOperation.isEarlyRemove() call CacheRemoveOperation.isEarlyRemove() call CacheRemoveOperation.isEarlyRemove() if try decl_stmt java.lang.Object = if ! return catch decl_stmt java.lang.Throwable = if ! && call org.springframework.cache.jcache.interceptor.CacheRemoveOperation.getExceptionTypeFilter() call org.springframework.cache.jcache.interceptor.CacheRemoveOperation.getExceptionTypeFilter() call org.springframework.cache.jcache.interceptor.CacheRemoveOperation.getExceptionTypeFilter() call org.springframework.cache.jcache.interceptor.CacheRemoveOperation.getExceptionTypeFilter() call org.springframework.cache.jcache.interceptor.CacheRemoveOperation.getExceptionTypeFilter() call Throwable.getClass() call Throwable.getClass() call Throwable.getClass() call Throwable.getClass() call Throwable.getClass() throw Cache Object private private < decl_stmt java.lang.Object = decl_stmt org.springframework.cache.Cache = if + + + call org.springframework.cache.Cache.getName() call org.springframework.cache.Cache.getName() call org.springframework.cache.Cache.getName() call org.springframework.cache.Cache.getName() call org.springframework.cache.Cache.getName() + +