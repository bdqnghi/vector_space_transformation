org.springframework.web.servlet.mvc.method.annotation java.util.List import java.util.Set import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.ConversionNotSupportedException import org.springframework.beans.TypeMismatchException import org.springframework.http.HttpHeaders import org.springframework.http.HttpMethod import org.springframework.http.HttpStatus import org.springframework.http.MediaType import org.springframework.http.ResponseEntity import org.springframework.http.converter.HttpMessageConverter import org.springframework.http.converter.HttpMessageNotReadableException import org.springframework.http.converter.HttpMessageNotWritableException import org.springframework.util.CollectionUtils import org.springframework.validation.BindException import org.springframework.web.HttpMediaTypeNotAcceptableException import org.springframework.web.HttpMediaTypeNotSupportedException import org.springframework.web.HttpRequestMethodNotSupportedException import org.springframework.web.bind.MethodArgumentNotValidException import org.springframework.web.bind.MissingPathVariableException import org.springframework.web.bind.MissingServletRequestParameterException import org.springframework.web.bind.ServletRequestBindingException import org.springframework.web.bind.annotation.ControllerAdvice import org.springframework.web.bind.annotation.ExceptionHandler import org.springframework.web.context.request.WebRequest import org.springframework.web.multipart.support.MissingServletRequestPartException import org.springframework.web.servlet.NoHandlerFoundException import org.springframework.web.util.WebUtils import class org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler Log String Log HttpStatus HttpHeaders public final < public final < decl_stmt org.springframework.http.HttpHeaders = new if instanceof decl_stmt HttpStatus = return else if instanceof decl_stmt HttpStatus = return else if instanceof decl_stmt HttpStatus = return else if instanceof decl_stmt HttpStatus = return else if instanceof decl_stmt HttpStatus = return else if instanceof decl_stmt HttpStatus = return else if instanceof decl_stmt HttpStatus = return else if instanceof decl_stmt HttpStatus = return else if instanceof decl_stmt HttpStatus = return else if instanceof decl_stmt HttpStatus = return else if instanceof decl_stmt HttpStatus = return else if instanceof decl_stmt HttpStatus = return else if instanceof decl_stmt HttpStatus = return else if instanceof decl_stmt HttpStatus = return else if instanceof decl_stmt HttpStatus = return else call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() + decl_stmt HttpStatus = return protected < protected < if return new < protected < protected < call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() return decl Set protected < protected < call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() decl_stmt java.util.Set < = if ! call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() return decl List protected < protected < decl_stmt java.util.List < = if ! return protected < protected < return protected < protected < return protected < protected < return protected < protected < return protected < protected < return protected < protected < return protected < protected < return protected < protected < return protected < protected < return protected < protected < return protected < protected < return protected < protected < return