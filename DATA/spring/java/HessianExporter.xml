org.springframework.remoting.caucho java.io.BufferedInputStream import java.io.IOException import java.io.InputStream import java.io.OutputStream import java.io.PrintWriter import com.caucho.hessian.io.AbstractHessianInput import com.caucho.hessian.io.AbstractHessianOutput import com.caucho.hessian.io.Hessian2Input import com.caucho.hessian.io.Hessian2Output import com.caucho.hessian.io.HessianDebugInputStream import com.caucho.hessian.io.HessianDebugOutputStream import com.caucho.hessian.io.HessianInput import com.caucho.hessian.io.HessianOutput import com.caucho.hessian.io.HessianRemoteResolver import com.caucho.hessian.io.SerializerFactory import com.caucho.hessian.server.HessianSkeleton import org.apache.commons.logging.Log import org.springframework.beans.factory.InitializingBean import org.springframework.remoting.support.RemoteExporter import org.springframework.util.Assert import org.springframework.util.CommonsLogWriter import class org.springframework.remoting.caucho.HessianExporter super super extends super implements String HessianSkeleton HessianRemoteResolver Log SerializerFactory public public = != : new public public public public public public = public public = : public public public public = new public public throws int PrintWriter AbstractHessianInput InputStream int OutputStream ClassLoader HessianDebugOutputStream AbstractHessianOutput int HessianDebugInputStream protected protected throws decl_stmt java.lang.ClassLoader = try decl_stmt java.io.InputStream = decl_stmt java.io.OutputStream = if != && decl_stmt PrintWriter = new new decl_stmt HessianDebugInputStream = new decl_stmt HessianDebugOutputStream = new call HessianDebugInputStream.startTop2() call HessianDebugInputStream.startTop2() call HessianDebugInputStream.startTop2() call HessianDebugInputStream.startTop2() call HessianDebugInputStream.startTop2() call HessianDebugOutputStream.startTop2() call HessianDebugOutputStream.startTop2() call HessianDebugOutputStream.startTop2() call HessianDebugOutputStream.startTop2() call HessianDebugOutputStream.startTop2() = = if ! call java.io.InputStream.markSupported() call java.io.InputStream.markSupported() call java.io.InputStream.markSupported() call java.io.InputStream.markSupported() call java.io.InputStream.markSupported() = new call java.io.InputStream.mark(int) call java.io.InputStream.mark(int) call java.io.InputStream.mark(int) call java.io.InputStream.mark(int) call java.io.InputStream.mark(int) decl_stmt int = call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) decl_stmt int decl_stmt int decl_stmt AbstractHessianInput decl_stmt AbstractHessianOutput if == = call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) = call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) if != throw new + + + + = new = new call AbstractHessianInput.readCall() call AbstractHessianInput.readCall() call AbstractHessianInput.readCall() call AbstractHessianInput.readCall() call AbstractHessianInput.readCall() else if == call java.io.InputStream.reset() call java.io.InputStream.reset() call java.io.InputStream.reset() call java.io.InputStream.reset() call java.io.InputStream.reset() = new = new call AbstractHessianInput.readCall() call AbstractHessianInput.readCall() call AbstractHessianInput.readCall() call AbstractHessianInput.readCall() call AbstractHessianInput.readCall() else if == = call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) = call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) = new if >= = new else = new else throw new + if != call AbstractHessianInput.setSerializerFactory() call AbstractHessianInput.setSerializerFactory() call AbstractHessianInput.setSerializerFactory() call AbstractHessianInput.setSerializerFactory() call AbstractHessianInput.setSerializerFactory() call AbstractHessianOutput.setSerializerFactory() call AbstractHessianOutput.setSerializerFactory() call AbstractHessianOutput.setSerializerFactory() call AbstractHessianOutput.setSerializerFactory() call AbstractHessianOutput.setSerializerFactory() if != call AbstractHessianInput.setRemoteResolver() call AbstractHessianInput.setRemoteResolver() call AbstractHessianInput.setRemoteResolver() call AbstractHessianInput.setRemoteResolver() call AbstractHessianInput.setRemoteResolver() try call HessianSkeleton.invoke() call HessianSkeleton.invoke() call HessianSkeleton.invoke() call HessianSkeleton.invoke() call HessianSkeleton.invoke() finally try call AbstractHessianInput.close() call AbstractHessianInput.close() call AbstractHessianInput.close() call AbstractHessianInput.close() call AbstractHessianInput.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() catch try call AbstractHessianOutput.close() call AbstractHessianOutput.close() call AbstractHessianOutput.close() call AbstractHessianOutput.close() call AbstractHessianOutput.close() call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() catch finally