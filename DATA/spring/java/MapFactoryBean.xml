org.springframework.beans.factory.config java.util.LinkedHashMap import java.util.Map import org.springframework.beans.BeanUtils import org.springframework.beans.TypeConverter import org.springframework.core.GenericCollectionTypeResolver import class org.springframework.beans.factory.config.MapFactoryBean super super extends decl Map decl Class public public < = public public < extends extends if == throw new if ! throw new = public < public < return TypeConverter decl Class Object decl Map Object decl Class protected < protected < if == throw new decl_stmt java.util.Map < = if != = else = new < decl_stmt java.lang.Class < = decl_stmt java.lang.Class < = if != = = if != || != decl_stmt org.springframework.beans.TypeConverter = for < : decl_stmt java.lang.Object = call org.springframework.beans.TypeConverter.convertIfNecessary(Object,Class) call org.springframework.beans.TypeConverter.convertIfNecessary(Object,Class) call org.springframework.beans.TypeConverter.convertIfNecessary(Object,Class) call org.springframework.beans.TypeConverter.convertIfNecessary(Object,Class) call org.springframework.beans.TypeConverter.convertIfNecessary(Object,Class) decl_stmt java.lang.Object = call org.springframework.beans.TypeConverter.convertIfNecessary(Object,Class) call org.springframework.beans.TypeConverter.convertIfNecessary(Object,Class) call org.springframework.beans.TypeConverter.convertIfNecessary(Object,Class) call org.springframework.beans.TypeConverter.convertIfNecessary(Object,Class) call org.springframework.beans.TypeConverter.convertIfNecessary(Object,Class) call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() return