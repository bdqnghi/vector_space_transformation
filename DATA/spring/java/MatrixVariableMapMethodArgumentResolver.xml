org.springframework.web.servlet.mvc.method.annotation java.util.Collections import java.util.Map import org.springframework.core.MethodParameter import org.springframework.util.CollectionUtils import org.springframework.util.LinkedMultiValueMap import org.springframework.util.MultiValueMap import org.springframework.util.StringUtils import org.springframework.web.bind.annotation.MatrixVariable import org.springframework.web.bind.annotation.ValueConstants import org.springframework.web.bind.support.WebDataBinderFactory import org.springframework.web.context.request.NativeWebRequest import org.springframework.web.context.request.RequestAttributes import org.springframework.web.method.support.HandlerMethodArgumentResolver import org.springframework.web.method.support.ModelAndViewContainer import org.springframework.web.servlet.HandlerMapping import class org.springframework.web.servlet.mvc.method.annotation.MatrixVariableMapMethodArgumentResolver super super implements MatrixVariable public public decl_stmt MatrixVariable = if != if return ! call MatrixVariable.name() call MatrixVariable.name() call MatrixVariable.name() call MatrixVariable.name() call MatrixVariable.name() return decl MultiValueMap decl Map String public public throws decl_stmt java.util.Map < < = < < if return decl_stmt java.lang.String = if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) decl_stmt org.springframework.util.MultiValueMap < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return != : decl_stmt org.springframework.util.MultiValueMap < = new < for < : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() for : for : call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() return