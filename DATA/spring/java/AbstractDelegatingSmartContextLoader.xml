org.springframework.test.context.support java.util.Arrays import java.util.List import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.context.ApplicationContext import org.springframework.test.context.ContextConfiguration import org.springframework.test.context.ContextConfigurationAttributes import org.springframework.test.context.ContextLoader import org.springframework.test.context.MergedContextConfiguration import org.springframework.test.context.SmartContextLoader import org.springframework.util.Assert import class org.springframework.test.context.support.AbstractDelegatingSmartContextLoader super super implements Log private static private static return private static private static if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() private static private static throws if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() return private private if == return && ! else return && ! String boolean public public final final ! && + if else if else decl_stmt boolean = if if call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() if throw new if if call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() if ! && throw new if && decl_stmt java.lang.String = + call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() throw new decl List public public throws decl_stmt java.util.List < = if && throw new + for : if return if ! || ! return throw new public final public final < throw new + public final public final throws throw new +