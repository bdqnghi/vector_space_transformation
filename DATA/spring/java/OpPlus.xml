org.springframework.expression.spel.ast java.math.BigDecimal import java.math.BigInteger import org.springframework.asm.MethodVisitor import org.springframework.core.convert.TypeDescriptor import org.springframework.expression.EvaluationException import org.springframework.expression.Operation import org.springframework.expression.TypeConverter import org.springframework.expression.TypedValue import org.springframework.expression.spel.CodeFlow import org.springframework.expression.spel.ExpressionState import org.springframework.util.Assert import org.springframework.util.NumberUtils import class org.springframework.expression.spel.ast.OpPlus super super extends SpelNodeImpl Object Number SpelNodeImpl Object Number TypedValue BigInteger Object BigDecimal TypedValue BigDecimal BigInteger public public throws decl_stmt org.springframework.expression.spel.ast.SpelNodeImpl = decl_stmt org.springframework.expression.spel.ast.SpelNodeImpl = if == decl_stmt java.lang.Object = call SpelNodeImpl.getValueInternal() call SpelNodeImpl.getValueInternal() call SpelNodeImpl.getValueInternal() call SpelNodeImpl.getValueInternal() call SpelNodeImpl.getValueInternal() if instanceof if instanceof = else if instanceof = else if instanceof = else if instanceof = return new return decl_stmt org.springframework.expression.TypedValue = call SpelNodeImpl.getValueInternal() call SpelNodeImpl.getValueInternal() call SpelNodeImpl.getValueInternal() call SpelNodeImpl.getValueInternal() call SpelNodeImpl.getValueInternal() decl_stmt java.lang.Object = call TypedValue.getValue() call TypedValue.getValue() call TypedValue.getValue() call TypedValue.getValue() call TypedValue.getValue() decl_stmt org.springframework.expression.TypedValue = call SpelNodeImpl.getValueInternal() call SpelNodeImpl.getValueInternal() call SpelNodeImpl.getValueInternal() call SpelNodeImpl.getValueInternal() call SpelNodeImpl.getValueInternal() decl_stmt java.lang.Object = call TypedValue.getValue() call TypedValue.getValue() call TypedValue.getValue() call TypedValue.getValue() call TypedValue.getValue() if instanceof && instanceof decl_stmt java.lang.Number = decl_stmt java.lang.Number = if instanceof || instanceof decl_stmt java.math.BigDecimal = decl_stmt java.math.BigDecimal = return new call java.math.BigDecimal.add(BigDecimal) call java.math.BigDecimal.add(BigDecimal) call java.math.BigDecimal.add(BigDecimal) call java.math.BigDecimal.add(BigDecimal) call java.math.BigDecimal.add(BigDecimal) else if instanceof || instanceof = return new call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() + call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() else if instanceof || instanceof = return new call Number.floatValue() call Number.floatValue() call Number.floatValue() call Number.floatValue() call Number.floatValue() + call Number.floatValue() call Number.floatValue() call Number.floatValue() call Number.floatValue() call Number.floatValue() else if instanceof || instanceof decl_stmt java.math.BigInteger = decl_stmt java.math.BigInteger = return new call java.math.BigInteger.add(int,int) call java.math.BigInteger.add(int,int) call java.math.BigInteger.add(int,int) call java.math.BigInteger.add(int,int) call java.math.BigInteger.add(int,int) else if instanceof || instanceof = return new call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() + call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() else if || = return new call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() + call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() else return new call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() + call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() if instanceof && instanceof = return new + if instanceof return new + == : if instanceof return new == : + return public public if < return + return public public if < return return TypeConverter TypeDescriptor private static private static decl_stmt org.springframework.beans.TypeConverter = decl_stmt org.springframework.core.convert.TypeDescriptor = if call TypeConverter.canConvert() call TypeConverter.canConvert() call TypeConverter.canConvert() call TypeConverter.canConvert() call TypeConverter.canConvert() return call org.springframework.beans.TypeConverter.convertValue(Object,TypeDescriptor,TypeDescriptor) call org.springframework.beans.TypeConverter.convertValue(Object,TypeDescriptor,TypeDescriptor) call org.springframework.beans.TypeConverter.convertValue(Object,TypeDescriptor,TypeDescriptor) call org.springframework.beans.TypeConverter.convertValue(Object,TypeDescriptor,TypeDescriptor) call org.springframework.beans.TypeConverter.convertValue(Object,TypeDescriptor,TypeDescriptor) return public public if ! return if > if ! return return != OpPlus private private if instanceof decl_stmt org.springframework.expression.spel.ast.OpPlus = call OpPlus.getLeftOperand() call OpPlus.getLeftOperand() call OpPlus.getLeftOperand() call OpPlus.getLeftOperand() call OpPlus.getLeftOperand() call org.springframework.expression.spel.ast.OpPlus.getRightOperand() call org.springframework.expression.spel.ast.OpPlus.getRightOperand() call org.springframework.expression.spel.ast.OpPlus.getRightOperand() call org.springframework.expression.spel.ast.OpPlus.getRightOperand() call org.springframework.expression.spel.ast.OpPlus.getRightOperand() else if ! String String public public if == else decl_stmt java.lang.String = if > decl_stmt java.lang.String = switch case break case break case break case break default: throw new + +