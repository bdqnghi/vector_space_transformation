org.springframework.orm.hibernate3.support org.hibernate.HibernateException import org.hibernate.Session import org.springframework.dao.DataAccessException import org.springframework.transaction.support.TransactionSynchronizationManager import org.springframework.ui.ModelMap import org.springframework.web.context.request.AsyncWebRequestInterceptor import org.springframework.web.context.request.WebRequest import org.springframework.web.context.request.async.WebAsyncManager import org.springframework.web.context.request.async.WebAsyncUtils import class annotation org.springframework.orm.hibernate3.support.OpenSessionInViewInterceptor super super extends super implements String boolean public public = protected protected return Integer decl org int decl springframework Session WebAsyncManager String public public throws decl_stmt java.lang.String = decl_stmt org.springframework.web.context.request.async.WebAsyncManager = if call org.springframework.web.context.request.async.WebAsyncManager.hasConcurrentResult() call org.springframework.web.context.request.async.WebAsyncManager.hasConcurrentResult() call org.springframework.web.context.request.async.WebAsyncManager.hasConcurrentResult() call org.springframework.web.context.request.async.WebAsyncManager.hasConcurrentResult() call org.springframework.web.context.request.async.WebAsyncManager.hasConcurrentResult() if return if && || decl_stmt java.lang.Integer = decl_stmt int = != + : else if decl_stmt sun.security.pkcs11.Session = decl_stmt org.springframework.orm.hibernate4.SessionHolder = new decl_stmt org.springframework.orm.jpa.support.AsyncRequestInterceptor = new call org.springframework.web.context.request.async.WebAsyncManager.registerCallableInterceptor(Object,CallableProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerCallableInterceptor(Object,CallableProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerCallableInterceptor(Object,CallableProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerCallableInterceptor(Object,CallableProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerCallableInterceptor(Object,CallableProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerDeferredResultInterceptor(Object,DeferredResultProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerDeferredResultInterceptor(Object,DeferredResultProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerDeferredResultInterceptor(Object,DeferredResultProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerDeferredResultInterceptor(Object,DeferredResultProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerDeferredResultInterceptor(Object,DeferredResultProcessingInterceptor) else decl org public public throws if decl_stmt org.springframework.orm.hibernate4.SessionHolder = try call decl org.getSession() call decl org.getSession() call decl org.getSession() call decl org.getSession() call decl org.getSession() catch throw decl org public public throws if ! if decl_stmt org.springframework.orm.hibernate4.SessionHolder = call decl org.getSession() call decl org.getSession() call decl org.getSession() call decl org.getSession() call decl org.getSession() else public public if ! if else throw new Integer String private private decl_stmt java.lang.String = decl_stmt java.lang.Integer = if == return if > - else return protected protected return + private private if == return return