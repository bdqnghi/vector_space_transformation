org.springframework.scheduling.annotation java.lang.annotation.ElementType import java.lang.annotation.Retention import java.lang.annotation.RetentionPolicy import java.lang.annotation.Target import java.lang.reflect.Method import java.util.concurrent.ExecutionException import java.util.concurrent.Executor import java.util.concurrent.Future import org.junit.Test import org.springframework.aop.Advisor import org.springframework.aop.framework.Advised import org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler import org.springframework.aop.support.AopUtils import org.springframework.beans.factory.BeanDefinitionStoreException import org.springframework.beans.factory.annotation.Qualifier import org.springframework.context.annotation.AdviceMode import org.springframework.context.annotation.AnnotationConfigApplicationContext import org.springframework.context.annotation.Bean import org.springframework.context.annotation.Configuration import org.springframework.core.Ordered import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor import org.springframework.util.ReflectionUtils import static static org.hamcrest.CoreMatchers.anyOf import static static org.hamcrest.CoreMatchers.is import static static org.hamcrest.CoreMatchers.not import static static org.hamcrest.Matchers.startsWith import static static org.junit.Assert.* import class org.springframework.scheduling.annotation.EnableAsyncTests AsyncBean AnnotationConfigApplicationContext public public decl_stmt org.springframework.context.annotation.AnnotationConfigApplicationContext = new call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() decl_stmt AsyncBean = call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AsyncBean.work() call AsyncBean.work() call AsyncBean.work() call AsyncBean.work() call AsyncBean.work() decl Future decl Future decl Future AnnotationConfigApplicationContext decl Future AsyncBeanWithExecutorQualifiedByName public public throws decl_stmt org.springframework.context.annotation.AnnotationConfigApplicationContext = new call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() decl_stmt AsyncBeanWithExecutorQualifiedByName = call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() decl_stmt java.util.concurrent.Future < = call AsyncBeanWithExecutorQualifiedByName.work0() call AsyncBeanWithExecutorQualifiedByName.work0() call AsyncBeanWithExecutorQualifiedByName.work0() call AsyncBeanWithExecutorQualifiedByName.work0() call AsyncBeanWithExecutorQualifiedByName.work0() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() decl_stmt java.util.concurrent.Future < = call AsyncBeanWithExecutorQualifiedByName.work() call AsyncBeanWithExecutorQualifiedByName.work() call AsyncBeanWithExecutorQualifiedByName.work() call AsyncBeanWithExecutorQualifiedByName.work() call AsyncBeanWithExecutorQualifiedByName.work() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() decl_stmt java.util.concurrent.Future < = call AsyncBeanWithExecutorQualifiedByName.work2() call AsyncBeanWithExecutorQualifiedByName.work2() call AsyncBeanWithExecutorQualifiedByName.work2() call AsyncBeanWithExecutorQualifiedByName.work2() call AsyncBeanWithExecutorQualifiedByName.work2() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() decl_stmt java.util.concurrent.Future < = call AsyncBeanWithExecutorQualifiedByName.work3() call AsyncBeanWithExecutorQualifiedByName.work3() call AsyncBeanWithExecutorQualifiedByName.work3() call AsyncBeanWithExecutorQualifiedByName.work3() call AsyncBeanWithExecutorQualifiedByName.work3() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() AsyncAnnotationBeanPostProcessor AnnotationConfigApplicationContext public public decl_stmt org.springframework.context.annotation.AnnotationConfigApplicationContext = new call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() decl_stmt org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor = call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AsyncAnnotationBeanPostProcessor.getOrder() call AsyncAnnotationBeanPostProcessor.getOrder() call AsyncAnnotationBeanPostProcessor.getOrder() call AsyncAnnotationBeanPostProcessor.getOrder() call AsyncAnnotationBeanPostProcessor.getOrder() AsyncAnnotationBeanPostProcessor AnnotationConfigApplicationContext public public decl_stmt org.springframework.context.annotation.AnnotationConfigApplicationContext = new call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() decl_stmt org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor = call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AsyncAnnotationBeanPostProcessor.getOrder() call AsyncAnnotationBeanPostProcessor.getOrder() call AsyncAnnotationBeanPostProcessor.getOrder() call AsyncAnnotationBeanPostProcessor.getOrder() call AsyncAnnotationBeanPostProcessor.getOrder() Object AnnotationConfigApplicationContext boolean public public decl_stmt org.springframework.context.annotation.AnnotationConfigApplicationContext = new call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() decl_stmt java.lang.Object = call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() decl_stmt boolean = for : if instanceof = break AnnotationConfigApplicationContext = public = public decl_stmt org.springframework.context.annotation.AnnotationConfigApplicationContext = new call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() Method AsyncBean AnnotationConfigApplicationContext TestableAsyncUncaughtExceptionHandler public public throws decl_stmt org.springframework.context.annotation.AnnotationConfigApplicationContext = new call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() decl_stmt AsyncBean = call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AsyncBean.work() call AsyncBean.work() call AsyncBean.work() call AsyncBean.work() call AsyncBean.work() call AsyncBean.getThreadOfExecution() call AsyncBean.getThreadOfExecution() call AsyncBean.getThreadOfExecution() call AsyncBean.getThreadOfExecution() call AsyncBean.getThreadOfExecution() decl_stmt org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler = call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler.isCalled() call org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler.isCalled() call org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler.isCalled() call org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler.isCalled() call org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler.isCalled() call AsyncBean.fail() call AsyncBean.fail() call AsyncBean.fail() call AsyncBean.fail() call AsyncBean.fail() decl_stmt com.sun.jdi.Method = call org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler.assertCalledWith(Method,Class) call org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler.assertCalledWith(Method,Class) call org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler.assertCalledWith(Method,Class) call org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler.assertCalledWith(Method,Class) call org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler.assertCalledWith(Method,Class) call AnnotationConfigApplicationContext.close() call AnnotationConfigApplicationContext.close() call AnnotationConfigApplicationContext.close() call AnnotationConfigApplicationContext.close() call AnnotationConfigApplicationContext.close() public < public < return new < public < public < return new < public < public < return new < public < public < return new < public public = public public throw new public public return public public public public return new public public return new public public return new public public return new ThreadPoolTaskExecutor public public decl_stmt org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor = new call ThreadPoolTaskExecutor.setThreadNamePrefix() call ThreadPoolTaskExecutor.setThreadNamePrefix() call ThreadPoolTaskExecutor.setThreadNamePrefix() call ThreadPoolTaskExecutor.setThreadNamePrefix() call ThreadPoolTaskExecutor.setThreadNamePrefix() call ThreadPoolTaskExecutor.initialize() call ThreadPoolTaskExecutor.initialize() call ThreadPoolTaskExecutor.initialize() call ThreadPoolTaskExecutor.initialize() call ThreadPoolTaskExecutor.initialize() return public public return public public return new public public return new public public return new public public return new