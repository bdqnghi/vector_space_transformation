org.springframework.test.context.support java.util.ArrayList import java.util.Arrays import java.util.Collection import java.util.Collections import java.util.HashSet import java.util.LinkedHashSet import java.util.List import java.util.Map import java.util.Set import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.BeanInstantiationException import org.springframework.beans.BeanUtils import org.springframework.core.annotation.AnnotationAwareOrderComparator import org.springframework.core.annotation.AnnotationUtils import org.springframework.core.io.support.SpringFactoriesLoader import org.springframework.test.context.BootstrapContext import org.springframework.test.context.CacheAwareContextLoaderDelegate import org.springframework.test.context.ContextConfiguration import org.springframework.test.context.ContextConfigurationAttributes import org.springframework.test.context.ContextCustomizer import org.springframework.test.context.ContextCustomizerFactory import org.springframework.test.context.ContextHierarchy import org.springframework.test.context.ContextLoader import org.springframework.test.context.MergedContextConfiguration import org.springframework.test.context.SmartContextLoader import org.springframework.test.context.TestContext import org.springframework.test.context.TestContextBootstrapper import org.springframework.test.context.TestExecutionListener import org.springframework.test.context.TestExecutionListeners import org.springframework.test.context.TestExecutionListeners.MergeMode import org.springframework.test.util.MetaAnnotationUtils import org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.StringUtils import class org.springframework.test.context.support.AbstractTestContextBootstrapper super super implements Log BootstrapContext public public = public public return public public return new decl Class decl Set boolean TestExecutionListeners decl Class boolean decl AnnotationDescriptor decl List decl List decl AnnotationDescriptor decl Class public final < public final < decl_stmt java.lang.Class < = decl_stmt java.lang.Class < = decl_stmt java.util.List < < extends extends = new < < extends extends decl_stmt boolean = decl_stmt AnnotationDescriptor < = if == if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() = call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() else while != decl_stmt java.lang.Class < = call decl AnnotationDescriptor.getDeclaringClass() call decl AnnotationDescriptor.getDeclaringClass() call decl AnnotationDescriptor.getDeclaringClass() call decl AnnotationDescriptor.getDeclaringClass() call decl AnnotationDescriptor.getDeclaringClass() decl_stmt TestExecutionListeners = call decl AnnotationDescriptor.synthesizeAnnotation() call decl AnnotationDescriptor.synthesizeAnnotation() call decl AnnotationDescriptor.synthesizeAnnotation() call decl AnnotationDescriptor.synthesizeAnnotation() call decl AnnotationDescriptor.synthesizeAnnotation() if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() decl_stmt boolean = call TestExecutionListeners.inheritListeners() call TestExecutionListeners.inheritListeners() call TestExecutionListeners.inheritListeners() call TestExecutionListeners.inheritListeners() call TestExecutionListeners.inheritListeners() decl_stmt AnnotationDescriptor < = call decl AnnotationDescriptor.getRootDeclaringClass() call decl AnnotationDescriptor.getRootDeclaringClass() call decl AnnotationDescriptor.getRootDeclaringClass() call decl AnnotationDescriptor.getRootDeclaringClass() call decl AnnotationDescriptor.getRootDeclaringClass() if ! || == && call TestExecutionListeners.mergeMode() call TestExecutionListeners.mergeMode() call TestExecutionListeners.mergeMode() call TestExecutionListeners.mergeMode() call TestExecutionListeners.mergeMode() == if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + call decl AnnotationDescriptor.getRootDeclaringClass() call decl AnnotationDescriptor.getRootDeclaringClass() call decl AnnotationDescriptor.getRootDeclaringClass() call decl AnnotationDescriptor.getRootDeclaringClass() call decl AnnotationDescriptor.getRootDeclaringClass() = call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call TestExecutionListeners.listeners() call TestExecutionListeners.listeners() call TestExecutionListeners.listeners() call TestExecutionListeners.listeners() call TestExecutionListeners.listeners() = : if decl_stmt java.util.Set < < extends extends = new < < extends extends call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() decl_stmt java.util.List < = if if call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() return NoClassDefFoundError decl List private < private < < < extends extends decl_stmt java.util.List < = new < for < extends extends : decl_stmt NoClassDefFoundError = try call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() catch = catch if instanceof = if != if call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() + + call NoClassDefFoundError.getMessage() call NoClassDefFoundError.getMessage() call NoClassDefFoundError.getMessage() call NoClassDefFoundError.getMessage() call NoClassDefFoundError.getMessage() return ClassLoader decl Set protected < < extends extends protected < < extends extends decl_stmt java.util.Set < < extends extends = new < < extends extends decl_stmt java.lang.ClassLoader = for : try call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() < extends extends catch if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + return decl List protected < protected < decl_stmt java.util.List < = if call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() return CacheAwareContextLoaderDelegate decl Class MergedContextConfiguration MergedContextConfiguration decl List decl Map decl Class public final public final decl_stmt java.lang.Class < = decl_stmt org.springframework.test.context.CacheAwareContextLoaderDelegate = if == return if != decl_stmt java.util.Map < < = decl_stmt org.springframework.test.context.MergedContextConfiguration = decl_stmt org.springframework.test.context.MergedContextConfiguration = for < : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() decl_stmt java.util.List < = new < decl_stmt java.lang.Class < = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = = return else return decl List ContextLoader private private < decl_stmt java.util.List < = new decl_stmt org.springframework.test.context.ContextLoader = if call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() call ContextLoader.getClass() call ContextLoader.getClass() call ContextLoader.getClass() call ContextLoader.getClass() call ContextLoader.getClass() return decl Set MergedTestPropertySources ContextLoader MergedContextConfiguration decl List decl String SmartContextLoader decl List decl List private private < < decl_stmt org.springframework.test.context.ContextLoader = decl_stmt java.util.List < = new < decl_stmt java.util.List < < = new < < decl_stmt java.util.List < < = new < < for : if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() if instanceof decl_stmt org.springframework.test.context.SmartContextLoader = call SmartContextLoader.processContextConfiguration() call SmartContextLoader.processContextConfiguration() call SmartContextLoader.processContextConfiguration() call SmartContextLoader.processContextConfiguration() call SmartContextLoader.processContextConfiguration() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() else decl_stmt java.lang.String = call ContextLoader.processLocations() call ContextLoader.processLocations() call ContextLoader.processLocations() call ContextLoader.processLocations() call ContextLoader.processLocations() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() if ! break decl_stmt java.util.Set < = if && throw new + call ContextLoader.getClass() call ContextLoader.getClass() call ContextLoader.getClass() call ContextLoader.getClass() call ContextLoader.getClass() decl_stmt org.springframework.test.context.support.MergedTestPropertySources = decl_stmt org.springframework.test.context.MergedContextConfiguration = new call org.springframework.test.context.support.MergedTestPropertySources.getLocations() call org.springframework.test.context.support.MergedTestPropertySources.getLocations() call org.springframework.test.context.support.MergedTestPropertySources.getLocations() call org.springframework.test.context.support.MergedTestPropertySources.getLocations() call org.springframework.test.context.support.MergedTestPropertySources.getLocations() call MergedTestPropertySources.getProperties() call MergedTestPropertySources.getProperties() call MergedTestPropertySources.getProperties() call MergedTestPropertySources.getProperties() call MergedTestPropertySources.getProperties() return decl Set decl List ContextCustomizer private < private < < < decl_stmt java.util.List < = decl_stmt java.util.Set < = new < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : decl_stmt org.springframework.test.context.ContextCustomizer = if != call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return protected < protected < return private private < for < : if ! return return decl Class protected protected < < decl_stmt java.lang.Class < extends extends = if == = if == throw new if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() return decl Class protected < extends extends protected < extends extends < for : if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() decl_stmt java.lang.Class < extends extends = if != if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() return return protected protected return protected protected return