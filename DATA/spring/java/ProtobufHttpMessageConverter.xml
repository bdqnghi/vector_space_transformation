org.springframework.http.converter.protobuf java.io.IOException import java.io.InputStreamReader import java.io.OutputStreamWriter import java.lang.reflect.Method import java.nio.charset.Charset import java.util.concurrent.ConcurrentHashMap import com.google.protobuf.ExtensionRegistry import com.google.protobuf.Message import com.google.protobuf.TextFormat import com.googlecode.protobuf.format.HtmlFormat import com.googlecode.protobuf.format.JsonFormat import com.googlecode.protobuf.format.ProtobufFormatter import com.googlecode.protobuf.format.XmlFormat import org.springframework.http.HttpInputMessage import org.springframework.http.HttpOutputMessage import org.springframework.http.MediaType import org.springframework.http.converter.AbstractHttpMessageConverter import org.springframework.http.converter.HttpMessageNotReadableException import org.springframework.http.converter.HttpMessageNotWritableException import org.springframework.util.FileCopyUtils import class org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter super super extends decl ConcurrentHashMap Charset MediaType ProtobufFormatter ProtobufFormatter String ProtobufFormatter ExtensionRegistry String protected protected < return protected protected return decl Message Charset MediaType decl Builder protected protected < extends extends throws decl_stmt org.springframework.http.MediaType = if == = decl_stmt java.nio.charset.Charset = call MediaType.getCharset() call MediaType.getCharset() call MediaType.getCharset() call MediaType.getCharset() call MediaType.getCharset() if == = try decl_stmt org.springframework.web.servlet.mvc.method.Builder = if decl_stmt InputStreamReader = new else if call ProtobufFormatter.merge() call ProtobufFormatter.merge() call ProtobufFormatter.merge() call ProtobufFormatter.merge() call ProtobufFormatter.merge() else if call ProtobufFormatter.merge() call ProtobufFormatter.merge() call ProtobufFormatter.merge() call ProtobufFormatter.merge() call ProtobufFormatter.merge() else call decl Message.mergeFrom() call decl Message.mergeFrom() call decl Message.mergeFrom() call decl Message.mergeFrom() call decl Message.mergeFrom() return call decl Message.build() call decl Message.build() call decl Message.build() call decl Message.build() call decl Message.build() catch throw new + protected protected return || OutputStreamWriter Charset MediaType protected protected throws decl_stmt org.springframework.http.MediaType = if == = decl_stmt java.nio.charset.Charset = call MediaType.getCharset() call MediaType.getCharset() call MediaType.getCharset() call MediaType.getCharset() call MediaType.getCharset() if == = if decl_stmt java.io.OutputStreamWriter = new call java.io.OutputStreamWriter.flush() call java.io.OutputStreamWriter.flush() call java.io.OutputStreamWriter.flush() call java.io.OutputStreamWriter.flush() call java.io.OutputStreamWriter.flush() else if call ProtobufFormatter.print() call ProtobufFormatter.print() call ProtobufFormatter.print() call ProtobufFormatter.print() call ProtobufFormatter.print() else if call ProtobufFormatter.print() call ProtobufFormatter.print() call ProtobufFormatter.print() call ProtobufFormatter.print() call ProtobufFormatter.print() else if call ProtobufFormatter.print() call ProtobufFormatter.print() call ProtobufFormatter.print() call ProtobufFormatter.print() call ProtobufFormatter.print() else if call org.springframework.http.MediaType.isCompatibleWith(MediaType) call org.springframework.http.MediaType.isCompatibleWith(MediaType) call org.springframework.http.MediaType.isCompatibleWith(MediaType) call org.springframework.http.MediaType.isCompatibleWith(MediaType) call org.springframework.http.MediaType.isCompatibleWith(MediaType) private private Method private static private static < extends extends throws decl_stmt com.sun.jdi.Method = call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() if == = call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() return call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object)