org.springframework.messaging.simp.broker java.security.Principal import java.util.Collection import java.util.Map import java.util.concurrent.ConcurrentHashMap import java.util.concurrent.ScheduledFuture import org.springframework.messaging.Message import org.springframework.messaging.MessageChannel import org.springframework.messaging.MessageHeaders import org.springframework.messaging.SubscribableChannel import org.springframework.messaging.simp.SimpMessageHeaderAccessor import org.springframework.messaging.simp.SimpMessageType import org.springframework.messaging.support.MessageBuilder import org.springframework.messaging.support.MessageHeaderAccessor import org.springframework.messaging.support.MessageHeaderInitializer import org.springframework.scheduling.TaskScheduler import org.springframework.util.Assert import org.springframework.util.MultiValueMap import org.springframework.util.PathMatcher import class org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler super super extends TaskScheduler PathMatcher decl Map decl ScheduledFuture SubscriptionRegistry decl long MessageHeaderInitializer decl byte public public = private private if != if instanceof public public return public public = public public = if == = new public public return public public = public public return public public = public public return long public public if != decl_stmt long = if > = new else == || == && == private private if == return else if > && > return else return > : public public if != decl Message String decl long SimpMessageType MessageHeaders String SimpMessageHeaderAccessor Principal decl long SimpMessageHeaderAccessor protected protected < decl_stmt org.springframework.messaging.MessageHeaders = decl_stmt SimpMessageType = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.security.Principal = if ! return decl_stmt org.springframework.messaging.simp.SimpMessageHeaderAccessor = if == throw new + if else if decl_stmt long = decl_stmt long = new decl_stmt org.springframework.messaging.simp.SimpMessageHeaderAccessor = call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSessionId(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSessionId(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSessionId(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSessionId(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSessionId(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setUser(Principal) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setUser(Principal) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setUser(Principal) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setUser(Principal) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setUser(Principal) call SimpMessageHeaderAccessor.setHeader() call SimpMessageHeaderAccessor.setHeader() call SimpMessageHeaderAccessor.setHeader() call SimpMessageHeaderAccessor.setHeader() call SimpMessageHeaderAccessor.setHeader() call SimpMessageHeaderAccessor.setHeader() call SimpMessageHeaderAccessor.setHeader() call SimpMessageHeaderAccessor.setHeader() call SimpMessageHeaderAccessor.setHeader() call SimpMessageHeaderAccessor.setHeader() decl_stmt org.springframework.messaging.Message < = call SimpMessageHeaderAccessor.getMessageHeaders() call SimpMessageHeaderAccessor.getMessageHeaders() call SimpMessageHeaderAccessor.getMessageHeaders() call SimpMessageHeaderAccessor.getMessageHeaders() call SimpMessageHeaderAccessor.getMessageHeaders() else if else if else if SessionInfo private private if != decl_stmt SessionInfo = if != call SessionInfo.setLastReadTime() call SessionInfo.setLastReadTime() call SessionInfo.setLastReadTime() call SessionInfo.setLastReadTime() call SessionInfo.setLastReadTime() SimpMessageHeaderAccessor private private < if decl_stmt org.springframework.messaging.simp.SimpMessageHeaderAccessor = = != : + call org.springframework.messaging.simp.SimpMessageHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.getShortLogMessage(Object) private private if != decl Message SimpMessageHeaderAccessor private private decl_stmt org.springframework.messaging.simp.SimpMessageHeaderAccessor = call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSessionId(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSessionId(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSessionId(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSessionId(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSessionId(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setUser(Principal) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setUser(Principal) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setUser(Principal) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setUser(Principal) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setUser(Principal) decl_stmt org.springframework.messaging.Message < = call SimpMessageHeaderAccessor.getMessageHeaders() call SimpMessageHeaderAccessor.getMessageHeaders() call SimpMessageHeaderAccessor.getMessageHeaders() call SimpMessageHeaderAccessor.getMessageHeaders() call SimpMessageHeaderAccessor.getMessageHeaders() SimpMessageHeaderAccessor SessionInfo decl MultiValueMap decl Message long Object protected protected < decl_stmt org.springframework.util.MultiValueMap < = if ! call decl MultiValueMap.isEmpty() call decl MultiValueMap.isEmpty() call decl MultiValueMap.isEmpty() call decl MultiValueMap.isEmpty() call decl MultiValueMap.isEmpty() && + call decl MultiValueMap.size() call decl MultiValueMap.size() call decl MultiValueMap.size() call decl MultiValueMap.size() call decl MultiValueMap.size() + decl_stmt long = for : call decl MultiValueMap.keySet() call decl MultiValueMap.keySet() call decl MultiValueMap.keySet() call decl MultiValueMap.keySet() call decl MultiValueMap.keySet() for : call decl MultiValueMap.get() call decl MultiValueMap.get() call decl MultiValueMap.get() call decl MultiValueMap.get() call decl MultiValueMap.get() decl_stmt org.springframework.messaging.simp.SimpMessageHeaderAccessor = call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSessionId(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSessionId(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSessionId(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSessionId(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSessionId(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSubscriptionId(String) call SimpMessageHeaderAccessor.copyHeadersIfAbsent() call SimpMessageHeaderAccessor.copyHeadersIfAbsent() call SimpMessageHeaderAccessor.copyHeadersIfAbsent() call SimpMessageHeaderAccessor.copyHeadersIfAbsent() call SimpMessageHeaderAccessor.copyHeadersIfAbsent() decl_stmt java.lang.Object = decl_stmt org.springframework.messaging.Message < = call SimpMessageHeaderAccessor.getMessageHeaders() call SimpMessageHeaderAccessor.getMessageHeaders() call SimpMessageHeaderAccessor.getMessageHeaders() call SimpMessageHeaderAccessor.getMessageHeaders() call SimpMessageHeaderAccessor.getMessageHeaders() try catch + finally decl_stmt SessionInfo = if != call SessionInfo.setLastWriteTime() call SessionInfo.setLastWriteTime() call SessionInfo.setLastWriteTime() call SessionInfo.setLastWriteTime() call SessionInfo.setLastWriteTime() public public return + + public public return public public return public public return public public return public public return public public = public public return public public = MessageHeaders long SimpMessageHeaderAccessor public public decl_stmt long = for : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() if > && - > if > && - > decl_stmt org.springframework.messaging.simp.SimpMessageHeaderAccessor = call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSessionId(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSessionId(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSessionId(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSessionId(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSessionId(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setUser(Principal) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setUser(Principal) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setUser(Principal) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setUser(Principal) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setUser(Principal) decl_stmt org.springframework.messaging.MessageHeaders = call SimpMessageHeaderAccessor.getMessageHeaders() call SimpMessageHeaderAccessor.getMessageHeaders() call SimpMessageHeaderAccessor.getMessageHeaders() call SimpMessageHeaderAccessor.getMessageHeaders() call SimpMessageHeaderAccessor.getMessageHeaders()