org.springframework.messaging.simp.broker java.util.Collection import java.util.HashSet import java.util.LinkedHashMap import java.util.List import java.util.Map import java.util.Set import java.util.concurrent.ConcurrentHashMap import java.util.concurrent.ConcurrentMap import java.util.concurrent.CopyOnWriteArraySet import org.springframework.expression.AccessException import org.springframework.expression.EvaluationContext import org.springframework.expression.Expression import org.springframework.expression.ExpressionParser import org.springframework.expression.PropertyAccessor import org.springframework.expression.TypedValue import org.springframework.expression.spel.SpelEvaluationException import org.springframework.expression.spel.standard.SpelExpressionParser import org.springframework.expression.spel.support.StandardEvaluationContext import org.springframework.messaging.Message import org.springframework.messaging.MessageHeaders import org.springframework.messaging.simp.SimpMessageHeaderAccessor import org.springframework.messaging.support.MessageHeaderAccessor import org.springframework.util.AntPathMatcher import org.springframework.util.Assert import org.springframework.util.LinkedMultiValueMap import org.springframework.util.MultiValueMap import org.springframework.util.PathMatcher import class org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry super super extends int PathMatcher int SessionSubscriptionRegistry boolean String ExpressionParser DestinationCache public public = public public return public public = public public return public public = public public return MessageHeaders Expression String protected protected < decl_stmt org.springframework.expression.Expression = decl_stmt org.springframework.messaging.MessageHeaders = decl_stmt java.lang.String = if != try = = if + + catch if + SessionSubscriptionInfo String protected protected < decl_stmt SessionSubscriptionInfo = if != decl_stmt java.lang.String = call SessionSubscriptionInfo.removeSubscription() call SessionSubscriptionInfo.removeSubscription() call SessionSubscriptionInfo.removeSubscription() call SessionSubscriptionInfo.removeSubscription() call SessionSubscriptionInfo.removeSubscription() if != SessionSubscriptionInfo public public decl_stmt SessionSubscriptionInfo = if != decl MultiValueMap protected < protected < < decl_stmt org.springframework.util.MultiValueMap < = return SessionSubscriptionInfo Expression decl MultiValueMap EvaluationContext Subscription private < private < < < if ! return decl_stmt org.springframework.expression.EvaluationContext = decl_stmt org.springframework.util.MultiValueMap < = new < for : for : decl_stmt SessionSubscriptionInfo = if == continue decl_stmt Subscription = call SessionSubscriptionInfo.getSubscription() call SessionSubscriptionInfo.getSubscription() call SessionSubscriptionInfo.getSubscription() call SessionSubscriptionInfo.getSubscription() call SessionSubscriptionInfo.getSubscription() if == continue decl_stmt org.springframework.expression.Expression = call Subscription.getSelectorExpression() call Subscription.getSelectorExpression() call Subscription.getSelectorExpression() call Subscription.getSelectorExpression() call Subscription.getSelectorExpression() if == call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() continue if == = new call org.springframework.expression.EvaluationContext.getPropertyAccessors() call org.springframework.expression.EvaluationContext.getPropertyAccessors() call org.springframework.expression.EvaluationContext.getPropertyAccessors() call org.springframework.expression.EvaluationContext.getPropertyAccessors() call org.springframework.expression.EvaluationContext.getPropertyAccessors() new try if call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() catch if + catch return public public return + + + + protected protected < < if > return else return decl LinkedMultiValueMap public < public < < decl_stmt org.springframework.util.LinkedMultiValueMap < = if == synchronized = new < for : call SessionSubscriptionRegistry.getAllSubscriptions() call SessionSubscriptionRegistry.getAllSubscriptions() call SessionSubscriptionRegistry.getAllSubscriptions() call SessionSubscriptionRegistry.getAllSubscriptions() call SessionSubscriptionRegistry.getAllSubscriptions() for : if for : call decl LinkedMultiValueMap.add() call decl LinkedMultiValueMap.add() call decl LinkedMultiValueMap.add() call decl LinkedMultiValueMap.add() call decl LinkedMultiValueMap.add() if ! call decl LinkedMultiValueMap.isEmpty() call decl LinkedMultiValueMap.isEmpty() call decl LinkedMultiValueMap.isEmpty() call decl LinkedMultiValueMap.isEmpty() call decl LinkedMultiValueMap.isEmpty() call decl LinkedMultiValueMap.deepCopy() call decl LinkedMultiValueMap.deepCopy() call decl LinkedMultiValueMap.deepCopy() call decl LinkedMultiValueMap.deepCopy() call decl LinkedMultiValueMap.deepCopy() return String decl LinkedMultiValueMap public public synchronized for < < : decl_stmt java.lang.String = if decl_stmt org.springframework.util.LinkedMultiValueMap < = call decl LinkedMultiValueMap.add() call decl LinkedMultiValueMap.add() call decl LinkedMultiValueMap.add() call decl LinkedMultiValueMap.add() call decl LinkedMultiValueMap.add() call decl LinkedMultiValueMap.deepCopy() call decl LinkedMultiValueMap.deepCopy() call decl LinkedMultiValueMap.deepCopy() call decl LinkedMultiValueMap.deepCopy() call decl LinkedMultiValueMap.deepCopy() decl LinkedMultiValueMap String decl Set decl List public public synchronized decl_stmt java.util.Set < = new < for < < : decl_stmt java.lang.String = decl_stmt org.springframework.util.LinkedMultiValueMap < = decl_stmt java.util.List < = call decl LinkedMultiValueMap.get() call decl LinkedMultiValueMap.get() call decl LinkedMultiValueMap.get() call decl LinkedMultiValueMap.get() call decl LinkedMultiValueMap.get() if != call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl LinkedMultiValueMap.remove() call decl LinkedMultiValueMap.remove() call decl LinkedMultiValueMap.remove() call decl LinkedMultiValueMap.remove() call decl LinkedMultiValueMap.remove() if call decl LinkedMultiValueMap.isEmpty() call decl LinkedMultiValueMap.isEmpty() call decl LinkedMultiValueMap.isEmpty() call decl LinkedMultiValueMap.isEmpty() call decl LinkedMultiValueMap.isEmpty() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() else call decl LinkedMultiValueMap.deepCopy() call decl LinkedMultiValueMap.deepCopy() call decl LinkedMultiValueMap.deepCopy() call decl LinkedMultiValueMap.deepCopy() call decl LinkedMultiValueMap.deepCopy() for : decl LinkedMultiValueMap String decl Set public public synchronized decl_stmt java.util.Set < = new < for < < : decl_stmt java.lang.String = decl_stmt org.springframework.util.LinkedMultiValueMap < = if call decl LinkedMultiValueMap.remove() call decl LinkedMultiValueMap.remove() call decl LinkedMultiValueMap.remove() call decl LinkedMultiValueMap.remove() call decl LinkedMultiValueMap.remove() != if call decl LinkedMultiValueMap.isEmpty() call decl LinkedMultiValueMap.isEmpty() call decl LinkedMultiValueMap.isEmpty() call decl LinkedMultiValueMap.isEmpty() call decl LinkedMultiValueMap.isEmpty() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() else call decl LinkedMultiValueMap.deepCopy() call decl LinkedMultiValueMap.deepCopy() call decl LinkedMultiValueMap.deepCopy() call decl LinkedMultiValueMap.deepCopy() call decl LinkedMultiValueMap.deepCopy() for : public public return + + public public return public < public < return SessionSubscriptionInfo SessionSubscriptionInfo public public decl_stmt SessionSubscriptionInfo = if == = new decl_stmt SessionSubscriptionInfo = if != = call SessionSubscriptionInfo.addSubscription() call SessionSubscriptionInfo.addSubscription() call SessionSubscriptionInfo.addSubscription() call SessionSubscriptionInfo.addSubscription() call SessionSubscriptionInfo.addSubscription() return public public return public public return + + public public return public < public < return public < public < return decl Set public public for : decl_stmt java.util.Set < = if != for : if return return decl Set public public decl_stmt java.util.Set < = if == synchronized = if == = new < call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() new decl Set public public for : decl_stmt java.util.Set < = if != for : if && call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() synchronized if call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() return return public public return + + + + public public return public public return public public return + + public < public < return new < public public return MessageHeaders SimpMessageHeaderAccessor Object public public throws decl_stmt org.springframework.messaging.MessageHeaders = decl_stmt org.springframework.messaging.simp.SimpMessageHeaderAccessor = decl_stmt java.lang.Object if = call org.springframework.messaging.simp.SimpMessageHeaderAccessor.getDestination() call org.springframework.messaging.simp.SimpMessageHeaderAccessor.getDestination() call org.springframework.messaging.simp.SimpMessageHeaderAccessor.getDestination() call org.springframework.messaging.simp.SimpMessageHeaderAccessor.getDestination() call org.springframework.messaging.simp.SimpMessageHeaderAccessor.getDestination() else = call SimpMessageHeaderAccessor.getFirstNativeHeader() call SimpMessageHeaderAccessor.getFirstNativeHeader() call SimpMessageHeaderAccessor.getFirstNativeHeader() call SimpMessageHeaderAccessor.getFirstNativeHeader() call SimpMessageHeaderAccessor.getFirstNativeHeader() if == = call org.springframework.messaging.MessageHeaders.get(Object,Class) call org.springframework.messaging.MessageHeaders.get(Object,Class) call org.springframework.messaging.MessageHeaders.get(Object,Class) call org.springframework.messaging.MessageHeaders.get(Object,Class) call org.springframework.messaging.MessageHeaders.get(Object,Class) return new public public return public public