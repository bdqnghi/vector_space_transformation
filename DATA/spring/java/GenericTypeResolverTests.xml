org.springframework.core java.io.Serializable import java.lang.reflect.Method import java.lang.reflect.Type import java.lang.reflect.TypeVariable import java.util.Collection import java.util.HashMap import java.util.List import java.util.Map import org.junit.Test import static static org.hamcrest.Matchers.* import static static org.junit.Assert.* import static static org.springframework.core.GenericTypeResolver.* import static static org.springframework.util.ReflectionUtils.* import class annotation org.springframework.core.GenericTypeResolverTests public public public public public public public public decl GenericClass public public decl_stmt GenericClass < = new < call decl GenericClass.getClass() call decl GenericClass.getClass() call decl GenericClass.getClass() call decl GenericClass.getClass() call decl GenericClass.getClass() public public decl Map Method MethodParameter Method MethodParameter MethodParameter Method public public decl_stmt com.sun.jdi.Method = decl_stmt org.springframework.core.MethodParameter = new call org.springframework.core.MethodParameter.getGenericParameterType() call org.springframework.core.MethodParameter.getGenericParameterType() call org.springframework.core.MethodParameter.getGenericParameterType() call org.springframework.core.MethodParameter.getGenericParameterType() call org.springframework.core.MethodParameter.getGenericParameterType() new < decl_stmt com.sun.jdi.Method = decl_stmt org.springframework.core.MethodParameter = new call org.springframework.core.MethodParameter.getGenericParameterType() call org.springframework.core.MethodParameter.getGenericParameterType() call org.springframework.core.MethodParameter.getGenericParameterType() call org.springframework.core.MethodParameter.getGenericParameterType() call org.springframework.core.MethodParameter.getGenericParameterType() new < decl_stmt com.sun.jdi.Method = decl_stmt org.springframework.core.MethodParameter = new decl_stmt java.util.Map < = call org.springframework.core.MethodParameter.getGenericParameterType() call org.springframework.core.MethodParameter.getGenericParameterType() call org.springframework.core.MethodParameter.getGenericParameterType() call org.springframework.core.MethodParameter.getGenericParameterType() call org.springframework.core.MethodParameter.getGenericParameterType() public public decl Map Type Type public public throws decl_stmt java.util.Map < = call decl Map.toString() call decl Map.toString() call decl Map.toString() call decl Map.toString() call decl Map.toString() = call decl Map.toString() call decl Map.toString() call decl Map.toString() call decl Map.toString() call decl Map.toString() = call decl Map.toString() call decl Map.toString() call decl Map.toString() call decl Map.toString() call decl Map.toString() = call decl Map.toString() call decl Map.toString() call decl Map.toString() call decl Map.toString() call decl Map.toString() = call decl Map.toString() call decl Map.toString() call decl Map.toString() call decl Map.toString() call decl Map.toString() = call decl Map.toString() call decl Map.toString() call decl Map.toString() call decl Map.toString() call decl Map.toString() = call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() decl_stmt org.springframework.asm.Type = decl_stmt org.springframework.asm.Type = for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() if = else = public public throws public public throws decl Class MethodParameter public public throws decl_stmt org.springframework.core.MethodParameter = decl_stmt java.lang.Class < = < decl Class public public throws decl_stmt java.lang.Class < = < public public public < public < return public public return public public return public public return public public return public public return public static < public static < return public static < public static < return public static < public static < < return public static < public static < < return public static < extends extends public static < extends extends < return public static < public static < < return public static < public static < < return public public < public public < public public