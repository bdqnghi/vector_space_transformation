org.springframework.web.socket.sockjs.client java.net.URI import java.security.Principal import java.util.ArrayList import java.util.Date import java.util.List import java.util.concurrent.atomic.AtomicBoolean import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.http.HttpHeaders import org.springframework.scheduling.TaskScheduler import org.springframework.util.Assert import org.springframework.util.concurrent.ListenableFutureCallback import org.springframework.util.concurrent.SettableListenableFuture import org.springframework.web.socket.WebSocketHandler import org.springframework.web.socket.WebSocketSession import org.springframework.web.socket.sockjs.SockJsTransportFailureException import org.springframework.web.socket.sockjs.frame.SockJsMessageCodec import org.springframework.web.socket.sockjs.transport.TransportType import class org.springframework.web.socket.sockjs.client.DefaultTransportRequest super super implements SockJsUrlInfo DefaultTransportRequest TransportType decl List SockJsMessageCodec HttpHeaders HttpHeaders TaskScheduler Log long Transport Principal public public return public public return public public return public public return public public = public public return public public return public public = public public = public public public public = ConnectCallback public public < if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + decl_stmt ConnectCallback = new Date private private if != if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + + decl_stmt java.util.Date = new + else if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() public public return + + public public if else if call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + public public public public String private private if if decl_stmt java.lang.String = + call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() = new if != call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + call org.springframework.web.socket.sockjs.client.DefaultTransportRequest.connect(WebSocketHandler,SettableListenableFuture) call org.springframework.web.socket.sockjs.client.DefaultTransportRequest.connect(WebSocketHandler,SettableListenableFuture) call org.springframework.web.socket.sockjs.client.DefaultTransportRequest.connect(WebSocketHandler,SettableListenableFuture) call org.springframework.web.socket.sockjs.client.DefaultTransportRequest.connect(WebSocketHandler,SettableListenableFuture) call org.springframework.web.socket.sockjs.client.DefaultTransportRequest.connect(WebSocketHandler,SettableListenableFuture) else call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + if try for : catch call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + else call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + +