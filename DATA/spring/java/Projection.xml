org.springframework.expression.spel.ast java.lang.reflect.Array import java.util.ArrayList import java.util.Arrays import java.util.List import java.util.Map import org.springframework.expression.EvaluationException import org.springframework.expression.TypedValue import org.springframework.expression.spel.ExpressionState import org.springframework.expression.spel.SpelEvaluationException import org.springframework.expression.spel.SpelMessage import org.springframework.util.ClassUtils import org.springframework.util.ObjectUtils import class org.springframework.expression.spel.ast.Projection super super extends boolean public public throws return boolean decl Map int decl Class Object Object decl List Object decl Iterable TypedValue protected protected throws decl_stmt org.springframework.expression.TypedValue = decl_stmt java.lang.Object = call TypedValue.getValue() call TypedValue.getValue() call TypedValue.getValue() call TypedValue.getValue() call TypedValue.getValue() decl_stmt boolean = if instanceof decl_stmt java.util.Map < = < decl_stmt java.util.List < = new < for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() try new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() finally return new new if instanceof || decl_stmt java.lang.Iterable < = instanceof < : decl_stmt java.util.List < = new < decl_stmt int = decl_stmt java.lang.Class < = for : try new decl_stmt java.lang.Object = if != && = call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() finally ++ if if == = decl_stmt java.lang.Object = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() return new new return new new if == if return throw new throw new call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() public public return + + decl Class private < private < < < if == return if return decl_stmt java.lang.Class < = while != if call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() return = call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() if == return if return decl_stmt java.lang.Class < = while != if call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() return = call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() for < : if return return