org.springframework.jca.endpoint javax.resource.ResourceException import javax.resource.spi.UnavailableException import javax.resource.spi.endpoint.MessageEndpoint import javax.transaction.xa.XAResource import org.aopalliance.intercept.MethodInterceptor import org.aopalliance.intercept.MethodInvocation import org.springframework.aop.framework.ProxyFactory import org.springframework.aop.support.DelegatingIntroductionInterceptor import org.springframework.util.ReflectionUtils import class org.springframework.jca.endpoint.GenericMessageEndpointFactory super super extends Object public public = DelegatingIntroductionInterceptor GenericMessageEndpoint ProxyFactory public public throws decl_stmt GenericMessageEndpoint = decl_stmt org.springframework.aop.framework.ProxyFactory = new decl_stmt org.springframework.aop.support.DelegatingIntroductionInterceptor = new call DelegatingIntroductionInterceptor.suppressInterface() call DelegatingIntroductionInterceptor.suppressInterface() call DelegatingIntroductionInterceptor.suppressInterface() call DelegatingIntroductionInterceptor.suppressInterface() call DelegatingIntroductionInterceptor.suppressInterface() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() return call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) protected protected throws return new boolean public public throws decl_stmt boolean = ! if try catch if throw else throw new try return catch throw finally if try catch if throw else throw new protected protected return call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass()