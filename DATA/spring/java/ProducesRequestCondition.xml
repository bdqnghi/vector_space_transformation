org.springframework.web.servlet.mvc.condition java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.Iterator import java.util.LinkedHashSet import java.util.List import java.util.Set import javax.servlet.http.HttpServletRequest import org.springframework.http.MediaType import org.springframework.web.HttpMediaTypeNotAcceptableException import org.springframework.web.accept.ContentNegotiationManager import org.springframework.web.bind.annotation.RequestMapping import org.springframework.web.context.request.ServletWebRequest import org.springframework.web.cors.CorsUtils import org.springframework.web.servlet.mvc.condition.HeadersRequestCondition.HeaderExpression import class org.springframework.web.servlet.mvc.condition.ProducesRequestCondition super super extends decl List ProducesRequestCondition decl List ContentNegotiationManager HeaderExpression decl Set private < private < decl_stmt java.util.Set < = new < if != for : decl_stmt HeaderExpression = new if for : call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() new if != for : call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() new return public < public < return new < decl Set public < public < decl_stmt java.util.Set < = new < for : if ! call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return public public return protected < protected < return protected protected return public public return ! : ProduceMediaTypeExpression decl Set public public if return if return decl_stmt java.util.Set < = new < for < = call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() decl_stmt ProduceMediaTypeExpression = if ! call ProduceMediaTypeExpression.match() call ProduceMediaTypeExpression.match() call ProduceMediaTypeExpression.match() call ProduceMediaTypeExpression.match() call ProduceMediaTypeExpression.match() return call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() : new int int int decl List public public try decl_stmt java.util.List < = for : decl_stmt int = decl_stmt int = decl_stmt int = if != return = = = if != return return catch throw new decl List private < private < throws decl_stmt java.util.List < = new return call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() : MediaType private private for = < ++ decl_stmt org.springframework.http.MediaType = if call MediaType.getType() call MediaType.getType() call MediaType.getType() call MediaType.getType() call MediaType.getType() && call MediaType.getSubtype() call MediaType.getSubtype() call MediaType.getSubtype() call MediaType.getSubtype() call MediaType.getSubtype() return return - private private for = < ++ if return return - ProduceMediaTypeExpression ProduceMediaTypeExpression int private private decl_stmt int = if != = - else if != - decl_stmt ProduceMediaTypeExpression = decl_stmt ProduceMediaTypeExpression = = call ProduceMediaTypeExpression.compareTo() call ProduceMediaTypeExpression.compareTo() call ProduceMediaTypeExpression.compareTo() call ProduceMediaTypeExpression.compareTo() call ProduceMediaTypeExpression.compareTo() = != : call ProduceMediaTypeExpression.getMediaType() call ProduceMediaTypeExpression.getMediaType() call ProduceMediaTypeExpression.getMediaType() call ProduceMediaTypeExpression.getMediaType() call ProduceMediaTypeExpression.getMediaType() call ProduceMediaTypeExpression.getMediaType() call ProduceMediaTypeExpression.getMediaType() call ProduceMediaTypeExpression.getMediaType() call ProduceMediaTypeExpression.getMediaType() call ProduceMediaTypeExpression.getMediaType() return private < private < return : decl List protected protected throws decl_stmt java.util.List < = for : if return return