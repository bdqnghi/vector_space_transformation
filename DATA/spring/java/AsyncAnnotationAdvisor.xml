org.springframework.scheduling.annotation java.lang.annotation.Annotation import java.util.HashSet import java.util.LinkedHashSet import java.util.Set import java.util.concurrent.Executor import org.aopalliance.aop.Advice import org.springframework.aop.Pointcut import org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler import org.springframework.aop.interceptor.SimpleAsyncUncaughtExceptionHandler import org.springframework.aop.support.AbstractPointcutAdvisor import org.springframework.aop.support.ComposablePointcut import org.springframework.aop.support.annotation.AnnotationMatchingPointcut import org.springframework.beans.factory.BeanFactory import org.springframework.beans.factory.BeanFactoryAware import org.springframework.util.Assert import org.springframework.util.ClassUtils import class annotation org.springframework.scheduling.annotation.AsyncAnnotationAdvisor super super extends super implements Advice Pointcut AsyncUncaughtExceptionHandler public public = decl Set public public < extends extends decl_stmt java.util.Set < < extends extends = new < < extends extends call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() = public public if instanceof public public return public public return protected protected return new Pointcut ComposablePointcut Pointcut protected protected < < extends extends decl_stmt org.springframework.aop.support.ComposablePointcut = for < extends extends : decl_stmt org.springframework.aop.Pointcut = new decl_stmt org.springframework.aop.Pointcut = if == = new else call org.springframework.aop.support.ComposablePointcut.union(MethodMatcher) call org.springframework.aop.support.ComposablePointcut.union(MethodMatcher) call org.springframework.aop.support.ComposablePointcut.union(MethodMatcher) call org.springframework.aop.support.ComposablePointcut.union(MethodMatcher) call org.springframework.aop.support.ComposablePointcut.union(MethodMatcher) return