org.springframework.messaging.handler.annotation.support java.lang.reflect.Method import java.util.ArrayList import java.util.Arrays import java.util.HashMap import java.util.List import java.util.Map import org.springframework.core.MethodIntrospector import org.springframework.core.annotation.AnnotationUtils import org.springframework.messaging.handler.annotation.MessageExceptionHandler import org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver import org.springframework.util.ReflectionUtils.MethodFilter import class org.springframework.messaging.handler.annotation.support.AnnotationExceptionHandlerMethodResolver super super extends MethodFilter Method Method decl List decl Map decl Map private static < < extends extends private static < < extends extends < decl_stmt java.util.Map < = new < public public return decl_stmt java.util.Map < < extends extends = new < < extends extends for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt com.sun.jdi.Method = decl_stmt java.util.List < < extends extends = new < < extends extends call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() for < extends extends : decl_stmt com.sun.jdi.Method = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if != && ! call com.sun.jdi.Method.equals(Object) call com.sun.jdi.Method.equals(Object) call com.sun.jdi.Method.equals(Object) call com.sun.jdi.Method.equals(Object) call com.sun.jdi.Method.equals(Object) throw new + + + + + + return public public return public public return !=