org.springframework.context.annotation.scope org.junit.After import org.junit.Before import org.junit.Test import org.springframework.aop.support.AopUtils import org.springframework.context.ApplicationContext import org.springframework.context.annotation.ClassPathBeanDefinitionScanner import org.springframework.context.annotation.ScopedProxyMode import org.springframework.mock.web.MockHttpServletRequest import org.springframework.mock.web.MockHttpSession import org.springframework.stereotype.Component import org.springframework.web.context.annotation.RequestScope import org.springframework.web.context.annotation.SessionScope import org.springframework.web.context.request.RequestContextHolder import org.springframework.web.context.request.ServletRequestAttributes import org.springframework.web.context.support.GenericWebApplicationContext import static static org.junit.Assert.assertEquals import static static org.junit.Assert.assertFalse import static static org.junit.Assert.assertTrue import static static org.springframework.context.annotation.ScopedProxyMode.DEFAULT import static static org.springframework.context.annotation.ScopedProxyMode.INTERFACES import static static org.springframework.context.annotation.ScopedProxyMode.NO import static static org.springframework.context.annotation.ScopedProxyMode.TARGET_CLASS import class org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests ServletRequestAttributes String ServletRequestAttributes ServletRequestAttributes String ServletRequestAttributes MockHttpServletRequest MockHttpServletRequest public public decl_stmt org.springframework.mock.web.MockHttpServletRequest = new call org.springframework.mock.web.MockHttpServletRequest.setSession(HttpSession) call org.springframework.mock.web.MockHttpServletRequest.setSession(HttpSession) call org.springframework.mock.web.MockHttpServletRequest.setSession(HttpSession) call org.springframework.mock.web.MockHttpServletRequest.setSession(HttpSession) call org.springframework.mock.web.MockHttpServletRequest.setSession(HttpSession) new = new decl_stmt org.springframework.mock.web.MockHttpServletRequest = new call org.springframework.mock.web.MockHttpServletRequest.setSession(HttpSession) call org.springframework.mock.web.MockHttpServletRequest.setSession(HttpSession) call org.springframework.mock.web.MockHttpServletRequest.setSession(HttpSession) call org.springframework.mock.web.MockHttpServletRequest.setSession(HttpSession) call org.springframework.mock.web.MockHttpServletRequest.setSession(HttpSession) new = new public public throws ScopedTestBean ScopedTestBean ApplicationContext public public decl_stmt org.springframework.context.ApplicationContext = decl_stmt ScopedTestBean = call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.setName() call ScopedTestBean.setName() call ScopedTestBean.setName() call ScopedTestBean.setName() call ScopedTestBean.setName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() decl_stmt ScopedTestBean = call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() ScopedTestBean ScopedTestBean ApplicationContext public public decl_stmt org.springframework.context.ApplicationContext = decl_stmt ScopedTestBean = call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.setName() call ScopedTestBean.setName() call ScopedTestBean.setName() call ScopedTestBean.setName() call ScopedTestBean.setName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() decl_stmt ScopedTestBean = call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() ScopedTestBean ScopedTestBean ApplicationContext public public decl_stmt org.springframework.context.ApplicationContext = decl_stmt ScopedTestBean = call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.setName() call ScopedTestBean.setName() call ScopedTestBean.setName() call ScopedTestBean.setName() call ScopedTestBean.setName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() decl_stmt ScopedTestBean = call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() ScopedTestBean ScopedTestBean ApplicationContext public public decl_stmt org.springframework.context.ApplicationContext = decl_stmt ScopedTestBean = call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.setName() call ScopedTestBean.setName() call ScopedTestBean.setName() call ScopedTestBean.setName() call ScopedTestBean.setName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() decl_stmt ScopedTestBean = call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() IScopedTestBean ApplicationContext public public decl_stmt org.springframework.context.ApplicationContext = decl_stmt org.springframework.context.annotation.scope.IScopedTestBean = call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() instanceof call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() IScopedTestBean ApplicationContext public public decl_stmt org.springframework.context.ApplicationContext = decl_stmt org.springframework.context.annotation.scope.IScopedTestBean = call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() instanceof call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() ScopedTestBean ScopedTestBean ApplicationContext public public decl_stmt org.springframework.context.ApplicationContext = decl_stmt ScopedTestBean = call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.setName() call ScopedTestBean.setName() call ScopedTestBean.setName() call ScopedTestBean.setName() call ScopedTestBean.setName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() decl_stmt ScopedTestBean = call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() call ScopedTestBean.getName() IScopedTestBean IScopedTestBean ApplicationContext public public decl_stmt org.springframework.context.ApplicationContext = decl_stmt org.springframework.context.annotation.scope.IScopedTestBean = call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() instanceof call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) decl_stmt org.springframework.context.annotation.scope.IScopedTestBean = call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() IScopedTestBean IScopedTestBean ApplicationContext public public decl_stmt org.springframework.context.ApplicationContext = decl_stmt org.springframework.context.annotation.scope.IScopedTestBean = call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() instanceof instanceof call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) decl_stmt org.springframework.context.annotation.scope.IScopedTestBean = call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.setName(String) call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() call org.springframework.context.annotation.scope.IScopedTestBean.getName() ClassPathBeanDefinitionScanner GenericWebApplicationContext private private decl_stmt org.springframework.web.context.support.GenericWebApplicationContext = new decl_stmt org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setIncludeAnnotationConfig(boolean) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setIncludeAnnotationConfig(boolean) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setIncludeAnnotationConfig(boolean) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setIncludeAnnotationConfig(boolean) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setIncludeAnnotationConfig(boolean) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setBeanNameGenerator(BeanNameGenerator) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setBeanNameGenerator(BeanNameGenerator) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setBeanNameGenerator(BeanNameGenerator) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setBeanNameGenerator(BeanNameGenerator) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setBeanNameGenerator(BeanNameGenerator) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setScopedProxyMode(ScopedProxyMode) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setScopedProxyMode(ScopedProxyMode) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setScopedProxyMode(ScopedProxyMode) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setScopedProxyMode(ScopedProxyMode) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setScopedProxyMode(ScopedProxyMode) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.scan(String) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.scan(String) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.scan(String) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.scan(String) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.scan(String) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.scan(String) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.scan(String) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.scan(String) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.scan(String) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.scan(String) call GenericWebApplicationContext.refresh() call GenericWebApplicationContext.refresh() call GenericWebApplicationContext.refresh() call GenericWebApplicationContext.refresh() call GenericWebApplicationContext.refresh() return public public return public public =