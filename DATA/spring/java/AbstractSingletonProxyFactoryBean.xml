org.springframework.aop.framework org.springframework.aop.TargetSource import org.springframework.aop.framework.adapter.AdvisorAdapterRegistry import org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry import org.springframework.aop.target.SingletonTargetSource import org.springframework.beans.factory.BeanClassLoaderAware import org.springframework.beans.factory.FactoryBean import org.springframework.beans.factory.FactoryBeanNotInitializedException import org.springframework.beans.factory.InitializingBean import org.springframework.util.ClassUtils import class annotation org.springframework.aop.framework.AbstractSingletonProxyFactoryBean super super extends super implements Object Object AdvisorAdapterRegistry ClassLoader decl Object decl Object public public = public public < = public public = public public = public public = public public = public public if == = TargetSource ProxyFactory public public if == throw new if instanceof throw new if == = decl_stmt org.springframework.aop.framework.ProxyFactory = new if != for : call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() if != for : call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.copyFrom() call ProxyFactory.copyFrom() call ProxyFactory.copyFrom() call ProxyFactory.copyFrom() call ProxyFactory.copyFrom() decl_stmt org.springframework.aop.TargetSource = call ProxyFactory.setTargetSource() call ProxyFactory.setTargetSource() call ProxyFactory.setTargetSource() call ProxyFactory.setTargetSource() call ProxyFactory.setTargetSource() if != call ProxyFactory.setInterfaces() call ProxyFactory.setInterfaces() call ProxyFactory.setInterfaces() call ProxyFactory.setInterfaces() call ProxyFactory.setInterfaces() else if ! call ProxyFactory.setInterfaces() call ProxyFactory.setInterfaces() call ProxyFactory.setInterfaces() call ProxyFactory.setInterfaces() call ProxyFactory.setInterfaces() call org.springframework.aop.TargetSource.getTargetClass() call org.springframework.aop.TargetSource.getTargetClass() call org.springframework.aop.TargetSource.getTargetClass() call org.springframework.aop.TargetSource.getTargetClass() call org.springframework.aop.TargetSource.getTargetClass() = call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) protected protected if instanceof return else return new protected protected public public if == throw new return public < public < if != return if != && == return if instanceof return if != return return public final public final return