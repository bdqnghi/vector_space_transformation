org.springframework.transaction.interceptor java.lang.reflect.Method import java.util.Properties import java.util.concurrent.ConcurrentHashMap import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.factory.BeanFactory import org.springframework.beans.factory.BeanFactoryAware import org.springframework.beans.factory.InitializingBean import org.springframework.beans.factory.annotation.BeanFactoryAnnotationUtils import org.springframework.core.NamedThreadLocal import org.springframework.transaction.NoTransactionException import org.springframework.transaction.PlatformTransactionManager import org.springframework.transaction.TransactionStatus import org.springframework.transaction.TransactionSystemException import org.springframework.transaction.support.CallbackPreferringPlatformTransactionManager import org.springframework.transaction.support.TransactionCallback import org.springframework.util.StringUtils import class org.springframework.transaction.interceptor.TransactionAspectSupport super super implements BeanFactory Object decl ThreadLocal TransactionAttributeSource Log String decl ConcurrentHashMap protected static protected static throws return call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() TransactionInfo public static public static throws decl_stmt TransactionInfo = if == || == throw new return public public = protected final protected final return public public if != public public return NameMatchTransactionAttributeSource public public decl_stmt org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource = new call org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource.setProperties(Properties) call org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource.setProperties(Properties) call org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource.setProperties(Properties) call org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource.setProperties(Properties) call org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource.setProperties(Properties) = public public = new public public = public public return public public = protected final protected final return public public if == && == throw new if == throw new + TransactionInfo String PlatformTransactionManager Object TransactionAttribute Object protected protected < final final throws decl_stmt org.springframework.transaction.interceptor.TransactionAttribute final final = decl_stmt org.springframework.transaction.PlatformTransactionManager final final = decl_stmt java.lang.String final final = if == || ! instanceof decl_stmt TransactionInfo = decl_stmt java.lang.Object = try = catch throw finally return else try decl_stmt java.lang.Object = new < public public decl_stmt TransactionInfo = try return catch if call TransactionAttribute.rollbackOn() call TransactionAttribute.rollbackOn() call TransactionAttribute.rollbackOn() call TransactionAttribute.rollbackOn() call TransactionAttribute.rollbackOn() if instanceof throw else throw new else return new finally if instanceof throw else return catch throw TransactionInfo public public decl_stmt TransactionInfo = try return catch if if instanceof throw else throw new else return new finally protected protected = String PlatformTransactionManager protected protected if == || == return decl_stmt java.lang.String = if return else if return else decl_stmt org.springframework.transaction.PlatformTransactionManager = if == = return PlatformTransactionManager private private decl_stmt org.springframework.transaction.PlatformTransactionManager = if == = return protected protected < return != : + + TransactionStatus protected protected final final if != && == = new public public return decl_stmt org.springframework.transaction.TransactionStatus = if != if != = else if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + return public public return TransactionInfo protected protected decl_stmt TransactionInfo = new if != if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + call TransactionInfo.getJoinpointIdentification() call TransactionInfo.getJoinpointIdentification() call TransactionInfo.getJoinpointIdentification() call TransactionInfo.getJoinpointIdentification() call TransactionInfo.getJoinpointIdentification() + call TransactionInfo.newTransactionStatus() call TransactionInfo.newTransactionStatus() call TransactionInfo.newTransactionStatus() call TransactionInfo.newTransactionStatus() call TransactionInfo.newTransactionStatus() else if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + + call TransactionInfo.bindToThread() call TransactionInfo.bindToThread() call TransactionInfo.bindToThread() call TransactionInfo.bindToThread() call TransactionInfo.bindToThread() return protected protected if != && if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + + protected protected if != && if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + + + if try catch call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() throw catch call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() throw catch call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() throw else try catch call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() throw catch call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() throw catch call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() throw protected protected if != public public return public public return public public return public public = public public return public public return != private private = call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() private private call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() public public return public final public final return public public return