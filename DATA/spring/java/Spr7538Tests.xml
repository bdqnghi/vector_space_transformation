org.springframework.expression.spel.support java.lang.reflect.Method import java.util.ArrayList import java.util.List import org.junit.Ignore import org.junit.Test import org.springframework.core.MethodParameter import org.springframework.core.convert.TypeDescriptor import org.springframework.expression.MethodExecutor import class org.springframework.expression.spel.support.Spr7538Tests Object AlwaysTrueReleaseStrategy decl List MethodExecutor ReflectiveMethodResolver decl List StandardEvaluationContext BeanFactoryTypeConverter Method decl List public public throws decl_stmt AlwaysTrueReleaseStrategy = new decl_stmt org.springframework.expression.spel.support.BeanFactoryTypeConverter = new decl_stmt org.springframework.expression.spel.support.StandardEvaluationContext = new call org.springframework.expression.spel.support.StandardEvaluationContext.setTypeConverter(TypeConverter) call org.springframework.expression.spel.support.StandardEvaluationContext.setTypeConverter(TypeConverter) call org.springframework.expression.spel.support.StandardEvaluationContext.setTypeConverter(TypeConverter) call org.springframework.expression.spel.support.StandardEvaluationContext.setTypeConverter(TypeConverter) call org.springframework.expression.spel.support.StandardEvaluationContext.setTypeConverter(TypeConverter) decl_stmt java.util.List < = new < decl_stmt java.util.List < = new < decl_stmt com.sun.jdi.Method = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new new decl_stmt java.util.List < = new < call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt org.springframework.expression.spel.support.ReflectiveMethodResolver = new decl_stmt org.springframework.expression.MethodExecutor = call ReflectiveMethodResolver.resolve() call ReflectiveMethodResolver.resolve() call ReflectiveMethodResolver.resolve() call ReflectiveMethodResolver.resolve() call ReflectiveMethodResolver.resolve() decl_stmt java.lang.Object = call MethodExecutor.execute() call MethodExecutor.execute() call MethodExecutor.execute() call MethodExecutor.execute() call MethodExecutor.execute() + public public < return