org.springframework.aop.aspectj java.lang.annotation.Annotation import java.lang.reflect.Constructor import java.lang.reflect.Method import java.util.ArrayList import java.util.HashSet import java.util.List import java.util.Set import org.aspectj.lang.JoinPoint import org.aspectj.lang.ProceedingJoinPoint import org.aspectj.weaver.tools.PointcutParser import org.aspectj.weaver.tools.PointcutPrimitive import org.springframework.core.ParameterNameDiscoverer import org.springframework.util.StringUtils import class org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer super super implements int int int int decl Set decl String decl Set int String String String int String int int String boolean int public public = public public = public public = int int public public = = = new decl_stmt int = if != ++ if != ++ if < throw new try decl_stmt int = while > && < switch ++ case if ! break case break case break case break case break case break case break default: throw new + - catch if throw else return catch if throw else return if == return else if throw new + + else return public public < if throw new else return private private = -- private private if == || == return else return private private if == int private private if == return decl_stmt int = - for = < ++ if && if == - = else throw new + + + + + if == - throw new + + else private private if == throw new if != if > throw new + + + + for = < ++ if == break PointcutBody String String decl String decl List int private private decl_stmt java.util.List < = new < decl_stmt java.lang.String = for = < ++ decl_stmt java.lang.String = decl_stmt int = call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) if != - = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() decl_stmt PointcutBody = += decl_stmt java.lang.String = if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else if || decl_stmt PointcutBody = += int private private < if ! decl_stmt int = if > throw new + + + + else if == if == else throw new + + + else decl char private private if == || return if && decl_stmt char = for : if ! return return else return decl String String private private < if == return decl_stmt java.lang.String = for = < ++ = decl_stmt java.lang.String = if != decl String decl List decl List PointcutBody String private private if > throw new + + decl_stmt java.util.List < = new < decl_stmt java.lang.String = for = < ++ if || || || decl_stmt PointcutBody = += decl_stmt java.lang.String = if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else if || decl_stmt PointcutBody = += decl_stmt java.util.List < = new < for : if ! call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > throw new + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + else if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == for = < ++ if call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() break PointcutBody String int decl String decl List String String private private if > throw new + + decl_stmt java.util.List < = new < decl_stmt java.lang.String = for = < ++ decl_stmt java.lang.String = if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) decl_stmt int = call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) if != - = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) else if < + continue else decl_stmt java.lang.String = + if call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) != continue decl_stmt PointcutBody = += if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() decl_stmt java.lang.String = if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > throw new + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + else if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == for = < ++ if call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() break StringBuilder int String int String int private private decl_stmt int = decl_stmt java.lang.String = decl_stmt int = call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) if call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() - == return new call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) + call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() - else decl_stmt java.lang.StringBuilder = new if >= && != call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() - call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) + call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) ++ decl_stmt int = + while < if ++ continue if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) - return new call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl_stmt java.lang.String = if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) ++ ++ return new decl String decl List PointcutBody int private private decl_stmt int = if > throw new + + if == decl_stmt java.util.List < = new < decl_stmt java.lang.String = for = < ++ if || decl_stmt PointcutBody = += if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > throw new + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + else if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == for = < ++ if && call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() break private private return == private private for = < ++ if ! && return return private private < return int private private decl_stmt int = for = < ++ if && ++ return int private private decl_stmt int = for = < ++ if && ++ return private private < for = < ++ if && return throw new + +