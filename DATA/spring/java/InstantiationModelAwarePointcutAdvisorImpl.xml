org.springframework.aop.aspectj.annotation java.io.IOException import java.io.ObjectInputStream import java.io.Serializable import java.lang.reflect.Method import org.aopalliance.aop.Advice import org.aspectj.lang.reflect.PerClauseKind import org.springframework.aop.Pointcut import org.springframework.aop.aspectj.AspectJExpressionPointcut import org.springframework.aop.aspectj.AspectJPrecedenceInformation import org.springframework.aop.aspectj.InstantiationModelAwarePointcutAdvisor import org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory.AspectJAnnotation import org.springframework.aop.support.DynamicMethodMatcherPointcut import org.springframework.aop.support.Pointcuts import class annotation org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl super super implements Advice Boolean String int Boolean AspectJAdvisorFactory AspectJExpressionPointcut MetadataAwareAspectInstanceFactory boolean String Method Pointcut decl Class public public return public public return != public public return public synchronized public synchronized if == = return public public return public synchronized public synchronized return != private private return public public return public public return public public return public public return public public return public public if == return public public if == return decl AspectJAnnotation private private decl_stmt AspectJAnnotation < = if == = = else switch call decl AspectJAnnotation.getAnnotationType() call decl AspectJAnnotation.getAnnotationType() call decl AspectJAnnotation.getAnnotationType() call decl AspectJAnnotation.getAnnotationType() call decl AspectJAnnotation.getAnnotationType() case case case = = break case case = = break case = = public public return + + + + + private private throws try = catch throw new public public < return && || public public < return && private private return == ||