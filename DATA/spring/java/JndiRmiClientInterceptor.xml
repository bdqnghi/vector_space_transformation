org.springframework.remoting.rmi java.lang.reflect.InvocationTargetException import java.lang.reflect.Method import java.rmi.RemoteException import javax.naming.Context import javax.naming.NamingException import javax.rmi.PortableRemoteObject import org.aopalliance.intercept.MethodInterceptor import org.aopalliance.intercept.MethodInvocation import org.omg.CORBA.OBJECT_NOT_EXIST import org.omg.CORBA.SystemException import org.springframework.aop.support.AopUtils import org.springframework.beans.factory.InitializingBean import org.springframework.jndi.JndiObjectLocator import org.springframework.remoting.RemoteAccessException import org.springframework.remoting.RemoteConnectFailureException import org.springframework.remoting.RemoteInvocationFailureException import org.springframework.remoting.RemoteLookupFailureException import org.springframework.remoting.support.DefaultRemoteInvocationFactory import org.springframework.remoting.support.RemoteInvocation import org.springframework.remoting.support.RemoteInvocationFactory import org.springframework.util.ReflectionUtils import class org.springframework.remoting.rmi.JndiRmiClientInterceptor super super extends super implements boolean RemoteInvocationFactory Object boolean decl Class boolean Object boolean public public < if != && ! call decl Class.isInterface() call decl Class.isInterface() call decl Class.isInterface() call decl Class.isInterface() call decl Class.isInterface() throw new = public < public < return public public = public public return public public = public public = public public = public public = public public throws Object boolean public public throws if decl_stmt java.lang.Object = if if instanceof + + else if != decl_stmt boolean = + + + + + ! : + if = Object protected protected throws try decl_stmt java.lang.Object = if != && ! instanceof try = catch throw new + + return catch throw new + + protected protected throws if ! || && ! return != : else synchronized if == = return Object Context public public throws decl_stmt java.lang.Object try = catch throw new + + decl_stmt sun.tools.tree.Context = : try return catch return catch if return else throw catch if return else throw finally protected protected return protected protected return instanceof private private throws if if + + else if + + return else throw Object protected protected throws decl_stmt java.lang.Object synchronized = = if = return Throwable protected protected throws if instanceof try return catch throw catch throw catch throw catch throw new + + + + else try return catch decl_stmt java.lang.Throwable = if instanceof throw else if instanceof throw else throw protected protected throws if return + + return protected protected return private private return private private if return new + + else if return new + + else return new + +