org.springframework.beans.factory.support java.util.Collections import java.util.HashMap import java.util.HashSet import java.util.Iterator import java.util.LinkedHashMap import java.util.LinkedHashSet import java.util.Map import java.util.Set import java.util.concurrent.ConcurrentHashMap import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.factory.BeanCreationException import org.springframework.beans.factory.BeanCreationNotAllowedException import org.springframework.beans.factory.BeanCurrentlyInCreationException import org.springframework.beans.factory.DisposableBean import org.springframework.beans.factory.ObjectFactory import org.springframework.beans.factory.config.SingletonBeanRegistry import org.springframework.core.SimpleAliasRegistry import org.springframework.util.Assert import org.springframework.util.StringUtils import class org.springframework.beans.factory.support.DefaultSingletonBeanRegistry super super extends super implements decl Map decl Map decl Map decl Set decl Set boolean Object decl Map decl Map decl Set Log decl Set decl Map decl Map Object public public throws synchronized decl_stmt java.lang.Object = if != throw new + + + + + + protected protected synchronized != : protected protected < synchronized if ! public public return decl ObjectFactory Object protected protected decl_stmt java.lang.Object = if == && synchronized = if == && decl_stmt org.springframework.beans.factory.ObjectFactory < = if != = call decl ObjectFactory.getObject() call decl ObjectFactory.getObject() call decl ObjectFactory.getObject() call decl ObjectFactory.getObject() call decl ObjectFactory.getObject() return != : boolean Object boolean public public < synchronized decl_stmt java.lang.Object = if == if throw new + if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + decl_stmt boolean = decl_stmt boolean = == if = new < try = = catch = if == throw catch if for : throw finally if = if return != : protected protected synchronized if != protected protected synchronized public public return public public synchronized return public public synchronized return public public if ! else public public return ! && protected protected return public public return protected protected if ! && ! throw new protected protected if ! && ! throw new + + public public synchronized decl Set public public decl_stmt java.util.Set < = if != && call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() return synchronized = if == = new < call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl Set decl Set String public public decl_stmt java.lang.String = decl_stmt java.util.Set < = if != && call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() return synchronized = if == = new < call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() synchronized decl_stmt java.util.Set < = if == = new < call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() protected protected return decl Set String private private < decl_stmt java.lang.String = if != && return decl_stmt java.util.Set < = if == return if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() return for : if == = new < if return return protected protected return decl Set public public decl_stmt java.util.Set < = if == return new return decl Set public public decl_stmt java.util.Set < = if == return new return call decl Set.toArray() call decl Set.toArray() call decl Set.toArray() call decl Set.toArray() call decl Set.toArray() new call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() decl String public public if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + synchronized = decl_stmt java.lang.String synchronized = for = - >= -- synchronized = DisposableBean public public decl_stmt org.springframework.beans.factory.DisposableBean synchronized = decl Map decl Set decl Set decl Set protected protected decl_stmt java.util.Set < = if != if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + for : if != try catch call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + + decl_stmt java.util.Set < = if != for : synchronized for < < < = decl_stmt java.util.Map < < = decl_stmt java.util.Set < = call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() if call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() public final public final return