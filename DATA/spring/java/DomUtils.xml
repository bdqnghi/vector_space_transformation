org.springframework.util.xml java.util.ArrayList import java.util.Arrays import java.util.Collection import java.util.List import org.w3c.dom.CharacterData import org.w3c.dom.Comment import org.w3c.dom.Element import org.w3c.dom.EntityReference import org.w3c.dom.Node import org.w3c.dom.NodeList import org.xml.sax.ContentHandler import org.springframework.util.Assert import class org.springframework.util.xml.DomUtils Node decl List decl List NodeList public static < public static < decl_stmt java.util.List < = decl_stmt NodeList = decl_stmt java.util.List < = new < for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt sun.tools.tree.Node = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() if instanceof && call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public static < public static < return new Node NodeList public static public static decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt sun.tools.tree.Node = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() if instanceof && return return Element public static public static decl_stmt javax.swing.text.Element = return != : Node decl List NodeList public static < public static < decl_stmt NodeList = decl_stmt java.util.List < = new < for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt sun.tools.tree.Node = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() if instanceof call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return StringBuilder NodeList Node public static public static decl_stmt java.lang.StringBuilder = new decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt sun.tools.tree.Node = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() if instanceof && ! instanceof || instanceof call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public static public static return public static public static return new private static private static return || private static private static < return ||