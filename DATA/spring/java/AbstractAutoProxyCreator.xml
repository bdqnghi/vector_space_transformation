org.springframework.aop.framework.autoproxy java.beans.PropertyDescriptor import java.lang.reflect.Constructor import java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.List import java.util.Map import java.util.Set import java.util.concurrent.ConcurrentHashMap import org.aopalliance.aop.Advice import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.aop.Advisor import org.springframework.aop.Pointcut import org.springframework.aop.TargetSource import org.springframework.aop.framework.AopInfrastructureBean import org.springframework.aop.framework.ProxyFactory import org.springframework.aop.framework.ProxyProcessorSupport import org.springframework.aop.framework.adapter.AdvisorAdapterRegistry import org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry import org.springframework.aop.target.SingletonTargetSource import org.springframework.beans.BeansException import org.springframework.beans.PropertyValues import org.springframework.beans.factory.BeanFactory import org.springframework.beans.factory.BeanFactoryAware import org.springframework.beans.factory.FactoryBean import org.springframework.beans.factory.config.ConfigurableBeanFactory import org.springframework.beans.factory.config.ConfigurableListableBeanFactory import org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor import org.springframework.util.StringUtils import class annotation org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator super super extends super implements decl Map boolean decl Object decl Object decl Map BeanFactory decl TargetSourceCreator decl Set decl Set AdvisorAdapterRegistry Log decl String boolean public public = public public return public public = public public = public public = public public = public public = protected protected return Object public < public < < if return decl_stmt java.lang.Object = return public < public < < throws return Object public public throws decl_stmt java.lang.Object = if ! return TargetSource Object decl Object Object public public < throws decl_stmt java.lang.Object = if == || ! if return if || return if != decl_stmt org.springframework.aop.TargetSource = if != decl_stmt java.lang.Object = decl_stmt java.lang.Object = call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() return return public public return public public return public public return Object public public throws if != decl_stmt java.lang.Object = if ! return return protected protected < if return + : else return decl Object Object protected protected if != && return if return if || return decl_stmt java.lang.Object = if != decl_stmt java.lang.Object = new call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() return return boolean protected protected < decl_stmt boolean = || || || if && call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + + return protected protected < return TargetSource protected protected < if != && != && for : decl_stmt org.springframework.aop.TargetSource = if != if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + + return return decl Advisor ProxyFactory protected protected < if instanceof decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.copyFrom() call ProxyFactory.copyFrom() call ProxyFactory.copyFrom() call ProxyFactory.copyFrom() call ProxyFactory.copyFrom() if ! call ProxyFactory.isProxyTargetClass() call ProxyFactory.isProxyTargetClass() call ProxyFactory.isProxyTargetClass() call ProxyFactory.isProxyTargetClass() call ProxyFactory.isProxyTargetClass() if call ProxyFactory.setProxyTargetClass() call ProxyFactory.setProxyTargetClass() call ProxyFactory.setProxyTargetClass() call ProxyFactory.setProxyTargetClass() call ProxyFactory.setProxyTargetClass() else decl_stmt org.springframework.aop.Advisor = for : call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.setTargetSource() call ProxyFactory.setTargetSource() call ProxyFactory.setTargetSource() call ProxyFactory.setTargetSource() call ProxyFactory.setTargetSource() call ProxyFactory.setFrozen() call ProxyFactory.setFrozen() call ProxyFactory.setFrozen() call ProxyFactory.setFrozen() call ProxyFactory.setFrozen() if call ProxyFactory.setPreFiltered() call ProxyFactory.setPreFiltered() call ProxyFactory.setPreFiltered() call ProxyFactory.setPreFiltered() call ProxyFactory.setPreFiltered() return call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) protected protected < return instanceof && protected protected return decl Advisor decl Advisor int decl List int protected protected decl_stmt org.springframework.aop.Advisor = decl_stmt java.util.List < = new < if != call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() if > if call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() else call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() decl_stmt int = decl_stmt int = != : call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + + + + decl_stmt org.springframework.aop.Advisor = new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() return decl List ConfigurableBeanFactory Object private private decl_stmt org.springframework.beans.factory.config.ConfigurableBeanFactory = instanceof : decl_stmt java.util.List < = new < for : if == || ! call org.springframework.beans.factory.config.ConfigurableBeanFactory.isCurrentlyInCreation(String) call org.springframework.beans.factory.config.ConfigurableBeanFactory.isCurrentlyInCreation(String) call org.springframework.beans.factory.config.ConfigurableBeanFactory.isCurrentlyInCreation(String) call org.springframework.beans.factory.config.ConfigurableBeanFactory.isCurrentlyInCreation(String) call org.springframework.beans.factory.config.ConfigurableBeanFactory.isCurrentlyInCreation(String) decl_stmt java.lang.Object = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() protected protected