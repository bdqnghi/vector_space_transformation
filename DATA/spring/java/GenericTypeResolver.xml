org.springframework.core java.lang.reflect.Method import java.lang.reflect.ParameterizedType import java.lang.reflect.Type import java.lang.reflect.TypeVariable import java.lang.reflect.WildcardType import java.util.Collections import java.util.HashMap import java.util.Map import org.springframework.util.Assert import org.springframework.util.ConcurrentReferenceHashMap import class org.springframework.core.GenericTypeResolver decl Map public static public static return public static < public static < < return public static < public static < < return ParameterizedType Type Object boolean decl Type decl Type Type public static < public static < decl_stmt org.springframework.asm.Type = decl_stmt org.springframework.asm.Type = if == return if < return decl_stmt boolean = for < : if = break if for = < ++ decl_stmt org.springframework.asm.Type = if call ParameterizedType.equals() call ParameterizedType.equals() call ParameterizedType.equals() call ParameterizedType.equals() call ParameterizedType.equals() return if instanceof decl_stmt java.lang.reflect.ParameterizedType = decl_stmt org.springframework.asm.Type = call decl Type.getActualTypeArguments() call decl Type.getActualTypeArguments() call decl Type.getActualTypeArguments() call decl Type.getActualTypeArguments() call decl Type.getActualTypeArguments() for : if decl_stmt java.lang.Object = if instanceof return < else if instanceof && != try return catch throw new + + else return return ResolvableType public static < public static < < decl_stmt org.springframework.core.ResolvableType = if ! call org.springframework.core.ResolvableType.hasGenerics() call org.springframework.core.ResolvableType.hasGenerics() call org.springframework.core.ResolvableType.hasGenerics() call org.springframework.core.ResolvableType.hasGenerics() call org.springframework.core.ResolvableType.hasGenerics() || call org.springframework.core.ResolvableType.getType() call org.springframework.core.ResolvableType.getType() call org.springframework.core.ResolvableType.getType() call org.springframework.core.ResolvableType.getType() call org.springframework.core.ResolvableType.getType() instanceof return return ResolvableType public static < public static < < < decl_stmt org.springframework.core.ResolvableType = if ! call org.springframework.core.ResolvableType.hasGenerics() call org.springframework.core.ResolvableType.hasGenerics() call org.springframework.core.ResolvableType.hasGenerics() call org.springframework.core.ResolvableType.hasGenerics() call org.springframework.core.ResolvableType.hasGenerics() return return private static < private static < if > throw new + + + return ResolvableType public static < public static < < < decl_stmt org.springframework.core.ResolvableType = if ! call org.springframework.core.ResolvableType.hasGenerics() call org.springframework.core.ResolvableType.hasGenerics() call org.springframework.core.ResolvableType.hasGenerics() call org.springframework.core.ResolvableType.hasGenerics() call org.springframework.core.ResolvableType.hasGenerics() || call org.springframework.core.ResolvableType.isEntirelyUnresolvable() call org.springframework.core.ResolvableType.isEntirelyUnresolvable() call org.springframework.core.ResolvableType.isEntirelyUnresolvable() call org.springframework.core.ResolvableType.isEntirelyUnresolvable() call org.springframework.core.ResolvableType.isEntirelyUnresolvable() return return call org.springframework.core.ResolvableType.resolveGenerics(Class) call org.springframework.core.ResolvableType.resolveGenerics(Class) call org.springframework.core.ResolvableType.resolveGenerics(Class) call org.springframework.core.ResolvableType.resolveGenerics(Class) call org.springframework.core.ResolvableType.resolveGenerics(Class) public static < public static < < return new decl Map public static < public static < < decl_stmt java.util.Map < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return ResolvableType private static private static < if != if instanceof for = < ++ decl_stmt org.springframework.core.ResolvableType = while instanceof < = if != for : if Type public public < decl_stmt org.springframework.asm.Type = return != : public public return