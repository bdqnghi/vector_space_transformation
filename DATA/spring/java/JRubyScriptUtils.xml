org.springframework.scripting.jruby java.lang.reflect.Array import java.lang.reflect.InvocationHandler import java.lang.reflect.Method import java.lang.reflect.Proxy import java.util.Collections import java.util.List import org.jruby.Ruby import org.jruby.RubyArray import org.jruby.RubyNil import org.jruby.ast.ClassNode import org.jruby.ast.Colon2Node import org.jruby.ast.NewlineNode import org.jruby.ast.Node import org.jruby.exceptions.JumpException import org.jruby.exceptions.RaiseException import org.jruby.javasupport.JavaEmbedUtils import org.jruby.runtime.builtin.IRubyObject import org.springframework.core.NestedRuntimeException import org.springframework.util.ClassUtils import org.springframework.util.ObjectUtils import org.springframework.util.ReflectionUtils import org.springframework.util.StringUtils import class annotation org.springframework.scripting.jruby.JRubyScriptUtils public static public static < throws return String Node Ruby IRubyObject public static public static < decl_stmt Ruby = decl_stmt sun.tools.tree.Node = call Ruby.parseEval() call Ruby.parseEval() call Ruby.parseEval() call Ruby.parseEval() call Ruby.parseEval() decl_stmt IRubyObject = call Ruby.runNormally() call Ruby.runNormally() call Ruby.runNormally() call Ruby.runNormally() call Ruby.runNormally() if instanceof decl_stmt java.lang.String = = call Ruby.evalScriptlet() call Ruby.evalScriptlet() call Ruby.evalScriptlet() call Ruby.evalScriptlet() call Ruby.evalScriptlet() + + if instanceof throw new + return new private static private static return Colon2Node ClassNode private static private static decl_stmt ClassNode = if == throw new + + decl_stmt Colon2Node = call ClassNode.getCPath() call ClassNode.getCPath() call ClassNode.getCPath() call ClassNode.getCPath() call ClassNode.getCPath() return call Colon2Node.getName() call Colon2Node.getName() call Colon2Node.getName() call Colon2Node.getName() call Colon2Node.getName() ClassNode decl List NewlineNode private static private static if == return if instanceof return decl_stmt java.util.List < = for : if instanceof return else if instanceof decl_stmt NewlineNode = decl_stmt ClassNode = call NewlineNode.getNextNode() call NewlineNode.getNextNode() call NewlineNode.getNextNode() call NewlineNode.getNextNode() call NewlineNode.getNextNode() if != return for : decl_stmt ClassNode = if != return return String IRubyObject decl IRubyObject public public throws if return else if return else if decl_stmt java.lang.String = if ! = return + + try decl_stmt IRubyObject = decl_stmt IRubyObject = return catch throw new InvocationHandler private private if ! return decl_stmt java.lang.reflect.InvocationHandler = return instanceof && decl IRubyObject private private if == || == return new decl_stmt IRubyObject = new for = < ++ = return Object private private < decl_stmt java.lang.Object = if instanceof && = return decl Class Object IRubyObject private private < decl_stmt java.lang.Class < = decl_stmt java.lang.Object = for = < ++ decl_stmt IRubyObject = return