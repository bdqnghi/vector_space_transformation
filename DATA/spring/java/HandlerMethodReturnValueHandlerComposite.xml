org.springframework.web.method.support java.util.ArrayList import java.util.Collections import java.util.List import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.core.MethodParameter import org.springframework.web.context.request.NativeWebRequest import class org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite super super implements decl List Log public < public < return public public return != private private for : if return return HandlerMethodReturnValueHandler public public throws decl_stmt org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler = if == throw new + call org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler.handleReturnValue(Object,MethodParameter,ModelAndViewContainer,NativeWebRequest) call org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler.handleReturnValue(Object,MethodParameter,ModelAndViewContainer,NativeWebRequest) call org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler.handleReturnValue(Object,MethodParameter,ModelAndViewContainer,NativeWebRequest) call org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler.handleReturnValue(Object,MethodParameter,ModelAndViewContainer,NativeWebRequest) call org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler.handleReturnValue(Object,MethodParameter,ModelAndViewContainer,NativeWebRequest) boolean private private decl_stmt boolean = for : if && ! instanceof continue if return return public public for : if instanceof if return return public public return public public < extends extends if != for : return