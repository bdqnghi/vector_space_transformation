org.springframework.messaging.simp.broker java.util.Collection import java.util.Collections import java.util.concurrent.atomic.AtomicBoolean import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.context.ApplicationEventPublisher import org.springframework.context.ApplicationEventPublisherAware import org.springframework.context.SmartLifecycle import org.springframework.messaging.Message import org.springframework.messaging.MessageChannel import org.springframework.messaging.MessageHandler import org.springframework.messaging.SubscribableChannel import org.springframework.messaging.simp.SimpMessageHeaderAccessor import org.springframework.messaging.simp.SimpMessageType import org.springframework.messaging.support.ChannelInterceptor import org.springframework.messaging.support.ChannelInterceptorAdapter import org.springframework.messaging.support.InterceptableChannel import org.springframework.util.Assert import org.springframework.util.CollectionUtils import class org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler super super implements AtomicBoolean SubscribableChannel Object decl Collection BrokerAvailabilityEvent ApplicationEventPublisher boolean boolean ChannelInterceptor SubscribableChannel Log BrokerAvailabilityEvent MessageChannel public public return public public return public public return public < public < return public public = public public return public public = public public return public public return public public synchronized if call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() if instanceof = call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() protected protected public public synchronized if call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() if instanceof = call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() protected protected public final public final synchronized public final public final synchronized return public public return public public < if ! if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + + return protected protected if == || return for : if return return boolean protected protected decl_stmt boolean = if != && if call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() boolean protected protected decl_stmt boolean = if != && if call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() SimpMessageType public public < if ! decl_stmt SimpMessageType = if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug()