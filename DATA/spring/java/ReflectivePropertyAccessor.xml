org.springframework.expression.spel.support java.lang.reflect.Array import java.lang.reflect.Field import java.lang.reflect.Member import java.lang.reflect.Method import java.lang.reflect.Modifier import java.util.Arrays import java.util.Collections import java.util.Comparator import java.util.HashSet import java.util.Map import java.util.Set import java.util.concurrent.ConcurrentHashMap import org.springframework.asm.MethodVisitor import org.springframework.core.MethodParameter import org.springframework.core.convert.Property import org.springframework.core.convert.TypeDescriptor import org.springframework.expression.AccessException import org.springframework.expression.EvaluationContext import org.springframework.expression.EvaluationException import org.springframework.expression.PropertyAccessor import org.springframework.expression.TypedValue import org.springframework.expression.spel.CodeFlow import org.springframework.expression.spel.CompilablePropertyAccessor import org.springframework.util.ReflectionUtils import org.springframework.util.StringUtils import class org.springframework.expression.spel.support.ReflectivePropertyAccessor super super implements decl Map decl Map decl Set decl Map InvokerPair decl Set public < public < return PropertyCacheKey TypeDescriptor Field Property decl Class Method public public throws if == return decl_stmt java.lang.Class < = instanceof < : if call decl Class.isArray() call decl Class.isArray() call decl Class.isArray() call decl Class.isArray() call decl Class.isArray() && return decl_stmt PropertyCacheKey = new instanceof if return decl_stmt com.sun.jdi.Method = if != decl_stmt org.springframework.core.convert.Property = new decl_stmt org.springframework.core.convert.TypeDescriptor = new new return else decl_stmt com.sun.jdi.Field = if != decl_stmt org.springframework.core.convert.TypeDescriptor = new new return return public public return PropertyCacheKey Object Method Field InvokerPair Property decl Class TypeDescriptor public public throws if == throw new decl_stmt java.lang.Class < = instanceof < : if call decl Class.isArray() call decl Class.isArray() call decl Class.isArray() call decl Class.isArray() call decl Class.isArray() && if instanceof throw new return new decl_stmt PropertyCacheKey = new instanceof decl_stmt InvokerPair = = if == || instanceof decl_stmt com.sun.jdi.Method = != : if == = if != decl_stmt org.springframework.core.convert.Property = new decl_stmt org.springframework.core.convert.TypeDescriptor = new = new = if != try decl_stmt java.lang.Object = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) return new call InvokerPair.typeDescriptor() call InvokerPair.typeDescriptor() call InvokerPair.typeDescriptor() call InvokerPair.typeDescriptor() call InvokerPair.typeDescriptor() call InvokerPair.typeDescriptor() call InvokerPair.typeDescriptor() call InvokerPair.typeDescriptor() call InvokerPair.typeDescriptor() catch throw new + + if == || instanceof decl_stmt com.sun.jdi.Field = == : if == = if != = new new = if != try decl_stmt java.lang.Object = call com.sun.jdi.Field.get(Object) call com.sun.jdi.Field.get(Object) call com.sun.jdi.Field.get(Object) call com.sun.jdi.Field.get(Object) call com.sun.jdi.Field.get(Object) return new call InvokerPair.typeDescriptor() call InvokerPair.typeDescriptor() call InvokerPair.typeDescriptor() call InvokerPair.typeDescriptor() call InvokerPair.typeDescriptor() call InvokerPair.typeDescriptor() call InvokerPair.typeDescriptor() call InvokerPair.typeDescriptor() call InvokerPair.typeDescriptor() catch throw new + + throw new + + PropertyCacheKey TypeDescriptor Field Property decl Class Method public public throws if == return decl_stmt java.lang.Class < = instanceof < : decl_stmt PropertyCacheKey = new instanceof if return decl_stmt com.sun.jdi.Method = if != decl_stmt org.springframework.core.convert.Property = new decl_stmt org.springframework.core.convert.TypeDescriptor = new return else decl_stmt com.sun.jdi.Field = if != new return return PropertyCacheKey Object TypeDescriptor Member Field decl Class Method public public throws if == throw new decl_stmt java.lang.Class < = instanceof < : decl_stmt java.lang.Object = decl_stmt org.springframework.core.convert.TypeDescriptor = if != try = catch throw new decl_stmt PropertyCacheKey = new instanceof decl_stmt java.lang.reflect.Member = if == || instanceof decl_stmt com.sun.jdi.Method = if == = if != = if != try call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) return catch throw new + + if == || instanceof decl_stmt com.sun.jdi.Field = if == = if != = if != try call com.sun.jdi.Field.set(Object,Object) call com.sun.jdi.Field.set(Object,Object) call com.sun.jdi.Field.set(Object,Object) call com.sun.jdi.Field.set(Object,Object) call com.sun.jdi.Field.set(Object,Object) return catch throw new + + throw new + + PropertyCacheKey decl Class TypeDescriptor private private if == return decl_stmt java.lang.Class < = instanceof < : if call decl Class.isArray() call decl Class.isArray() call decl Class.isArray() call decl Class.isArray() call decl Class.isArray() && return decl_stmt PropertyCacheKey = new instanceof decl_stmt org.springframework.core.convert.TypeDescriptor = if == try if = else if = catch return Method private private < decl_stmt com.sun.jdi.Method = instanceof if == && instanceof = return Method private private < decl_stmt com.sun.jdi.Method = instanceof if == && instanceof = return Field private private < decl_stmt com.sun.jdi.Field = instanceof if == && instanceof = return Method protected protected < decl_stmt com.sun.jdi.Method = if == = return protected protected < return decl Method private private < < < decl_stmt com.sun.jdi.Method = for : for : if + && == && ! || && || return return decl Method private private < decl_stmt com.sun.jdi.Method = new < public public return == : : - return public public return == : : - String protected protected decl_stmt java.lang.String = if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > && call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) return new return new protected protected if > && return return decl Field Field protected protected < decl_stmt com.sun.jdi.Field = for : if call com.sun.jdi.Field.getName() call com.sun.jdi.Field.getName() call com.sun.jdi.Field.getName() call com.sun.jdi.Field.getName() call com.sun.jdi.Field.getName() && ! || call com.sun.jdi.Field.getModifiers() call com.sun.jdi.Field.getModifiers() call com.sun.jdi.Field.getModifiers() call com.sun.jdi.Field.getModifiers() call com.sun.jdi.Field.getModifiers() return if != decl_stmt com.sun.jdi.Field = if != return for < : decl_stmt com.sun.jdi.Field = if != return return Field PropertyCacheKey decl Class InvokerPair Method public public if == return decl_stmt java.lang.Class < = instanceof < : if call decl Class.isArray() call decl Class.isArray() call decl Class.isArray() call decl Class.isArray() call decl Class.isArray() return decl_stmt PropertyCacheKey = new instanceof decl_stmt InvokerPair = if == || instanceof decl_stmt com.sun.jdi.Method = != : if == = if != = new new new - if != return new if == || instanceof decl_stmt com.sun.jdi.Field = != : if == = instanceof if != = new new if != return new return PropertyCacheKey public public if == return if ! instanceof return decl_stmt PropertyCacheKey = return == && && == public public return * + public public return + + + + + + + + int public public decl_stmt int = if == = return public < public < throw new Field decl Class Method String public public throws if == return decl_stmt java.lang.Class < = instanceof < : if call decl Class.isArray() call decl Class.isArray() call decl Class.isArray() call decl Class.isArray() call decl Class.isArray() return if instanceof decl_stmt com.sun.jdi.Method = decl_stmt java.lang.String = + if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call com.sun.jdi.Method.getName() call com.sun.jdi.Method.getName() call com.sun.jdi.Method.getName() call com.sun.jdi.Method.getName() call com.sun.jdi.Method.getName() return = + return call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call com.sun.jdi.Method.getName() call com.sun.jdi.Method.getName() call com.sun.jdi.Method.getName() call com.sun.jdi.Method.getName() call com.sun.jdi.Method.getName() else decl_stmt com.sun.jdi.Field = return call com.sun.jdi.Field.getName() call com.sun.jdi.Field.getName() call com.sun.jdi.Field.getName() call com.sun.jdi.Field.getName() call com.sun.jdi.Field.getName() Field Method Object public public throws if instanceof decl_stmt com.sun.jdi.Method = try if && ! call Method.isAccessible() call Method.isAccessible() call Method.isAccessible() call Method.isAccessible() call Method.isAccessible() call Method.setAccessible() call Method.setAccessible() call Method.setAccessible() call Method.setAccessible() call Method.setAccessible() decl_stmt java.lang.Object = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) return new catch throw new + + else decl_stmt com.sun.jdi.Field = try if && ! call Field.isAccessible() call Field.isAccessible() call Field.isAccessible() call Field.isAccessible() call Field.isAccessible() call Field.setAccessible() call Field.setAccessible() call Field.setAccessible() call Field.setAccessible() call Field.setAccessible() decl_stmt java.lang.Object = call com.sun.jdi.Field.get(Object) call com.sun.jdi.Field.get(Object) call com.sun.jdi.Field.get(Object) call com.sun.jdi.Field.get(Object) call com.sun.jdi.Field.get(Object) return new catch throw new + + public public throw new public public throw new public public return && public < public < if instanceof return else return String boolean String public public decl_stmt boolean = decl_stmt java.lang.String = decl_stmt java.lang.String = if ! if == if == || ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) else if != if instanceof : else :