org.springframework.web.client java.io.UnsupportedEncodingException import java.net.URI import java.net.URISyntaxException import java.nio.charset.Charset import java.util.ArrayList import java.util.EnumSet import java.util.List import java.util.Set import com.fasterxml.jackson.annotation.JsonTypeInfo import com.fasterxml.jackson.annotation.JsonTypeName import org.junit.Test import org.springframework.core.ParameterizedTypeReference import org.springframework.core.io.ClassPathResource import org.springframework.core.io.Resource import org.springframework.http.HttpEntity import org.springframework.http.HttpHeaders import org.springframework.http.HttpMethod import org.springframework.http.HttpStatus import org.springframework.http.MediaType import org.springframework.http.RequestEntity import org.springframework.http.ResponseEntity import org.springframework.http.client.HttpComponentsClientHttpRequestFactory import org.springframework.http.converter.json.MappingJacksonValue import org.springframework.util.LinkedMultiValueMap import org.springframework.util.MultiValueMap import com.fasterxml.jackson.annotation.JsonView import static static org.junit.Assert.* import class org.springframework.web.client.RestTemplateIntegrationTests super super extends RestTemplate String public public decl_stmt java.lang.String = call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) + decl ResponseEntity public public decl_stmt org.springframework.http.ResponseEntity < = call org.springframework.web.client.RestTemplate.getForEntity(String,Class,Map) call org.springframework.web.client.RestTemplate.getForEntity(String,Class,Map) call org.springframework.web.client.RestTemplate.getForEntity(String,Class,Map) call org.springframework.web.client.RestTemplate.getForEntity(String,Class,Map) call org.springframework.web.client.RestTemplate.getForEntity(String,Class,Map) + call decl ResponseEntity.getBody() call decl ResponseEntity.getBody() call decl ResponseEntity.getBody() call decl ResponseEntity.getBody() call decl ResponseEntity.getBody() call decl ResponseEntity.getHeaders() call decl ResponseEntity.getHeaders() call decl ResponseEntity.getHeaders() call decl ResponseEntity.getHeaders() call decl ResponseEntity.getHeaders() call decl ResponseEntity.getHeaders() call decl ResponseEntity.getHeaders() call decl ResponseEntity.getHeaders() call decl ResponseEntity.getHeaders() call decl ResponseEntity.getHeaders() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() String public public decl_stmt java.lang.String = call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) + decl byte public public throws decl_stmt byte = call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) + String decl ResponseEntity public public decl_stmt java.lang.String = call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) + decl_stmt org.springframework.http.ResponseEntity < = call org.springframework.web.client.RestTemplate.getForEntity(String,Class,Map) call org.springframework.web.client.RestTemplate.getForEntity(String,Class,Map) call org.springframework.web.client.RestTemplate.getForEntity(String,Class,Map) call org.springframework.web.client.RestTemplate.getForEntity(String,Class,Map) call org.springframework.web.client.RestTemplate.getForEntity(String,Class,Map) + call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getBody() call decl ResponseEntity.getBody() call decl ResponseEntity.getBody() call decl ResponseEntity.getBody() call decl ResponseEntity.getBody() String decl ResponseEntity public public decl_stmt java.lang.String = call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) + decl_stmt org.springframework.http.ResponseEntity < = call org.springframework.web.client.RestTemplate.getForEntity(String,Class,Map) call org.springframework.web.client.RestTemplate.getForEntity(String,Class,Map) call org.springframework.web.client.RestTemplate.getForEntity(String,Class,Map) call org.springframework.web.client.RestTemplate.getForEntity(String,Class,Map) call org.springframework.web.client.RestTemplate.getForEntity(String,Class,Map) + call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getBody() call decl ResponseEntity.getBody() call decl ResponseEntity.getBody() call decl ResponseEntity.getBody() call decl ResponseEntity.getBody() URI public public throws decl_stmt java.net.URI = call org.springframework.web.client.RestTemplate.postForLocation(String,Object,Object) call org.springframework.web.client.RestTemplate.postForLocation(String,Object,Object) call org.springframework.web.client.RestTemplate.postForLocation(String,Object,Object) call org.springframework.web.client.RestTemplate.postForLocation(String,Object,Object) call org.springframework.web.client.RestTemplate.postForLocation(String,Object,Object) + new + HttpHeaders URI decl HttpEntity public public throws decl_stmt org.springframework.http.HttpHeaders = new call org.springframework.http.HttpHeaders.setContentType(MediaType) call org.springframework.http.HttpHeaders.setContentType(MediaType) call org.springframework.http.HttpHeaders.setContentType(MediaType) call org.springframework.http.HttpHeaders.setContentType(MediaType) call org.springframework.http.HttpHeaders.setContentType(MediaType) new decl_stmt org.springframework.http.HttpEntity < = new < decl_stmt java.net.URI = call org.springframework.web.client.RestTemplate.postForLocation(String,Object,Object) call org.springframework.web.client.RestTemplate.postForLocation(String,Object,Object) call org.springframework.web.client.RestTemplate.postForLocation(String,Object,Object) call org.springframework.web.client.RestTemplate.postForLocation(String,Object,Object) call org.springframework.web.client.RestTemplate.postForLocation(String,Object,Object) + new + String public public throws decl_stmt java.lang.String = call org.springframework.web.client.RestTemplate.postForObject(URI,Object,Class) call org.springframework.web.client.RestTemplate.postForObject(URI,Object,Class) call org.springframework.web.client.RestTemplate.postForObject(URI,Object,Class) call org.springframework.web.client.RestTemplate.postForObject(URI,Object,Class) call org.springframework.web.client.RestTemplate.postForObject(URI,Object,Class) + public public try call org.springframework.web.client.RestTemplate.execute(String,HttpMethod,RequestCallback,ResponseExtractor,Map) call org.springframework.web.client.RestTemplate.execute(String,HttpMethod,RequestCallback,ResponseExtractor,Map) call org.springframework.web.client.RestTemplate.execute(String,HttpMethod,RequestCallback,ResponseExtractor,Map) call org.springframework.web.client.RestTemplate.execute(String,HttpMethod,RequestCallback,ResponseExtractor,Map) call org.springframework.web.client.RestTemplate.execute(String,HttpMethod,RequestCallback,ResponseExtractor,Map) + catch public public try call org.springframework.web.client.RestTemplate.execute(String,HttpMethod,RequestCallback,ResponseExtractor,Map) call org.springframework.web.client.RestTemplate.execute(String,HttpMethod,RequestCallback,ResponseExtractor,Map) call org.springframework.web.client.RestTemplate.execute(String,HttpMethod,RequestCallback,ResponseExtractor,Map) call org.springframework.web.client.RestTemplate.execute(String,HttpMethod,RequestCallback,ResponseExtractor,Map) call org.springframework.web.client.RestTemplate.execute(String,HttpMethod,RequestCallback,ResponseExtractor,Map) + catch decl Set public public throws decl_stmt java.util.Set < = call org.springframework.web.client.RestTemplate.optionsForAllow(String,Map) call org.springframework.web.client.RestTemplate.optionsForAllow(String,Map) call org.springframework.web.client.RestTemplate.optionsForAllow(String,Map) call org.springframework.web.client.RestTemplate.optionsForAllow(String,Map) call org.springframework.web.client.RestTemplate.optionsForAllow(String,Map) new + String public public throws decl_stmt java.lang.String = call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) + = call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) + = call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) + Resource decl MultiValueMap public public throws decl_stmt org.springframework.util.MultiValueMap < = new < call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() decl_stmt org.springframework.core.io.Resource = new call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call org.springframework.web.client.RestTemplate.postForLocation(String,Object,Object) call org.springframework.web.client.RestTemplate.postForLocation(String,Object,Object) call org.springframework.web.client.RestTemplate.postForLocation(String,Object,Object) call org.springframework.web.client.RestTemplate.postForLocation(String,Object,Object) call org.springframework.web.client.RestTemplate.postForLocation(String,Object,Object) + decl MultiValueMap public public throws decl_stmt org.springframework.util.MultiValueMap < = new < call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call decl MultiValueMap.add() call org.springframework.web.client.RestTemplate.postForLocation(String,Object,Object) call org.springframework.web.client.RestTemplate.postForLocation(String,Object,Object) call org.springframework.web.client.RestTemplate.postForLocation(String,Object,Object) call org.springframework.web.client.RestTemplate.postForLocation(String,Object,Object) call org.springframework.web.client.RestTemplate.postForLocation(String,Object,Object) + HttpHeaders decl ResponseEntity decl HttpEntity public public throws decl_stmt org.springframework.http.HttpHeaders = new call org.springframework.http.HttpHeaders.set(String,String) call org.springframework.http.HttpHeaders.set(String,String) call org.springframework.http.HttpHeaders.set(String,String) call org.springframework.http.HttpHeaders.set(String,String) call org.springframework.http.HttpHeaders.set(String,String) decl_stmt org.springframework.http.HttpEntity < = new < decl_stmt org.springframework.http.ResponseEntity < = call org.springframework.web.client.RestTemplate.exchange(RequestEntity,Class) call org.springframework.web.client.RestTemplate.exchange(RequestEntity,Class) call org.springframework.web.client.RestTemplate.exchange(RequestEntity,Class) call org.springframework.web.client.RestTemplate.exchange(RequestEntity,Class) call org.springframework.web.client.RestTemplate.exchange(RequestEntity,Class) + call decl ResponseEntity.getBody() call decl ResponseEntity.getBody() call decl ResponseEntity.getBody() call decl ResponseEntity.getBody() call decl ResponseEntity.getBody() HttpHeaders decl HttpEntity decl HttpEntity public public throws decl_stmt org.springframework.http.HttpHeaders = new call org.springframework.http.HttpHeaders.set(String,String) call org.springframework.http.HttpHeaders.set(String,String) call org.springframework.http.HttpHeaders.set(String,String) call org.springframework.http.HttpHeaders.set(String,String) call org.springframework.http.HttpHeaders.set(String,String) call org.springframework.http.HttpHeaders.setContentType(MediaType) call org.springframework.http.HttpHeaders.setContentType(MediaType) call org.springframework.http.HttpHeaders.setContentType(MediaType) call org.springframework.http.HttpHeaders.setContentType(MediaType) call org.springframework.http.HttpHeaders.setContentType(MediaType) decl_stmt org.springframework.http.HttpEntity < = new < decl_stmt org.springframework.http.HttpEntity < = call org.springframework.web.client.RestTemplate.exchange(RequestEntity,Class) call org.springframework.web.client.RestTemplate.exchange(RequestEntity,Class) call org.springframework.web.client.RestTemplate.exchange(RequestEntity,Class) call org.springframework.web.client.RestTemplate.exchange(RequestEntity,Class) call org.springframework.web.client.RestTemplate.exchange(RequestEntity,Class) + new + call decl HttpEntity.getHeaders() call decl HttpEntity.getHeaders() call decl HttpEntity.getHeaders() call decl HttpEntity.getHeaders() call decl HttpEntity.getHeaders() call decl HttpEntity.hasBody() call decl HttpEntity.hasBody() call decl HttpEntity.hasBody() call decl HttpEntity.hasBody() call decl HttpEntity.hasBody() MySampleBean HttpHeaders String decl HttpEntity public public throws decl_stmt org.springframework.http.HttpHeaders = new call org.springframework.http.HttpHeaders.setContentType(MediaType) call org.springframework.http.HttpHeaders.setContentType(MediaType) call org.springframework.http.HttpHeaders.setContentType(MediaType) call org.springframework.http.HttpHeaders.setContentType(MediaType) call org.springframework.http.HttpHeaders.setContentType(MediaType) new decl_stmt MySampleBean = new call MySampleBean.setWith1() call MySampleBean.setWith1() call MySampleBean.setWith1() call MySampleBean.setWith1() call MySampleBean.setWith1() call MySampleBean.setWith2() call MySampleBean.setWith2() call MySampleBean.setWith2() call MySampleBean.setWith2() call MySampleBean.setWith2() call MySampleBean.setWithout() call MySampleBean.setWithout() call MySampleBean.setWithout() call MySampleBean.setWithout() call MySampleBean.setWithout() decl_stmt org.springframework.http.HttpEntity < = new < decl_stmt java.lang.String = call org.springframework.web.client.RestTemplate.postForObject(URI,Object,Class) call org.springframework.web.client.RestTemplate.postForObject(URI,Object,Class) call org.springframework.web.client.RestTemplate.postForObject(URI,Object,Class) call org.springframework.web.client.RestTemplate.postForObject(URI,Object,Class) call org.springframework.web.client.RestTemplate.postForObject(URI,Object,Class) + call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) MySampleBean HttpHeaders String MappingJacksonValue decl HttpEntity public public throws decl_stmt org.springframework.http.HttpHeaders = new call org.springframework.http.HttpHeaders.setContentType(MediaType) call org.springframework.http.HttpHeaders.setContentType(MediaType) call org.springframework.http.HttpHeaders.setContentType(MediaType) call org.springframework.http.HttpHeaders.setContentType(MediaType) call org.springframework.http.HttpHeaders.setContentType(MediaType) new decl_stmt MySampleBean = new decl_stmt org.springframework.http.converter.json.MappingJacksonValue = new call org.springframework.http.converter.json.MappingJacksonValue.setSerializationView(Class) call org.springframework.http.converter.json.MappingJacksonValue.setSerializationView(Class) call org.springframework.http.converter.json.MappingJacksonValue.setSerializationView(Class) call org.springframework.http.converter.json.MappingJacksonValue.setSerializationView(Class) call org.springframework.http.converter.json.MappingJacksonValue.setSerializationView(Class) decl_stmt org.springframework.http.HttpEntity < = new < decl_stmt java.lang.String = call org.springframework.web.client.RestTemplate.postForObject(URI,Object,Class) call org.springframework.web.client.RestTemplate.postForObject(URI,Object,Class) call org.springframework.web.client.RestTemplate.postForObject(URI,Object,Class) call org.springframework.web.client.RestTemplate.postForObject(URI,Object,Class) call org.springframework.web.client.RestTemplate.postForObject(URI,Object,Class) + call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) String public public decl_stmt java.lang.String = call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) call org.springframework.web.client.RestTemplate.getForObject(URI,Class) String decl ParameterizedTypeReference decl List decl RequestEntity public public throws decl_stmt java.util.List < = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new decl_stmt org.springframework.core.ParameterizedTypeReference < = new < < decl_stmt org.springframework.http.RequestEntity < < = new + new call decl ParameterizedTypeReference.getType() call decl ParameterizedTypeReference.getType() call decl ParameterizedTypeReference.getType() call decl ParameterizedTypeReference.getType() call decl ParameterizedTypeReference.getType() decl_stmt java.lang.String = call org.springframework.web.client.RestTemplate.exchange(RequestEntity,Class) call org.springframework.web.client.RestTemplate.exchange(RequestEntity,Class) call org.springframework.web.client.RestTemplate.exchange(RequestEntity,Class) call org.springframework.web.client.RestTemplate.exchange(RequestEntity,Class) call org.springframework.web.client.RestTemplate.exchange(RequestEntity,Class) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) public public return public public = public public return public public = public public return public public = public public return public public =