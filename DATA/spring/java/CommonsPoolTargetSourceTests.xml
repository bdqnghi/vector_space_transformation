org.springframework.aop.target java.util.NoSuchElementException import org.apache.commons.pool.impl.GenericObjectPool import org.junit.After import org.junit.Before import org.junit.Test import org.springframework.aop.framework.Advised import org.springframework.beans.factory.support.DefaultListableBeanFactory import org.springframework.beans.factory.xml.XmlBeanDefinitionReader import org.springframework.context.support.StaticApplicationContext import org.springframework.core.io.ClassPathResource import org.springframework.tests.sample.beans.Person import org.springframework.tests.sample.beans.SerializablePerson import org.springframework.tests.sample.beans.SideEffectBean import org.springframework.util.SerializationTestUtils import static static org.junit.Assert.* import class annotation org.springframework.aop.target.CommonsPoolTargetSourceTests int DefaultListableBeanFactory public public throws = new new new + public public SideEffectBean private private decl_stmt org.springframework.tests.sample.beans.SideEffectBean = call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.tests.sample.beans.SideEffectBean.getCount() call org.springframework.tests.sample.beans.SideEffectBean.getCount() call org.springframework.tests.sample.beans.SideEffectBean.getCount() call org.springframework.tests.sample.beans.SideEffectBean.getCount() call org.springframework.tests.sample.beans.SideEffectBean.getCount() call SideEffectBean.doWork() call SideEffectBean.doWork() call SideEffectBean.doWork() call SideEffectBean.doWork() call SideEffectBean.doWork() + call org.springframework.tests.sample.beans.SideEffectBean.getCount() call org.springframework.tests.sample.beans.SideEffectBean.getCount() call org.springframework.tests.sample.beans.SideEffectBean.getCount() call org.springframework.tests.sample.beans.SideEffectBean.getCount() call org.springframework.tests.sample.beans.SideEffectBean.getCount() = call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call SideEffectBean.doWork() call SideEffectBean.doWork() call SideEffectBean.doWork() call SideEffectBean.doWork() call SideEffectBean.doWork() public public public public SideEffectBean PoolingConfig public public decl_stmt org.springframework.tests.sample.beans.SideEffectBean = call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.tests.sample.beans.SideEffectBean.getCount() call org.springframework.tests.sample.beans.SideEffectBean.getCount() call org.springframework.tests.sample.beans.SideEffectBean.getCount() call org.springframework.tests.sample.beans.SideEffectBean.getCount() call org.springframework.tests.sample.beans.SideEffectBean.getCount() decl_stmt org.springframework.aop.target.PoolingConfig = call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call SideEffectBean.doWork() call SideEffectBean.doWork() call SideEffectBean.doWork() call SideEffectBean.doWork() call SideEffectBean.doWork() call PoolingConfig.getMaxSize() call PoolingConfig.getMaxSize() call PoolingConfig.getMaxSize() call PoolingConfig.getMaxSize() call PoolingConfig.getMaxSize() call PoolingConfig.getMaxSize() call PoolingConfig.getMaxSize() call PoolingConfig.getMaxSize() call PoolingConfig.getMaxSize() call PoolingConfig.getMaxSize() SingletonTargetSource CommonsPoolTargetSource public public throws decl_stmt org.springframework.aop.target.CommonsPoolTargetSource = call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) decl_stmt org.springframework.aop.target.SingletonTargetSource = call org.springframework.aop.target.SingletonTargetSource.getTarget() call org.springframework.aop.target.SingletonTargetSource.getTarget() call org.springframework.aop.target.SingletonTargetSource.getTarget() call org.springframework.aop.target.SingletonTargetSource.getTarget() call org.springframework.aop.target.SingletonTargetSource.getTarget() instanceof Person Person public public throws decl_stmt org.springframework.test.context.junit4.orm.domain.Person = call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) instanceof decl_stmt org.springframework.test.context.junit4.orm.domain.Person = instanceof call org.springframework.test.context.junit4.orm.domain.Person.setAge(long) call org.springframework.test.context.junit4.orm.domain.Person.setAge(long) call org.springframework.test.context.junit4.orm.domain.Person.setAge(long) call org.springframework.test.context.junit4.orm.domain.Person.setAge(long) call org.springframework.test.context.junit4.orm.domain.Person.setAge(long) call org.springframework.test.context.junit4.orm.domain.Person.getAge() call org.springframework.test.context.junit4.orm.domain.Person.getAge() call org.springframework.test.context.junit4.orm.domain.Person.getAge() call org.springframework.test.context.junit4.orm.domain.Person.getAge() call org.springframework.test.context.junit4.orm.domain.Person.getAge() CommonsPoolTargetSource decl Object int Object public public throws decl_stmt int = decl_stmt org.springframework.aop.target.CommonsPoolTargetSource = new call CommonsPoolTargetSource.setMaxSize() call CommonsPoolTargetSource.setMaxSize() call CommonsPoolTargetSource.setMaxSize() call CommonsPoolTargetSource.setMaxSize() call CommonsPoolTargetSource.setMaxSize() call org.springframework.aop.target.CommonsPoolTargetSource.setMaxWait(long) call org.springframework.aop.target.CommonsPoolTargetSource.setMaxWait(long) call org.springframework.aop.target.CommonsPoolTargetSource.setMaxWait(long) call org.springframework.aop.target.CommonsPoolTargetSource.setMaxWait(long) call org.springframework.aop.target.CommonsPoolTargetSource.setMaxWait(long) decl_stmt java.lang.Object = new for = < ++ decl_stmt java.lang.Object = call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() = try call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() catch call org.springframework.aop.target.CommonsPoolTargetSource.releaseTarget(Object) call org.springframework.aop.target.CommonsPoolTargetSource.releaseTarget(Object) call org.springframework.aop.target.CommonsPoolTargetSource.releaseTarget(Object) call org.springframework.aop.target.CommonsPoolTargetSource.releaseTarget(Object) call org.springframework.aop.target.CommonsPoolTargetSource.releaseTarget(Object) = call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() for = < ++ call org.springframework.aop.target.CommonsPoolTargetSource.releaseTarget(Object) call org.springframework.aop.target.CommonsPoolTargetSource.releaseTarget(Object) call org.springframework.aop.target.CommonsPoolTargetSource.releaseTarget(Object) call org.springframework.aop.target.CommonsPoolTargetSource.releaseTarget(Object) call org.springframework.aop.target.CommonsPoolTargetSource.releaseTarget(Object) CommonsPoolTargetSource Advised int decl Object Object public public throws decl_stmt org.springframework.aop.framework.Advised = call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) decl_stmt org.springframework.aop.target.CommonsPoolTargetSource = call org.springframework.aop.framework.Advised.getTargetSource() call org.springframework.aop.framework.Advised.getTargetSource() call org.springframework.aop.framework.Advised.getTargetSource() call org.springframework.aop.framework.Advised.getTargetSource() call org.springframework.aop.framework.Advised.getTargetSource() decl_stmt int = call CommonsPoolTargetSource.getMaxSize() call CommonsPoolTargetSource.getMaxSize() call CommonsPoolTargetSource.getMaxSize() call CommonsPoolTargetSource.getMaxSize() call CommonsPoolTargetSource.getMaxSize() decl_stmt java.lang.Object = new for = < ++ decl_stmt java.lang.Object = call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() = try call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() catch call org.springframework.aop.target.CommonsPoolTargetSource.releaseTarget(Object) call org.springframework.aop.target.CommonsPoolTargetSource.releaseTarget(Object) call org.springframework.aop.target.CommonsPoolTargetSource.releaseTarget(Object) call org.springframework.aop.target.CommonsPoolTargetSource.releaseTarget(Object) call org.springframework.aop.target.CommonsPoolTargetSource.releaseTarget(Object) = call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() call org.springframework.aop.target.CommonsPoolTargetSource.getTarget() for = < ++ call org.springframework.aop.target.CommonsPoolTargetSource.releaseTarget(Object) call org.springframework.aop.target.CommonsPoolTargetSource.releaseTarget(Object) call org.springframework.aop.target.CommonsPoolTargetSource.releaseTarget(Object) call org.springframework.aop.target.CommonsPoolTargetSource.releaseTarget(Object) call org.springframework.aop.target.CommonsPoolTargetSource.releaseTarget(Object) CommonsPoolTargetSource public public decl_stmt org.springframework.aop.target.CommonsPoolTargetSource = new call org.springframework.aop.target.CommonsPoolTargetSource.setWhenExhaustedActionName(String) call org.springframework.aop.target.CommonsPoolTargetSource.setWhenExhaustedActionName(String) call org.springframework.aop.target.CommonsPoolTargetSource.setWhenExhaustedActionName(String) call org.springframework.aop.target.CommonsPoolTargetSource.setWhenExhaustedActionName(String) call org.springframework.aop.target.CommonsPoolTargetSource.setWhenExhaustedActionName(String) call org.springframework.aop.target.CommonsPoolTargetSource.getWhenExhaustedAction() call org.springframework.aop.target.CommonsPoolTargetSource.getWhenExhaustedAction() call org.springframework.aop.target.CommonsPoolTargetSource.getWhenExhaustedAction() call org.springframework.aop.target.CommonsPoolTargetSource.getWhenExhaustedAction() call org.springframework.aop.target.CommonsPoolTargetSource.getWhenExhaustedAction() StaticApplicationContext String private private decl_stmt java.lang.String = decl_stmt org.springframework.context.support.StaticApplicationContext = new call org.springframework.context.support.StaticApplicationContext.registerPrototype(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerPrototype(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerPrototype(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerPrototype(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerPrototype(String,Class,MutablePropertyValues)