org.springframework.beans.propertyeditors java.beans.PropertyEditorSupport import java.lang.reflect.Array import java.util.ArrayList import java.util.Collection import java.util.LinkedHashSet import java.util.List import java.util.SortedSet import java.util.TreeSet import class org.springframework.beans.propertyeditors.CustomCollectionEditor super super extends decl Class boolean public public throws decl Collection int decl Collection public public if == && else if == || && ! else if instanceof decl_stmt java.util.Collection < = < decl_stmt java.util.Collection < = call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() for : call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() else if decl_stmt int = decl_stmt java.util.Collection < = for = < ++ call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() else decl_stmt java.util.Collection < = call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() protected < protected < < extends extends if ! call decl Class.isInterface() call decl Class.isInterface() call decl Class.isInterface() call decl Class.isInterface() call decl Class.isInterface() try return call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() catch throw new + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() + + else if == return new < else if == return new < else return new < protected protected return protected protected return public public return