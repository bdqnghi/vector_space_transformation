org.springframework.orm.hibernate3 java.util.HashMap import java.util.LinkedHashSet import java.util.Map import java.util.Set import javax.sql.DataSource import javax.transaction.Status import javax.transaction.Transaction import javax.transaction.TransactionManager import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.hibernate.Criteria import org.hibernate.FlushMode import org.hibernate.HibernateException import org.hibernate.Interceptor import org.hibernate.JDBCException import org.hibernate.NonUniqueObjectException import org.hibernate.NonUniqueResultException import org.hibernate.ObjectDeletedException import org.hibernate.OptimisticLockException import org.hibernate.PersistentObjectException import org.hibernate.PessimisticLockException import org.hibernate.PropertyValueException import org.hibernate.Query import org.hibernate.QueryException import org.hibernate.QueryTimeoutException import org.hibernate.Session import org.hibernate.SessionFactory import org.hibernate.StaleObjectStateException import org.hibernate.StaleStateException import org.hibernate.TransientObjectException import org.hibernate.UnresolvableObjectException import org.hibernate.WrongClassException import org.hibernate.connection.ConnectionProvider import org.hibernate.engine.SessionFactoryImplementor import org.hibernate.exception.ConstraintViolationException import org.hibernate.exception.DataException import org.hibernate.exception.JDBCConnectionException import org.hibernate.exception.LockAcquisitionException import org.hibernate.exception.SQLGrammarException import org.springframework.core.NamedThreadLocal import org.springframework.dao.CannotAcquireLockException import org.springframework.dao.DataAccessException import org.springframework.dao.DataAccessResourceFailureException import org.springframework.dao.DataIntegrityViolationException import org.springframework.dao.DuplicateKeyException import org.springframework.dao.IncorrectResultSizeDataAccessException import org.springframework.dao.InvalidDataAccessApiUsageException import org.springframework.dao.InvalidDataAccessResourceUsageException import org.springframework.dao.PessimisticLockingFailureException import org.springframework.jdbc.datasource.DataSourceUtils import org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator import org.springframework.jdbc.support.SQLExceptionTranslator import org.springframework.jdbc.support.SQLStateSQLExceptionTranslator import org.springframework.transaction.jta.SpringJtaSynchronizationAdapter import org.springframework.transaction.support.TransactionSynchronizationManager import org.springframework.util.Assert import class annotation org.springframework.orm.hibernate3.SessionFactoryUtils Log decl ThreadLocal int ConnectionProvider public static public static if instanceof decl_stmt ConnectionProvider = if instanceof return return DataSource public static public static decl_stmt javax.sql.DataSource = if != return new return new SessionFactoryImplementor SessionFactory public static public static decl_stmt SessionFactoryImplementor = if instanceof = else if != decl_stmt SessionFactory = if instanceof = return != call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() : public static public static throws try return catch throw new public static public static throws try return catch throw new public static public static throws return Session SessionHolder Object SessionHolder FlushMode private static private static throws decl_stmt java.lang.Object = if instanceof return decl_stmt org.springframework.orm.hibernate4.SessionHolder = if != && ! call org.springframework.orm.hibernate4.SessionHolder.isEmpty() call org.springframework.orm.hibernate4.SessionHolder.isEmpty() call org.springframework.orm.hibernate4.SessionHolder.isEmpty() call org.springframework.orm.hibernate4.SessionHolder.isEmpty() call org.springframework.orm.hibernate4.SessionHolder.isEmpty() decl_stmt sun.security.pkcs11.Session = if && call org.springframework.orm.hibernate4.SessionHolder.doesNotHoldNonDefaultSession() call org.springframework.orm.hibernate4.SessionHolder.doesNotHoldNonDefaultSession() call org.springframework.orm.hibernate4.SessionHolder.doesNotHoldNonDefaultSession() call org.springframework.orm.hibernate4.SessionHolder.doesNotHoldNonDefaultSession() call org.springframework.orm.hibernate4.SessionHolder.doesNotHoldNonDefaultSession() = call org.springframework.orm.hibernate4.SessionHolder.getValidatedSession() call org.springframework.orm.hibernate4.SessionHolder.getValidatedSession() call org.springframework.orm.hibernate4.SessionHolder.getValidatedSession() call org.springframework.orm.hibernate4.SessionHolder.getValidatedSession() call org.springframework.orm.hibernate4.SessionHolder.getValidatedSession() if != && ! call SessionHolder.isSynchronizedWithTransaction() call SessionHolder.isSynchronizedWithTransaction() call SessionHolder.isSynchronizedWithTransaction() call SessionHolder.isSynchronizedWithTransaction() call SessionHolder.isSynchronizedWithTransaction() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() new call SessionHolder.setSynchronizedWithTransaction() call SessionHolder.setSynchronizedWithTransaction() call SessionHolder.setSynchronizedWithTransaction() call SessionHolder.setSynchronizedWithTransaction() call SessionHolder.setSynchronizedWithTransaction() decl_stmt FlushMode = call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() if call FlushMode.lessThan() call FlushMode.lessThan() call FlushMode.lessThan() call FlushMode.lessThan() call FlushMode.lessThan() && ! call Session.setFlushMode() call Session.setFlushMode() call Session.setFlushMode() call Session.setFlushMode() call Session.setFlushMode() call org.springframework.orm.hibernate4.SessionHolder.setPreviousFlushMode(FlushMode) call org.springframework.orm.hibernate4.SessionHolder.setPreviousFlushMode(FlushMode) call org.springframework.orm.hibernate4.SessionHolder.setPreviousFlushMode(FlushMode) call org.springframework.orm.hibernate4.SessionHolder.setPreviousFlushMode(FlushMode) call org.springframework.orm.hibernate4.SessionHolder.setPreviousFlushMode(FlushMode) else = if != return call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() decl_stmt sun.security.pkcs11.Session = != : if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() decl_stmt org.springframework.orm.hibernate4.SessionHolder = if == = new else call org.springframework.orm.hibernate4.SessionHolder.addSession(Session) call org.springframework.orm.hibernate4.SessionHolder.addSession(Session) call org.springframework.orm.hibernate4.SessionHolder.addSession(Session) call org.springframework.orm.hibernate4.SessionHolder.addSession(Session) call org.springframework.orm.hibernate4.SessionHolder.addSession(Session) if call Session.setFlushMode() call Session.setFlushMode() call Session.setFlushMode() call Session.setFlushMode() call Session.setFlushMode() new call SessionHolder.setSynchronizedWithTransaction() call SessionHolder.setSynchronizedWithTransaction() call SessionHolder.setSynchronizedWithTransaction() call SessionHolder.setSynchronizedWithTransaction() call SessionHolder.setSynchronizedWithTransaction() if != else if ! && ! throw new + return Session TransactionManager int FlushMode Transaction private static private static throws decl_stmt TransactionManager = if != try decl_stmt Transaction = call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() if != decl_stmt int = call Transaction.getStatus() call Transaction.getStatus() call Transaction.getStatus() call Transaction.getStatus() call Transaction.getStatus() if == || == decl_stmt sun.security.pkcs11.Session = if == && ! = if != call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Transaction.registerSynchronization() call Transaction.registerSynchronization() call Transaction.registerSynchronization() call Transaction.registerSynchronization() call Transaction.registerSynchronization() new new decl_stmt FlushMode = call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() if call FlushMode.lessThan() call FlushMode.lessThan() call FlushMode.lessThan() call FlushMode.lessThan() call FlushMode.lessThan() call Session.setFlushMode() call Session.setFlushMode() call Session.setFlushMode() call Session.setFlushMode() call Session.setFlushMode() return return catch throw new else return TransactionManager int SessionHolder Transaction private static private static decl_stmt TransactionManager = if != try decl_stmt Transaction = call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() if != decl_stmt int = call Transaction.getStatus() call Transaction.getStatus() call Transaction.getStatus() call Transaction.getStatus() call Transaction.getStatus() if == || == call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() decl_stmt org.springframework.orm.hibernate4.SessionHolder = if == = new else call org.springframework.orm.hibernate4.SessionHolder.addSession(Session) call org.springframework.orm.hibernate4.SessionHolder.addSession(Session) call org.springframework.orm.hibernate4.SessionHolder.addSession(Session) call org.springframework.orm.hibernate4.SessionHolder.addSession(Session) call org.springframework.orm.hibernate4.SessionHolder.addSession(Session) call Transaction.registerSynchronization() call Transaction.registerSynchronization() call Transaction.registerSynchronization() call Transaction.registerSynchronization() call Transaction.registerSynchronization() new new call SessionHolder.setSynchronizedWithTransaction() call SessionHolder.setSynchronizedWithTransaction() call SessionHolder.setSynchronizedWithTransaction() call SessionHolder.setSynchronizedWithTransaction() call SessionHolder.setSynchronizedWithTransaction() if != catch throw new public static public static return SessionHolder public static public static try decl_stmt org.springframework.orm.hibernate4.SessionHolder = if != && ! call org.springframework.orm.hibernate4.SessionHolder.isEmpty() call org.springframework.orm.hibernate4.SessionHolder.isEmpty() call org.springframework.orm.hibernate4.SessionHolder.isEmpty() call org.springframework.orm.hibernate4.SessionHolder.isEmpty() call org.springframework.orm.hibernate4.SessionHolder.isEmpty() if != return call org.springframework.orm.hibernate4.SessionHolder.getAnySession() call org.springframework.orm.hibernate4.SessionHolder.getAnySession() call org.springframework.orm.hibernate4.SessionHolder.getAnySession() call org.springframework.orm.hibernate4.SessionHolder.getAnySession() call org.springframework.orm.hibernate4.SessionHolder.getAnySession() else return call org.springframework.orm.hibernate4.SessionHolder.getAnySession() call org.springframework.orm.hibernate4.SessionHolder.getAnySession() call org.springframework.orm.hibernate4.SessionHolder.getAnySession() call org.springframework.orm.hibernate4.SessionHolder.getAnySession() call org.springframework.orm.hibernate4.SessionHolder.getAnySession() else if != return else return catch throw new public static public static return + + SessionHolder public static public static if == return decl_stmt org.springframework.orm.hibernate4.SessionHolder = return != && ! call org.springframework.orm.hibernate4.SessionHolder.isEmpty() call org.springframework.orm.hibernate4.SessionHolder.isEmpty() call org.springframework.orm.hibernate4.SessionHolder.isEmpty() call org.springframework.orm.hibernate4.SessionHolder.isEmpty() call org.springframework.orm.hibernate4.SessionHolder.isEmpty() SessionHolder public static public static if == return decl_stmt org.springframework.orm.hibernate4.SessionHolder = return != && call org.springframework.orm.hibernate4.SessionHolder.containsSession(Session) call org.springframework.orm.hibernate4.SessionHolder.containsSession(Session) call org.springframework.orm.hibernate4.SessionHolder.containsSession(Session) call org.springframework.orm.hibernate4.SessionHolder.containsSession(Session) call org.springframework.orm.hibernate4.SessionHolder.containsSession(Session) SessionHolder public static public static if != decl_stmt org.springframework.orm.hibernate4.SessionHolder = if != && call SessionHolder.hasTimeout() call SessionHolder.hasTimeout() call SessionHolder.hasTimeout() call SessionHolder.hasTimeout() call SessionHolder.hasTimeout() call SessionHolder.getTimeToLiveInSeconds() call SessionHolder.getTimeToLiveInSeconds() call SessionHolder.getTimeToLiveInSeconds() call SessionHolder.getTimeToLiveInSeconds() call SessionHolder.getTimeToLiveInSeconds() SessionHolder public static public static if != decl_stmt org.springframework.orm.hibernate4.SessionHolder = if != && call SessionHolder.hasTimeout() call SessionHolder.hasTimeout() call SessionHolder.hasTimeout() call SessionHolder.hasTimeout() call SessionHolder.hasTimeout() call SessionHolder.getTimeToLiveInSeconds() call SessionHolder.getTimeToLiveInSeconds() call SessionHolder.getTimeToLiveInSeconds() call SessionHolder.getTimeToLiveInSeconds() call SessionHolder.getTimeToLiveInSeconds() DataException public static public static if instanceof return new if instanceof decl_stmt SQLGrammarException = return new + + call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() + if instanceof decl_stmt QueryTimeoutException = return new + + call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() + if instanceof decl_stmt LockAcquisitionException = return new + + call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() + if instanceof decl_stmt PessimisticLockException = return new + + call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() + if instanceof decl_stmt ConstraintViolationException = return new + + call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() + + call DataException.getConstraintName() call DataException.getConstraintName() call DataException.getConstraintName() call DataException.getConstraintName() call DataException.getConstraintName() + if instanceof decl_stmt DataException = return new + + call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() + if instanceof return new if instanceof return new if instanceof return new if instanceof return new if instanceof return new if instanceof return new if instanceof return new if instanceof return new if instanceof return new if instanceof return new if instanceof return new if instanceof return new if instanceof return new return new decl Map public static public static decl_stmt java.util.Map < < = call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() return != && call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() decl Map public static public static call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() decl_stmt java.util.Map < < = call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() if == = new < < call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new < decl Map decl Set public static public static decl_stmt java.util.Map < < = call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() if == || ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() throw new + + call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() decl_stmt java.util.Set < = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() for : if call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() public static public static if == return if ! decl Map decl Set static static decl_stmt java.util.Map < < = call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() if != && != && call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() decl_stmt java.util.Set < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() else public static public static if != call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() try catch call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() catch call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug()