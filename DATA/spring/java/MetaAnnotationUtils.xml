org.springframework.test.util java.lang.annotation.Annotation import java.util.HashSet import java.util.Set import org.springframework.core.annotation.AnnotatedElementUtils import org.springframework.core.annotation.AnnotationAttributes import org.springframework.core.annotation.AnnotationUtils import org.springframework.core.style.ToStringCreator import org.springframework.util.Assert import org.springframework.util.ObjectUtils import class org.springframework.test.util.MetaAnnotationUtils public static < extends extends < public static < extends extends < < < return new < decl AnnotationDescriptor private static < extends extends < private static < extends extends < < < < if == || == return if return new < for : if ! && decl_stmt AnnotationDescriptor < = if != return new < call decl AnnotationDescriptor.getDeclaringClass() call decl AnnotationDescriptor.getDeclaringClass() call decl AnnotationDescriptor.getDeclaringClass() call decl AnnotationDescriptor.getDeclaringClass() call decl AnnotationDescriptor.getDeclaringClass() call decl AnnotationDescriptor.getAnnotation() call decl AnnotationDescriptor.getAnnotation() call decl AnnotationDescriptor.getAnnotation() call decl AnnotationDescriptor.getAnnotation() call decl AnnotationDescriptor.getAnnotation() return public static public static < < extends extends return new < UntypedAnnotationDescriptor private static private static < < < extends extends if == || == return for < extends extends : if return new for : if ! && decl_stmt UntypedAnnotationDescriptor = if != return new call UntypedAnnotationDescriptor.getDeclaringClass() call UntypedAnnotationDescriptor.getDeclaringClass() call UntypedAnnotationDescriptor.getDeclaringClass() call UntypedAnnotationDescriptor.getDeclaringClass() call UntypedAnnotationDescriptor.getDeclaringClass() call UntypedAnnotationDescriptor.getAnnotation() call UntypedAnnotationDescriptor.getAnnotation() call UntypedAnnotationDescriptor.getAnnotation() call UntypedAnnotationDescriptor.getAnnotation() call UntypedAnnotationDescriptor.getAnnotation() return private static private static < if throw new for < : if ! throw new public < public < return public < public < return public public return public public return < public < extends extends public < extends extends return public public return public public return public < extends extends public < extends extends return != : public public return new public public throw new