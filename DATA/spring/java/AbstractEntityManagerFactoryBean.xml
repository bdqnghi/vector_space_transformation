org.springframework.orm.jpa java.io.IOException import java.io.NotSerializableException import java.io.ObjectInputStream import java.io.ObjectStreamException import java.io.Serializable import java.lang.reflect.InvocationHandler import java.lang.reflect.InvocationTargetException import java.lang.reflect.Method import java.lang.reflect.Proxy import java.util.HashMap import java.util.LinkedHashSet import java.util.Map import java.util.Properties import java.util.Set import java.util.concurrent.Callable import java.util.concurrent.ExecutionException import java.util.concurrent.Future import javax.persistence.EntityManager import javax.persistence.EntityManagerFactory import javax.persistence.PersistenceException import javax.persistence.Query import javax.persistence.spi.PersistenceProvider import javax.persistence.spi.PersistenceUnitInfo import javax.sql.DataSource import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.BeanUtils import org.springframework.beans.factory.BeanClassLoaderAware import org.springframework.beans.factory.BeanFactory import org.springframework.beans.factory.BeanFactoryAware import org.springframework.beans.factory.BeanNameAware import org.springframework.beans.factory.DisposableBean import org.springframework.beans.factory.FactoryBean import org.springframework.beans.factory.InitializingBean import org.springframework.core.task.AsyncTaskExecutor import org.springframework.dao.DataAccessException import org.springframework.dao.support.PersistenceExceptionTranslator import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.CollectionUtils import class annotation org.springframework.orm.jpa.AbstractEntityManagerFactoryBean super super implements JpaVendorAdapter decl Future AsyncTaskExecutor BeanFactory PersistenceProvider String EntityManagerFactory EntityManagerFactory ClassLoader decl Class JpaDialect decl Map String Log decl Class public public < extends extends = public public = public public return public public = public public return public public public public < if != public < public < return public public < extends extends = public public < extends extends = public < extends extends public < extends extends return public public = public public return public public = public public return public public = public public return public public = public public return public public = public public = decl Map public final public final throws if != if == = decl_stmt java.util.Map < = if != for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() if ! if == = if ! = if == = if ! = if == = if != = new < public public return else = = public public return EntityManagerFactory private private decl_stmt EntityManagerFactory = if == throw new if != if call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() + + return decl Set protected protected decl_stmt java.util.Set < < = new < < if != call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() else if != call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() else call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() try return call decl Set.toArray() call decl Set.toArray() call decl Set.toArray() call decl Set.toArray() call decl Set.toArray() new < call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() new catch if != throw new + + + else throw new + + Object EntityManager Object throws if return else if && != && > && != && && decl_stmt EntityManager = > < : return if != for = < ++ decl_stmt java.lang.Object = if instanceof && call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() try = catch decl_stmt java.lang.Object = if instanceof decl_stmt EntityManager = = return public public return != : public public if != return else try return catch throw new + catch throw new + public public return public public return public public return public < extends extends public < extends extends return != : public public return public public if call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() + + private private throws throw new + protected protected throws if != && != return new else throw new private private return decl Class public public throws try if return == else if return else if decl_stmt java.lang.Class < = < if == return else if call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() return return catch throw