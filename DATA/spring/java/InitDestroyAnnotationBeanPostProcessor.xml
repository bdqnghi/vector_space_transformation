org.springframework.beans.factory.annotation java.io.IOException import java.io.ObjectInputStream import java.io.Serializable import java.lang.annotation.Annotation import java.lang.reflect.InvocationTargetException import java.lang.reflect.Method import java.lang.reflect.Modifier import java.util.Collection import java.util.LinkedHashSet import java.util.LinkedList import java.util.Map import java.util.Set import java.util.concurrent.ConcurrentHashMap import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.BeansException import org.springframework.beans.factory.BeanCreationException import org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor import org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor import org.springframework.beans.factory.support.RootBeanDefinition import org.springframework.core.Ordered import org.springframework.core.PriorityOrdered import org.springframework.util.ReflectionUtils import class annotation org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor super super implements Log decl Class decl Class int decl Map public public < extends extends = public public < extends extends = public public = public public return LifecycleMetadata public public < if != decl_stmt LifecycleMetadata = call LifecycleMetadata.checkConfigMembers() call LifecycleMetadata.checkConfigMembers() call LifecycleMetadata.checkConfigMembers() call LifecycleMetadata.checkConfigMembers() call LifecycleMetadata.checkConfigMembers() LifecycleMetadata public public throws decl_stmt LifecycleMetadata = try call LifecycleMetadata.invokeInitMethods() call LifecycleMetadata.invokeInitMethods() call LifecycleMetadata.invokeInitMethods() call LifecycleMetadata.invokeInitMethods() call LifecycleMetadata.invokeInitMethods() catch throw new catch throw new return public public throws return String LifecycleMetadata public public throws decl_stmt LifecycleMetadata = try call LifecycleMetadata.invokeDestroyMethods() call LifecycleMetadata.invokeDestroyMethods() call LifecycleMetadata.invokeDestroyMethods() call LifecycleMetadata.invokeDestroyMethods() call LifecycleMetadata.invokeDestroyMethods() catch decl_stmt java.lang.String = + + if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() else call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() + + catch call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + + public public return LifecycleMetadata private private < if == return decl_stmt LifecycleMetadata = if == synchronized = if == = return return decl LinkedList LifecycleElement decl LinkedList decl LinkedList decl LinkedList boolean decl Class private private final final final < decl_stmt boolean final final = call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() decl_stmt java.util.LinkedList < = new < decl_stmt java.util.LinkedList < = new < decl_stmt java.lang.Class < = do decl_stmt java.util.LinkedList final final final < = new < decl_stmt java.util.LinkedList final final final < = new < new public public throws if != if != decl_stmt LifecycleElement = new call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + if != if != call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() new if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + call decl LinkedList.addAll() call decl LinkedList.addAll() call decl LinkedList.addAll() call decl LinkedList.addAll() call decl LinkedList.addAll() call decl LinkedList.addAll() call decl LinkedList.addAll() call decl LinkedList.addAll() call decl LinkedList.addAll() call decl LinkedList.addAll() = call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() != && != return new LifecycleElement public public throws if != if != decl_stmt LifecycleElement = new if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + if != if != new if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + private private throws = decl Set String decl Set public public decl_stmt java.util.Set < = new < for : decl_stmt java.lang.String = if ! call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + decl_stmt java.util.Set < = new < for : decl_stmt java.lang.String = if ! call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + = = boolean decl Collection public public throws decl_stmt java.util.Collection < = != : if ! call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() decl_stmt boolean = call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() for : if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + boolean decl Collection public public throws decl_stmt java.util.Collection < = != : if ! call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() decl_stmt boolean = call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() for : if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + decl Collection public public decl_stmt java.util.Collection < = != : return ! call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() public public return public public return public public throws LifecycleElement public public if == return if ! instanceof return decl_stmt LifecycleElement = return public public return