org.springframework.web.servlet.mvc.method.annotation org.springframework.core.MethodParameter import org.springframework.util.concurrent.ListenableFuture import org.springframework.util.concurrent.ListenableFutureCallback import org.springframework.web.context.request.NativeWebRequest import org.springframework.web.context.request.async.DeferredResult import org.springframework.web.context.request.async.WebAsyncUtils import org.springframework.web.method.support.AsyncHandlerMethodReturnValueHandler import org.springframework.web.method.support.ModelAndViewContainer import class annotation org.springframework.web.servlet.mvc.method.annotation.ListenableFutureReturnValueHandler super super implements public public return public public return != && instanceof decl DeferredResult decl ListenableFuture public public throws if == return decl_stmt org.springframework.web.context.request.async.DeferredResult final final final < = new < decl_stmt org.springframework.util.concurrent.ListenableFuture < = < call decl ListenableFuture.addCallback() call decl ListenableFuture.addCallback() call decl ListenableFuture.addCallback() call decl ListenableFuture.addCallback() call decl ListenableFuture.addCallback() new < public public call decl DeferredResult.setResult() call decl DeferredResult.setResult() call decl DeferredResult.setResult() call decl DeferredResult.setResult() call decl DeferredResult.setResult() public public call decl DeferredResult.setErrorResult() call decl DeferredResult.setErrorResult() call decl DeferredResult.setErrorResult() call decl DeferredResult.setErrorResult() call decl DeferredResult.setErrorResult() public public public public