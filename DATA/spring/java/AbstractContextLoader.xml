org.springframework.test.context.support java.util.ArrayList import java.util.List import java.util.Set import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.BeanUtils import org.springframework.context.ApplicationContext import org.springframework.context.ApplicationContextException import org.springframework.context.ApplicationContextInitializer import org.springframework.context.ConfigurableApplicationContext import org.springframework.core.GenericTypeResolver import org.springframework.core.annotation.AnnotationAwareOrderComparator import org.springframework.core.env.PropertySource import org.springframework.core.io.ClassPathResource import org.springframework.test.context.ContextConfigurationAttributes import org.springframework.test.context.ContextCustomizer import org.springframework.test.context.ContextLoader import org.springframework.test.context.MergedContextConfiguration import org.springframework.test.context.SmartContextLoader import org.springframework.test.context.util.TestContextResourceUtils import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.ObjectUtils import org.springframework.util.ResourceUtils import class org.springframework.test.context.support.AbstractContextLoader super super implements decl String Log decl String public public decl_stmt java.lang.String = protected protected decl List decl Set decl Class decl Class private private decl_stmt java.util.Set < < extends extends extends < extends extends = if call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() return decl_stmt java.util.List < < = new < < decl_stmt java.lang.Class < = for < extends extends extends < extends extends : decl_stmt java.lang.Class < = if != && ! call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() throw new + + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() < for < : protected protected for : public final public final < return && : ClassPathResource String String decl String protected protected < decl_stmt java.lang.String = for : decl_stmt java.lang.String = + decl_stmt java.lang.String = + decl_stmt org.springframework.core.io.ClassPathResource = new if call org.springframework.core.io.ClassPathResource.exists() call org.springframework.core.io.ClassPathResource.exists() call org.springframework.core.io.ClassPathResource.exists() call org.springframework.core.io.ClassPathResource.exists() call org.springframework.core.io.ClassPathResource.exists() if call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() return new else if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + if call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() + return protected protected < return protected protected return protected protected return new