org.springframework.web.servlet.mvc.method.annotation java.lang.reflect.Method import java.util.Arrays import java.util.HashMap import java.util.List import java.util.Map import java.util.Set import javax.servlet.http.HttpServletRequest import org.aopalliance.intercept.MethodInterceptor import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.aop.framework.ProxyFactory import org.springframework.aop.target.EmptyTargetSource import org.springframework.beans.factory.NoSuchBeanDefinitionException import org.springframework.beans.factory.NoUniqueBeanDefinitionException import org.springframework.cglib.core.SpringNamingPolicy import org.springframework.cglib.proxy.Callback import org.springframework.cglib.proxy.Enhancer import org.springframework.cglib.proxy.Factory import org.springframework.cglib.proxy.MethodProxy import org.springframework.core.DefaultParameterNameDiscoverer import org.springframework.core.MethodParameter import org.springframework.core.MethodIntrospector import org.springframework.core.ParameterNameDiscoverer import org.springframework.core.annotation.AnnotatedElementUtils import org.springframework.core.annotation.SynthesizingMethodParameter import org.springframework.objenesis.ObjenesisException import org.springframework.objenesis.SpringObjenesis import org.springframework.util.AntPathMatcher import org.springframework.util.Assert import org.springframework.util.ObjectUtils import org.springframework.util.PathMatcher import org.springframework.util.ReflectionUtils import org.springframework.util.ReflectionUtils.MethodFilter import org.springframework.util.StringUtils import org.springframework.web.bind.annotation.RequestMapping import org.springframework.web.context.WebApplicationContext import org.springframework.web.context.request.RequestAttributes import org.springframework.web.context.request.RequestContextHolder import org.springframework.web.context.request.ServletRequestAttributes import org.springframework.web.method.HandlerMethod import org.springframework.web.method.annotation.RequestParamMethodArgumentResolver import org.springframework.web.method.support.CompositeUriComponentsContributor import org.springframework.web.servlet.DispatcherServlet import org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping import org.springframework.web.servlet.support.ServletUriComponentsBuilder import org.springframework.web.util.UriComponents import org.springframework.web.util.UriComponentsBuilder import class org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder PathMatcher CompositeUriComponentsContributor ParameterNameDiscoverer UriComponentsBuilder SpringObjenesis String Log public static public static return new public static public static < return String public static public static < = decl_stmt java.lang.String = return Method public static public static < decl_stmt com.sun.jdi.Method = return Method public static public static < decl_stmt com.sun.jdi.Method = return MethodInvocationInfo Method decl Class decl Object public static public static decl_stmt org.springframework.web.servlet.mvc.method.annotation.MethodInvocationInfo = decl_stmt java.lang.Class < = call org.springframework.web.servlet.mvc.method.annotation.MethodInvocationInfo.getControllerType() call org.springframework.web.servlet.mvc.method.annotation.MethodInvocationInfo.getControllerType() call org.springframework.web.servlet.mvc.method.annotation.MethodInvocationInfo.getControllerType() call org.springframework.web.servlet.mvc.method.annotation.MethodInvocationInfo.getControllerType() call org.springframework.web.servlet.mvc.method.annotation.MethodInvocationInfo.getControllerType() decl_stmt com.sun.jdi.Method = call org.springframework.web.servlet.mvc.method.annotation.MethodInvocationInfo.getControllerMethod() call org.springframework.web.servlet.mvc.method.annotation.MethodInvocationInfo.getControllerMethod() call org.springframework.web.servlet.mvc.method.annotation.MethodInvocationInfo.getControllerMethod() call org.springframework.web.servlet.mvc.method.annotation.MethodInvocationInfo.getControllerMethod() call org.springframework.web.servlet.mvc.method.annotation.MethodInvocationInfo.getControllerMethod() decl_stmt java.lang.Object = call MethodInvocationInfo.getArgumentValues() call MethodInvocationInfo.getArgumentValues() call MethodInvocationInfo.getArgumentValues() call MethodInvocationInfo.getArgumentValues() call MethodInvocationInfo.getArgumentValues() return MethodInvocationInfo Method decl Class decl Object public static public static decl_stmt org.springframework.web.servlet.mvc.method.annotation.MethodInvocationInfo = decl_stmt java.lang.Class < = call org.springframework.web.servlet.mvc.method.annotation.MethodInvocationInfo.getControllerType() call org.springframework.web.servlet.mvc.method.annotation.MethodInvocationInfo.getControllerType() call org.springframework.web.servlet.mvc.method.annotation.MethodInvocationInfo.getControllerType() call org.springframework.web.servlet.mvc.method.annotation.MethodInvocationInfo.getControllerType() call org.springframework.web.servlet.mvc.method.annotation.MethodInvocationInfo.getControllerType() decl_stmt com.sun.jdi.Method = call org.springframework.web.servlet.mvc.method.annotation.MethodInvocationInfo.getControllerMethod() call org.springframework.web.servlet.mvc.method.annotation.MethodInvocationInfo.getControllerMethod() call org.springframework.web.servlet.mvc.method.annotation.MethodInvocationInfo.getControllerMethod() call org.springframework.web.servlet.mvc.method.annotation.MethodInvocationInfo.getControllerMethod() call org.springframework.web.servlet.mvc.method.annotation.MethodInvocationInfo.getControllerMethod() decl_stmt java.lang.Object = call MethodInvocationInfo.getArgumentValues() call MethodInvocationInfo.getArgumentValues() call MethodInvocationInfo.getArgumentValues() call MethodInvocationInfo.getArgumentValues() call MethodInvocationInfo.getArgumentValues() return public static public static return RequestMappingInfoHandlerMapping decl List HandlerMethod Method decl Class public static public static decl_stmt org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping = decl_stmt java.util.List < = call RequestMappingInfoHandlerMapping.getHandlerMethodsForMappingName() call RequestMappingInfoHandlerMapping.getHandlerMethodsForMappingName() call RequestMappingInfoHandlerMapping.getHandlerMethodsForMappingName() call RequestMappingInfoHandlerMapping.getHandlerMethodsForMappingName() call RequestMappingInfoHandlerMapping.getHandlerMethodsForMappingName() if == throw new + if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() != throw new + + + decl_stmt org.springframework.web.method.HandlerMethod = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt java.lang.Class < = call org.springframework.web.method.HandlerMethod.getBeanType() call org.springframework.web.method.HandlerMethod.getBeanType() call org.springframework.web.method.HandlerMethod.getBeanType() call org.springframework.web.method.HandlerMethod.getBeanType() call org.springframework.web.method.HandlerMethod.getBeanType() decl_stmt com.sun.jdi.Method = call org.springframework.web.method.HandlerMethod.getMethod() call org.springframework.web.method.HandlerMethod.getMethod() call org.springframework.web.method.HandlerMethod.getMethod() call org.springframework.web.method.HandlerMethod.getMethod() call org.springframework.web.method.HandlerMethod.getMethod() return new public static public static < return public static public static < return != : public static public static return String String String UriComponents private static private static < = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = call org.springframework.util.PathMatcher.combine(String,String) call org.springframework.util.PathMatcher.combine(String,String) call org.springframework.util.PathMatcher.combine(String,String) call org.springframework.util.PathMatcher.combine(String,String) call org.springframework.util.PathMatcher.combine(String,String) call org.springframework.web.util.UriComponentsBuilder.path(String) call org.springframework.web.util.UriComponentsBuilder.path(String) call org.springframework.web.util.UriComponentsBuilder.path(String) call org.springframework.web.util.UriComponentsBuilder.path(String) call org.springframework.web.util.UriComponentsBuilder.path(String) decl_stmt org.springframework.web.util.UriComponents = return private static private static if != return call org.springframework.web.util.UriComponentsBuilder.cloneBuilder() call org.springframework.web.util.UriComponentsBuilder.cloneBuilder() call org.springframework.web.util.UriComponentsBuilder.cloneBuilder() call org.springframework.web.util.UriComponentsBuilder.cloneBuilder() call org.springframework.web.util.UriComponentsBuilder.cloneBuilder() else return decl String RequestMapping private static private static < decl_stmt RequestMapping = if == return decl_stmt java.lang.String = call RequestMapping.path() call RequestMapping.path() call RequestMapping.path() call RequestMapping.path() call RequestMapping.path() if || return if > && call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() + + return decl String RequestMapping private static private static decl_stmt RequestMapping = if == throw new + decl_stmt java.lang.String = call RequestMapping.path() call RequestMapping.path() call RequestMapping.path() call RequestMapping.path() call RequestMapping.path() if || return if > && call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() + + return decl Set int String MethodFilter private static private static < final final final final decl_stmt org.springframework.expression.MethodFilter = new public public decl_stmt java.lang.String = decl_stmt int = return call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) && == decl_stmt java.util.Set < = if call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() == return call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() else if call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() > throw new else throw new + + + + + int String public public decl_stmt java.lang.String = decl_stmt int = return call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) && == CompositeUriComponentsContributor int int decl Map MethodParameter private static private static decl_stmt org.springframework.web.method.support.CompositeUriComponentsContributor = if == call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() = decl_stmt int = decl_stmt int = if != throw new + + + decl_stmt java.util.Map final final final < = new < for = < ++ decl_stmt org.springframework.core.MethodParameter = new call org.springframework.core.MethodParameter.initParameterNameDiscovery(ParameterNameDiscoverer) call org.springframework.core.MethodParameter.initParameterNameDiscovery(ParameterNameDiscoverer) call org.springframework.core.MethodParameter.initParameterNameDiscovery(ParameterNameDiscoverer) call org.springframework.core.MethodParameter.initParameterNameDiscovery(ParameterNameDiscoverer) call org.springframework.core.MethodParameter.initParameterNameDiscovery(ParameterNameDiscoverer) call org.springframework.web.method.support.CompositeUriComponentsContributor.contributeMethodArgument(MethodParameter,Object,UriComponentsBuilder,Map) call org.springframework.web.method.support.CompositeUriComponentsContributor.contributeMethodArgument(MethodParameter,Object,UriComponentsBuilder,Map) call org.springframework.web.method.support.CompositeUriComponentsContributor.contributeMethodArgument(MethodParameter,Object,UriComponentsBuilder,Map) call org.springframework.web.method.support.CompositeUriComponentsContributor.contributeMethodArgument(MethodParameter,Object,UriComponentsBuilder,Map) call org.springframework.web.method.support.CompositeUriComponentsContributor.contributeMethodArgument(MethodParameter,Object,UriComponentsBuilder,Map) return new public public return call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() : public public return : WebApplicationContext private static private static decl_stmt org.springframework.web.context.WebApplicationContext = if == return try return call WebApplicationContext.getBean() call WebApplicationContext.getBean() call WebApplicationContext.getBean() call WebApplicationContext.getBean() call WebApplicationContext.getBean() catch if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + return WebApplicationContext private static private static decl_stmt org.springframework.web.context.WebApplicationContext = try return call WebApplicationContext.getBean() call WebApplicationContext.getBean() call WebApplicationContext.getBean() call WebApplicationContext.getBean() call WebApplicationContext.getBean() catch throw new catch throw new String RequestAttributes HttpServletRequest WebApplicationContext private static private static decl_stmt org.springframework.web.context.request.RequestAttributes = if == call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() return decl_stmt HttpServletRequest = if == call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() return decl_stmt java.lang.String = decl_stmt org.springframework.web.context.WebApplicationContext = call HttpServletRequest.getAttribute() call HttpServletRequest.getAttribute() call HttpServletRequest.getAttribute() call HttpServletRequest.getAttribute() call HttpServletRequest.getAttribute() if == call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() return return public static < public static < < return public static < public static < < return new Enhancer decl Class ProxyFactory Object private static < private static < < if decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() return call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) else decl_stmt Enhancer = new call Enhancer.setSuperclass() call Enhancer.setSuperclass() call Enhancer.setSuperclass() call Enhancer.setSuperclass() call Enhancer.setSuperclass() call Enhancer.setInterfaces() call Enhancer.setInterfaces() call Enhancer.setInterfaces() call Enhancer.setInterfaces() call Enhancer.setInterfaces() new < call Enhancer.setNamingPolicy() call Enhancer.setNamingPolicy() call Enhancer.setNamingPolicy() call Enhancer.setNamingPolicy() call Enhancer.setNamingPolicy() call Enhancer.setCallbackType() call Enhancer.setCallbackType() call Enhancer.setCallbackType() call Enhancer.setCallbackType() call Enhancer.setCallbackType() decl_stmt java.lang.Class < = call Enhancer.createClass() call Enhancer.createClass() call Enhancer.createClass() call Enhancer.createClass() call Enhancer.createClass() decl_stmt java.lang.Object = if call org.springframework.objenesis.SpringObjenesis.isWorthTrying() call org.springframework.objenesis.SpringObjenesis.isWorthTrying() call org.springframework.objenesis.SpringObjenesis.isWorthTrying() call org.springframework.objenesis.SpringObjenesis.isWorthTrying() call org.springframework.objenesis.SpringObjenesis.isWorthTrying() try = call org.springframework.objenesis.SpringObjenesis.newInstance(Class) call org.springframework.objenesis.SpringObjenesis.newInstance(Class) call org.springframework.objenesis.SpringObjenesis.newInstance(Class) call org.springframework.objenesis.SpringObjenesis.newInstance(Class) call org.springframework.objenesis.SpringObjenesis.newInstance(Class) call Enhancer.getUseCache() call Enhancer.getUseCache() call Enhancer.getUseCache() call Enhancer.getUseCache() call Enhancer.getUseCache() catch call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + if == try = call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() catch throw new + new return