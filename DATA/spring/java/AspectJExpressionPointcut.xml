org.springframework.aop.aspectj java.io.IOException import java.io.ObjectInputStream import java.lang.reflect.Method import java.util.Arrays import java.util.HashSet import java.util.Map import java.util.Set import java.util.concurrent.ConcurrentHashMap import org.aopalliance.intercept.MethodInvocation import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.aspectj.weaver.BCException import org.aspectj.weaver.patterns.NamePattern import org.aspectj.weaver.reflect.ReflectionWorld.ReflectionWorldException import org.aspectj.weaver.reflect.ShadowMatchImpl import org.aspectj.weaver.tools.ContextBasedMatcher import org.aspectj.weaver.tools.FuzzyBoolean import org.aspectj.weaver.tools.JoinPointMatch import org.aspectj.weaver.tools.MatchingContext import org.aspectj.weaver.tools.PointcutDesignatorHandler import org.aspectj.weaver.tools.PointcutExpression import org.aspectj.weaver.tools.PointcutParameter import org.aspectj.weaver.tools.PointcutParser import org.aspectj.weaver.tools.PointcutPrimitive import org.aspectj.weaver.tools.ShadowMatch import org.springframework.aop.ClassFilter import org.springframework.aop.IntroductionAwareMethodMatcher import org.springframework.aop.MethodMatcher import org.springframework.aop.ProxyMethodInvocation import org.springframework.aop.framework.autoproxy.ProxyCreationContext import org.springframework.aop.interceptor.ExposeInvocationInterceptor import org.springframework.aop.support.AbstractExpressionPointcut import org.springframework.aop.support.AopUtils import org.springframework.beans.factory.BeanFactory import org.springframework.beans.factory.BeanFactoryAware import org.springframework.beans.factory.BeanFactoryUtils import org.springframework.beans.factory.FactoryBean import org.springframework.beans.factory.config.ConfigurableBeanFactory import org.springframework.util.ClassUtils import org.springframework.util.ObjectUtils import org.springframework.util.StringUtils import class annotation org.springframework.aop.aspectj.AspectJExpressionPointcut super super extends super implements PointcutExpression ClassLoader decl Class BeanFactory decl Map decl String Log decl Set public public < = public public = public public < = public public = public public return public public return private private if == throw new if == = instanceof : = decl PointcutParameter PointcutParser private private decl_stmt PointcutParser = decl_stmt PointcutParameter = new for = < ++ = call PointcutParser.createPointcutParameter() call PointcutParser.createPointcutParameter() call PointcutParser.createPointcutParameter() call PointcutParser.createPointcutParameter() call PointcutParser.createPointcutParameter() return call PointcutParser.parsePointcutExpression() call PointcutParser.parsePointcutExpression() call PointcutParser.parsePointcutExpression() call PointcutParser.parsePointcutExpression() call PointcutParser.parsePointcutExpression() PointcutParser private private decl_stmt PointcutParser = call PointcutParser.registerPointcutDesignatorHandler() call PointcutParser.registerPointcutDesignatorHandler() call PointcutParser.registerPointcutDesignatorHandler() call PointcutParser.registerPointcutDesignatorHandler() call PointcutParser.registerPointcutDesignatorHandler() new return String private private decl_stmt java.lang.String = = = return public public return PointcutExpression public public < try try return catch call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() decl_stmt PointcutExpression = if != return call PointcutExpression.couldMatchJoinPointsInType() call PointcutExpression.couldMatchJoinPointsInType() call PointcutExpression.couldMatchJoinPointsInType() call PointcutExpression.couldMatchJoinPointsInType() call PointcutExpression.couldMatchJoinPointsInType() catch call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() return Method RuntimeTestWalker ShadowMatch public public < decl_stmt com.sun.jdi.Method = decl_stmt ShadowMatch = if call ShadowMatch.alwaysMatches() call ShadowMatch.alwaysMatches() call ShadowMatch.alwaysMatches() call ShadowMatch.alwaysMatches() call ShadowMatch.alwaysMatches() return else if call ShadowMatch.neverMatches() call ShadowMatch.neverMatches() call ShadowMatch.neverMatches() call ShadowMatch.neverMatches() call ShadowMatch.neverMatches() return else if return decl_stmt org.springframework.aop.aspectj.RuntimeTestWalker = return ! call org.springframework.aop.aspectj.RuntimeTestWalker.testsSubtypeSensitiveVars(Test) call org.springframework.aop.aspectj.RuntimeTestWalker.testsSubtypeSensitiveVars(Test) call org.springframework.aop.aspectj.RuntimeTestWalker.testsSubtypeSensitiveVars(Test) call org.springframework.aop.aspectj.RuntimeTestWalker.testsSubtypeSensitiveVars(Test) call org.springframework.aop.aspectj.RuntimeTestWalker.testsSubtypeSensitiveVars(Test) || call org.springframework.aop.aspectj.RuntimeTestWalker.testTargetInstanceOfResidue(Class) call org.springframework.aop.aspectj.RuntimeTestWalker.testTargetInstanceOfResidue(Class) call org.springframework.aop.aspectj.RuntimeTestWalker.testTargetInstanceOfResidue(Class) call org.springframework.aop.aspectj.RuntimeTestWalker.testTargetInstanceOfResidue(Class) call org.springframework.aop.aspectj.RuntimeTestWalker.testTargetInstanceOfResidue(Class) public public < return public public return RuntimeTestWalker ShadowMatch Object MethodInvocation ShadowMatch JoinPointMatch ProxyMethodInvocation Object public public < decl_stmt ShadowMatch = decl_stmt ShadowMatch = decl_stmt org.springframework.aop.ProxyMethodInvocation = decl_stmt java.lang.Object = decl_stmt java.lang.Object = try decl_stmt org.aopalliance.intercept.MethodInvocation = = call MethodInvocation.getThis() call MethodInvocation.getThis() call MethodInvocation.getThis() call MethodInvocation.getThis() call MethodInvocation.getThis() if ! instanceof throw new + = = call ProxyMethodInvocation.getProxy() call ProxyMethodInvocation.getProxy() call ProxyMethodInvocation.getProxy() call ProxyMethodInvocation.getProxy() call ProxyMethodInvocation.getProxy() catch if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + try decl_stmt JoinPointMatch = call ShadowMatch.matchesJoinPoint() call ShadowMatch.matchesJoinPoint() call ShadowMatch.matchesJoinPoint() call ShadowMatch.matchesJoinPoint() call ShadowMatch.matchesJoinPoint() if != decl_stmt org.springframework.aop.aspectj.RuntimeTestWalker = if ! call org.springframework.aop.aspectj.RuntimeTestWalker.testThisInstanceOfResidue(Class) call org.springframework.aop.aspectj.RuntimeTestWalker.testThisInstanceOfResidue(Class) call org.springframework.aop.aspectj.RuntimeTestWalker.testThisInstanceOfResidue(Class) call org.springframework.aop.aspectj.RuntimeTestWalker.testThisInstanceOfResidue(Class) call org.springframework.aop.aspectj.RuntimeTestWalker.testThisInstanceOfResidue(Class) call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() return if call JoinPointMatch.matches() call JoinPointMatch.matches() call JoinPointMatch.matches() call JoinPointMatch.matches() call JoinPointMatch.matches() return call JoinPointMatch.matches() call JoinPointMatch.matches() call JoinPointMatch.matches() call JoinPointMatch.matches() call JoinPointMatch.matches() catch if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + return protected protected return ClassLoader private private < try decl_stmt java.lang.ClassLoader = if != && != return catch call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() return private private if instanceof return new return new private private ShadowMatch Method PointcutExpression private private decl_stmt ShadowMatch = if == synchronized decl_stmt PointcutExpression = decl_stmt com.sun.jdi.Method = = if == try = catch try = call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() if != = call PointcutExpression.matchesMethodExecution() call PointcutExpression.matchesMethodExecution() call PointcutExpression.matchesMethodExecution() call PointcutExpression.matchesMethodExecution() call PointcutExpression.matchesMethodExecution() catch = if == && != = try = catch try = call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() if != = call PointcutExpression.matchesMethodExecution() call PointcutExpression.matchesMethodExecution() call PointcutExpression.matchesMethodExecution() call PointcutExpression.matchesMethodExecution() call PointcutExpression.matchesMethodExecution() catch = if == = new else if call ShadowMatch.maybeMatches() call ShadowMatch.maybeMatches() call ShadowMatch.maybeMatches() call ShadowMatch.maybeMatches() call ShadowMatch.maybeMatches() && != = new call PointcutExpression.matchesMethodExecution() call PointcutExpression.matchesMethodExecution() call PointcutExpression.matchesMethodExecution() call PointcutExpression.matchesMethodExecution() call PointcutExpression.matchesMethodExecution() return AspectJExpressionPointcut public public if == return if ! instanceof return decl_stmt org.springframework.aop.aspectj.AspectJExpressionPointcut = return call AspectJExpressionPointcut.getExpression() call AspectJExpressionPointcut.getExpression() call AspectJExpressionPointcut.getExpression() call AspectJExpressionPointcut.getExpression() call AspectJExpressionPointcut.getExpression() && && && int public public decl_stmt int = = * + = * + = * + return StringBuilder public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if != && != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) for = < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if + < call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public public return public public return new public public return == public public return == public public return public public return public public return boolean String private private < decl_stmt java.lang.String = if == return if return if != decl_stmt boolean = return + : else return || + decl String private private if return if != decl_stmt java.lang.String = call ClassLoader.getAliases() call ClassLoader.getAliases() call ClassLoader.getAliases() call ClassLoader.getAliases() call ClassLoader.getAliases() for : if return return private private throws = new < public public return public public return public public return public public try return catch return public public