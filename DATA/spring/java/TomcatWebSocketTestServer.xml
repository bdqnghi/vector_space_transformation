org.springframework.web.socket java.io.File import java.io.IOException import javax.servlet.Filter import javax.servlet.ServletContext import org.apache.catalina.Context import org.apache.catalina.LifecycleEvent import org.apache.catalina.LifecycleListener import org.apache.catalina.connector.Connector import org.apache.catalina.startup.Tomcat import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.apache.coyote.http11.Http11NioProtocol import org.apache.tomcat.util.descriptor.web.FilterDef import org.apache.tomcat.util.descriptor.web.FilterMap import org.apache.tomcat.websocket.server.WsContextListener import org.springframework.util.Assert import org.springframework.util.SocketUtils import org.springframework.web.context.WebApplicationContext import org.springframework.web.servlet.DispatcherServlet import class org.springframework.web.socket.TomcatWebSocketTestServer super super implements Log Tomcat Context int Connector String File public public = decl_stmt Connector = new call Connector.setPort() call Connector.setPort() call Connector.setPort() call Connector.setPort() call Connector.setPort() decl_stmt File = decl_stmt java.lang.String = call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() = new File private private try decl_stmt File = + + call File.delete() call File.delete() call File.delete() call File.delete() call File.delete() call File.mkdir() call File.mkdir() call File.mkdir() call File.mkdir() call File.mkdir() call File.deleteOnExit() call File.deleteOnExit() call File.deleteOnExit() call File.deleteOnExit() call File.deleteOnExit() return catch throw new public public return FilterDef FilterMap public public != - = new for : decl_stmt FilterDef = new call FilterDef.setFilterName() call FilterDef.setFilterName() call FilterDef.setFilterName() call FilterDef.setFilterName() call FilterDef.setFilterName() call FilterDef.setFilter() call FilterDef.setFilter() call FilterDef.setFilter() call FilterDef.setFilter() call FilterDef.setFilter() call FilterDef.setAsyncSupported() call FilterDef.setAsyncSupported() call FilterDef.setAsyncSupported() call FilterDef.setAsyncSupported() call FilterDef.setAsyncSupported() decl_stmt FilterMap = new call FilterMap.setFilterName() call FilterMap.setFilterName() call FilterMap.setFilterName() call FilterMap.setFilterName() call FilterMap.setFilterName() call FilterMap.addURLPattern() call FilterMap.addURLPattern() call FilterMap.addURLPattern() call FilterMap.addURLPattern() call FilterMap.addURLPattern() call FilterMap.setDispatcher() call FilterMap.setDispatcher() call FilterMap.setDispatcher() call FilterMap.setDispatcher() call FilterMap.setDispatcher() public public return public public if != public public throws new public public if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + public public if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + public public throws