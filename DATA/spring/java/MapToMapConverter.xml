org.springframework.core.convert.support java.util.ArrayList import java.util.Collections import java.util.List import java.util.Map import java.util.Set import org.springframework.core.CollectionFactory import org.springframework.core.convert.ConversionService import org.springframework.core.convert.TypeDescriptor import org.springframework.core.convert.converter.ConditionalGenericConverter import class org.springframework.core.convert.support.MapToMapConverter super super implements ConversionService public < public < return new public public return && Object TypeDescriptor TypeDescriptor decl Map boolean Object decl List Object Object decl Map public public if == return decl_stmt java.util.Map < = < decl_stmt boolean = ! if ! && call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() return decl_stmt org.springframework.core.convert.TypeDescriptor = decl_stmt org.springframework.core.convert.TypeDescriptor = decl_stmt java.util.List < = new < call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt java.lang.Object = decl_stmt java.lang.Object = decl_stmt java.lang.Object = decl_stmt java.lang.Object = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new if != || != = if ! return decl_stmt java.util.Map < = != call org.springframework.core.convert.TypeDescriptor.getType() call org.springframework.core.convert.TypeDescriptor.getType() call org.springframework.core.convert.TypeDescriptor.getType() call org.springframework.core.convert.TypeDescriptor.getType() call org.springframework.core.convert.TypeDescriptor.getType() : call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() for : return private private return private private return private private if == return return private private if == return return public public <