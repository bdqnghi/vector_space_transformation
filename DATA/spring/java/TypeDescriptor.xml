org.springframework.core.convert java.io.Serializable import java.lang.annotation.Annotation import java.lang.reflect.Field import java.lang.reflect.Type import java.util.Collection import java.util.HashMap import java.util.Map import java.util.stream.Stream import org.springframework.core.MethodParameter import org.springframework.core.ResolvableType import org.springframework.core.annotation.AnnotationUtils import org.springframework.lang.UsesJava8 import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.ObjectUtils import class annotation org.springframework.core.convert.TypeDescriptor super super implements boolean decl Map decl Class decl Annotation ResolvableType decl Annotation private private return != : public < public < return public < public < return public public return public public return != : ResolvableType public public if == return decl_stmt org.springframework.core.ResolvableType = return new public public < if == return return new public public return public public return public public return public public < extends extends return != T public < extends extends public < extends extends < for : if == return for : decl_stmt T = if != return return boolean public public decl_stmt boolean = if ! return if && return else if && return else if && return && else return private private if == || == return return public public return public public return public public if return new if && return return public public return public public return public public return public public return public public return public public return private private if != return return != new : TypeDescriptor public public if == return if ! instanceof return decl_stmt org.springframework.core.convert.TypeDescriptor = if ! return if != call org.springframework.core.convert.TypeDescriptor.getAnnotations() call org.springframework.core.convert.TypeDescriptor.getAnnotations() call org.springframework.core.convert.TypeDescriptor.getAnnotations() call org.springframework.core.convert.TypeDescriptor.getAnnotations() call org.springframework.core.convert.TypeDescriptor.getAnnotations() return for : if ! call org.springframework.core.convert.TypeDescriptor.getAnnotation(Class) call org.springframework.core.convert.TypeDescriptor.getAnnotation(Class) call org.springframework.core.convert.TypeDescriptor.getAnnotation(Class) call org.springframework.core.convert.TypeDescriptor.getAnnotation(Class) call org.springframework.core.convert.TypeDescriptor.getAnnotation(Class) return if || return call org.springframework.core.convert.TypeDescriptor.getElementTypeDescriptor() call org.springframework.core.convert.TypeDescriptor.getElementTypeDescriptor() call org.springframework.core.convert.TypeDescriptor.getElementTypeDescriptor() call org.springframework.core.convert.TypeDescriptor.getElementTypeDescriptor() call org.springframework.core.convert.TypeDescriptor.getElementTypeDescriptor() else if return call org.springframework.core.convert.TypeDescriptor.getMapKeyTypeDescriptor() call org.springframework.core.convert.TypeDescriptor.getMapKeyTypeDescriptor() call org.springframework.core.convert.TypeDescriptor.getMapKeyTypeDescriptor() call org.springframework.core.convert.TypeDescriptor.getMapKeyTypeDescriptor() call org.springframework.core.convert.TypeDescriptor.getMapKeyTypeDescriptor() && call org.springframework.core.convert.TypeDescriptor.getMapValueTypeDescriptor(Object) call org.springframework.core.convert.TypeDescriptor.getMapValueTypeDescriptor(Object) call org.springframework.core.convert.TypeDescriptor.getMapValueTypeDescriptor(Object) call org.springframework.core.convert.TypeDescriptor.getMapValueTypeDescriptor(Object) call org.springframework.core.convert.TypeDescriptor.getMapValueTypeDescriptor(Object) else return public public return StringBuilder public public decl_stmt java.lang.StringBuilder = new for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() TypeDescriptor public static public static < if == = decl_stmt org.springframework.core.convert.TypeDescriptor = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return != : new ResolvableType public static public static < if ! throw new decl_stmt org.springframework.core.ResolvableType = != : return new ResolvableType ResolvableType public static public static < if ! throw new decl_stmt org.springframework.core.ResolvableType = != : decl_stmt org.springframework.core.ResolvableType = != : return new public static public static if == return return new public static public static if != throw new + return new public static public static return new public static public static return new public static public static return != : ResolvableType private static private static decl_stmt org.springframework.core.ResolvableType = for = < ++ if == call org.springframework.core.ResolvableType.getType() call org.springframework.core.ResolvableType.getType() call org.springframework.core.ResolvableType.getType() call org.springframework.core.ResolvableType.getType() call org.springframework.core.ResolvableType.getType() else = call org.springframework.core.ResolvableType.getNested(int) call org.springframework.core.ResolvableType.getNested(int) call org.springframework.core.ResolvableType.getNested(int) call org.springframework.core.ResolvableType.getNested(int) call org.springframework.core.ResolvableType.getNested(int) if == return return private static private static if call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() == return return new public static public static < return public static public static return