org.springframework.aop.aspectj java.io.IOException import java.io.ObjectInputStream import java.io.Serializable import java.lang.reflect.InvocationTargetException import java.lang.reflect.Method import java.lang.reflect.Type import java.util.HashMap import java.util.Map import org.aopalliance.aop.Advice import org.aopalliance.intercept.MethodInvocation import org.aspectj.lang.JoinPoint import org.aspectj.lang.ProceedingJoinPoint import org.aspectj.weaver.tools.JoinPointMatch import org.aspectj.weaver.tools.PointcutParameter import org.springframework.aop.AopInvocationException import org.springframework.aop.MethodMatcher import org.springframework.aop.Pointcut import org.springframework.aop.ProxyMethodInvocation import org.springframework.aop.interceptor.ExposeInvocationInterceptor import org.springframework.aop.support.ComposablePointcut import org.springframework.aop.support.MethodMatchers import org.springframework.aop.support.StaticMethodMatcher import org.springframework.core.DefaultParameterNameDiscoverer import org.springframework.core.ParameterNameDiscoverer import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.CollectionUtils import org.springframework.util.ReflectionUtils import org.springframework.util.StringUtils import class annotation org.springframework.aop.aspectj.AbstractAspectJAdvice super super implements String String decl Class String decl Map int String AspectJExpressionPointcut String int Type AspectInstanceFactory boolean decl Class decl String Method int decl Class JoinPoint MethodInvocation ProxyMethodInvocation public static public static decl_stmt org.aopalliance.intercept.MethodInvocation = if ! instanceof throw new + decl_stmt org.springframework.aop.ProxyMethodInvocation = decl_stmt JoinPoint = call org.springframework.aop.ProxyMethodInvocation.getUserAttribute(String) call org.springframework.aop.ProxyMethodInvocation.getUserAttribute(String) call org.springframework.aop.ProxyMethodInvocation.getUserAttribute(String) call org.springframework.aop.ProxyMethodInvocation.getUserAttribute(String) call org.springframework.aop.ProxyMethodInvocation.getUserAttribute(String) if == = new call org.springframework.aop.ProxyMethodInvocation.setUserAttribute(String,Object) call org.springframework.aop.ProxyMethodInvocation.setUserAttribute(String,Object) call org.springframework.aop.ProxyMethodInvocation.setUserAttribute(String,Object) call org.springframework.aop.ProxyMethodInvocation.setUserAttribute(String,Object) call org.springframework.aop.ProxyMethodInvocation.setUserAttribute(String,Object) return public final public final return public final public final return Pointcut MethodMatcher public final public final decl_stmt org.springframework.aop.Pointcut = decl_stmt org.springframework.aop.MethodMatcher = new call org.springframework.aop.Pointcut.getMethodMatcher() call org.springframework.aop.Pointcut.getMethodMatcher() call org.springframework.aop.Pointcut.getMethodMatcher() call org.springframework.aop.Pointcut.getMethodMatcher() call org.springframework.aop.Pointcut.getMethodMatcher() return new call Pointcut.getClassFilter() call Pointcut.getClassFilter() call Pointcut.getClassFilter() call Pointcut.getClassFilter() call Pointcut.getClassFilter() public final public final return public final public final return public public return public public = public public return public public = public public return decl String public public decl_stmt java.lang.String = decl String decl Class public public = new for = < ++ = if ! throw new + + if != if == + decl_stmt java.lang.Class < = if == || == || == decl_stmt java.lang.String = = new + = public public throw new protected protected if = else try = catch throw new + + + + protected < protected < return protected protected return public public throw new protected protected if = else try = catch throw new + + + + protected < protected < return decl char private private decl_stmt char = if ! return for = < ++ if ! return return int public synchronized final public synchronized final if || == return decl_stmt int = if || == return decl_stmt int = if || -- else if -- if > = private private < if == = return else return private private < if == if ! throw new = return else return protected protected return private private < if == = return else return private private if == = if != else throw new + + + + + + AspectJAdviceParameterNameDiscoverer DefaultParameterNameDiscoverer protected protected decl_stmt DefaultParameterNameDiscoverer = new decl_stmt org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer = new call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setReturningName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setReturningName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setReturningName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setReturningName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setReturningName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setThrowingName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setThrowingName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setThrowingName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setThrowingName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setThrowingName(String) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setRaiseExceptions(boolean) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setRaiseExceptions(boolean) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setRaiseExceptions(boolean) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setRaiseExceptions(boolean) call org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setRaiseExceptions(boolean) call DefaultParameterNameDiscoverer.addDiscoverer() call DefaultParameterNameDiscoverer.addDiscoverer() call DefaultParameterNameDiscoverer.addDiscoverer() call DefaultParameterNameDiscoverer.addDiscoverer() call DefaultParameterNameDiscoverer.addDiscoverer() return Integer int int private private = new < decl_stmt int = if != throw new + + + + decl_stmt int = - for = < ++ if != if ! throw new + + else decl_stmt java.lang.Integer = = = if != if ! throw new + + else decl_stmt java.lang.Integer = = int int decl String private private decl_stmt int = if != ++ if != ++ decl_stmt java.lang.String = new - decl_stmt int = if != ++ if != ++ decl_stmt java.lang.String = new - decl_stmt int = if != ++ if != ++ decl_stmt java.lang.String = new - decl_stmt int = if != ++ if != ++ decl_stmt java.lang.String = new - decl_stmt int = for = < ++ if < continue if || continue = = ++ int Integer decl PointcutParameter decl Object String protected protected decl_stmt java.lang.Object = new decl_stmt int = if != - = ++ else if != - = ++ if ! if != decl_stmt PointcutParameter = for : decl_stmt java.lang.String = decl_stmt java.lang.Integer = = ++ if != decl_stmt java.lang.Integer = = ++ if != decl_stmt java.lang.Integer = = ++ if != throw new + + + + + == : + return protected protected throws return protected protected throws return decl Object protected protected throws decl_stmt java.lang.Object = if == = try return catch throw new + + + + catch throw protected protected return MethodInvocation protected protected decl_stmt org.aopalliance.intercept.MethodInvocation = if ! instanceof throw new + return protected protected return public public return + + + + + + private private throws try = catch throw new public public < return ! AdviceExcludingMethodMatcher public public if == return if ! instanceof return decl_stmt AdviceExcludingMethodMatcher = return public public return