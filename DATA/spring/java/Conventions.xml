org.springframework.core java.io.Externalizable import java.io.Serializable import java.lang.reflect.Method import java.lang.reflect.Proxy import java.util.Arrays import java.util.Collection import java.util.Collections import java.util.HashSet import java.util.Iterator import java.util.Set import org.springframework.util.Assert import org.springframework.util.ClassUtils import class org.springframework.core.Conventions decl Set String boolean decl Class Object String decl Collection public static public static decl_stmt java.lang.Class < decl_stmt boolean = if = = else if instanceof decl_stmt java.util.Collection < = < if call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() throw new decl_stmt java.lang.Object = = = else = decl_stmt java.lang.String = return : boolean decl Class String public static public static decl_stmt java.lang.Class < decl_stmt boolean = if = = else if = if == throw new = else = decl_stmt java.lang.String = return : public static public static return public static public static return boolean decl Class Object String decl Collection public static public static < if == if == throw new return decl_stmt java.lang.Class < decl_stmt boolean = if = = else if = if == if ! instanceof throw new decl_stmt java.util.Collection < = < if call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() throw new decl_stmt java.lang.Object = = = else = decl_stmt java.lang.String = return : int decl char decl char boolean public static public static if ! return decl_stmt char = decl_stmt char = new - decl_stmt int = decl_stmt boolean = for : if == = else if ++ = = else ++ = return new public static public static < return + + decl Class private static < private static < decl_stmt java.lang.Class < = if for < : if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() return else if call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() != - && call decl Class.getDeclaringClass() call decl Class.getDeclaringClass() call decl Class.getDeclaringClass() call decl Class.getDeclaringClass() call decl Class.getDeclaringClass() == = call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() return private static private static return + decl Iterator E private static < private static < < decl_stmt java.util.Iterator < = if ! call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() throw new decl_stmt E = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if == throw new return