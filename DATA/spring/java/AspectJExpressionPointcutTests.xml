org.springframework.aop.aspectj java.lang.reflect.Method import org.aopalliance.intercept.MethodInterceptor import org.aopalliance.intercept.MethodInvocation import org.aspectj.weaver.tools.PointcutExpression import org.aspectj.weaver.tools.PointcutPrimitive import org.aspectj.weaver.tools.UnsupportedPointcutPrimitiveException import org.junit.Before import org.junit.Test import org.springframework.aop.ClassFilter import org.springframework.aop.MethodMatcher import org.springframework.aop.Pointcut import org.springframework.aop.framework.ProxyFactory import org.springframework.aop.support.DefaultPointcutAdvisor import org.springframework.tests.sample.beans.IOther import org.springframework.tests.sample.beans.ITestBean import org.springframework.tests.sample.beans.TestBean import org.springframework.tests.sample.beans.subpkg.DeepBean import static static org.junit.Assert.* import class org.springframework.aop.aspectj.AspectJExpressionPointcutTests Method String Method Method public public throws = = = MethodMatcher Pointcut String ClassFilter public public decl_stmt java.lang.String = decl_stmt org.springframework.aop.Pointcut = decl_stmt org.springframework.aop.ClassFilter = call Pointcut.getClassFilter() call Pointcut.getClassFilter() call Pointcut.getClassFilter() call Pointcut.getClassFilter() call Pointcut.getClassFilter() decl_stmt org.springframework.aop.MethodMatcher = call org.springframework.aop.Pointcut.getMethodMatcher() call org.springframework.aop.Pointcut.getMethodMatcher() call org.springframework.aop.Pointcut.getMethodMatcher() call org.springframework.aop.Pointcut.getMethodMatcher() call org.springframework.aop.Pointcut.getMethodMatcher() call org.springframework.aop.MethodMatcher.isRuntime() call org.springframework.aop.MethodMatcher.isRuntime() call org.springframework.aop.MethodMatcher.isRuntime() call org.springframework.aop.MethodMatcher.isRuntime() call org.springframework.aop.MethodMatcher.isRuntime() call org.springframework.aop.MethodMatcher.matches(Method,Class,Object) call org.springframework.aop.MethodMatcher.matches(Method,Class,Object) call org.springframework.aop.MethodMatcher.matches(Method,Class,Object) call org.springframework.aop.MethodMatcher.matches(Method,Class,Object) call org.springframework.aop.MethodMatcher.matches(Method,Class,Object) MethodMatcher Pointcut String ClassFilter public public throws decl_stmt java.lang.String = decl_stmt org.springframework.aop.Pointcut = decl_stmt org.springframework.aop.ClassFilter = call Pointcut.getClassFilter() call Pointcut.getClassFilter() call Pointcut.getClassFilter() call Pointcut.getClassFilter() call Pointcut.getClassFilter() decl_stmt org.springframework.aop.MethodMatcher = call org.springframework.aop.Pointcut.getMethodMatcher() call org.springframework.aop.Pointcut.getMethodMatcher() call org.springframework.aop.Pointcut.getMethodMatcher() call org.springframework.aop.Pointcut.getMethodMatcher() call org.springframework.aop.Pointcut.getMethodMatcher() call org.springframework.aop.MethodMatcher.isRuntime() call org.springframework.aop.MethodMatcher.isRuntime() call org.springframework.aop.MethodMatcher.isRuntime() call org.springframework.aop.MethodMatcher.isRuntime() call org.springframework.aop.MethodMatcher.isRuntime() call org.springframework.aop.MethodMatcher.matches(Method,Class,Object) call org.springframework.aop.MethodMatcher.matches(Method,Class,Object) call org.springframework.aop.MethodMatcher.matches(Method,Class,Object) call org.springframework.aop.MethodMatcher.matches(Method,Class,Object) call org.springframework.aop.MethodMatcher.matches(Method,Class,Object) public public throws public public throws String AspectJExpressionPointcut AspectJExpressionPointcut String private private throws decl_stmt java.lang.String = + decl_stmt java.lang.String = + decl_stmt org.springframework.aop.aspectj.AspectJExpressionPointcut = new call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() decl_stmt org.springframework.aop.aspectj.AspectJExpressionPointcut = new call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) public public throws public public throws String AspectJExpressionPointcut private private throws decl_stmt java.lang.String = if += = + decl_stmt org.springframework.aop.aspectj.AspectJExpressionPointcut = new call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) AspectJExpressionPointcut public public decl_stmt org.springframework.aop.aspectj.AspectJExpressionPointcut = new try call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) catch AspectJExpressionPointcut public public decl_stmt org.springframework.aop.aspectj.AspectJExpressionPointcut = new try call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) catch AspectJExpressionPointcut public public decl_stmt org.springframework.aop.aspectj.AspectJExpressionPointcut = new try call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) call org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(Class) catch MethodMatcher Pointcut String ClassFilter public public throws decl_stmt java.lang.String = decl_stmt org.springframework.aop.Pointcut = decl_stmt org.springframework.aop.ClassFilter = call Pointcut.getClassFilter() call Pointcut.getClassFilter() call Pointcut.getClassFilter() call Pointcut.getClassFilter() call Pointcut.getClassFilter() decl_stmt org.springframework.aop.MethodMatcher = call org.springframework.aop.Pointcut.getMethodMatcher() call org.springframework.aop.Pointcut.getMethodMatcher() call org.springframework.aop.Pointcut.getMethodMatcher() call org.springframework.aop.Pointcut.getMethodMatcher() call org.springframework.aop.Pointcut.getMethodMatcher() call org.springframework.aop.MethodMatcher.matches(Method,Class,Object) call org.springframework.aop.MethodMatcher.matches(Method,Class,Object) call org.springframework.aop.MethodMatcher.matches(Method,Class,Object) call org.springframework.aop.MethodMatcher.matches(Method,Class,Object) call org.springframework.aop.MethodMatcher.matches(Method,Class,Object) new call org.springframework.aop.MethodMatcher.matches(Method,Class,Object) call org.springframework.aop.MethodMatcher.matches(Method,Class,Object) call org.springframework.aop.MethodMatcher.matches(Method,Class,Object) call org.springframework.aop.MethodMatcher.matches(Method,Class,Object) call org.springframework.aop.MethodMatcher.matches(Method,Class,Object) new call org.springframework.aop.MethodMatcher.matches(Method,Class,Object) call org.springframework.aop.MethodMatcher.matches(Method,Class,Object) call org.springframework.aop.MethodMatcher.matches(Method,Class,Object) call org.springframework.aop.MethodMatcher.matches(Method,Class,Object) call org.springframework.aop.MethodMatcher.matches(Method,Class,Object) call org.springframework.aop.MethodMatcher.isRuntime() call org.springframework.aop.MethodMatcher.isRuntime() call org.springframework.aop.MethodMatcher.isRuntime() call org.springframework.aop.MethodMatcher.isRuntime() call org.springframework.aop.MethodMatcher.isRuntime() CallCountingInterceptor String TestBean public public decl_stmt java.lang.String = decl_stmt CallCountingInterceptor = new decl_stmt org.springframework.tests.sample.beans.TestBean = call CallCountingInterceptor.getCount() call CallCountingInterceptor.getCount() call CallCountingInterceptor.getCount() call CallCountingInterceptor.getCount() call CallCountingInterceptor.getCount() call org.springframework.tests.sample.beans.TestBean.getAge() call org.springframework.tests.sample.beans.TestBean.getAge() call org.springframework.tests.sample.beans.TestBean.getAge() call org.springframework.tests.sample.beans.TestBean.getAge() call org.springframework.tests.sample.beans.TestBean.getAge() call CallCountingInterceptor.getCount() call CallCountingInterceptor.getCount() call CallCountingInterceptor.getCount() call CallCountingInterceptor.getCount() call CallCountingInterceptor.getCount() call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) call CallCountingInterceptor.getCount() call CallCountingInterceptor.getCount() call CallCountingInterceptor.getCount() call CallCountingInterceptor.getCount() call CallCountingInterceptor.getCount() CallCountingInterceptor String TestBean public public decl_stmt java.lang.String = decl_stmt CallCountingInterceptor = new decl_stmt org.springframework.tests.sample.beans.TestBean = call CallCountingInterceptor.getCount() call CallCountingInterceptor.getCount() call CallCountingInterceptor.getCount() call CallCountingInterceptor.getCount() call CallCountingInterceptor.getCount() call org.springframework.tests.sample.beans.TestBean.setSomeNumber(Number) call org.springframework.tests.sample.beans.TestBean.setSomeNumber(Number) call org.springframework.tests.sample.beans.TestBean.setSomeNumber(Number) call org.springframework.tests.sample.beans.TestBean.setSomeNumber(Number) call org.springframework.tests.sample.beans.TestBean.setSomeNumber(Number) new call CallCountingInterceptor.getCount() call CallCountingInterceptor.getCount() call CallCountingInterceptor.getCount() call CallCountingInterceptor.getCount() call CallCountingInterceptor.getCount() call org.springframework.tests.sample.beans.TestBean.setSomeNumber(Number) call org.springframework.tests.sample.beans.TestBean.setSomeNumber(Number) call org.springframework.tests.sample.beans.TestBean.setSomeNumber(Number) call org.springframework.tests.sample.beans.TestBean.setSomeNumber(Number) call org.springframework.tests.sample.beans.TestBean.setSomeNumber(Number) new call CallCountingInterceptor.getCount() call CallCountingInterceptor.getCount() call CallCountingInterceptor.getCount() call CallCountingInterceptor.getCount() call CallCountingInterceptor.getCount() String public public decl_stmt java.lang.String = try catch Pointcut ProxyFactory TestBean DefaultPointcutAdvisor private private decl_stmt org.springframework.tests.sample.beans.TestBean = new decl_stmt org.springframework.aop.Pointcut = decl_stmt org.springframework.aop.support.DefaultPointcutAdvisor = new call DefaultPointcutAdvisor.setAdvice() call DefaultPointcutAdvisor.setAdvice() call DefaultPointcutAdvisor.setAdvice() call DefaultPointcutAdvisor.setAdvice() call DefaultPointcutAdvisor.setAdvice() call org.springframework.aop.support.DefaultPointcutAdvisor.setPointcut(Pointcut) call org.springframework.aop.support.DefaultPointcutAdvisor.setPointcut(Pointcut) call org.springframework.aop.support.DefaultPointcutAdvisor.setPointcut(Pointcut) call org.springframework.aop.support.DefaultPointcutAdvisor.setPointcut(Pointcut) call org.springframework.aop.support.DefaultPointcutAdvisor.setPointcut(Pointcut) decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.setTarget() call ProxyFactory.setTarget() call ProxyFactory.setTarget() call ProxyFactory.setTarget() call ProxyFactory.setTarget() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() return call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) private private private private String public public throws decl_stmt java.lang.String = try catch Pointcut PointcutExpression public public decl_stmt org.springframework.aop.Pointcut = decl_stmt PointcutExpression = call PointcutExpression.getPointcutExpression() call PointcutExpression.getPointcutExpression() call PointcutExpression.getPointcutExpression() call PointcutExpression.getPointcutExpression() call PointcutExpression.getPointcutExpression() Pointcut PointcutExpression public public decl_stmt org.springframework.aop.Pointcut = decl_stmt PointcutExpression = call PointcutExpression.getPointcutExpression() call PointcutExpression.getPointcutExpression() call PointcutExpression.getPointcutExpression() call PointcutExpression.getPointcutExpression() call PointcutExpression.getPointcutExpression() AspectJExpressionPointcut private private decl_stmt org.springframework.aop.aspectj.AspectJExpressionPointcut = new call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() return public public