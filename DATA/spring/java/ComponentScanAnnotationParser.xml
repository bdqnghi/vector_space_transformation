org.springframework.context.annotation java.lang.annotation.Annotation import java.util.ArrayList import java.util.Arrays import java.util.LinkedHashSet import java.util.List import java.util.Set import java.util.regex.Pattern import org.springframework.beans.BeanUtils import org.springframework.beans.factory.Aware import org.springframework.beans.factory.BeanClassLoaderAware import org.springframework.beans.factory.BeanFactory import org.springframework.beans.factory.BeanFactoryAware import org.springframework.beans.factory.config.BeanDefinitionHolder import org.springframework.beans.factory.config.ConfigurableBeanFactory import org.springframework.beans.factory.support.BeanDefinitionRegistry import org.springframework.beans.factory.support.BeanNameGenerator import org.springframework.context.ConfigurableApplicationContext import org.springframework.context.EnvironmentAware import org.springframework.context.ResourceLoaderAware import org.springframework.core.annotation.AnnotationAttributes import org.springframework.core.env.Environment import org.springframework.core.io.ResourceLoader import org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter import org.springframework.core.type.filter.AnnotationTypeFilter import org.springframework.core.type.filter.AspectJTypeFilter import org.springframework.core.type.filter.AssignableTypeFilter import org.springframework.core.type.filter.RegexPatternTypeFilter import org.springframework.core.type.filter.TypeFilter import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.StringUtils import class org.springframework.context.annotation.ComponentScanAnnotationParser Environment ResourceLoader BeanDefinitionRegistry BeanNameGenerator boolean decl Class decl Set ClassPathBeanDefinitionScanner decl String decl Class decl String boolean ScopedProxyMode public < public < final final != != decl_stmt org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new call ClassPathBeanDefinitionScanner.setEnvironment() call ClassPathBeanDefinitionScanner.setEnvironment() call ClassPathBeanDefinitionScanner.setEnvironment() call ClassPathBeanDefinitionScanner.setEnvironment() call ClassPathBeanDefinitionScanner.setEnvironment() call ClassPathBeanDefinitionScanner.setResourceLoader() call ClassPathBeanDefinitionScanner.setResourceLoader() call ClassPathBeanDefinitionScanner.setResourceLoader() call ClassPathBeanDefinitionScanner.setResourceLoader() call ClassPathBeanDefinitionScanner.setResourceLoader() decl_stmt java.lang.Class < extends extends = decl_stmt boolean = == call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setBeanNameGenerator(BeanNameGenerator) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setBeanNameGenerator(BeanNameGenerator) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setBeanNameGenerator(BeanNameGenerator) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setBeanNameGenerator(BeanNameGenerator) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setBeanNameGenerator(BeanNameGenerator) : decl_stmt ScopedProxyMode = if != call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setScopedProxyMode(ScopedProxyMode) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setScopedProxyMode(ScopedProxyMode) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setScopedProxyMode(ScopedProxyMode) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setScopedProxyMode(ScopedProxyMode) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setScopedProxyMode(ScopedProxyMode) else decl_stmt java.lang.Class < extends extends = call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setScopeMetadataResolver(ScopeMetadataResolver) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setScopeMetadataResolver(ScopeMetadataResolver) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setScopeMetadataResolver(ScopeMetadataResolver) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setScopeMetadataResolver(ScopeMetadataResolver) call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setScopeMetadataResolver(ScopeMetadataResolver) call ClassPathBeanDefinitionScanner.setResourcePattern() call ClassPathBeanDefinitionScanner.setResourcePattern() call ClassPathBeanDefinitionScanner.setResourcePattern() call ClassPathBeanDefinitionScanner.setResourcePattern() call ClassPathBeanDefinitionScanner.setResourcePattern() for : for : call ClassPathBeanDefinitionScanner.addIncludeFilter() call ClassPathBeanDefinitionScanner.addIncludeFilter() call ClassPathBeanDefinitionScanner.addIncludeFilter() call ClassPathBeanDefinitionScanner.addIncludeFilter() call ClassPathBeanDefinitionScanner.addIncludeFilter() for : for : call ClassPathBeanDefinitionScanner.addExcludeFilter() call ClassPathBeanDefinitionScanner.addExcludeFilter() call ClassPathBeanDefinitionScanner.addExcludeFilter() call ClassPathBeanDefinitionScanner.addExcludeFilter() call ClassPathBeanDefinitionScanner.addExcludeFilter() decl_stmt boolean = if call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.getBeanDefinitionDefaults() call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.getBeanDefinitionDefaults() call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.getBeanDefinitionDefaults() call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.getBeanDefinitionDefaults() call org.springframework.context.annotation.ClassPathBeanDefinitionScanner.getBeanDefinitionDefaults() decl_stmt java.util.Set < = new < decl_stmt java.lang.String = for : decl_stmt java.lang.String = call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() for < : call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() if call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call ClassPathBeanDefinitionScanner.addExcludeFilter() call ClassPathBeanDefinitionScanner.addExcludeFilter() call ClassPathBeanDefinitionScanner.addExcludeFilter() call ClassPathBeanDefinitionScanner.addExcludeFilter() call ClassPathBeanDefinitionScanner.addExcludeFilter() new protected protected return return call ClassPathBeanDefinitionScanner.doScan() call ClassPathBeanDefinitionScanner.doScan() call ClassPathBeanDefinitionScanner.doScan() call ClassPathBeanDefinitionScanner.doScan() call ClassPathBeanDefinitionScanner.doScan() protected protected return TypeFilter decl Class decl List FilterType private < private < decl_stmt java.util.List < = new < decl_stmt FilterType = for < : switch case decl_stmt java.lang.Class < = < call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new break case call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new break case decl_stmt org.springframework.core.type.filter.TypeFilter = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() break default: throw new + for : switch case call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new break case call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new break default: throw new + return ClassLoader private private if instanceof if instanceof if instanceof if instanceof decl_stmt java.lang.ClassLoader = instanceof : if instanceof && instanceof