org.springframework.http.client java.io.IOException import java.io.OutputStream import java.net.URI import java.util.Collections import java.util.Random import org.junit.Ignore import org.junit.Test import org.springframework.http.HttpHeaders import org.springframework.http.HttpMethod import org.springframework.http.HttpRequest import org.springframework.http.HttpStatus import static static org.junit.Assert.* import class org.springframework.http.client.StreamingSimpleHttpRequestFactoryTests super super extends SimpleClientHttpRequestFactory protected protected decl_stmt org.springframework.http.client.SimpleClientHttpRequestFactory = new call org.springframework.http.client.SimpleClientHttpRequestFactory.setBufferRequestBody(boolean) call org.springframework.http.client.SimpleClientHttpRequestFactory.setBufferRequestBody(boolean) call org.springframework.http.client.SimpleClientHttpRequestFactory.setBufferRequestBody(boolean) call org.springframework.http.client.SimpleClientHttpRequestFactory.setBufferRequestBody(boolean) call org.springframework.http.client.SimpleClientHttpRequestFactory.setBufferRequestBody(boolean) return String String ClientHttpRequest InterceptingClientHttpRequestFactory HttpHeaders ClientHttpRequestInterceptor ClientHttpResponse public public throws decl_stmt java.lang.String final final = decl_stmt java.lang.String final final = decl_stmt org.springframework.http.client.ClientHttpRequestInterceptor = new public public throws call ClientHttpRequest.getHeaders() call ClientHttpRequest.getHeaders() call ClientHttpRequest.getHeaders() call ClientHttpRequest.getHeaders() call ClientHttpRequest.getHeaders() return decl_stmt org.springframework.http.client.InterceptingClientHttpRequestFactory = new decl_stmt org.springframework.http.client.ClientHttpResponse = try decl_stmt org.springframework.http.client.ClientHttpRequest = call InterceptingClientHttpRequestFactory.createRequest() call InterceptingClientHttpRequestFactory.createRequest() call InterceptingClientHttpRequestFactory.createRequest() call InterceptingClientHttpRequestFactory.createRequest() call InterceptingClientHttpRequestFactory.createRequest() new + = call ClientHttpRequest.execute() call ClientHttpRequest.execute() call ClientHttpRequest.execute() call ClientHttpRequest.execute() call ClientHttpRequest.execute() call org.springframework.http.client.ClientHttpResponse.getStatusCode() call org.springframework.http.client.ClientHttpResponse.getStatusCode() call org.springframework.http.client.ClientHttpResponse.getStatusCode() call org.springframework.http.client.ClientHttpResponse.getStatusCode() call org.springframework.http.client.ClientHttpResponse.getStatusCode() decl_stmt org.springframework.http.HttpHeaders = call ClientHttpResponse.getHeaders() call ClientHttpResponse.getHeaders() call ClientHttpResponse.getHeaders() call ClientHttpResponse.getHeaders() call ClientHttpResponse.getHeaders() call org.springframework.http.HttpHeaders.getFirst(String) call org.springframework.http.HttpHeaders.getFirst(String) call org.springframework.http.HttpHeaders.getFirst(String) call org.springframework.http.HttpHeaders.getFirst(String) call org.springframework.http.HttpHeaders.getFirst(String) finally if != call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() public public throws return OutputStream int decl byte ClientHttpRequest Random int ClientHttpResponse public public throws decl_stmt java.util.Random = new decl_stmt org.springframework.http.client.ClientHttpResponse = try decl_stmt org.springframework.http.client.ClientHttpRequest = new + decl_stmt int final final = decl_stmt int final final = / decl_stmt java.io.OutputStream = call ClientHttpRequest.getBody() call ClientHttpRequest.getBody() call ClientHttpRequest.getBody() call ClientHttpRequest.getBody() call ClientHttpRequest.getBody() for = < ++ decl_stmt byte = new call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) = call ClientHttpRequest.execute() call ClientHttpRequest.execute() call ClientHttpRequest.execute() call ClientHttpRequest.execute() call ClientHttpRequest.execute() call org.springframework.http.client.ClientHttpResponse.getStatusCode() call org.springframework.http.client.ClientHttpResponse.getStatusCode() call org.springframework.http.client.ClientHttpResponse.getStatusCode() call org.springframework.http.client.ClientHttpResponse.getStatusCode() call org.springframework.http.client.ClientHttpResponse.getStatusCode() finally if != call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close()