org.springframework.scheduling.annotation java.util.concurrent.atomic.AtomicInteger import org.junit.Before import org.junit.Test import org.springframework.aop.support.AopUtils import org.springframework.beans.factory.BeanCreationException import org.springframework.context.annotation.AnnotationConfigApplicationContext import org.springframework.context.annotation.Bean import org.springframework.context.annotation.Configuration import org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor import org.springframework.dao.support.PersistenceExceptionTranslator import org.springframework.stereotype.Repository import org.springframework.tests.Assume import org.springframework.tests.TestGroup import org.springframework.tests.transaction.CallCountingTransactionManager import org.springframework.transaction.PlatformTransactionManager import org.springframework.transaction.annotation.EnableTransactionManagement import org.springframework.transaction.annotation.Transactional import static static org.hamcrest.Matchers.* import static static org.junit.Assert.* import static static org.mockito.BDDMockito.* import class annotation org.springframework.scheduling.annotation.ScheduledAndTransactionalAnnotationIntegrationTests public public AnnotationConfigApplicationContext public public decl_stmt org.springframework.context.annotation.AnnotationConfigApplicationContext = new call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) try call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() catch instanceof CallCountingTransactionManager AnnotationConfigApplicationContext MyRepository public public throws decl_stmt org.springframework.context.annotation.AnnotationConfigApplicationContext = new call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() decl_stmt org.springframework.scheduling.annotation.MyRepository = call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() decl_stmt org.springframework.tests.transaction.CallCountingTransactionManager = call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call MyRepository.getInvocationCount() call MyRepository.getInvocationCount() call MyRepository.getInvocationCount() call MyRepository.getInvocationCount() call MyRepository.getInvocationCount() CallCountingTransactionManager AnnotationConfigApplicationContext MyRepositoryWithScheduledMethod public public throws decl_stmt org.springframework.context.annotation.AnnotationConfigApplicationContext = new call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() decl_stmt MyRepositoryWithScheduledMethod = call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() decl_stmt org.springframework.tests.transaction.CallCountingTransactionManager = call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call MyRepositoryWithScheduledMethod.getInvocationCount() call MyRepositoryWithScheduledMethod.getInvocationCount() call MyRepositoryWithScheduledMethod.getInvocationCount() call MyRepositoryWithScheduledMethod.getInvocationCount() call MyRepositoryWithScheduledMethod.getInvocationCount() public public return new public public return new public public return new public public return new PersistenceExceptionTranslator public public decl_stmt org.springframework.dao.support.PersistenceExceptionTranslator = return = public = public public public return = public = public public public return