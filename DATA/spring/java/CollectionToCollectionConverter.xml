org.springframework.core.convert.support java.util.Collection import java.util.Collections import java.util.Set import org.springframework.core.CollectionFactory import org.springframework.core.convert.ConversionService import org.springframework.core.convert.TypeDescriptor import org.springframework.core.convert.converter.ConditionalGenericConverter import class org.springframework.core.convert.support.CollectionToCollectionConverter super super implements ConversionService public < public < return new public public return TypeDescriptor Object decl Collection boolean decl Collection public public if == return decl_stmt java.util.Collection < = < decl_stmt boolean = ! if ! && call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() return decl_stmt org.springframework.core.convert.TypeDescriptor = if == && ! return decl_stmt java.util.Collection < = != call org.springframework.core.convert.TypeDescriptor.getType() call org.springframework.core.convert.TypeDescriptor.getType() call org.springframework.core.convert.TypeDescriptor.getType() call org.springframework.core.convert.TypeDescriptor.getType() call org.springframework.core.convert.TypeDescriptor.getType() : call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() if == call decl Collection.addAll() call decl Collection.addAll() call decl Collection.addAll() call decl Collection.addAll() call decl Collection.addAll() else for : decl_stmt java.lang.Object = call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() if != = return :