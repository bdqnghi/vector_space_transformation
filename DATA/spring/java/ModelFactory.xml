org.springframework.web.method.annotation java.lang.reflect.Method import java.util.ArrayList import java.util.Collection import java.util.HashSet import java.util.List import java.util.Map import java.util.Set import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.BeanUtils import org.springframework.core.Conventions import org.springframework.core.GenericTypeResolver import org.springframework.core.MethodParameter import org.springframework.ui.Model import org.springframework.ui.ModelMap import org.springframework.util.StringUtils import org.springframework.validation.BindingResult import org.springframework.web.HttpSessionRequiredException import org.springframework.web.bind.WebDataBinder import org.springframework.web.bind.annotation.ModelAttribute import org.springframework.web.bind.support.WebDataBinderFactory import org.springframework.web.context.request.NativeWebRequest import org.springframework.web.method.HandlerMethod import org.springframework.web.method.support.InvocableHandlerMethod import org.springframework.web.method.support.ModelAndViewContainer import class org.springframework.web.method.annotation.ModelFactory SessionAttributesHandler Log WebDataBinderFactory decl List Object decl Map public public throws decl_stmt java.util.Map < = for : if ! decl_stmt java.lang.Object = if == throw new + + String ModelAttribute InvocableHandlerMethod Object private private throws while ! decl_stmt org.springframework.messaging.handler.invocation.InvocableHandlerMethod = decl_stmt ModelAttribute = call InvocableHandlerMethod.getMethodAnnotation() call InvocableHandlerMethod.getMethodAnnotation() call InvocableHandlerMethod.getMethodAnnotation() call InvocableHandlerMethod.getMethodAnnotation() call InvocableHandlerMethod.getMethodAnnotation() if call ModelAttribute.name() call ModelAttribute.name() call ModelAttribute.name() call ModelAttribute.name() call ModelAttribute.name() if ! call ModelAttribute.binding() call ModelAttribute.binding() call ModelAttribute.binding() call ModelAttribute.binding() call ModelAttribute.binding() call ModelAttribute.name() call ModelAttribute.name() call ModelAttribute.name() call ModelAttribute.name() call ModelAttribute.name() continue decl_stmt java.lang.Object = call org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invokeForRequest(NativeWebRequest,ModelAndViewContainer,Object) call org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invokeForRequest(NativeWebRequest,ModelAndViewContainer,Object) call org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invokeForRequest(NativeWebRequest,ModelAndViewContainer,Object) call org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invokeForRequest(NativeWebRequest,ModelAndViewContainer,Object) call org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invokeForRequest(NativeWebRequest,ModelAndViewContainer,Object) if ! call InvocableHandlerMethod.isVoid() call InvocableHandlerMethod.isVoid() call InvocableHandlerMethod.isVoid() call InvocableHandlerMethod.isVoid() call InvocableHandlerMethod.isVoid() decl_stmt java.lang.String = call InvocableHandlerMethod.getReturnType() call InvocableHandlerMethod.getReturnType() call InvocableHandlerMethod.getReturnType() call InvocableHandlerMethod.getReturnType() call InvocableHandlerMethod.getReturnType() if ! call ModelAttribute.binding() call ModelAttribute.binding() call ModelAttribute.binding() call ModelAttribute.binding() call ModelAttribute.binding() if ! ModelMethod private private for : if call ModelMethod.checkDependencies() call ModelMethod.checkDependencies() call ModelMethod.checkDependencies() call ModelMethod.checkDependencies() call ModelMethod.checkDependencies() if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + return decl_stmt ModelMethod = if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + call ModelMethod.getUnresolvedDependencies() call ModelMethod.getUnresolvedDependencies() call ModelMethod.getUnresolvedDependencies() call ModelMethod.getUnresolvedDependencies() call ModelMethod.getUnresolvedDependencies() + + return decl Class decl List String private < private < decl_stmt java.util.List < = new < for : if decl_stmt java.lang.String = decl_stmt java.lang.Class < = if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return ModelAttribute String public static public static decl_stmt ModelAttribute = decl_stmt java.lang.String = != call ModelAttribute.value() call ModelAttribute.value() call ModelAttribute.value() call ModelAttribute.value() call ModelAttribute.value() : return : ModelAttribute decl Class Method decl Class public static public static decl_stmt ModelAttribute = if != && call ModelAttribute.value() call ModelAttribute.value() call ModelAttribute.value() call ModelAttribute.value() call ModelAttribute.value() return call ModelAttribute.value() call ModelAttribute.value() call ModelAttribute.value() call ModelAttribute.value() call ModelAttribute.value() else decl_stmt com.sun.jdi.Method = decl_stmt java.lang.Class < = decl_stmt java.lang.Class < = return ModelMap public public throws decl_stmt org.springframework.ui.ModelMap = if else if ! && == WebDataBinder String Object decl List private private throws decl_stmt java.util.List < = new < for : decl_stmt java.lang.Object = if decl_stmt java.lang.String = + if ! decl_stmt org.springframework.web.bind.WebDataBinder = call WebDataBinder.getBindingResult() call WebDataBinder.getBindingResult() call WebDataBinder.getBindingResult() call WebDataBinder.getBindingResult() call WebDataBinder.getBindingResult() decl Class private private if return decl_stmt java.lang.Class < = != : if return return != && ! && ! instanceof && ! instanceof && ! public public return public public for : if ! return return decl List public < public < decl_stmt java.util.List < = new < for : if ! call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public return