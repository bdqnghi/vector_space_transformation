org.springframework.context.annotation org.junit.Rule import org.junit.Test import org.junit.rules.ExpectedException import org.springframework.aop.support.AopUtils import org.springframework.beans.factory.parsing.BeanDefinitionParsingException import org.springframework.context.support.ClassPathXmlApplicationContext import org.springframework.tests.context.SimpleMapScope import org.springframework.util.SerializationTestUtils import example.scannable.FooService import example.scannable.ScopedProxyTestBean import static static org.hamcrest.CoreMatchers.* import static static org.junit.Assert.* import class org.springframework.context.annotation.ComponentScanParserScopedProxyTests ExpectedException ScopedProxyTestBean ClassPathXmlApplicationContext public public decl_stmt org.springframework.context.support.ClassPathXmlApplicationContext = new call ClassPathXmlApplicationContext.getBeanFactory() call ClassPathXmlApplicationContext.getBeanFactory() call ClassPathXmlApplicationContext.getBeanFactory() call ClassPathXmlApplicationContext.getBeanFactory() call ClassPathXmlApplicationContext.getBeanFactory() new decl_stmt example.scannable.ScopedProxyTestBean = call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() ScopedProxyTestBean ClassPathXmlApplicationContext public public decl_stmt org.springframework.context.support.ClassPathXmlApplicationContext = new call ClassPathXmlApplicationContext.getBeanFactory() call ClassPathXmlApplicationContext.getBeanFactory() call ClassPathXmlApplicationContext.getBeanFactory() call ClassPathXmlApplicationContext.getBeanFactory() call ClassPathXmlApplicationContext.getBeanFactory() new decl_stmt example.scannable.ScopedProxyTestBean = call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() FooService ClassPathXmlApplicationContext FooService public public throws decl_stmt org.springframework.context.support.ClassPathXmlApplicationContext = new call ClassPathXmlApplicationContext.getBeanFactory() call ClassPathXmlApplicationContext.getBeanFactory() call ClassPathXmlApplicationContext.getBeanFactory() call ClassPathXmlApplicationContext.getBeanFactory() call ClassPathXmlApplicationContext.getBeanFactory() new decl_stmt org.springframework.cache.config.FooService = call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call org.springframework.cache.config.FooService.foo(int) call org.springframework.cache.config.FooService.foo(int) call org.springframework.cache.config.FooService.foo(int) call org.springframework.cache.config.FooService.foo(int) call org.springframework.cache.config.FooService.foo(int) decl_stmt org.springframework.cache.config.FooService = call org.springframework.cache.config.FooService.foo(int) call org.springframework.cache.config.FooService.foo(int) call org.springframework.cache.config.FooService.foo(int) call org.springframework.cache.config.FooService.foo(int) call org.springframework.cache.config.FooService.foo(int) call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() ScopedProxyTestBean ClassPathXmlApplicationContext ScopedProxyTestBean public public throws decl_stmt org.springframework.context.support.ClassPathXmlApplicationContext = new call ClassPathXmlApplicationContext.getBeanFactory() call ClassPathXmlApplicationContext.getBeanFactory() call ClassPathXmlApplicationContext.getBeanFactory() call ClassPathXmlApplicationContext.getBeanFactory() call ClassPathXmlApplicationContext.getBeanFactory() new decl_stmt example.scannable.ScopedProxyTestBean = call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call example.scannable.ScopedProxyTestBean.foo(int) call example.scannable.ScopedProxyTestBean.foo(int) call example.scannable.ScopedProxyTestBean.foo(int) call example.scannable.ScopedProxyTestBean.foo(int) call example.scannable.ScopedProxyTestBean.foo(int) decl_stmt example.scannable.ScopedProxyTestBean = call example.scannable.ScopedProxyTestBean.foo(int) call example.scannable.ScopedProxyTestBean.foo(int) call example.scannable.ScopedProxyTestBean.foo(int) call example.scannable.ScopedProxyTestBean.foo(int) call example.scannable.ScopedProxyTestBean.foo(int) call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() public public throws call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expectMessage() call ExpectedException.expectMessage() call ExpectedException.expectMessage() call ExpectedException.expectMessage() call ExpectedException.expectMessage() call ExpectedException.expectMessage() call ExpectedException.expectMessage() call ExpectedException.expectMessage() call ExpectedException.expectMessage() call ExpectedException.expectMessage() new