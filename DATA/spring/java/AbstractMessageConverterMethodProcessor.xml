org.springframework.web.servlet.mvc.method.annotation java.io.IOException import java.lang.reflect.Type import java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.HashSet import java.util.LinkedHashSet import java.util.List import java.util.Locale import java.util.Set import javax.servlet.http.HttpServletRequest import javax.servlet.http.HttpServletResponse import org.springframework.core.MethodParameter import org.springframework.http.HttpEntity import org.springframework.http.HttpHeaders import org.springframework.http.HttpOutputMessage import org.springframework.http.MediaType import org.springframework.http.converter.GenericHttpMessageConverter import org.springframework.http.converter.HttpMessageConverter import org.springframework.http.converter.HttpMessageNotWritableException import org.springframework.http.server.ServletServerHttpRequest import org.springframework.http.server.ServletServerHttpResponse import org.springframework.util.CollectionUtils import org.springframework.util.StringUtils import org.springframework.web.HttpMediaTypeNotAcceptableException import org.springframework.web.accept.ContentNegotiationManager import org.springframework.web.accept.PathExtensionContentNegotiationStrategy import org.springframework.web.context.request.NativeWebRequest import org.springframework.web.context.request.ServletWebRequest import org.springframework.web.method.support.HandlerMethodReturnValueHandler import org.springframework.web.servlet.HandlerMapping import org.springframework.web.util.UrlPathHelper import class org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor super super extends super implements UrlPathHelper decl Set decl Set decl Set UrlPathHelper PathExtensionContentNegotiationStrategy MediaType ContentNegotiationManager PathExtensionContentNegotiationStrategy decl Class private static private static decl_stmt java.lang.Class < = decl_stmt org.springframework.web.accept.PathExtensionContentNegotiationStrategy = return != : new HttpServletResponse protected protected decl_stmt HttpServletResponse = return new ServletServerHttpResponse ServletServerHttpRequest protected < protected < throws decl_stmt org.springframework.http.server.ServletServerHttpRequest = decl_stmt org.springframework.http.server.ServletServerHttpResponse = decl List Type decl Class MediaType decl List decl Set decl List HttpServletRequest protected < protected < throws decl_stmt java.lang.Class < = decl_stmt org.springframework.asm.Type = if != && instanceof = = = decl_stmt HttpServletRequest = decl_stmt java.util.List < = decl_stmt java.util.List < = if != && call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() throw new + decl_stmt java.util.Set < = new < for : for : if call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() if call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() if != throw new return decl_stmt java.util.List < = new < decl_stmt org.springframework.http.MediaType = for : if = break else if || = break if != = call org.springframework.http.MediaType.removeQualityValue() call org.springframework.http.MediaType.removeQualityValue() call org.springframework.http.MediaType.removeQualityValue() call org.springframework.http.MediaType.removeQualityValue() call org.springframework.http.MediaType.removeQualityValue() for < : if instanceof if < = < extends extends extends < if != < if + + + + + + return else if = < extends extends extends < if != < if + + + + + + return if != throw new protected < protected < return != : Type private private decl_stmt org.springframework.asm.Type if = else = return protected < protected < < return decl Set decl List protected < protected < < decl_stmt java.util.Set < = < if ! return new < else if ! decl_stmt java.util.List < = new < for < : if instanceof && != if < call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() else if call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() return else return decl List private < private < throws decl_stmt java.util.List < = new return call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() : MediaType private private decl_stmt org.springframework.http.MediaType = return <= : int int String String HttpHeaders String String HttpServletRequest String private private decl_stmt org.springframework.http.HttpHeaders = if call org.springframework.http.HttpHeaders.containsKey(Object) call org.springframework.http.HttpHeaders.containsKey(Object) call org.springframework.http.HttpHeaders.containsKey(Object) call org.springframework.http.HttpHeaders.containsKey(Object) call org.springframework.http.HttpHeaders.containsKey(Object) return try decl_stmt int = if < || || return catch decl_stmt HttpServletRequest = decl_stmt java.lang.String = call org.springframework.web.util.UrlPathHelper.getOriginatingRequestUri(HttpServletRequest) call org.springframework.web.util.UrlPathHelper.getOriginatingRequestUri(HttpServletRequest) call org.springframework.web.util.UrlPathHelper.getOriginatingRequestUri(HttpServletRequest) call org.springframework.web.util.UrlPathHelper.getOriginatingRequestUri(HttpServletRequest) call org.springframework.web.util.UrlPathHelper.getOriginatingRequestUri(HttpServletRequest) decl_stmt int = call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) + decl_stmt java.lang.String = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) decl_stmt java.lang.String = = call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) if != - = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) = call org.springframework.web.util.UrlPathHelper.decodeRequestString(HttpServletRequest,String) call org.springframework.web.util.UrlPathHelper.decodeRequestString(HttpServletRequest,String) call org.springframework.web.util.UrlPathHelper.decodeRequestString(HttpServletRequest,String) call org.springframework.web.util.UrlPathHelper.decodeRequestString(HttpServletRequest,String) call org.springframework.web.util.UrlPathHelper.decodeRequestString(HttpServletRequest,String) decl_stmt java.lang.String = = call org.springframework.web.util.UrlPathHelper.decodeRequestString(HttpServletRequest,String) call org.springframework.web.util.UrlPathHelper.decodeRequestString(HttpServletRequest,String) call org.springframework.web.util.UrlPathHelper.decodeRequestString(HttpServletRequest,String) call org.springframework.web.util.UrlPathHelper.decodeRequestString(HttpServletRequest,String) call org.springframework.web.util.UrlPathHelper.decodeRequestString(HttpServletRequest,String) decl_stmt java.lang.String = if ! || ! call org.springframework.http.HttpHeaders.add(String,String) call org.springframework.http.HttpHeaders.add(String,String) call org.springframework.http.HttpHeaders.add(String,String) call org.springframework.http.HttpHeaders.add(String,String) call org.springframework.http.HttpHeaders.add(String,String) String String decl Set private private if ! return = if return decl_stmt java.lang.String = if != && call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) + return if decl_stmt java.lang.String = decl_stmt java.util.Set < = < if ! && call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() return return decl List private private decl_stmt java.util.List < = try = catch if return for : if ! return return private private return call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() ||