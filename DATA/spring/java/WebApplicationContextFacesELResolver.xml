org.springframework.web.jsf.el java.beans.FeatureDescriptor import java.util.Iterator import javax.el.ELContext import javax.el.ELException import javax.el.ELResolver import javax.faces.context.FacesContext import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.BeansException import org.springframework.web.context.WebApplicationContext import org.springframework.web.jsf.FacesContextUtils import class org.springframework.web.jsf.el.WebApplicationContextFacesELResolver super super extends Log String String WebApplicationContext public public throws if != if instanceof decl_stmt org.springframework.web.context.WebApplicationContext = decl_stmt java.lang.String = if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + + if call WebApplicationContext.containsBean() call WebApplicationContext.containsBean() call WebApplicationContext.containsBean() call WebApplicationContext.containsBean() call WebApplicationContext.containsBean() if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + try return call WebApplicationContext.getBean() call WebApplicationContext.getBean() call WebApplicationContext.getBean() call WebApplicationContext.getBean() call WebApplicationContext.getBean() catch throw new else return else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return return String WebApplicationContext public < public < throws if != if instanceof decl_stmt org.springframework.web.context.WebApplicationContext = decl_stmt java.lang.String = if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + if call WebApplicationContext.containsBean() call WebApplicationContext.containsBean() call WebApplicationContext.containsBean() call WebApplicationContext.containsBean() call WebApplicationContext.containsBean() if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + try return call WebApplicationContext.getType() call WebApplicationContext.getType() call WebApplicationContext.getType() call WebApplicationContext.getType() call WebApplicationContext.getType() catch throw new else return else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return return public public throws public public throws if instanceof return return public < public < return public < public < return FacesContext protected protected decl_stmt FacesContext = return