org.springframework.web.portlet.handler java.util.Collections import java.util.HashMap import java.util.LinkedHashMap import java.util.LinkedList import java.util.List import java.util.Map import javax.portlet.PortletException import javax.portlet.PortletRequest import org.springframework.beans.BeansException import org.springframework.util.Assert import class super super extends decl Map boolean public public = decl List decl Map Object PortletRequestMappingPredicate K protected protected throws decl_stmt K = decl_stmt java.lang.Object = if != && + + + + if instanceof decl_stmt java.util.Map < = < decl_stmt java.util.List < = new < for : call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() if call PortletRequestMappingPredicate.match() call PortletRequestMappingPredicate.match() call PortletRequestMappingPredicate.match() call PortletRequestMappingPredicate.match() call PortletRequestMappingPredicate.match() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return decl_stmt org.springframework.web.portlet.handler.PortletRequestMappingPredicate = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.springframework.web.portlet.handler.PortletRequestMappingPredicate.validate(PortletRequest) call org.springframework.web.portlet.handler.PortletRequestMappingPredicate.validate(PortletRequest) call org.springframework.web.portlet.handler.PortletRequestMappingPredicate.validate(PortletRequest) call org.springframework.web.portlet.handler.PortletRequestMappingPredicate.validate(PortletRequest) call org.springframework.web.portlet.handler.PortletRequestMappingPredicate.validate(PortletRequest) return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return protected protected < throws for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() protected protected throws Object Object decl Map String protected protected throws decl_stmt java.lang.Object = if ! && instanceof decl_stmt java.lang.String = if = decl_stmt java.lang.Object = if != && ! instanceof if != throw new + + + + + + else if != decl_stmt java.util.Map < = < if == = new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if + + + +