org.springframework.http.converter java.io.FileNotFoundException import java.io.IOException import java.io.InputStream import java.io.OutputStream import java.util.List import javax.activation.FileTypeMap import javax.activation.MimetypesFileTypeMap import org.springframework.core.io.ByteArrayResource import org.springframework.core.io.ClassPathResource import org.springframework.core.io.InputStreamResource import org.springframework.core.io.Resource import org.springframework.http.HttpHeaders import org.springframework.http.HttpInputMessage import org.springframework.http.HttpOutputMessage import org.springframework.http.HttpRange import org.springframework.http.HttpRangeResource import org.springframework.http.MediaType import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.MimeTypeUtils import org.springframework.util.StreamUtils import org.springframework.util.StringUtils import class org.springframework.http.converter.ResourceHttpMessageConverter super super extends boolean protected protected < return decl byte protected protected < extends extends throws if == return new else if decl_stmt byte = return new else throw new + protected protected if return else return long protected protected throws if == return decl_stmt long = return < : protected protected throws if instanceof else InputStream protected protected throws try decl_stmt java.io.InputStream = try catch finally try call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() catch catch String MediaType long Long decl List long HttpRange InputStream long HttpHeaders OutputStream protected protected throws decl_stmt java.util.List < = decl_stmt org.springframework.http.HttpHeaders = decl_stmt org.springframework.http.MediaType = call org.springframework.http.HttpHeaders.getContentType() call org.springframework.http.HttpHeaders.getContentType() call org.springframework.http.HttpHeaders.getContentType() call org.springframework.http.HttpHeaders.getContentType() call org.springframework.http.HttpHeaders.getContentType() decl_stmt java.lang.Long = if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == decl_stmt org.springframework.http.HttpRange = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt long = call org.springframework.http.HttpRange.getRangeStart(long) call org.springframework.http.HttpRange.getRangeStart(long) call org.springframework.http.HttpRange.getRangeStart(long) call org.springframework.http.HttpRange.getRangeStart(long) call org.springframework.http.HttpRange.getRangeStart(long) decl_stmt long = call org.springframework.http.HttpRange.getRangeEnd(long) call org.springframework.http.HttpRange.getRangeEnd(long) call org.springframework.http.HttpRange.getRangeEnd(long) call org.springframework.http.HttpRange.getRangeEnd(long) call org.springframework.http.HttpRange.getRangeEnd(long) decl_stmt long = - + call org.springframework.http.HttpHeaders.add(String,String) call org.springframework.http.HttpHeaders.add(String,String) call org.springframework.http.HttpHeaders.add(String,String) call org.springframework.http.HttpHeaders.add(String,String) call org.springframework.http.HttpHeaders.add(String,String) + + + + + call org.springframework.http.HttpHeaders.setContentLength(long) call org.springframework.http.HttpHeaders.setContentLength(long) call org.springframework.http.HttpHeaders.setContentLength(long) call org.springframework.http.HttpHeaders.setContentLength(long) call org.springframework.http.HttpHeaders.setContentLength(long) decl_stmt java.io.InputStream = try finally try call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() catch else decl_stmt java.lang.String = call org.springframework.http.HttpHeaders.set(String,String) call org.springframework.http.HttpHeaders.set(String,String) call org.springframework.http.HttpHeaders.set(String,String) call org.springframework.http.HttpHeaders.set(String,String) call org.springframework.http.HttpHeaders.set(String,String) + decl_stmt java.io.OutputStream = for : decl_stmt long = call org.springframework.http.HttpRange.getRangeStart(long) call org.springframework.http.HttpRange.getRangeStart(long) call org.springframework.http.HttpRange.getRangeStart(long) call org.springframework.http.HttpRange.getRangeStart(long) call org.springframework.http.HttpRange.getRangeStart(long) decl_stmt long = call org.springframework.http.HttpRange.getRangeEnd(long) call org.springframework.http.HttpRange.getRangeEnd(long) call org.springframework.http.HttpRange.getRangeEnd(long) call org.springframework.http.HttpRange.getRangeEnd(long) call org.springframework.http.HttpRange.getRangeEnd(long) decl_stmt java.io.InputStream = + if != + call org.springframework.http.MediaType.toString(Collection) call org.springframework.http.MediaType.toString(Collection) call org.springframework.http.MediaType.toString(Collection) call org.springframework.http.MediaType.toString(Collection) call org.springframework.http.MediaType.toString(Collection) + + + + + + + private static private static throws private static private static throws long long int byte private private throws decl_stmt long = if < throw new + + + + decl_stmt long = - + decl_stmt byte = new while > decl_stmt int = if <= -= else int = if == - break Resource InputStream private static private static decl_stmt org.springframework.core.io.Resource = new if call org.springframework.core.io.Resource.exists() call org.springframework.core.io.Resource.exists() call org.springframework.core.io.Resource.exists() call org.springframework.core.io.Resource.exists() call org.springframework.core.io.Resource.exists() decl_stmt java.io.InputStream = try = call Resource.getInputStream() call Resource.getInputStream() call Resource.getInputStream() call Resource.getInputStream() call Resource.getInputStream() return new catch finally if != try call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() catch return String String public static public static decl_stmt java.lang.String = if != decl_stmt java.lang.String = if return return