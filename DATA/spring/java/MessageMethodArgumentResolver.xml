org.springframework.messaging.handler.annotation.support java.lang.reflect.Type import org.springframework.core.MethodParameter import org.springframework.core.ResolvableType import org.springframework.messaging.Message import org.springframework.messaging.converter.MessageConversionException import org.springframework.messaging.converter.MessageConverter import org.springframework.messaging.converter.SmartMessageConverter import org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver import org.springframework.messaging.support.MessageBuilder import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.StringUtils import class org.springframework.messaging.handler.annotation.support.MessageMethodArgumentResolver super super implements MessageConverter public public return String decl Class decl Class String Object public public < throws decl_stmt java.lang.Class < = decl_stmt java.lang.Class < = if ! call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() decl_stmt java.lang.String = decl_stmt java.lang.String = throw new + + + + + decl_stmt java.lang.Object = if == || call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() return if decl_stmt java.lang.String = call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() decl_stmt java.lang.String = throw new + + + + + + = return ResolvableType Type private < private < decl_stmt org.springframework.asm.Type = decl_stmt org.springframework.core.ResolvableType = return call org.springframework.core.ResolvableType.getGeneric(int) call org.springframework.core.ResolvableType.getGeneric(int) call org.springframework.core.ResolvableType.getGeneric(int) call org.springframework.core.ResolvableType.getGeneric(int) call org.springframework.core.ResolvableType.getGeneric(int) protected protected if == return else if instanceof return == else if instanceof return ! else return String String Object SmartMessageConverter private private < < decl_stmt java.lang.Object if instanceof decl_stmt org.springframework.jms.support.converter.SmartMessageConverter = = call org.springframework.jms.support.converter.SmartMessageConverter.fromMessage(Message,Class,Object) call org.springframework.jms.support.converter.SmartMessageConverter.fromMessage(Message,Class,Object) call org.springframework.jms.support.converter.SmartMessageConverter.fromMessage(Message,Class,Object) call org.springframework.jms.support.converter.SmartMessageConverter.fromMessage(Message,Class,Object) call org.springframework.jms.support.converter.SmartMessageConverter.fromMessage(Message,Class,Object) else = if == decl_stmt java.lang.String = decl_stmt java.lang.String = throw new + + + + + return