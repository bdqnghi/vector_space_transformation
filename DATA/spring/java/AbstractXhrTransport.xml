org.springframework.web.socket.sockjs.client java.net.URI import java.util.Arrays import java.util.Collections import java.util.List import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.http.HttpHeaders import org.springframework.http.HttpStatus import org.springframework.http.ResponseEntity import org.springframework.util.concurrent.ListenableFuture import org.springframework.util.concurrent.SettableListenableFuture import org.springframework.web.client.HttpServerErrorException import org.springframework.web.socket.TextMessage import org.springframework.web.socket.WebSocketHandler import org.springframework.web.socket.WebSocketSession import org.springframework.web.socket.sockjs.frame.SockJsFrame import org.springframework.web.socket.sockjs.transport.TransportType import class org.springframework.web.socket.sockjs.client.AbstractXhrTransport super super implements HttpHeaders Log String boolean public < public < return : public public = public public return public public if != public public return URI decl SettableListenableFuture XhrClientSockJsSession HttpHeaders public < public < decl_stmt org.springframework.util.concurrent.SettableListenableFuture < = new < decl_stmt org.springframework.web.socket.sockjs.client.XhrClientSockJsSession = new call XhrClientSockJsSession.getTimeoutTask() call XhrClientSockJsSession.getTimeoutTask() call XhrClientSockJsSession.getTimeoutTask() call XhrClientSockJsSession.getTimeoutTask() call XhrClientSockJsSession.getTimeoutTask() decl_stmt java.net.URI = if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + : + + decl_stmt org.springframework.http.HttpHeaders = new call org.springframework.http.HttpHeaders.putAll(Map) call org.springframework.http.HttpHeaders.putAll(Map) call org.springframework.http.HttpHeaders.putAll(Map) call org.springframework.http.HttpHeaders.putAll(Map) call org.springframework.http.HttpHeaders.putAll(Map) call org.springframework.http.HttpHeaders.putAll(Map) call org.springframework.http.HttpHeaders.putAll(Map) call org.springframework.http.HttpHeaders.putAll(Map) call org.springframework.http.HttpHeaders.putAll(Map) call org.springframework.http.HttpHeaders.putAll(Map) return HttpHeaders decl ResponseEntity public public if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + decl_stmt org.springframework.http.HttpHeaders = new call org.springframework.http.HttpHeaders.putAll(Map) call org.springframework.http.HttpHeaders.putAll(Map) call org.springframework.http.HttpHeaders.putAll(Map) call org.springframework.http.HttpHeaders.putAll(Map) call org.springframework.http.HttpHeaders.putAll(Map) if != call org.springframework.http.HttpHeaders.putAll(Map) call org.springframework.http.HttpHeaders.putAll(Map) call org.springframework.http.HttpHeaders.putAll(Map) call org.springframework.http.HttpHeaders.putAll(Map) call org.springframework.http.HttpHeaders.putAll(Map) decl_stmt org.springframework.http.ResponseEntity < = if call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() != if call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + + + throw new call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + + + return call decl ResponseEntity.getBody() call decl ResponseEntity.getBody() call decl ResponseEntity.getBody() call decl ResponseEntity.getBody() call decl ResponseEntity.getBody() decl ResponseEntity public public if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + decl_stmt org.springframework.http.ResponseEntity < = if call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() != if call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + + + throw new call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + + + public public return