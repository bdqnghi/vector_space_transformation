org.springframework.core.annotation java.lang.annotation.Annotation import java.lang.reflect.AnnotatedElement import java.lang.reflect.Array import java.lang.reflect.InvocationHandler import java.lang.reflect.InvocationTargetException import java.lang.reflect.Method import java.lang.reflect.Proxy import java.util.ArrayList import java.util.Collections import java.util.HashSet import java.util.LinkedHashMap import java.util.LinkedHashSet import java.util.List import java.util.Map import java.util.Set import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.core.BridgeMethodResolver import org.springframework.util.Assert import org.springframework.util.ConcurrentReferenceHashMap import org.springframework.util.ObjectUtils import org.springframework.util.ReflectionUtils import org.springframework.util.StringUtils import class org.springframework.core.annotation.AnnotationUtils decl Map decl Map decl Map String String decl Map decl Map Log decl Map decl Map decl Class public static < extends extends public static < extends extends < if return decl_stmt java.lang.Class < extends extends = try return call decl Class.getAnnotation() call decl Class.getAnnotation() call decl Class.getAnnotation() call decl Class.getAnnotation() call decl Class.getAnnotation() catch return A public static < extends extends public static < extends extends < try decl_stmt org.springframework.expression.spel.spr10210.A = if == for : = if != break return catch return Method public static < extends extends public static < extends extends < decl_stmt com.sun.jdi.Method = return public static public static try return catch return public static public static try return catch return public static < extends extends < public static < extends extends < < extends extends < return public static < extends extends < public static < extends extends < < extends extends < return public static < extends extends < public static < extends extends < < return decl Set decl Class public static < extends extends < public static < extends extends < < < extends extends decl_stmt java.util.Set < = if ! call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() return if instanceof decl_stmt java.lang.Class < = < if != && != return return public static < extends extends < public static < extends extends < < return public static < extends extends < public static < extends extends < < < extends extends return private static < extends extends < private static < extends extends < < < extends extends try if instanceof = return new < catch return A public static < extends extends public static < extends extends < if == return decl_stmt org.springframework.expression.spel.spr10210.A = new < return decl Annotation A private static < extends extends private static < extends extends < < try decl_stmt java.text.Annotation = for : if == return for : if ! && decl_stmt org.springframework.expression.spel.spr10210.A = if != return catch return AnnotationCacheKey Method decl Class A Method Method public static < extends extends public static < extends extends < if == return decl_stmt AnnotationCacheKey = new decl_stmt org.springframework.expression.spel.spr10210.A = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == decl_stmt com.sun.jdi.Method = = if == = decl_stmt java.lang.Class < = while == = call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() if == || == break try decl_stmt com.sun.jdi.Method = call decl Class.getDeclaredMethod() call decl Class.getDeclaredMethod() call decl Class.getDeclaredMethod() call decl Class.getDeclaredMethod() call decl Class.getDeclaredMethod() decl_stmt com.sun.jdi.Method = = catch if == = call decl Class.getInterfaces() call decl Class.getInterfaces() call decl Class.getInterfaces() call decl Class.getInterfaces() call decl Class.getInterfaces() if != = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return Method A private static < extends extends private static < extends extends < < decl_stmt org.springframework.expression.spel.spr10210.A = for < : if try decl_stmt com.sun.jdi.Method = = catch if != break return Boolean static static < decl_stmt java.lang.Boolean = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != return call java.lang.Boolean.booleanValue() call java.lang.Boolean.booleanValue() call java.lang.Boolean.booleanValue() call java.lang.Boolean.booleanValue() call java.lang.Boolean.booleanValue() = for : try if > = break catch call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return call java.lang.Boolean.booleanValue() call java.lang.Boolean.booleanValue() call java.lang.Boolean.booleanValue() call java.lang.Boolean.booleanValue() call java.lang.Boolean.booleanValue() public static < extends extends public static < extends extends < < return AnnotationCacheKey A private static < extends extends private static < extends extends < < if == return decl_stmt AnnotationCacheKey = new decl_stmt org.springframework.expression.spel.spr10210.A = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new < if != && = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return decl Annotation A decl Class private static < extends extends private static < extends extends < < < try decl_stmt java.text.Annotation = for : if == return for : if ! && decl_stmt org.springframework.expression.spel.spr10210.A = if != return catch return for < : decl_stmt org.springframework.expression.spel.spr10210.A = if != return decl_stmt java.lang.Class < = if == || == return return public static < public static < < extends extends < if == || == return if return return public static < public static < < < extends extends < if == || == return for < extends extends : if return return public static public static < extends extends < try for : if == return catch return public static public static < extends extends < return && ! AnnotationCacheKey Boolean public static public static < extends extends < extends extends if == return decl_stmt AnnotationCacheKey = new decl_stmt java.lang.Boolean = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != return call java.lang.Boolean.booleanValue() call java.lang.Boolean.booleanValue() call java.lang.Boolean.booleanValue() call java.lang.Boolean.booleanValue() call java.lang.Boolean.booleanValue() = if != = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return call java.lang.Boolean.booleanValue() call java.lang.Boolean.booleanValue() call java.lang.Boolean.booleanValue() call java.lang.Boolean.booleanValue() call java.lang.Boolean.booleanValue() public static public static return public static public static return public static < public static < return public static < public static < return public static public static return public static public static return AnnotationAttributes public static public static decl_stmt org.springframework.core.annotation.AnnotationAttributes = return decl Class Object Throwable Object AnnotationAttributes static static decl_stmt java.lang.Class < extends extends = decl_stmt org.springframework.core.annotation.AnnotationAttributes = new for : try decl_stmt java.lang.Object = decl_stmt java.lang.Object = if != && = new call AnnotationAttributes.put() call AnnotationAttributes.put() call AnnotationAttributes.put() call AnnotationAttributes.put() call AnnotationAttributes.put() catch if instanceof decl_stmt java.lang.Throwable = throw new + return Annotation decl Annotation decl AnnotationAttributes decl String static static if if instanceof return < else if instanceof decl_stmt java.lang.String = new for = < ++ = return if instanceof decl_stmt java.text.Annotation = if return else return if instanceof decl_stmt java.text.Annotation = if decl_stmt org.springframework.core.annotation.AnnotationAttributes = new for = < ++ = return else return return decl Class Object boolean Object String decl Map boolean decl Set static static if == return decl_stmt java.lang.Class < extends extends = decl_stmt java.util.Set < = new < decl_stmt java.util.Map < < = for : call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() continue decl_stmt java.lang.Object = decl_stmt boolean = != && ! instanceof for : call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() continue decl_stmt java.lang.Object = decl_stmt boolean = != && ! instanceof if || if && if ! decl_stmt java.lang.String = != : throw new + + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() else if call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() else call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() for : if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() continue decl_stmt java.lang.Object = if instanceof = public static public static return Method public static public static if == || ! return try decl_stmt com.sun.jdi.Method = return call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) catch return public static public static return public static public static if == return return public static public static < extends extends return public static public static < extends extends if == || ! return try return catch return static < extends extends static < extends extends return decl Class DefaultAnnotationAttributeExtractor InvocationHandler public static < extends extends public static < extends extends if == return if instanceof return decl_stmt java.lang.Class < extends extends = if ! return decl_stmt org.springframework.core.annotation.DefaultAnnotationAttributeExtractor = new decl_stmt java.lang.reflect.InvocationHandler = new if == return if instanceof return decl_stmt java.lang.Class < extends extends = if ! return decl_stmt org.springframework.core.annotation.DefaultAnnotationAttributeExtractor = new decl_stmt java.lang.reflect.InvocationHandler = new return MapAnnotationAttributeExtractor InvocationHandler public static < extends extends public static < extends extends < < if == return decl_stmt org.springframework.core.annotation.MapAnnotationAttributeExtractor = new decl_stmt java.lang.reflect.InvocationHandler = new if == return decl_stmt org.springframework.core.annotation.MapAnnotationAttributeExtractor = new decl_stmt java.lang.reflect.InvocationHandler = new new <