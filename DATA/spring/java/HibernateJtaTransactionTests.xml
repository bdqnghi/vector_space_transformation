org.springframework.orm.hibernate3 java.util.ArrayList import java.util.List import javax.transaction.RollbackException import javax.transaction.Status import javax.transaction.Synchronization import javax.transaction.SystemException import javax.transaction.TransactionManager import javax.transaction.UserTransaction import org.hibernate.FlushMode import org.hibernate.HibernateException import org.hibernate.Query import org.hibernate.SessionFactory import org.hibernate.classic.Session import org.hibernate.engine.SessionFactoryImplementor import org.hibernate.engine.SessionImplementor import org.junit.After import org.junit.Test import org.mockito.InOrder import org.springframework.dao.DataAccessException import org.springframework.tests.transaction.MockJtaTransaction import org.springframework.transaction.TransactionDefinition import org.springframework.transaction.TransactionException import org.springframework.transaction.TransactionStatus import org.springframework.transaction.UnexpectedRollbackException import org.springframework.transaction.jta.JtaTransactionManager import org.springframework.transaction.support.TransactionCallback import org.springframework.transaction.support.TransactionCallbackWithoutResult import org.springframework.transaction.support.TransactionSynchronizationManager import org.springframework.transaction.support.TransactionTemplate import static static org.junit.Assert.* import static static org.mockito.BDDMockito.* import class annotation org.springframework.orm.hibernate3.HibernateJtaTransactionTests public public public public throws public public throws public public throws public public throws JtaTransactionManager InOrder UserTransaction TransactionTemplate List List HibernateTemplate Session Object Query SessionFactory private private final final throws decl_stmt UserTransaction = decl_stmt SessionFactory final final = decl_stmt sun.security.pkcs11.Session final final = decl_stmt javax.management.Query = if == call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() else call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() decl_stmt java.util.List final final = new call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call Session.getSessionFactory() call Session.getSessionFactory() call Session.getSessionFactory() call Session.getSessionFactory() call Session.getSessionFactory() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.createQuery() call Session.createQuery() call Session.createQuery() call Session.createQuery() call Session.createQuery() call Query.list() call Query.list() call Query.list() call Query.list() call Query.list() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() decl_stmt org.springframework.transaction.jta.JtaTransactionManager = new decl_stmt org.springframework.transaction.support.TransactionTemplate = new call TransactionTemplate.setReadOnly() call TransactionTemplate.setReadOnly() call TransactionTemplate.setReadOnly() call TransactionTemplate.setReadOnly() call TransactionTemplate.setReadOnly() ! ! decl_stmt java.lang.Object = call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) new public public try ! decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return = new decl_stmt java.util.List = call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return return catch throw == ! ! if == decl_stmt InOrder = call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() if else List HibernateTemplate public public try ! decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return = new decl_stmt java.util.List = call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return return catch throw public public return public public return public public throws public public throws TransactionManager JtaTransactionManager MockJtaTransaction InOrder UserTransaction TransactionTemplate List List HibernateTemplate Session Object SessionFactoryImplementor private private throws decl_stmt UserTransaction = if == call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() else call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() decl_stmt TransactionManager = decl_stmt org.springframework.tests.transaction.MockJtaTransaction = new call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() decl_stmt SessionFactoryImplementor final final = decl_stmt sun.security.pkcs11.Session final final = call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() decl_stmt org.springframework.transaction.jta.JtaTransactionManager = new decl_stmt org.springframework.transaction.support.TransactionTemplate = new decl_stmt java.util.List final final = new call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) ! ! decl_stmt java.lang.Object = call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) new public public try ! decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) decl_stmt java.util.List = call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return = new call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) = call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return return catch throw == ! ! if == decl_stmt InOrder = call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() List HibernateTemplate public public try ! decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) decl_stmt java.util.List = call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return = new call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) = call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return return catch throw public public return public public return JtaTransactionManager HibernateException UserTransaction TransactionTemplate List List HibernateTemplate Session SessionFactory public public throws decl_stmt UserTransaction = call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() decl_stmt SessionFactory final final = decl_stmt sun.security.pkcs11.Session final final = call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call Session.getSessionFactory() call Session.getSessionFactory() call Session.getSessionFactory() call Session.getSessionFactory() call Session.getSessionFactory() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() decl_stmt org.springframework.transaction.jta.JtaTransactionManager = new decl_stmt org.springframework.transaction.support.TransactionTemplate = new decl_stmt java.util.List final final = new call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) decl_stmt HibernateException final final = new ! ! try call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) new public public try ! decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) decl_stmt java.util.List = call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return = new call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) = call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return return catch throw catch == ! ! List HibernateTemplate public public try ! decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) decl_stmt java.util.List = call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return = new call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) = call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return return catch throw public public return public public return public public throws public public throws JtaTransactionManager InOrder UserTransaction TransactionTemplate List List HibernateTemplate Session Object SessionFactory private private final final throws decl_stmt UserTransaction = call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() decl_stmt SessionFactory final final = decl_stmt sun.security.pkcs11.Session final final = call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call Session.getSessionFactory() call Session.getSessionFactory() call Session.getSessionFactory() call Session.getSessionFactory() call Session.getSessionFactory() decl_stmt org.springframework.transaction.jta.JtaTransactionManager = new decl_stmt org.springframework.transaction.support.TransactionTemplate = new decl_stmt java.util.List final final = new call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) ! decl_stmt java.lang.Object = call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) new public public try decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new decl_stmt java.util.List = call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return if return catch throw == ! decl_stmt InOrder = call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() if List HibernateTemplate public public try decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new decl_stmt java.util.List = call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return if return catch throw public public return public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws TransactionManager JtaTransactionManager MockJtaTransaction InOrder UserTransaction TransactionTemplate List List HibernateTemplate ExtendedSession Object SessionFactoryImplementor protected protected final final final final throws decl_stmt UserTransaction = call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() decl_stmt TransactionManager = if decl_stmt org.springframework.tests.transaction.MockJtaTransaction = new call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() decl_stmt SessionFactoryImplementor final final = decl_stmt ExtendedSession final final = call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() : call ExtendedSession.isOpen() call ExtendedSession.isOpen() call ExtendedSession.isOpen() call ExtendedSession.isOpen() call ExtendedSession.isOpen() call ExtendedSession.getFlushMode() call ExtendedSession.getFlushMode() call ExtendedSession.getFlushMode() call ExtendedSession.getFlushMode() call ExtendedSession.getFlushMode() : new try decl_stmt org.springframework.transaction.jta.JtaTransactionManager = new decl_stmt org.springframework.transaction.support.TransactionTemplate = new call TransactionTemplate.setReadOnly() call TransactionTemplate.setReadOnly() call TransactionTemplate.setReadOnly() call TransactionTemplate.setReadOnly() call TransactionTemplate.setReadOnly() decl_stmt java.util.List final final = new call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) ! decl_stmt java.lang.Object = call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) new public public try decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) decl_stmt java.util.List = for = < ++ = call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return return catch throw == ! finally if if ! decl_stmt InOrder = call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() if ! && ! List HibernateTemplate public public try decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) decl_stmt java.util.List = for = < ++ = call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return return catch throw public public return RollbackException UserTransaction TransactionTemplate JtaTransactionManager HibernateTemplate Session SessionFactory public public throws decl_stmt UserTransaction = call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() decl_stmt RollbackException = new decl_stmt SessionFactory final final = decl_stmt sun.security.pkcs11.Session final final = call Session.getSessionFactory() call Session.getSessionFactory() call Session.getSessionFactory() call Session.getSessionFactory() call Session.getSessionFactory() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() new try decl_stmt org.springframework.transaction.jta.JtaTransactionManager = new decl_stmt org.springframework.transaction.support.TransactionTemplate final final = new ! call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) new public public call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) new public public try decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) for = < ++ call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) new public public return catch throw catch finally HibernateTemplate public public new public public try decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) for = < ++ call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) new public public return catch throw HibernateTemplate public public try decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) for = < ++ call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) new public public return catch throw public public return public public throws public public throws Session JtaTransactionManager decl Transaction SessionFactory decl org UserTransaction Session decl hibernate TransactionManager TransactionTemplate decl transaction decl javax protected protected final final throws decl_stmt UserTransaction = decl_stmt TransactionManager = decl_stmt Transaction = decl_stmt SessionFactory final final = decl_stmt sun.security.pkcs11.Session final final = decl_stmt sun.security.pkcs11.Session final final = call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call TransactionManager.suspend() call TransactionManager.suspend() call TransactionManager.suspend() call TransactionManager.suspend() call TransactionManager.suspend() call decl transaction.openSession() call decl transaction.openSession() call decl transaction.openSession() call decl transaction.openSession() call decl transaction.openSession() call decl Transaction.getSessionFactory() call decl Transaction.getSessionFactory() call decl Transaction.getSessionFactory() call decl Transaction.getSessionFactory() call decl Transaction.getSessionFactory() call SessionFactory.getSessionFactory() call SessionFactory.getSessionFactory() call SessionFactory.getSessionFactory() call SessionFactory.getSessionFactory() call SessionFactory.getSessionFactory() call decl Transaction.isOpen() call decl Transaction.isOpen() call decl Transaction.isOpen() call decl Transaction.isOpen() call decl Transaction.isOpen() call SessionFactory.isOpen() call SessionFactory.isOpen() call SessionFactory.isOpen() call SessionFactory.isOpen() call SessionFactory.isOpen() call SessionFactory.getFlushMode() call SessionFactory.getFlushMode() call SessionFactory.getFlushMode() call SessionFactory.getFlushMode() call SessionFactory.getFlushMode() if ! call decl Transaction.getFlushMode() call decl Transaction.getFlushMode() call decl Transaction.getFlushMode() call decl Transaction.getFlushMode() call decl Transaction.getFlushMode() decl_stmt org.springframework.transaction.jta.JtaTransactionManager = new call Session.setUserTransaction() call Session.setUserTransaction() call Session.setUserTransaction() call Session.setUserTransaction() call Session.setUserTransaction() call Session.setTransactionManager() call Session.setTransactionManager() call Session.setTransactionManager() call Session.setTransactionManager() call Session.setTransactionManager() decl_stmt org.springframework.transaction.support.TransactionTemplate final final = new call Session.setPropagationBehavior() call Session.setPropagationBehavior() call Session.setPropagationBehavior() call Session.setPropagationBehavior() call Session.setPropagationBehavior() ! try call Session.execute() call Session.execute() call Session.execute() call Session.execute() call Session.execute() new public public decl_stmt sun.security.pkcs11.Session = decl_stmt org.springframework.orm.hibernate4.SessionHolder = != try call Session.execute() call Session.execute() call Session.execute() call Session.execute() call Session.execute() new public public decl_stmt sun.security.pkcs11.Session = decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call decl hibernate.setFlushMode() call decl hibernate.setFlushMode() call decl hibernate.setFlushMode() call decl hibernate.setFlushMode() call decl hibernate.setFlushMode() return call decl hibernate.executeFind() call decl hibernate.executeFind() call decl hibernate.executeFind() call decl hibernate.executeFind() call decl hibernate.executeFind() new public public if throw new return return finally == if catch if ! throw finally ! if else if ! decl Session decl org decl hibernate SessionHolder public public decl_stmt sun.security.pkcs11.Session = decl_stmt org.springframework.orm.hibernate4.SessionHolder = != try new public public decl_stmt sun.security.pkcs11.Session = decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call SessionHolder.setFlushMode() call SessionHolder.setFlushMode() call SessionHolder.setFlushMode() call SessionHolder.setFlushMode() call SessionHolder.setFlushMode() return call SessionHolder.executeFind() call SessionHolder.executeFind() call SessionHolder.executeFind() call SessionHolder.executeFind() call SessionHolder.executeFind() new public public if throw new return return finally == decl org decl hibernate public public decl_stmt sun.security.pkcs11.Session = decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call decl hibernate.setFlushMode() call decl hibernate.setFlushMode() call decl hibernate.setFlushMode() call decl hibernate.setFlushMode() call decl hibernate.setFlushMode() return call decl hibernate.executeFind() call decl hibernate.executeFind() call decl hibernate.executeFind() call decl hibernate.executeFind() call decl hibernate.executeFind() new public public if throw new return public public if throw new return public public throws public public throws SessionFactory JtaTransactionManager decl Transaction decl javax UserTransaction Session TransactionManager TransactionTemplate decl transaction protected protected throws decl_stmt UserTransaction = decl_stmt TransactionManager = decl_stmt Transaction = decl_stmt SessionFactory final final = decl_stmt sun.security.pkcs11.Session final final = call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() if call TransactionManager.suspend() call TransactionManager.suspend() call TransactionManager.suspend() call TransactionManager.suspend() call TransactionManager.suspend() new else call TransactionManager.suspend() call TransactionManager.suspend() call TransactionManager.suspend() call TransactionManager.suspend() call TransactionManager.suspend() new call decl transaction.openSession() call decl transaction.openSession() call decl transaction.openSession() call decl transaction.openSession() call decl transaction.openSession() call decl Transaction.getSessionFactory() call decl Transaction.getSessionFactory() call decl Transaction.getSessionFactory() call decl Transaction.getSessionFactory() call decl Transaction.getSessionFactory() decl_stmt org.springframework.transaction.jta.JtaTransactionManager = new call SessionFactory.setUserTransaction() call SessionFactory.setUserTransaction() call SessionFactory.setUserTransaction() call SessionFactory.setUserTransaction() call SessionFactory.setUserTransaction() call SessionFactory.setTransactionManager() call SessionFactory.setTransactionManager() call SessionFactory.setTransactionManager() call SessionFactory.setTransactionManager() call SessionFactory.setTransactionManager() decl_stmt org.springframework.transaction.support.TransactionTemplate final final = new call Session.setPropagationBehavior() call Session.setPropagationBehavior() call Session.setPropagationBehavior() call Session.setPropagationBehavior() call Session.setPropagationBehavior() ! try call Session.execute() call Session.execute() call Session.execute() call Session.execute() call Session.execute() new public public decl_stmt sun.security.pkcs11.Session = decl_stmt org.springframework.orm.hibernate4.SessionHolder = != call Session.execute() call Session.execute() call Session.execute() call Session.execute() call Session.execute() new public public return return catch finally ! if ! decl org decl hibernate public public decl_stmt sun.security.pkcs11.Session = decl_stmt org.springframework.orm.hibernate4.SessionHolder = != new public public return return public public return public public throws public public throws MockJtaTransaction JtaTransactionManager decl Transaction SessionFactoryImplementor decl org UserTransaction MockJtaTransaction decl hibernate TransactionManager Session TransactionTemplate decl transaction decl javax Session protected protected final final throws decl_stmt UserTransaction = decl_stmt TransactionManager = decl_stmt Transaction = decl_stmt SessionFactoryImplementor final final = decl_stmt sun.security.pkcs11.Session final final = decl_stmt sun.security.pkcs11.Session final final = decl_stmt org.springframework.tests.transaction.MockJtaTransaction = new decl_stmt org.springframework.tests.transaction.MockJtaTransaction = new call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.suspend() call TransactionManager.suspend() call TransactionManager.suspend() call TransactionManager.suspend() call TransactionManager.suspend() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call decl transaction.getTransactionManager() call decl transaction.getTransactionManager() call decl transaction.getTransactionManager() call decl transaction.getTransactionManager() call decl transaction.getTransactionManager() call decl transaction.openSession() call decl transaction.openSession() call decl transaction.openSession() call decl transaction.openSession() call decl transaction.openSession() call decl Transaction.isOpen() call decl Transaction.isOpen() call decl Transaction.isOpen() call decl Transaction.isOpen() call decl Transaction.isOpen() call SessionFactoryImplementor.isOpen() call SessionFactoryImplementor.isOpen() call SessionFactoryImplementor.isOpen() call SessionFactoryImplementor.isOpen() call SessionFactoryImplementor.isOpen() call decl Transaction.getFlushMode() call decl Transaction.getFlushMode() call decl Transaction.getFlushMode() call decl Transaction.getFlushMode() call decl Transaction.getFlushMode() call SessionFactoryImplementor.getFlushMode() call SessionFactoryImplementor.getFlushMode() call SessionFactoryImplementor.getFlushMode() call SessionFactoryImplementor.getFlushMode() call SessionFactoryImplementor.getFlushMode() decl_stmt org.springframework.transaction.jta.JtaTransactionManager = new call MockJtaTransaction.setUserTransaction() call MockJtaTransaction.setUserTransaction() call MockJtaTransaction.setUserTransaction() call MockJtaTransaction.setUserTransaction() call MockJtaTransaction.setUserTransaction() call MockJtaTransaction.setTransactionManager() call MockJtaTransaction.setTransactionManager() call MockJtaTransaction.setTransactionManager() call MockJtaTransaction.setTransactionManager() call MockJtaTransaction.setTransactionManager() decl_stmt org.springframework.transaction.support.TransactionTemplate final final = new call MockJtaTransaction.setPropagationBehavior() call MockJtaTransaction.setPropagationBehavior() call MockJtaTransaction.setPropagationBehavior() call MockJtaTransaction.setPropagationBehavior() call MockJtaTransaction.setPropagationBehavior() ! try call MockJtaTransaction.execute() call MockJtaTransaction.execute() call MockJtaTransaction.execute() call MockJtaTransaction.execute() call MockJtaTransaction.execute() new public public decl_stmt sun.security.pkcs11.Session = decl_stmt org.springframework.orm.hibernate4.SessionHolder = != try call MockJtaTransaction.execute() call MockJtaTransaction.execute() call MockJtaTransaction.execute() call MockJtaTransaction.execute() call MockJtaTransaction.execute() new public public decl_stmt sun.security.pkcs11.Session = decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call decl hibernate.setFlushMode() call decl hibernate.setFlushMode() call decl hibernate.setFlushMode() call decl hibernate.setFlushMode() call decl hibernate.setFlushMode() return call decl hibernate.executeFind() call decl hibernate.executeFind() call decl hibernate.executeFind() call decl hibernate.executeFind() call decl hibernate.executeFind() new public public if throw new return return finally == if catch if ! throw finally ! if else decl Session decl org decl hibernate SessionHolder public public decl_stmt sun.security.pkcs11.Session = decl_stmt org.springframework.orm.hibernate4.SessionHolder = != try new public public decl_stmt sun.security.pkcs11.Session = decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call SessionHolder.setFlushMode() call SessionHolder.setFlushMode() call SessionHolder.setFlushMode() call SessionHolder.setFlushMode() call SessionHolder.setFlushMode() return call SessionHolder.executeFind() call SessionHolder.executeFind() call SessionHolder.executeFind() call SessionHolder.executeFind() call SessionHolder.executeFind() new public public if throw new return return finally == decl org decl hibernate public public decl_stmt sun.security.pkcs11.Session = decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call decl hibernate.setFlushMode() call decl hibernate.setFlushMode() call decl hibernate.setFlushMode() call decl hibernate.setFlushMode() call decl hibernate.setFlushMode() return call decl hibernate.executeFind() call decl hibernate.executeFind() call decl hibernate.executeFind() call decl hibernate.executeFind() call decl hibernate.executeFind() new public public if throw new return public public if throw new return Session InOrder UserTransaction TransactionTemplate HibernateTemplate JtaTransactionManager SessionFactory public public throws decl_stmt UserTransaction = call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() decl_stmt SessionFactory final final = decl_stmt sun.security.pkcs11.Session final final = call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call Session.getSessionFactory() call Session.getSessionFactory() call Session.getSessionFactory() call Session.getSessionFactory() call Session.getSessionFactory() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() decl_stmt org.springframework.transaction.jta.JtaTransactionManager = new decl_stmt org.springframework.transaction.support.TransactionTemplate = new call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() ! call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) new public public ! ! decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) new public public return return ! decl_stmt InOrder = call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() HibernateTemplate public public ! ! decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) new public public return return public public return Session UserTransaction TransactionTemplate HibernateTemplate JtaTransactionManager TransactionTemplate SessionFactory public public throws decl_stmt UserTransaction = call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() decl_stmt SessionFactory final final = decl_stmt sun.security.pkcs11.Session final final = call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call Session.getSessionFactory() call Session.getSessionFactory() call Session.getSessionFactory() call Session.getSessionFactory() call Session.getSessionFactory() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() decl_stmt org.springframework.transaction.jta.JtaTransactionManager = new decl_stmt org.springframework.transaction.support.TransactionTemplate = new call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() decl_stmt org.springframework.transaction.support.TransactionTemplate final final = new call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() ! call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) new public public ! ! decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) new public public return call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) new public public decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() return call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return return ! HibernateTemplate public public ! ! decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) new public public return new public public decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() return call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return return public public return HibernateTemplate public public decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() return call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return public public return TransactionManager Synchronization MockJtaTransaction HibernateTemplate Session SessionFactoryImplementor public public throws decl_stmt TransactionManager = decl_stmt org.springframework.tests.transaction.MockJtaTransaction = new call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() decl_stmt SessionFactoryImplementor final final = decl_stmt sun.security.pkcs11.Session final final = call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() ! decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) for = < ++ call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return decl_stmt Synchronization = call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() != call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() ! ! public public return TransactionManager Synchronization MockJtaTransaction HibernateTemplate Session SessionFactoryImplementor public public throws decl_stmt TransactionManager = decl_stmt org.springframework.tests.transaction.MockJtaTransaction = new call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() decl_stmt SessionFactoryImplementor final final = decl_stmt sun.security.pkcs11.Session final final = call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() ! decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) for = < ++ call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return decl_stmt Synchronization = call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() != call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() ! ! public public return TransactionManager Synchronization MockJtaTransaction Thread TransactionTemplate HibernateTemplate Session SessionFactoryImplementor public public throws decl_stmt TransactionManager = decl_stmt org.springframework.tests.transaction.MockJtaTransaction = new call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getStatus() call TransactionManager.getStatus() call TransactionManager.getStatus() call TransactionManager.getStatus() call TransactionManager.getStatus() decl_stmt SessionFactoryImplementor final final = decl_stmt sun.security.pkcs11.Session final final = call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() ! decl_stmt org.springframework.orm.hibernate4.HibernateTemplate final final = new call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) for = < ++ call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return decl_stmt Synchronization final final = call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() != decl_stmt java.lang.Thread = new public public call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) ! decl_stmt org.springframework.transaction.support.TransactionTemplate = new new call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setReadOnly() call TransactionTemplate.setReadOnly() call TransactionTemplate.setReadOnly() call TransactionTemplate.setReadOnly() call TransactionTemplate.setReadOnly() call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) new protected protected for = < ++ call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return ! ! public public return public public protected protected for = < ++ new public public return public public return TransactionManager Synchronization MockJtaTransaction HibernateException HibernateTemplate Session SessionFactoryImplementor public public throws decl_stmt TransactionManager = decl_stmt org.springframework.tests.transaction.MockJtaTransaction = new call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() decl_stmt HibernateException final final = new decl_stmt SessionFactoryImplementor final final = decl_stmt sun.security.pkcs11.Session final final = call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() ! decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) for = < ++ call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return decl_stmt Synchronization = call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() != try call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() catch call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() ! ! public public return Session Session HibernateTemplate TransactionManager Synchronization MockJtaTransaction Synchronization SessionFactoryImplementor MockJtaTransaction public public throws decl_stmt TransactionManager = decl_stmt org.springframework.tests.transaction.MockJtaTransaction = new decl_stmt org.springframework.tests.transaction.MockJtaTransaction = new call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() decl_stmt SessionFactoryImplementor final final = decl_stmt sun.security.pkcs11.Session final final = decl_stmt sun.security.pkcs11.Session final final = call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() ! decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return decl_stmt Synchronization = call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() != call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() decl_stmt Synchronization = call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() != call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() ! ! public public return public public return TransactionManager Synchronization MockJtaTransaction HibernateTemplate Session SessionFactoryImplementor SessionFactory public public throws decl_stmt TransactionManager = decl_stmt org.springframework.tests.transaction.MockJtaTransaction = new call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() decl_stmt SessionFactory final final = decl_stmt sun.security.pkcs11.Session final final = decl_stmt SessionFactoryImplementor final final = call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call Session.getSessionFactory() call Session.getSessionFactory() call Session.getSessionFactory() call Session.getSessionFactory() call Session.getSessionFactory() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() ! decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) for = < ++ call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return decl_stmt Synchronization = call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() != call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() ! ! public public return TransactionManager Synchronization MockJtaTransaction UserTransaction TransactionTemplate HibernateTemplate Session SessionFactoryImplementor public public throws decl_stmt UserTransaction = decl_stmt TransactionManager = decl_stmt org.springframework.tests.transaction.MockJtaTransaction = new call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() decl_stmt SessionFactoryImplementor final final = decl_stmt sun.security.pkcs11.Session final final = call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() ! decl_stmt org.springframework.orm.hibernate4.HibernateTemplate final final = new call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) for = < ++ call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return decl_stmt org.springframework.transaction.support.TransactionTemplate = new new call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) new protected protected for = < ++ call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return decl_stmt Synchronization = call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() != call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() ! ! public public return protected protected for = < ++ new public public return public public return public public throws public public throws TransactionManager Synchronization MockJtaTransaction InOrder HibernateTemplate Session SessionFactoryImplementor private private throws decl_stmt TransactionManager = decl_stmt org.springframework.tests.transaction.MockJtaTransaction = new call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() decl_stmt SessionFactoryImplementor final final = decl_stmt sun.security.pkcs11.Session final final = call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() if call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() else call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() ! new try decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) for = < ++ call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return decl_stmt Synchronization = call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() != call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() finally ! decl_stmt InOrder = if call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() else call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() public public return TransactionManager Synchronization MockJtaTransaction HibernateTemplate Session Thread SessionFactoryImplementor SessionHolder public public throws decl_stmt TransactionManager = decl_stmt org.springframework.tests.transaction.MockJtaTransaction = new decl_stmt SessionFactoryImplementor final final = decl_stmt sun.security.pkcs11.Session final final = call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call TransactionManager.getTransaction() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.openSession() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call SessionFactoryImplementor.getTransactionManager() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() for = < ++ if == ! else decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) call org.springframework.orm.hibernate4.HibernateTemplate.setExposeNativeSession(boolean) for = < ++ call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.executeFind(HibernateCallback) new public public return decl_stmt Synchronization final final = call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() call MockJtaTransaction.getSynchronization() != decl_stmt java.lang.Thread = new public public call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.beforeCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call Synchronization.afterCompletion() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) decl_stmt org.springframework.orm.hibernate4.SessionHolder = call org.springframework.orm.hibernate4.SessionHolder.isEmpty() call org.springframework.orm.hibernate4.SessionHolder.isEmpty() call org.springframework.orm.hibernate4.SessionHolder.isEmpty() call org.springframework.orm.hibernate4.SessionHolder.isEmpty() call org.springframework.orm.hibernate4.SessionHolder.isEmpty() ! public public return public public