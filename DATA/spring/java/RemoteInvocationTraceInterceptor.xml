org.springframework.remoting.support java.lang.reflect.Method import org.aopalliance.intercept.MethodInterceptor import org.aopalliance.intercept.MethodInvocation import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.util.ClassUtils import class org.springframework.remoting.support.RemoteInvocationTraceInterceptor super super implements Log String Object Method public public throws decl_stmt com.sun.jdi.Method = if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + try decl_stmt java.lang.Object = if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + return catch if instanceof || instanceof if call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() + + + else if call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() + + + throw