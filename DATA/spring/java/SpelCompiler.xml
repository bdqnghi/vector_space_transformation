org.springframework.expression.spel.standard java.io.File import java.io.FileOutputStream import java.io.IOException import java.net.URL import java.net.URLClassLoader import java.util.Map import java.util.concurrent.atomic.AtomicInteger import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.asm.ClassWriter import org.springframework.asm.MethodVisitor import org.springframework.asm.Opcodes import org.springframework.expression.Expression import org.springframework.expression.spel.CodeFlow import org.springframework.expression.spel.CompiledExpression import org.springframework.expression.spel.SpelParserConfiguration import org.springframework.expression.spel.ast.SpelNodeImpl import org.springframework.util.ClassUtils import org.springframework.util.ConcurrentReferenceHashMap import class org.springframework.expression.spel.standard.SpelCompiler super super implements ChildClassLoader Log AtomicInteger decl Map decl Class public public if if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + decl_stmt java.lang.Class < extends extends = if != try return call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() catch throw new if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + return private private return decl byte MethodVisitor ClassWriter CodeFlow String private < extends extends private < extends extends decl_stmt java.lang.String = + decl_stmt org.springframework.asm.ClassWriter = new call org.springframework.asm.ClassWriter.visit(int,int,String,String,String,String) call org.springframework.asm.ClassWriter.visit(int,int,String,String,String,String) call org.springframework.asm.ClassWriter.visit(int,int,String,String,String,String) call org.springframework.asm.ClassWriter.visit(int,int,String,String,String,String) call org.springframework.asm.ClassWriter.visit(int,int,String,String,String,String) decl_stmt org.springframework.asm.MethodVisitor = call org.springframework.asm.ClassWriter.visitMethod(int,String,String,String,String) call org.springframework.asm.ClassWriter.visitMethod(int,String,String,String,String) call org.springframework.asm.ClassWriter.visitMethod(int,String,String,String,String) call org.springframework.asm.ClassWriter.visitMethod(int,String,String,String,String) call org.springframework.asm.ClassWriter.visitMethod(int,String,String,String,String) call org.springframework.asm.MethodVisitor.visitCode() call org.springframework.asm.MethodVisitor.visitCode() call org.springframework.asm.MethodVisitor.visitCode() call org.springframework.asm.MethodVisitor.visitCode() call org.springframework.asm.MethodVisitor.visitCode() call org.springframework.asm.MethodVisitor.visitVarInsn(int,int) call org.springframework.asm.MethodVisitor.visitVarInsn(int,int) call org.springframework.asm.MethodVisitor.visitVarInsn(int,int) call org.springframework.asm.MethodVisitor.visitVarInsn(int,int) call org.springframework.asm.MethodVisitor.visitVarInsn(int,int) call org.springframework.asm.MethodVisitor.visitMethodInsn(int,String,String,String) call org.springframework.asm.MethodVisitor.visitMethodInsn(int,String,String,String) call org.springframework.asm.MethodVisitor.visitMethodInsn(int,String,String,String) call org.springframework.asm.MethodVisitor.visitMethodInsn(int,String,String,String) call org.springframework.asm.MethodVisitor.visitMethodInsn(int,String,String,String) call org.springframework.asm.MethodVisitor.visitInsn(int) call org.springframework.asm.MethodVisitor.visitInsn(int) call org.springframework.asm.MethodVisitor.visitInsn(int) call org.springframework.asm.MethodVisitor.visitInsn(int) call org.springframework.asm.MethodVisitor.visitInsn(int) call org.springframework.asm.MethodVisitor.visitMaxs(int,int) call org.springframework.asm.MethodVisitor.visitMaxs(int,int) call org.springframework.asm.MethodVisitor.visitMaxs(int,int) call org.springframework.asm.MethodVisitor.visitMaxs(int,int) call org.springframework.asm.MethodVisitor.visitMaxs(int,int) call org.springframework.asm.MethodVisitor.visitEnd() call org.springframework.asm.MethodVisitor.visitEnd() call org.springframework.asm.MethodVisitor.visitEnd() call org.springframework.asm.MethodVisitor.visitEnd() call org.springframework.asm.MethodVisitor.visitEnd() = call org.springframework.asm.ClassWriter.visitMethod(int,String,String,String,String) call org.springframework.asm.ClassWriter.visitMethod(int,String,String,String,String) call org.springframework.asm.ClassWriter.visitMethod(int,String,String,String,String) call org.springframework.asm.ClassWriter.visitMethod(int,String,String,String,String) call org.springframework.asm.ClassWriter.visitMethod(int,String,String,String,String) new call org.springframework.asm.MethodVisitor.visitCode() call org.springframework.asm.MethodVisitor.visitCode() call org.springframework.asm.MethodVisitor.visitCode() call org.springframework.asm.MethodVisitor.visitCode() call org.springframework.asm.MethodVisitor.visitCode() decl_stmt org.springframework.expression.spel.CodeFlow = new try catch if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + return call org.springframework.expression.spel.CodeFlow.lastDescriptor() call org.springframework.expression.spel.CodeFlow.lastDescriptor() call org.springframework.expression.spel.CodeFlow.lastDescriptor() call org.springframework.expression.spel.CodeFlow.lastDescriptor() call org.springframework.expression.spel.CodeFlow.lastDescriptor() if call org.springframework.expression.spel.CodeFlow.lastDescriptor() call org.springframework.expression.spel.CodeFlow.lastDescriptor() call org.springframework.expression.spel.CodeFlow.lastDescriptor() call org.springframework.expression.spel.CodeFlow.lastDescriptor() call org.springframework.expression.spel.CodeFlow.lastDescriptor() call org.springframework.asm.MethodVisitor.visitInsn(int) call org.springframework.asm.MethodVisitor.visitInsn(int) call org.springframework.asm.MethodVisitor.visitInsn(int) call org.springframework.asm.MethodVisitor.visitInsn(int) call org.springframework.asm.MethodVisitor.visitInsn(int) call org.springframework.asm.MethodVisitor.visitInsn(int) call org.springframework.asm.MethodVisitor.visitInsn(int) call org.springframework.asm.MethodVisitor.visitInsn(int) call org.springframework.asm.MethodVisitor.visitInsn(int) call org.springframework.asm.MethodVisitor.visitInsn(int) call org.springframework.asm.MethodVisitor.visitMaxs(int,int) call org.springframework.asm.MethodVisitor.visitMaxs(int,int) call org.springframework.asm.MethodVisitor.visitMaxs(int,int) call org.springframework.asm.MethodVisitor.visitMaxs(int,int) call org.springframework.asm.MethodVisitor.visitMaxs(int,int) call org.springframework.asm.MethodVisitor.visitEnd() call org.springframework.asm.MethodVisitor.visitEnd() call org.springframework.asm.MethodVisitor.visitEnd() call org.springframework.asm.MethodVisitor.visitEnd() call org.springframework.asm.MethodVisitor.visitEnd() call org.springframework.asm.ClassWriter.visitEnd() call org.springframework.asm.ClassWriter.visitEnd() call org.springframework.asm.ClassWriter.visitEnd() call org.springframework.asm.ClassWriter.visitEnd() call org.springframework.asm.ClassWriter.visitEnd() call org.springframework.expression.spel.CodeFlow.finish() call org.springframework.expression.spel.CodeFlow.finish() call org.springframework.expression.spel.CodeFlow.finish() call org.springframework.expression.spel.CodeFlow.finish() call org.springframework.expression.spel.CodeFlow.finish() decl_stmt byte = call org.springframework.asm.ClassWriter.toByteArray() call org.springframework.asm.ClassWriter.toByteArray() call org.springframework.asm.ClassWriter.toByteArray() call org.springframework.asm.ClassWriter.toByteArray() call org.springframework.asm.ClassWriter.toByteArray() return < extends extends call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) ClassLoader SpelCompiler public static public static decl_stmt java.lang.ClassLoader = != : synchronized decl_stmt org.springframework.expression.spel.standard.SpelCompiler = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return public static public static return instanceof && public static public static if instanceof FileOutputStream File File String String String private static private static decl_stmt java.lang.String = decl_stmt java.lang.String = call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) != - call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) : decl_stmt java.lang.String = try decl_stmt File = = + + + call File.delete() call File.delete() call File.delete() call File.delete() call File.delete() decl_stmt File = new call File.mkdirs() call File.mkdirs() call File.mkdirs() call File.mkdirs() call File.mkdirs() if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + = new decl_stmt java.io.FileOutputStream = new call java.io.FileOutputStream.write(byte) call java.io.FileOutputStream.write(byte) call java.io.FileOutputStream.write(byte) call java.io.FileOutputStream.write(byte) call java.io.FileOutputStream.write(byte) call FileOutputStream.flush() call FileOutputStream.flush() call FileOutputStream.flush() call FileOutputStream.flush() call FileOutputStream.flush() call java.io.FileOutputStream.close() call java.io.FileOutputStream.close() call java.io.FileOutputStream.close() call java.io.FileOutputStream.close() call java.io.FileOutputStream.close() catch throw new + + + public < public < return protected protected return