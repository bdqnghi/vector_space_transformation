org.springframework.jms.listener javax.jms.Connection import javax.jms.ConnectionFactory import javax.jms.Destination import javax.jms.JMSException import org.junit.Test import org.mockito.invocation.InvocationOnMock import org.mockito.stubbing.Answer import org.springframework.util.backoff.BackOff import org.springframework.util.backoff.BackOffExecution import static static org.junit.Assert.* import static static org.mockito.BDDMockito.* import class org.springframework.jms.listener.DefaultMessageListenerContainerTests BackOffExecution DefaultMessageListenerContainer BackOff public public decl_stmt org.springframework.util.backoff.BackOff = decl_stmt org.springframework.util.backoff.BackOffExecution = call BackOffExecution.nextBackOff() call BackOffExecution.nextBackOff() call BackOffExecution.nextBackOff() call BackOffExecution.nextBackOff() call BackOffExecution.nextBackOff() call BackOff.start() call BackOff.start() call BackOff.start() call BackOff.start() call BackOff.start() decl_stmt org.springframework.jms.listener.DefaultMessageListenerContainer = call org.springframework.jms.listener.DefaultMessageListenerContainer.start() call org.springframework.jms.listener.DefaultMessageListenerContainer.start() call org.springframework.jms.listener.DefaultMessageListenerContainer.start() call org.springframework.jms.listener.DefaultMessageListenerContainer.start() call org.springframework.jms.listener.DefaultMessageListenerContainer.start() call DefaultMessageListenerContainer.isRunning() call DefaultMessageListenerContainer.isRunning() call DefaultMessageListenerContainer.isRunning() call DefaultMessageListenerContainer.isRunning() call DefaultMessageListenerContainer.isRunning() call org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful() call org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful() call org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful() call org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful() call org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful() call DefaultMessageListenerContainer.isRunning() call DefaultMessageListenerContainer.isRunning() call DefaultMessageListenerContainer.isRunning() call DefaultMessageListenerContainer.isRunning() call DefaultMessageListenerContainer.isRunning() BackOffExecution DefaultMessageListenerContainer BackOff public public decl_stmt org.springframework.util.backoff.BackOff = decl_stmt org.springframework.util.backoff.BackOffExecution = call BackOffExecution.nextBackOff() call BackOffExecution.nextBackOff() call BackOffExecution.nextBackOff() call BackOffExecution.nextBackOff() call BackOffExecution.nextBackOff() call BackOff.start() call BackOff.start() call BackOff.start() call BackOff.start() call BackOff.start() decl_stmt org.springframework.jms.listener.DefaultMessageListenerContainer = call org.springframework.jms.listener.DefaultMessageListenerContainer.start() call org.springframework.jms.listener.DefaultMessageListenerContainer.start() call org.springframework.jms.listener.DefaultMessageListenerContainer.start() call org.springframework.jms.listener.DefaultMessageListenerContainer.start() call org.springframework.jms.listener.DefaultMessageListenerContainer.start() call org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful() call org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful() call org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful() call org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful() call org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful() call DefaultMessageListenerContainer.isRunning() call DefaultMessageListenerContainer.isRunning() call DefaultMessageListenerContainer.isRunning() call DefaultMessageListenerContainer.isRunning() call DefaultMessageListenerContainer.isRunning() BackOffExecution DefaultMessageListenerContainer BackOff public public decl_stmt org.springframework.util.backoff.BackOff = decl_stmt org.springframework.util.backoff.BackOffExecution = call BackOffExecution.nextBackOff() call BackOffExecution.nextBackOff() call BackOffExecution.nextBackOff() call BackOffExecution.nextBackOff() call BackOffExecution.nextBackOff() call BackOff.start() call BackOff.start() call BackOff.start() call BackOff.start() call BackOff.start() decl_stmt org.springframework.jms.listener.DefaultMessageListenerContainer = call org.springframework.jms.listener.DefaultMessageListenerContainer.start() call org.springframework.jms.listener.DefaultMessageListenerContainer.start() call org.springframework.jms.listener.DefaultMessageListenerContainer.start() call org.springframework.jms.listener.DefaultMessageListenerContainer.start() call org.springframework.jms.listener.DefaultMessageListenerContainer.start() call org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful() call org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful() call org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful() call org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful() call org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful() call DefaultMessageListenerContainer.isRunning() call DefaultMessageListenerContainer.isRunning() call DefaultMessageListenerContainer.isRunning() call DefaultMessageListenerContainer.isRunning() call DefaultMessageListenerContainer.isRunning() Destination DefaultMessageListenerContainer private private decl_stmt javax.print.attribute.standard.Destination = new decl_stmt org.springframework.jms.listener.DefaultMessageListenerContainer = new call DefaultMessageListenerContainer.setConnectionFactory() call DefaultMessageListenerContainer.setConnectionFactory() call DefaultMessageListenerContainer.setConnectionFactory() call DefaultMessageListenerContainer.setConnectionFactory() call DefaultMessageListenerContainer.setConnectionFactory() call org.springframework.jms.listener.DefaultMessageListenerContainer.setCacheLevel(int) call org.springframework.jms.listener.DefaultMessageListenerContainer.setCacheLevel(int) call org.springframework.jms.listener.DefaultMessageListenerContainer.setCacheLevel(int) call org.springframework.jms.listener.DefaultMessageListenerContainer.setCacheLevel(int) call org.springframework.jms.listener.DefaultMessageListenerContainer.setCacheLevel(int) call DefaultMessageListenerContainer.setDestination() call DefaultMessageListenerContainer.setDestination() call DefaultMessageListenerContainer.setDestination() call DefaultMessageListenerContainer.setDestination() call DefaultMessageListenerContainer.setDestination() call org.springframework.jms.listener.DefaultMessageListenerContainer.setBackOff(BackOff) call org.springframework.jms.listener.DefaultMessageListenerContainer.setBackOff(BackOff) call org.springframework.jms.listener.DefaultMessageListenerContainer.setBackOff(BackOff) call org.springframework.jms.listener.DefaultMessageListenerContainer.setBackOff(BackOff) call org.springframework.jms.listener.DefaultMessageListenerContainer.setBackOff(BackOff) return ConnectionFactory private private try decl_stmt ConnectionFactory = call ConnectionFactory.createConnection() call ConnectionFactory.createConnection() call ConnectionFactory.createConnection() call ConnectionFactory.createConnection() call ConnectionFactory.createConnection() new < public public throws throw new return catch throw new public public throws throw new int ConnectionFactory private private final final try decl_stmt ConnectionFactory = call ConnectionFactory.createConnection() call ConnectionFactory.createConnection() call ConnectionFactory.createConnection() call ConnectionFactory.createConnection() call ConnectionFactory.createConnection() new < decl_stmt int = public public throws ++ if <= throw new + + else return return catch throw new public public throws ++ if <= throw new + + else return