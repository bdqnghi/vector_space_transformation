org.springframework.scripting.config java.lang.reflect.Field import org.junit.Test import org.springframework.aop.framework.Advised import org.springframework.aop.support.AopUtils import org.springframework.aop.target.dynamic.AbstractRefreshableTargetSource import org.springframework.context.ApplicationContext import org.springframework.context.support.ClassPathXmlApplicationContext import static static org.junit.Assert.* import class annotation org.springframework.scripting.config.ScriptingDefaultsTests String String AbstractRefreshableTargetSource Field long ApplicationContext Advised public public throws decl_stmt org.springframework.context.ApplicationContext = new decl_stmt org.springframework.aop.framework.Advised = call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() decl_stmt org.springframework.aop.target.dynamic.AbstractRefreshableTargetSource = call org.springframework.aop.framework.Advised.getTargetSource() call org.springframework.aop.framework.Advised.getTargetSource() call org.springframework.aop.framework.Advised.getTargetSource() call org.springframework.aop.framework.Advised.getTargetSource() call org.springframework.aop.framework.Advised.getTargetSource() decl_stmt com.sun.jdi.Field = call Field.setAccessible() call Field.setAccessible() call Field.setAccessible() call Field.setAccessible() call Field.setAccessible() decl_stmt long = call com.sun.jdi.Field.get(Object) call com.sun.jdi.Field.get(Object) call com.sun.jdi.Field.get(Object) call com.sun.jdi.Field.get(Object) call com.sun.jdi.Field.get(Object) ITestBean ApplicationContext public public decl_stmt org.springframework.context.ApplicationContext = new decl_stmt org.springframework.scheduling.annotation.ITestBean = call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ITestBean.isInitialized() call ITestBean.isInitialized() call ITestBean.isInitialized() call ITestBean.isInitialized() call ITestBean.isInitialized() ITestBean ApplicationContext public public decl_stmt org.springframework.context.ApplicationContext = new decl_stmt org.springframework.scheduling.annotation.ITestBean = call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ITestBean.isInitialized() call ITestBean.isInitialized() call ITestBean.isInitialized() call ITestBean.isInitialized() call ITestBean.isInitialized() ITestBean ClassPathXmlApplicationContext public public decl_stmt org.springframework.context.support.ClassPathXmlApplicationContext = new decl_stmt org.springframework.scheduling.annotation.ITestBean = call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call org.springframework.scheduling.annotation.ITestBean.isDestroyed() call org.springframework.scheduling.annotation.ITestBean.isDestroyed() call org.springframework.scheduling.annotation.ITestBean.isDestroyed() call org.springframework.scheduling.annotation.ITestBean.isDestroyed() call org.springframework.scheduling.annotation.ITestBean.isDestroyed() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call org.springframework.scheduling.annotation.ITestBean.isDestroyed() call org.springframework.scheduling.annotation.ITestBean.isDestroyed() call org.springframework.scheduling.annotation.ITestBean.isDestroyed() call org.springframework.scheduling.annotation.ITestBean.isDestroyed() call org.springframework.scheduling.annotation.ITestBean.isDestroyed() ITestBean ITestBean ApplicationContext public public decl_stmt org.springframework.context.ApplicationContext = new decl_stmt org.springframework.scheduling.annotation.ITestBean = call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() decl_stmt org.springframework.scheduling.annotation.ITestBean = call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call org.springframework.scheduling.annotation.ITestBean.getOtherBean() call org.springframework.scheduling.annotation.ITestBean.getOtherBean() call org.springframework.scheduling.annotation.ITestBean.getOtherBean() call org.springframework.scheduling.annotation.ITestBean.getOtherBean() call org.springframework.scheduling.annotation.ITestBean.getOtherBean() Object ApplicationContext public public decl_stmt org.springframework.context.ApplicationContext = new decl_stmt java.lang.Object = call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean()