org.springframework.aop.aspectj java.lang.annotation.Documented import java.lang.annotation.ElementType import java.lang.annotation.Inherited import java.lang.annotation.Retention import java.lang.annotation.RetentionPolicy import java.lang.annotation.Target import java.lang.reflect.Method import org.junit.Test import org.springframework.aop.Advisor import org.springframework.aop.MethodBeforeAdvice import org.springframework.aop.ThrowsAdvice import org.springframework.aop.framework.ProxyFactory import org.springframework.aop.support.DefaultPointcutAdvisor import org.springframework.core.OverridingClassLoader import static static org.junit.Assert.* import class org.springframework.aop.aspectj.TrickyAspectJPointcutExpressionTests LogUserAdvice TestService public public throws decl_stmt org.springframework.aop.aspectj.TestService = new decl_stmt org.springframework.scripting.groovy.LogUserAdvice = new new AspectJExpressionPointcut LogUserAdvice TestService public public throws decl_stmt org.springframework.aop.aspectj.TestService = new decl_stmt org.springframework.scripting.groovy.LogUserAdvice = new decl_stmt org.springframework.aop.aspectj.AspectJExpressionPointcut = new call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() new AspectJExpressionPointcut LogUserAdvice TestService public public throws decl_stmt org.springframework.aop.aspectj.TestService = new decl_stmt org.springframework.scripting.groovy.LogUserAdvice = new decl_stmt org.springframework.aop.aspectj.AspectJExpressionPointcut = new call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() new AspectJExpressionPointcut LogUserAdvice TestService public public throws decl_stmt org.springframework.aop.aspectj.TestService = new decl_stmt org.springframework.scripting.groovy.LogUserAdvice = new decl_stmt org.springframework.aop.aspectj.AspectJExpressionPointcut = new call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() new AspectJExpressionPointcut LogUserAdvice TestService SimpleThrowawayClassLoader public public throws decl_stmt org.springframework.scripting.groovy.LogUserAdvice = new decl_stmt org.springframework.aop.aspectj.AspectJExpressionPointcut = new call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() new new decl_stmt SimpleThrowawayClassLoader = new new call SimpleThrowawayClassLoader.excludeClass() call SimpleThrowawayClassLoader.excludeClass() call SimpleThrowawayClassLoader.excludeClass() call SimpleThrowawayClassLoader.excludeClass() call SimpleThrowawayClassLoader.excludeClass() call SimpleThrowawayClassLoader.excludeClass() call SimpleThrowawayClassLoader.excludeClass() call SimpleThrowawayClassLoader.excludeClass() call SimpleThrowawayClassLoader.excludeClass() call SimpleThrowawayClassLoader.excludeClass() decl_stmt org.springframework.aop.aspectj.TestService = call SimpleThrowawayClassLoader.loadClass() call SimpleThrowawayClassLoader.loadClass() call SimpleThrowawayClassLoader.loadClass() call SimpleThrowawayClassLoader.loadClass() call SimpleThrowawayClassLoader.loadClass() new private private throws TestService ProxyFactory private private throws decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.setProxyTargetClass() call ProxyFactory.setProxyTargetClass() call ProxyFactory.setProxyTargetClass() call ProxyFactory.setProxyTargetClass() call ProxyFactory.setProxyTargetClass() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() decl_stmt org.springframework.aop.aspectj.TestService = call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) try call TestService.sayHello() call TestService.sayHello() call TestService.sayHello() call TestService.sayHello() call TestService.sayHello() catch public public throw new public public throws ++ public public throws ++ throw public public return public public return public public = =