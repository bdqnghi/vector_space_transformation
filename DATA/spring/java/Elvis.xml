org.springframework.expression.spel.ast org.springframework.asm.Label import org.springframework.asm.MethodVisitor import org.springframework.expression.EvaluationException import org.springframework.expression.TypedValue import org.springframework.expression.spel.CodeFlow import org.springframework.expression.spel.ExpressionState import org.springframework.util.StringUtils import class org.springframework.expression.spel.ast.Elvis super super extends TypedValue TypedValue public public throws decl_stmt org.springframework.expression.TypedValue = if ! call TypedValue.getValue() call TypedValue.getValue() call TypedValue.getValue() call TypedValue.getValue() call TypedValue.getValue() return else decl_stmt org.springframework.expression.TypedValue = return public public return + + SpelNodeImpl SpelNodeImpl public public decl_stmt org.springframework.expression.spel.ast.SpelNodeImpl = decl_stmt org.springframework.expression.spel.ast.SpelNodeImpl = return call org.springframework.expression.spel.ast.SpelNodeImpl.isCompilable() call org.springframework.expression.spel.ast.SpelNodeImpl.isCompilable() call org.springframework.expression.spel.ast.SpelNodeImpl.isCompilable() call org.springframework.expression.spel.ast.SpelNodeImpl.isCompilable() call org.springframework.expression.spel.ast.SpelNodeImpl.isCompilable() && call org.springframework.expression.spel.ast.SpelNodeImpl.isCompilable() call org.springframework.expression.spel.ast.SpelNodeImpl.isCompilable() call org.springframework.expression.spel.ast.SpelNodeImpl.isCompilable() call org.springframework.expression.spel.ast.SpelNodeImpl.isCompilable() call org.springframework.expression.spel.ast.SpelNodeImpl.isCompilable() && != && != Label Label public public decl_stmt org.springframework.asm.Label = new decl_stmt org.springframework.asm.Label = new if ! String String private private if == && != && != decl_stmt java.lang.String = decl_stmt java.lang.String = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) = else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) && ! = else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) && ! = else =