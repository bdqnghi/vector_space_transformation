org.springframework.remoting.httpinvoker org.junit.Test import org.springframework.beans.factory.FactoryBean import org.springframework.beans.factory.annotation.Autowired import org.springframework.beans.factory.support.RootBeanDefinition import org.springframework.context.ApplicationContext import org.springframework.context.annotation.AnnotationConfigApplicationContext import org.springframework.context.annotation.Bean import org.springframework.context.annotation.ComponentScan import org.springframework.context.annotation.Configuration import org.springframework.context.annotation.Lazy import org.springframework.core.env.Environment import org.springframework.remoting.support.RemoteInvocation import org.springframework.remoting.support.RemoteInvocationResult import org.springframework.scheduling.annotation.Async import org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor import org.springframework.stereotype.Component import static static org.junit.Assert.* import class org.springframework.remoting.httpinvoker.HttpInvokerFactoryBeanIntegrationTests MyBean ApplicationContext public public decl_stmt org.springframework.context.ApplicationContext = new decl_stmt org.springframework.context.annotation.MyBean = call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() MyBean AnnotationConfigApplicationContext public public decl_stmt org.springframework.context.annotation.AnnotationConfigApplicationContext = new call AnnotationConfigApplicationContext.registerBeanDefinition() call AnnotationConfigApplicationContext.registerBeanDefinition() call AnnotationConfigApplicationContext.registerBeanDefinition() call AnnotationConfigApplicationContext.registerBeanDefinition() call AnnotationConfigApplicationContext.registerBeanDefinition() new call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() decl_stmt org.springframework.context.annotation.MyBean = call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() MyBean AnnotationConfigApplicationContext public public decl_stmt org.springframework.context.annotation.AnnotationConfigApplicationContext = new call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() decl_stmt org.springframework.context.annotation.MyBean = call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() call MyBean.myService() public public return new HttpInvokerProxyFactoryBean public public decl_stmt org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean = new call HttpInvokerProxyFactoryBean.setServiceUrl() call HttpInvokerProxyFactoryBean.setServiceUrl() call HttpInvokerProxyFactoryBean.setServiceUrl() call HttpInvokerProxyFactoryBean.setServiceUrl() call HttpInvokerProxyFactoryBean.setServiceUrl() call HttpInvokerProxyFactoryBean.setServiceInterface() call HttpInvokerProxyFactoryBean.setServiceInterface() call HttpInvokerProxyFactoryBean.setServiceInterface() call HttpInvokerProxyFactoryBean.setServiceInterface() call HttpInvokerProxyFactoryBean.setServiceInterface() call HttpInvokerProxyFactoryBean.setHttpInvokerRequestExecutor() call HttpInvokerProxyFactoryBean.setHttpInvokerRequestExecutor() call HttpInvokerProxyFactoryBean.setHttpInvokerRequestExecutor() call HttpInvokerProxyFactoryBean.setHttpInvokerRequestExecutor() call HttpInvokerProxyFactoryBean.setHttpInvokerRequestExecutor() new public public return new return public public return new public < public < throw new public public return new String HttpInvokerProxyFactoryBean public public decl_stmt java.lang.String = decl_stmt org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean = new call HttpInvokerProxyFactoryBean.setServiceUrl() call HttpInvokerProxyFactoryBean.setServiceUrl() call HttpInvokerProxyFactoryBean.setServiceUrl() call HttpInvokerProxyFactoryBean.setServiceUrl() call HttpInvokerProxyFactoryBean.setServiceUrl() + call HttpInvokerProxyFactoryBean.setServiceInterface() call HttpInvokerProxyFactoryBean.setServiceInterface() call HttpInvokerProxyFactoryBean.setServiceInterface() call HttpInvokerProxyFactoryBean.setServiceInterface() call HttpInvokerProxyFactoryBean.setServiceInterface() call HttpInvokerProxyFactoryBean.setHttpInvokerRequestExecutor() call HttpInvokerProxyFactoryBean.setHttpInvokerRequestExecutor() call HttpInvokerProxyFactoryBean.setHttpInvokerRequestExecutor() call HttpInvokerProxyFactoryBean.setHttpInvokerRequestExecutor() call HttpInvokerProxyFactoryBean.setHttpInvokerRequestExecutor() new public public return new return public public return new