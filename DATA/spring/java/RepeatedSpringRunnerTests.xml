org.springframework.test.context.junit4 java.io.IOException import java.lang.annotation.Retention import java.lang.annotation.RetentionPolicy import java.util.concurrent.atomic.AtomicInteger import org.junit.Ignore import org.junit.Test import org.junit.runner.RunWith import org.junit.runner.Runner import org.junit.runners.Parameterized import org.junit.runners.Parameterized.Parameters import org.springframework.test.annotation.Repeat import org.springframework.test.annotation.Timed import org.springframework.test.context.TestExecutionListeners import org.springframework.util.ClassUtils import static static org.junit.Assert.* import static static org.springframework.test.context.junit4.JUnitTestingUtils.* import class annotation org.springframework.test.context.junit4.RepeatedSpringRunnerTests int int int decl Class int AtomicInteger = public static = public static return new + + + protected < extends extends protected < extends extends return public public throws call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) + + call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() protected protected throws call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() = public = public throws = public = public throws - = public - = public throws public public throws public public throws = public = public throws = public = public throws = public = public throws = public = public throws