org.springframework.aop.framework java.io.Serializable import org.aopalliance.intercept.MethodInterceptor import org.aopalliance.intercept.MethodInvocation import org.junit.Test import org.springframework.aop.interceptor.ExposeInvocationInterceptor import org.springframework.aop.support.AopUtils import org.springframework.tests.sample.beans.IOther import org.springframework.tests.sample.beans.ITestBean import org.springframework.tests.sample.beans.TestBean import static static org.junit.Assert.* import class annotation org.springframework.aop.framework.JdkDynamicProxyTests super super extends super implements Object protected protected decl_stmt java.lang.Object = + call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() return protected protected return new = public = public new TestBean JdkDynamicAopProxy Object AdvisedSupport public public throws decl_stmt org.springframework.tests.sample.beans.TestBean = new call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) decl_stmt org.springframework.aop.framework.AdvisedSupport = new call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) decl_stmt org.springframework.aop.framework.JdkDynamicAopProxy = new decl_stmt java.lang.Object = call org.springframework.aop.framework.JdkDynamicAopProxy.getProxy() call org.springframework.aop.framework.JdkDynamicAopProxy.getProxy() call org.springframework.aop.framework.JdkDynamicAopProxy.getProxy() call org.springframework.aop.framework.JdkDynamicAopProxy.getProxy() call org.springframework.aop.framework.JdkDynamicAopProxy.getProxy() instanceof instanceof ITestBean AdvisedSupport int MethodInterceptor AopProxy public public throws decl_stmt int final final = decl_stmt org.aopalliance.intercept.MethodInterceptor = decl_stmt org.springframework.aop.framework.AdvisedSupport = new call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) decl_stmt org.springframework.aop.framework.AopProxy = decl_stmt org.springframework.scheduling.annotation.ITestBean = call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() AdvisedSupport AopProxy ITestBean ExposedInvocationTestBean TrapTargetInterceptor public public throws decl_stmt ExposedInvocationTestBean final final = new protected protected + decl_stmt org.springframework.aop.framework.AdvisedSupport = new call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) decl_stmt TrapTargetInterceptor = new public public throws return call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) decl_stmt org.springframework.aop.framework.AopProxy = decl_stmt org.springframework.scheduling.annotation.ITestBean = call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.scheduling.annotation.ITestBean.getName() call org.springframework.scheduling.annotation.ITestBean.getName() call org.springframework.scheduling.annotation.ITestBean.getName() call org.springframework.scheduling.annotation.ITestBean.getName() call org.springframework.scheduling.annotation.ITestBean.getName() protected protected + public public throws return FooBar ProxyCreatorSupport Foo public public decl_stmt FooBar = new decl_stmt org.springframework.aop.framework.ProxyCreatorSupport = new call ProxyCreatorSupport.setInterfaces() call ProxyCreatorSupport.setInterfaces() call ProxyCreatorSupport.setInterfaces() call ProxyCreatorSupport.setInterfaces() call ProxyCreatorSupport.setInterfaces() call ProxyCreatorSupport.setTarget() call ProxyCreatorSupport.setTarget() call ProxyCreatorSupport.setTarget() call ProxyCreatorSupport.setTarget() call ProxyCreatorSupport.setTarget() decl_stmt org.springframework.beans.Foo = call org.springframework.beans.Foo.getBarThis() call org.springframework.beans.Foo.getBarThis() call org.springframework.beans.Foo.getBarThis() call org.springframework.beans.Foo.getBarThis() call org.springframework.beans.Foo.getBarThis() call Foo.getFooThis() call Foo.getFooThis() call Foo.getFooThis() call Foo.getFooThis() call Foo.getFooThis() Named AdvisedSupport JdkDynamicAopProxy Named public public throws decl_stmt org.springframework.aop.framework.AdvisedSupport = new call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) new decl_stmt org.springframework.aop.framework.JdkDynamicAopProxy = new decl_stmt Named = call org.springframework.aop.framework.JdkDynamicAopProxy.getProxy() call org.springframework.aop.framework.JdkDynamicAopProxy.getProxy() call org.springframework.aop.framework.JdkDynamicAopProxy.getProxy() call org.springframework.aop.framework.JdkDynamicAopProxy.getProxy() call org.springframework.aop.framework.JdkDynamicAopProxy.getProxy() decl_stmt Named = new call Named.hashCode() call Named.hashCode() call Named.hashCode() call Named.hashCode() call Named.hashCode() call Named.hashCode() call Named.hashCode() call Named.hashCode() call Named.hashCode() call Named.hashCode() VarargTestInterface ProxyFactory public public throws decl_stmt org.springframework.aop.framework.ProxyFactory = new new decl_stmt VarargTestInterface = call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call VarargTestInterface.doWithVarargs() call VarargTestInterface.doWithVarargs() call VarargTestInterface.doWithVarargs() call VarargTestInterface.doWithVarargs() call VarargTestInterface.doWithVarargs() public public return public public return public public return Person public public if == return if == || != return decl_stmt org.springframework.test.context.junit4.orm.domain.Person = if ! return return public public return public < extends extends public < extends extends return