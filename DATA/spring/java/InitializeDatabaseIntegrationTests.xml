org.springframework.jdbc.config java.util.List import java.util.Map import javax.sql.DataSource import org.junit.After import org.junit.Before import org.junit.Test import org.springframework.beans.factory.InitializingBean import org.springframework.context.support.ClassPathXmlApplicationContext import org.springframework.jdbc.BadSqlGrammarException import org.springframework.jdbc.core.JdbcTemplate import static static org.junit.Assert.* import class org.springframework.jdbc.config.InitializeDatabaseIntegrationTests String ClassPathXmlApplicationContext public public = public public if != else if != call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() public public throws = new call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() = public = public throws = new call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() public public throws = new call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() DataSource JdbcTemplate public public throws = new decl_stmt javax.sql.DataSource = call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() decl_stmt org.springframework.jdbc.core.JdbcTemplate = new call JdbcTemplate.queryForObject() call JdbcTemplate.queryForObject() call JdbcTemplate.queryForObject() call JdbcTemplate.queryForObject() call JdbcTemplate.queryForObject() DataSource public public throws = new decl_stmt javax.sql.DataSource = call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() DataSource public public throws = new decl_stmt javax.sql.DataSource = call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() CacheData public public throws = new call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() decl_stmt CacheData = call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call CacheData.getCachedData() call CacheData.getCachedData() call CacheData.getCachedData() call CacheData.getCachedData() call CacheData.getCachedData() JdbcTemplate private private decl_stmt org.springframework.jdbc.core.JdbcTemplate = new call JdbcTemplate.queryForObject() call JdbcTemplate.queryForObject() call JdbcTemplate.queryForObject() call JdbcTemplate.queryForObject() call JdbcTemplate.queryForObject() public public = new public < < public < < return public public throws =