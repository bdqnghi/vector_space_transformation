org.springframework.beans.factory.support java.io.Closeable import java.io.Serializable import java.lang.reflect.InvocationTargetException import java.lang.reflect.Method import java.security.AccessControlContext import java.security.AccessController import java.security.PrivilegedAction import java.security.PrivilegedActionException import java.security.PrivilegedExceptionAction import java.util.ArrayList import java.util.List import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.BeanUtils import org.springframework.beans.factory.DisposableBean import org.springframework.beans.factory.config.BeanPostProcessor import org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.CollectionUtils import org.springframework.util.ReflectionUtils import org.springframework.util.StringUtils import class annotation org.springframework.beans.factory.support.DisposableBeanAdapter super super implements boolean AccessControlContext String String boolean String Method decl List Object String decl Class Log String private private decl_stmt java.lang.String = if || == && call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() if ! instanceof try return call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() catch try return call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() catch return return : DestructionAwareBeanPostProcessor decl List private < private < < decl_stmt java.util.List < = if ! = new < for : if instanceof decl_stmt org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor = try if call org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor.requiresDestruction(Object) call org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor.requiresDestruction(Object) call org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor.requiresDestruction(Object) call org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor.requiresDestruction(Object) call org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor.requiresDestruction(Object) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() catch call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public String Method public public if ! for : if if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + try if != new < public public throws return else catch decl_stmt java.lang.String = + + if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() else call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() + + if != else if != decl_stmt com.sun.jdi.Method = if != public public throws return private private try if != return new < public public return else return catch throw new + + + public public return private private return : decl Object String private private final final decl_stmt java.lang.Object final final final = new if == = if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + + try if != new < public public return try new < public public throws call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) return catch throw else call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) catch decl_stmt java.lang.String = + + + + if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() else call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() + + catch call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + + + + public public return public public throws call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) return decl List protected protected decl_stmt java.util.List < = if != = new < for : if instanceof call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return new String public static public static if instanceof || call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() return decl_stmt java.lang.String = if return call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() || call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() return DestructionAwareBeanPostProcessor public static public static < if ! for : if instanceof decl_stmt org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor = try if call org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor.requiresDestruction(Object) call org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor.requiresDestruction(Object) call org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor.requiresDestruction(Object) call org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor.requiresDestruction(Object) call org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor.requiresDestruction(Object) return catch return return