org.springframework.jms.support.converter java.io.ByteArrayOutputStream import java.io.IOException import java.io.OutputStreamWriter import java.io.StringWriter import java.io.UnsupportedEncodingException import java.util.HashMap import java.util.Map import javax.jms.BytesMessage import javax.jms.JMSException import javax.jms.Message import javax.jms.Session import javax.jms.TextMessage import com.fasterxml.jackson.annotation.JsonView import com.fasterxml.jackson.databind.DeserializationFeature import com.fasterxml.jackson.databind.JavaType import com.fasterxml.jackson.databind.MapperFeature import com.fasterxml.jackson.databind.ObjectMapper import com.fasterxml.jackson.databind.ObjectWriter import org.springframework.beans.factory.BeanClassLoaderAware import org.springframework.core.MethodParameter import org.springframework.util.Assert import org.springframework.util.ClassUtils import class org.springframework.jms.support.converter.MappingJackson2MessageConverter super super implements MessageType String decl Map String decl Map String ClassLoader String ObjectMapper public public = public public = public public = public public = public public = String decl Class public public < < = new < < for < < : decl_stmt java.lang.String = decl_stmt java.lang.Class < = public public = Message public public throws decl_stmt org.springframework.messaging.Message try switch case = break case = break default: = catch throw new + + return public public throws return public public < throws if != return else return JavaType public public throws try decl_stmt JavaType = return catch throw new Message protected protected throws decl_stmt org.springframework.messaging.Message try switch case = break case = break default: = catch throw new + + return protected protected throws return call ObjectMapper.writer() call ObjectMapper.writer() call ObjectMapper.writer() call ObjectMapper.writer() call ObjectMapper.writer() StringWriter protected protected throws decl_stmt StringWriter = new return call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() protected protected throws return call ObjectMapper.writer() call ObjectMapper.writer() call ObjectMapper.writer() call ObjectMapper.writer() call ObjectMapper.writer() OutputStreamWriter BytesMessage ByteArrayOutputStream protected protected throws decl_stmt java.io.ByteArrayOutputStream = new decl_stmt java.io.OutputStreamWriter = new decl_stmt BytesMessage = call BytesMessage.writeBytes() call BytesMessage.writeBytes() call BytesMessage.writeBytes() call BytesMessage.writeBytes() call BytesMessage.writeBytes() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() if != call BytesMessage.setStringProperty() call BytesMessage.setStringProperty() call BytesMessage.setStringProperty() call BytesMessage.setStringProperty() call BytesMessage.setStringProperty() return protected protected throws return call ObjectMapper.writer() call ObjectMapper.writer() call ObjectMapper.writer() call ObjectMapper.writer() call ObjectMapper.writer() protected protected throws throw new + + String protected protected throws if != decl_stmt java.lang.String = if == = private private throws if instanceof return else if instanceof return else return String protected protected throws decl_stmt java.lang.String = return String decl byte String protected protected throws decl_stmt java.lang.String = if != && = decl_stmt byte = new int try decl_stmt java.lang.String = new return catch throw new protected protected throws throw new + + String decl Class decl Class protected protected throws decl_stmt java.lang.String = if == throw new + + decl_stmt java.lang.Class < = if != return try decl_stmt java.lang.Class < = return catch throw new + + MethodParameter JsonView protected < protected < if instanceof decl_stmt org.springframework.core.MethodParameter = decl_stmt JsonView = call org.springframework.core.MethodParameter.getParameterAnnotation(Class) call org.springframework.core.MethodParameter.getParameterAnnotation(Class) call org.springframework.core.MethodParameter.getParameterAnnotation(Class) call org.springframework.core.MethodParameter.getParameterAnnotation(Class) call org.springframework.core.MethodParameter.getParameterAnnotation(Class) if == = call org.springframework.core.MethodParameter.getMethodAnnotation(Class) call org.springframework.core.MethodParameter.getMethodAnnotation(Class) call org.springframework.core.MethodParameter.getMethodAnnotation(Class) call org.springframework.core.MethodParameter.getMethodAnnotation(Class) call org.springframework.core.MethodParameter.getMethodAnnotation(Class) if == return return else if instanceof return else if instanceof return else return private < private < if != throw new + return