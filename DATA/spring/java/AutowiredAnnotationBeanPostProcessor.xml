org.springframework.beans.factory.annotation java.beans.PropertyDescriptor import java.lang.annotation.Annotation import java.lang.reflect.AccessibleObject import java.lang.reflect.Constructor import java.lang.reflect.Field import java.lang.reflect.InvocationTargetException import java.lang.reflect.Method import java.lang.reflect.Modifier import java.util.ArrayList import java.util.Collections import java.util.Iterator import java.util.LinkedHashSet import java.util.LinkedList import java.util.List import java.util.Map import java.util.Set import java.util.concurrent.ConcurrentHashMap import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.BeanUtils import org.springframework.beans.BeansException import org.springframework.beans.PropertyValues import org.springframework.beans.TypeConverter import org.springframework.beans.factory.BeanCreationException import org.springframework.beans.factory.BeanFactory import org.springframework.beans.factory.BeanFactoryAware import org.springframework.beans.factory.BeanFactoryUtils import org.springframework.beans.factory.InjectionPoint import org.springframework.beans.factory.NoSuchBeanDefinitionException import org.springframework.beans.factory.UnsatisfiedDependencyException import org.springframework.beans.factory.config.ConfigurableListableBeanFactory import org.springframework.beans.factory.config.DependencyDescriptor import org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessorAdapter import org.springframework.beans.factory.config.RuntimeBeanReference import org.springframework.beans.factory.support.LookupOverride import org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor import org.springframework.beans.factory.support.RootBeanDefinition import org.springframework.core.BridgeMethodResolver import org.springframework.core.MethodParameter import org.springframework.core.Ordered import org.springframework.core.PriorityOrdered import org.springframework.core.annotation.AnnotatedElementUtils import org.springframework.core.annotation.AnnotationAttributes import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.ReflectionUtils import org.springframework.util.StringUtils import class org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor super super extends super implements decl Map ConfigurableListableBeanFactory decl Set boolean decl Map String Log int decl Set public public < extends extends public public < < extends extends public public = public public = public public = public public return public public throws if ! instanceof throw new = InjectionMetadata public public < if != decl_stmt org.springframework.beans.factory.annotation.InjectionMetadata = call org.springframework.beans.factory.annotation.InjectionMetadata.checkConfigMembers(RootBeanDefinition) call org.springframework.beans.factory.annotation.InjectionMetadata.checkConfigMembers(RootBeanDefinition) call org.springframework.beans.factory.annotation.InjectionMetadata.checkConfigMembers(RootBeanDefinition) call org.springframework.beans.factory.annotation.InjectionMetadata.checkConfigMembers(RootBeanDefinition) call org.springframework.beans.factory.annotation.InjectionMetadata.checkConfigMembers(RootBeanDefinition) decl List RootBeanDefinition decl Constructor decl Constructor decl Constructor LookupOverride Lookup AnnotationAttributes boolean decl Class public < public < < final final throws if ! new public public throws decl_stmt Lookup = if != decl_stmt org.springframework.beans.factory.support.LookupOverride = new call Lookup.value() call Lookup.value() call Lookup.value() call Lookup.value() call Lookup.value() try decl_stmt org.springframework.beans.factory.support.RootBeanDefinition = call ConfigurableListableBeanFactory.getMergedBeanDefinition() call ConfigurableListableBeanFactory.getMergedBeanDefinition() call ConfigurableListableBeanFactory.getMergedBeanDefinition() call ConfigurableListableBeanFactory.getMergedBeanDefinition() call ConfigurableListableBeanFactory.getMergedBeanDefinition() call RootBeanDefinition.getMethodOverrides() call RootBeanDefinition.getMethodOverrides() call RootBeanDefinition.getMethodOverrides() call RootBeanDefinition.getMethodOverrides() call RootBeanDefinition.getMethodOverrides() catch throw new if ! new public public throws decl_stmt Lookup = if != decl_stmt org.springframework.beans.factory.support.LookupOverride = new call Lookup.value() call Lookup.value() call Lookup.value() call Lookup.value() call Lookup.value() try decl_stmt org.springframework.beans.factory.support.RootBeanDefinition = call ConfigurableListableBeanFactory.getMergedBeanDefinition() call ConfigurableListableBeanFactory.getMergedBeanDefinition() call ConfigurableListableBeanFactory.getMergedBeanDefinition() call ConfigurableListableBeanFactory.getMergedBeanDefinition() call ConfigurableListableBeanFactory.getMergedBeanDefinition() call RootBeanDefinition.getMethodOverrides() call RootBeanDefinition.getMethodOverrides() call RootBeanDefinition.getMethodOverrides() call RootBeanDefinition.getMethodOverrides() call RootBeanDefinition.getMethodOverrides() catch throw new if == synchronized = if == decl_stmt java.util.List < < = new < < decl_stmt java.lang.reflect.Constructor < = decl_stmt java.lang.reflect.Constructor < = for < : decl_stmt org.springframework.core.annotation.AnnotationAttributes = if == decl_stmt java.lang.Class < = if != try decl_stmt java.lang.reflect.Constructor < = call boolean.getDeclaredConstructor() call boolean.getDeclaredConstructor() call boolean.getDeclaredConstructor() call boolean.getDeclaredConstructor() call boolean.getDeclaredConstructor() = catch if != if != throw new + + + if == throw new + decl_stmt boolean = if if ! call decl Constructor.isEmpty() call decl Constructor.isEmpty() call decl Constructor.isEmpty() call decl Constructor.isEmpty() call decl Constructor.isEmpty() throw new + + + = call decl Constructor.add() call decl Constructor.add() call decl Constructor.add() call decl Constructor.add() call decl Constructor.add() else if == = if ! call decl Constructor.isEmpty() call decl Constructor.isEmpty() call decl Constructor.isEmpty() call decl Constructor.isEmpty() call decl Constructor.isEmpty() if == if != call decl Constructor.add() call decl Constructor.add() call decl Constructor.add() call decl Constructor.add() call decl Constructor.add() else if call decl Constructor.size() call decl Constructor.size() call decl Constructor.size() call decl Constructor.size() call decl Constructor.size() == && call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() + + + + call decl Constructor.get() call decl Constructor.get() call decl Constructor.get() call decl Constructor.get() call decl Constructor.get() = call decl Constructor.toArray() call decl Constructor.toArray() call decl Constructor.toArray() call decl Constructor.toArray() call decl Constructor.toArray() new < call decl Constructor.size() call decl Constructor.size() call decl Constructor.size() call decl Constructor.size() call decl Constructor.size() else if == && > = new < else = new < return > : LookupOverride RootBeanDefinition Lookup public public throws decl_stmt Lookup = if != decl_stmt org.springframework.beans.factory.support.LookupOverride = new call Lookup.value() call Lookup.value() call Lookup.value() call Lookup.value() call Lookup.value() try decl_stmt org.springframework.beans.factory.support.RootBeanDefinition = call ConfigurableListableBeanFactory.getMergedBeanDefinition() call ConfigurableListableBeanFactory.getMergedBeanDefinition() call ConfigurableListableBeanFactory.getMergedBeanDefinition() call ConfigurableListableBeanFactory.getMergedBeanDefinition() call ConfigurableListableBeanFactory.getMergedBeanDefinition() call RootBeanDefinition.getMethodOverrides() call RootBeanDefinition.getMethodOverrides() call RootBeanDefinition.getMethodOverrides() call RootBeanDefinition.getMethodOverrides() call RootBeanDefinition.getMethodOverrides() catch throw new InjectionMetadata public public throws decl_stmt org.springframework.beans.factory.annotation.InjectionMetadata = try call org.springframework.beans.factory.annotation.InjectionMetadata.inject(Object,String,PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.inject(Object,String,PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.inject(Object,String,PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.inject(Object,String,PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.inject(Object,String,PropertyValues) catch throw catch throw new return InjectionMetadata decl Class public public throws decl_stmt java.lang.Class < = decl_stmt org.springframework.beans.factory.annotation.InjectionMetadata = call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() try call org.springframework.beans.factory.annotation.InjectionMetadata.inject(Object,String,PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.inject(Object,String,PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.inject(Object,String,PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.inject(Object,String,PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.inject(Object,String,PropertyValues) catch throw catch throw new + + String InjectionMetadata private private < decl_stmt java.lang.String = : decl_stmt org.springframework.beans.factory.annotation.InjectionMetadata = if synchronized = if if != call org.springframework.beans.factory.annotation.InjectionMetadata.clear(PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.clear(PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.clear(PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.clear(PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.clear(PropertyValues) try = catch throw new + + return boolean decl LinkedList AnnotationAttributes Method decl LinkedList PropertyDescriptor decl Class private private final final final < decl_stmt java.util.LinkedList < = new < decl_stmt java.lang.Class < = do decl_stmt java.util.LinkedList final final final < = new < new public public throws decl_stmt org.springframework.core.annotation.AnnotationAttributes = if != if if call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() + return decl_stmt boolean = call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() new new public public throws decl_stmt com.sun.jdi.Method = if ! return decl_stmt org.springframework.core.annotation.AnnotationAttributes = if != && if if call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() + return if == if call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() + decl_stmt boolean = decl_stmt java.beans.PropertyDescriptor = call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() new call decl LinkedList.addAll() call decl LinkedList.addAll() call decl LinkedList.addAll() call decl LinkedList.addAll() call decl LinkedList.addAll() = call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() != && != return new AnnotationAttributes boolean public public throws decl_stmt org.springframework.core.annotation.AnnotationAttributes = if != if if call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() + return decl_stmt boolean = new AnnotationAttributes Method PropertyDescriptor boolean public public throws decl_stmt com.sun.jdi.Method = if ! return decl_stmt org.springframework.core.annotation.AnnotationAttributes = if != && if if call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() + return if == if call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() + decl_stmt boolean = decl_stmt java.beans.PropertyDescriptor = new AnnotationAttributes private private if > for < extends extends : decl_stmt org.springframework.core.annotation.AnnotationAttributes = if != return return protected protected return ! || == protected < < protected < < < throws if == throw new + return private private < if != for : if if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + + DependencyDescriptor private private if instanceof decl_stmt org.springframework.beans.factory.config.DependencyDescriptor = return else if instanceof return else return String Object Field TypeConverter decl Set DependencyDescriptor protected protected throws decl_stmt com.sun.jdi.Field = decl_stmt java.lang.Object if = else decl_stmt org.springframework.beans.factory.config.DependencyDescriptor = new call org.springframework.beans.factory.config.DependencyDescriptor.setContainingClass(Class) call org.springframework.beans.factory.config.DependencyDescriptor.setContainingClass(Class) call org.springframework.beans.factory.config.DependencyDescriptor.setContainingClass(Class) call org.springframework.beans.factory.config.DependencyDescriptor.setContainingClass(Class) call org.springframework.beans.factory.config.DependencyDescriptor.setContainingClass(Class) decl_stmt java.util.Set < = new < decl_stmt org.springframework.beans.TypeConverter = call ConfigurableListableBeanFactory.getTypeConverter() call ConfigurableListableBeanFactory.getTypeConverter() call ConfigurableListableBeanFactory.getTypeConverter() call ConfigurableListableBeanFactory.getTypeConverter() call ConfigurableListableBeanFactory.getTypeConverter() try = call ConfigurableListableBeanFactory.resolveDependency() call ConfigurableListableBeanFactory.resolveDependency() call ConfigurableListableBeanFactory.resolveDependency() call ConfigurableListableBeanFactory.resolveDependency() call ConfigurableListableBeanFactory.resolveDependency() catch throw new new synchronized if ! if != || = if call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() == decl_stmt java.lang.String = call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() if call ConfigurableListableBeanFactory.containsBean() call ConfigurableListableBeanFactory.containsBean() call ConfigurableListableBeanFactory.containsBean() call ConfigurableListableBeanFactory.containsBean() call ConfigurableListableBeanFactory.containsBean() if call ConfigurableListableBeanFactory.isTypeMatch() call ConfigurableListableBeanFactory.isTypeMatch() call ConfigurableListableBeanFactory.isTypeMatch() call ConfigurableListableBeanFactory.isTypeMatch() call ConfigurableListableBeanFactory.isTypeMatch() call com.sun.jdi.Field.getType() call com.sun.jdi.Field.getType() call com.sun.jdi.Field.getType() call com.sun.jdi.Field.getType() call com.sun.jdi.Field.getType() = new else = = if != call com.sun.jdi.Field.set(Object,Object) call com.sun.jdi.Field.set(Object,Object) call com.sun.jdi.Field.set(Object,Object) call com.sun.jdi.Field.set(Object,Object) call com.sun.jdi.Field.set(Object,Object) decl Set String decl DependencyDescriptor DependencyDescriptor Object decl Object decl Iterator MethodParameter Method TypeConverter protected protected throws if return decl_stmt com.sun.jdi.Method = decl_stmt java.lang.Object if = else = new decl_stmt org.springframework.beans.factory.config.DependencyDescriptor = new decl_stmt java.util.Set < = new < decl_stmt org.springframework.beans.TypeConverter = call ConfigurableListableBeanFactory.getTypeConverter() call ConfigurableListableBeanFactory.getTypeConverter() call ConfigurableListableBeanFactory.getTypeConverter() call ConfigurableListableBeanFactory.getTypeConverter() call ConfigurableListableBeanFactory.getTypeConverter() for = < ++ decl_stmt org.springframework.core.MethodParameter = new decl_stmt org.springframework.beans.factory.config.DependencyDescriptor = new call Object.setContainingClass() call Object.setContainingClass() call Object.setContainingClass() call Object.setContainingClass() call Object.setContainingClass() = try decl_stmt java.lang.Object = call ConfigurableListableBeanFactory.resolveDependency() call ConfigurableListableBeanFactory.resolveDependency() call ConfigurableListableBeanFactory.resolveDependency() call ConfigurableListableBeanFactory.resolveDependency() call ConfigurableListableBeanFactory.resolveDependency() if == && ! = break = catch throw new new synchronized if ! if != = new for = < ++ = if call TypeConverter.size() call TypeConverter.size() call TypeConverter.size() call TypeConverter.size() call TypeConverter.size() == decl_stmt java.util.Iterator < = call TypeConverter.iterator() call TypeConverter.iterator() call TypeConverter.iterator() call TypeConverter.iterator() call TypeConverter.iterator() for = < ++ decl_stmt java.lang.String = call String.next() call String.next() call String.next() call String.next() call String.next() if call ConfigurableListableBeanFactory.containsBean() call ConfigurableListableBeanFactory.containsBean() call ConfigurableListableBeanFactory.containsBean() call ConfigurableListableBeanFactory.containsBean() call ConfigurableListableBeanFactory.containsBean() if call ConfigurableListableBeanFactory.isTypeMatch() call ConfigurableListableBeanFactory.isTypeMatch() call ConfigurableListableBeanFactory.isTypeMatch() call ConfigurableListableBeanFactory.isTypeMatch() call ConfigurableListableBeanFactory.isTypeMatch() = new else = = if != try call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) catch throw decl Object private private if == return decl_stmt java.lang.Object = new for = < ++ = return