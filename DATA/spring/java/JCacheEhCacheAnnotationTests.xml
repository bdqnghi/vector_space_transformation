org.springframework.cache.jcache javax.annotation.Resource import javax.cache.CacheManager import javax.cache.Caching import javax.cache.configuration.MutableConfiguration import javax.cache.spi.CachingProvider import org.junit.After import org.junit.Ignore import org.junit.Test import org.springframework.cache.annotation.CachingConfigurerSupport import org.springframework.cache.annotation.EnableCaching import org.springframework.cache.config.AbstractCacheAnnotationTests import org.springframework.cache.config.AnnotatedClassCacheableService import org.springframework.cache.config.CacheableService import org.springframework.cache.config.DefaultCacheableService import org.springframework.cache.config.SomeCustomKeyGenerator import org.springframework.cache.interceptor.KeyGenerator import org.springframework.cache.interceptor.SimpleKeyGenerator import org.springframework.context.ConfigurableApplicationContext import org.springframework.context.annotation.AnnotationConfigApplicationContext import org.springframework.context.annotation.Bean import org.springframework.context.annotation.Configuration import class org.springframework.cache.jcache.JCacheEhCacheAnnotationTests super super extends CacheManager AnnotationConfigApplicationContext protected protected decl_stmt org.springframework.context.annotation.AnnotationConfigApplicationContext = new call AnnotationConfigApplicationContext.getBeanFactory() call AnnotationConfigApplicationContext.getBeanFactory() call AnnotationConfigApplicationContext.getBeanFactory() call AnnotationConfigApplicationContext.getBeanFactory() call AnnotationConfigApplicationContext.getBeanFactory() call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() = call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() call AnnotationConfigApplicationContext.getBean() return protected protected return public public if != call CacheManager.close() call CacheManager.close() call CacheManager.close() call CacheManager.close() call CacheManager.close() public public public public return new decl MutableConfiguration CacheManager public public decl_stmt org.springframework.cache.CacheManager = decl_stmt MutableConfiguration < = new < call decl MutableConfiguration.setStoreByValue() call decl MutableConfiguration.setStoreByValue() call decl MutableConfiguration.setStoreByValue() call decl MutableConfiguration.setStoreByValue() call decl MutableConfiguration.setStoreByValue() call CacheManager.createCache() call CacheManager.createCache() call CacheManager.createCache() call CacheManager.createCache() call CacheManager.createCache() call CacheManager.createCache() call CacheManager.createCache() call CacheManager.createCache() call CacheManager.createCache() call CacheManager.createCache() call CacheManager.createCache() call CacheManager.createCache() call CacheManager.createCache() call CacheManager.createCache() call CacheManager.createCache() return public < public < return new public < public < return new public public return new public public return new