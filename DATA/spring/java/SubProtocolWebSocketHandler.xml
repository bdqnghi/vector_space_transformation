org.springframework.web.socket.messaging java.io.IOException import java.util.ArrayList import java.util.Collections import java.util.LinkedHashSet import java.util.List import java.util.Map import java.util.Set import java.util.TreeMap import java.util.concurrent.ConcurrentHashMap import java.util.concurrent.atomic.AtomicInteger import java.util.concurrent.locks.ReentrantLock import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.context.SmartLifecycle import org.springframework.messaging.Message import org.springframework.messaging.MessageChannel import org.springframework.messaging.MessageHandler import org.springframework.messaging.MessagingException import org.springframework.messaging.SubscribableChannel import org.springframework.util.Assert import org.springframework.util.CollectionUtils import org.springframework.util.StringUtils import org.springframework.web.socket.CloseStatus import org.springframework.web.socket.SubProtocolCapable import org.springframework.web.socket.WebSocketHandler import org.springframework.web.socket.WebSocketMessage import org.springframework.web.socket.WebSocketSession import org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator import org.springframework.web.socket.handler.SessionLimitExceededException import org.springframework.web.socket.sockjs.transport.session.PollingSockJsSession import org.springframework.web.socket.sockjs.transport.session.StreamingSockJsSession import class org.springframework.web.socket.messaging.SubProtocolWebSocketHandler super super implements int int Object decl Map ReentrantLock decl Set Stats SubProtocolHandler boolean long MessageChannel Log SubscribableChannel int decl Map public public < for : public < public < return new < SubProtocolHandler decl List public public decl_stmt java.util.List < = if if call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + return for : decl_stmt org.springframework.web.socket.messaging.SubProtocolHandler = if != && != throw new + + + + + + public < public < return public public = if public public return public < public < return new < public public = public public return public public = public public return public public return public public return public public return public final public final synchronized return public final public final != || ! synchronized = public final public final synchronized = for : try catch if call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + + + public final public final synchronized public public throws if ! return = new new WebSocketSessionHolder SubProtocolHandler public public < throws decl_stmt WebSocketSessionHolder = if != = call WebSocketSessionHolder.getSession() call WebSocketSessionHolder.getSession() call WebSocketSessionHolder.getSession() call WebSocketSessionHolder.getSession() call WebSocketSessionHolder.getSession() decl_stmt org.springframework.web.socket.messaging.SubProtocolHandler = call org.springframework.web.socket.messaging.SubProtocolHandler.handleMessageFromClient(WebSocketSession,WebSocketMessage,MessageChannel) call org.springframework.web.socket.messaging.SubProtocolHandler.handleMessageFromClient(WebSocketSession,WebSocketMessage,MessageChannel) call org.springframework.web.socket.messaging.SubProtocolHandler.handleMessageFromClient(WebSocketSession,WebSocketMessage,MessageChannel) call org.springframework.web.socket.messaging.SubProtocolHandler.handleMessageFromClient(WebSocketSession,WebSocketMessage,MessageChannel) call org.springframework.web.socket.messaging.SubProtocolHandler.handleMessageFromClient(WebSocketSession,WebSocketMessage,MessageChannel) if != call WebSocketSessionHolder.setHasHandledMessages() call WebSocketSessionHolder.setHasHandledMessages() call WebSocketSessionHolder.setHasHandledMessages() call WebSocketSessionHolder.setHasHandledMessages() call WebSocketSessionHolder.setHasHandledMessages() String WebSocketSession WebSocketSessionHolder public public < throws decl_stmt java.lang.String = if == if call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + return decl_stmt WebSocketSessionHolder = if == if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + return decl_stmt org.springframework.web.socket.WebSocketSession = call WebSocketSessionHolder.getSession() call WebSocketSessionHolder.getSession() call WebSocketSessionHolder.getSession() call WebSocketSessionHolder.getSession() call WebSocketSessionHolder.getSession() try catch try if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + call org.springframework.web.socket.WebSocketSession.close() call org.springframework.web.socket.WebSocketSession.close() call org.springframework.web.socket.WebSocketSession.close() call org.springframework.web.socket.WebSocketSession.close() call org.springframework.web.socket.WebSocketSession.close() catch call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + catch if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + public public throws public public throws public public return SubProtocolHandler String protected final protected final decl_stmt java.lang.String = try = catch call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + decl_stmt org.springframework.web.socket.messaging.SubProtocolHandler if ! = if == throw new + + + else if != = else if == = else throw new + return String private private < for : decl_stmt java.lang.String = if != return if != decl_stmt java.lang.String = if != return return WebSocketSession long long private private throws decl_stmt long = if ! || - < return if try for : if continue decl_stmt long = - if < continue decl_stmt org.springframework.web.socket.WebSocketSession = if call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + + + + + try call org.springframework.web.socket.WebSocketSession.close() call org.springframework.web.socket.WebSocketSession.close() call org.springframework.web.socket.WebSocketSession.close() call org.springframework.web.socket.WebSocketSession.close() call org.springframework.web.socket.WebSocketSession.close() catch if call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + finally = private private throws if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + if != public public return + public public return public public return public public = public public return public public return + + + + + + public public public public public public public public public public private private if instanceof return else if instanceof return else return public public return + + + + + + + + + + + + + + + + + +