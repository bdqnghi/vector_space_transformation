org.springframework.mock.web.portlet java.security.Principal import java.util.Collections import java.util.Enumeration import java.util.HashSet import java.util.LinkedHashMap import java.util.LinkedList import java.util.List import java.util.Locale import java.util.Map import java.util.Set import javax.portlet.PortalContext import javax.portlet.PortletContext import javax.portlet.PortletMode import javax.portlet.PortletPreferences import javax.portlet.PortletRequest import javax.portlet.PortletSession import javax.portlet.WindowState import javax.servlet.http.Cookie import org.springframework.util.Assert import org.springframework.util.CollectionUtils import class org.springframework.mock.web.portlet.MockPortletRequest super super implements decl Cookie boolean String PortletContext decl Set Principal PortletSession int decl List String decl Map decl Set String String PortletPreferences String PortalContext PortletMode boolean decl Map decl List boolean WindowState String decl Map protected protected return public public return public public = protected protected throws if ! throw new public public return public public return public public = public public return public public = public public return public public = public public return MockPortletSession public public = if instanceof decl_stmt org.springframework.mock.web.portlet.MockPortletSession = call org.springframework.mock.web.portlet.MockPortletSession.access() call org.springframework.mock.web.portlet.MockPortletSession.access() call org.springframework.mock.web.portlet.MockPortletSession.access() call org.springframework.mock.web.portlet.MockPortletSession.access() call org.springframework.mock.web.portlet.MockPortletSession.access() public public return public public if instanceof && = if == && = new return decl List public public decl_stmt java.util.List < = new < call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl List decl List public public decl_stmt java.util.List < = if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else decl_stmt java.util.List < = new < call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl List public public decl_stmt java.util.List < = return != && call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() : public < public < return public < public < return public public return public public = public public return public public = public public return public public = public public return public public = public public return public public public public return public public return public < public < return public public < public public new public public public public new decl String decl String public public decl_stmt java.lang.String = if != decl_stmt java.lang.String = new + else decl String public public decl_stmt java.lang.String = return != && > : public < public < return public public return public < public < return public public = public public return public public if != else public public PortletSession public public decl_stmt PortletSession = return != call PortletSession.getId() call PortletSession.getId() call PortletSession.getId() call PortletSession.getId() call PortletSession.getId() : public public = public public return public public public public public public return public < public < return public public public public public public return public < public < return public public = public public return public public = public public return public public = public public return public public = public public return public public = public public return decl Map public < public < if ! decl_stmt java.util.Map < = new < for : if ! call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return else return decl Map public < public < if ! decl_stmt java.util.Map < = new < for : if call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return else return public public