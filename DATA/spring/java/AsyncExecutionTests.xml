org.springframework.scheduling.annotation java.io.IOException import java.io.Serializable import java.lang.annotation.Retention import java.lang.annotation.RetentionPolicy import java.util.HashMap import java.util.concurrent.CompletableFuture import java.util.concurrent.ExecutionException import java.util.concurrent.Future import org.aopalliance.intercept.MethodInterceptor import org.aopalliance.intercept.MethodInvocation import org.junit.Test import org.springframework.aop.framework.ProxyFactory import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator import org.springframework.aop.support.DefaultIntroductionAdvisor import org.springframework.beans.factory.DisposableBean import org.springframework.beans.factory.FactoryBean import org.springframework.beans.factory.support.RootBeanDefinition import org.springframework.context.ApplicationEvent import org.springframework.context.ApplicationListener import org.springframework.context.support.GenericApplicationContext import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor import org.springframework.util.concurrent.ListenableFuture import static static org.junit.Assert.* import class org.springframework.scheduling.annotation.AsyncExecutionTests int String int decl ListenableFuture AsyncMethodBean decl Future decl CompletableFuture GenericApplicationContext public public throws = decl_stmt org.springframework.context.support.GenericApplicationContext = new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() decl_stmt AsyncMethodBean = call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call AsyncMethodBean.doNothing() call AsyncMethodBean.doNothing() call AsyncMethodBean.doNothing() call AsyncMethodBean.doNothing() call AsyncMethodBean.doNothing() call AsyncMethodBean.doSomething() call AsyncMethodBean.doSomething() call AsyncMethodBean.doSomething() call AsyncMethodBean.doSomething() call AsyncMethodBean.doSomething() decl_stmt java.util.concurrent.Future < = call AsyncMethodBean.returnSomething() call AsyncMethodBean.returnSomething() call AsyncMethodBean.returnSomething() call AsyncMethodBean.returnSomething() call AsyncMethodBean.returnSomething() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() decl_stmt org.springframework.util.concurrent.ListenableFuture < = call AsyncMethodBean.returnSomethingListenable() call AsyncMethodBean.returnSomethingListenable() call AsyncMethodBean.returnSomethingListenable() call AsyncMethodBean.returnSomethingListenable() call AsyncMethodBean.returnSomethingListenable() call decl ListenableFuture.get() call decl ListenableFuture.get() call decl ListenableFuture.get() call decl ListenableFuture.get() call decl ListenableFuture.get() decl_stmt CompletableFuture < = call AsyncMethodBean.returnSomethingCompletable() call AsyncMethodBean.returnSomethingCompletable() call AsyncMethodBean.returnSomethingCompletable() call AsyncMethodBean.returnSomethingCompletable() call AsyncMethodBean.returnSomethingCompletable() call decl CompletableFuture.get() call decl CompletableFuture.get() call decl CompletableFuture.get() call decl CompletableFuture.get() call decl CompletableFuture.get() try call AsyncMethodBean.returnSomething() call AsyncMethodBean.returnSomething() call AsyncMethodBean.returnSomething() call AsyncMethodBean.returnSomething() call AsyncMethodBean.returnSomething() catch instanceof try call AsyncMethodBean.returnSomething() call AsyncMethodBean.returnSomething() call AsyncMethodBean.returnSomething() call AsyncMethodBean.returnSomething() call AsyncMethodBean.returnSomething() - catch instanceof try call AsyncMethodBean.returnSomethingListenable() call AsyncMethodBean.returnSomethingListenable() call AsyncMethodBean.returnSomethingListenable() call AsyncMethodBean.returnSomethingListenable() call AsyncMethodBean.returnSomethingListenable() catch instanceof try call AsyncMethodBean.returnSomethingListenable() call AsyncMethodBean.returnSomethingListenable() call AsyncMethodBean.returnSomethingListenable() call AsyncMethodBean.returnSomethingListenable() call AsyncMethodBean.returnSomethingListenable() - catch instanceof try call AsyncMethodBean.returnSomethingCompletable() call AsyncMethodBean.returnSomethingCompletable() call AsyncMethodBean.returnSomethingCompletable() call AsyncMethodBean.returnSomethingCompletable() call AsyncMethodBean.returnSomethingCompletable() catch instanceof SimpleInterface decl Future GenericApplicationContext public public throws = decl_stmt org.springframework.context.support.GenericApplicationContext = new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() decl_stmt org.springframework.scheduling.annotation.SimpleInterface = call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call org.springframework.scheduling.annotation.SimpleInterface.doNothing(int) call org.springframework.scheduling.annotation.SimpleInterface.doNothing(int) call org.springframework.scheduling.annotation.SimpleInterface.doNothing(int) call org.springframework.scheduling.annotation.SimpleInterface.doNothing(int) call org.springframework.scheduling.annotation.SimpleInterface.doNothing(int) call SimpleInterface.doSomething() call SimpleInterface.doSomething() call SimpleInterface.doSomething() call SimpleInterface.doSomething() call SimpleInterface.doSomething() decl_stmt java.util.concurrent.Future < = call org.springframework.scheduling.annotation.SimpleInterface.returnSomething(int) call org.springframework.scheduling.annotation.SimpleInterface.returnSomething(int) call org.springframework.scheduling.annotation.SimpleInterface.returnSomething(int) call org.springframework.scheduling.annotation.SimpleInterface.returnSomething(int) call org.springframework.scheduling.annotation.SimpleInterface.returnSomething(int) call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() AsyncMethodWithQualifierBean decl Future decl Future GenericApplicationContext public public throws = decl_stmt org.springframework.context.support.GenericApplicationContext = new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() decl_stmt AsyncMethodWithQualifierBean = call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call AsyncMethodWithQualifierBean.doNothing() call AsyncMethodWithQualifierBean.doNothing() call AsyncMethodWithQualifierBean.doNothing() call AsyncMethodWithQualifierBean.doNothing() call AsyncMethodWithQualifierBean.doNothing() call AsyncMethodWithQualifierBean.doSomething() call AsyncMethodWithQualifierBean.doSomething() call AsyncMethodWithQualifierBean.doSomething() call AsyncMethodWithQualifierBean.doSomething() call AsyncMethodWithQualifierBean.doSomething() decl_stmt java.util.concurrent.Future < = call AsyncMethodWithQualifierBean.returnSomething() call AsyncMethodWithQualifierBean.returnSomething() call AsyncMethodWithQualifierBean.returnSomething() call AsyncMethodWithQualifierBean.returnSomething() call AsyncMethodWithQualifierBean.returnSomething() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() decl_stmt java.util.concurrent.Future < = call AsyncMethodWithQualifierBean.returnSomething2() call AsyncMethodWithQualifierBean.returnSomething2() call AsyncMethodWithQualifierBean.returnSomething2() call AsyncMethodWithQualifierBean.returnSomething2() call AsyncMethodWithQualifierBean.returnSomething2() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() SimpleInterface decl Future decl Future GenericApplicationContext public public throws = decl_stmt org.springframework.context.support.GenericApplicationContext = new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() decl_stmt org.springframework.scheduling.annotation.SimpleInterface = call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call org.springframework.scheduling.annotation.SimpleInterface.doNothing(int) call org.springframework.scheduling.annotation.SimpleInterface.doNothing(int) call org.springframework.scheduling.annotation.SimpleInterface.doNothing(int) call org.springframework.scheduling.annotation.SimpleInterface.doNothing(int) call org.springframework.scheduling.annotation.SimpleInterface.doNothing(int) call SimpleInterface.doSomething() call SimpleInterface.doSomething() call SimpleInterface.doSomething() call SimpleInterface.doSomething() call SimpleInterface.doSomething() decl_stmt java.util.concurrent.Future < = call org.springframework.scheduling.annotation.SimpleInterface.returnSomething(int) call org.springframework.scheduling.annotation.SimpleInterface.returnSomething(int) call org.springframework.scheduling.annotation.SimpleInterface.returnSomething(int) call org.springframework.scheduling.annotation.SimpleInterface.returnSomething(int) call org.springframework.scheduling.annotation.SimpleInterface.returnSomething(int) call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() decl_stmt java.util.concurrent.Future < = call org.springframework.scheduling.annotation.SimpleInterface.returnSomething2(int) call org.springframework.scheduling.annotation.SimpleInterface.returnSomething2(int) call org.springframework.scheduling.annotation.SimpleInterface.returnSomething2(int) call org.springframework.scheduling.annotation.SimpleInterface.returnSomething2(int) call org.springframework.scheduling.annotation.SimpleInterface.returnSomething2(int) call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() decl ListenableFuture AsyncClassBean decl Future decl CompletableFuture GenericApplicationContext public public throws = decl_stmt org.springframework.context.support.GenericApplicationContext = new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() decl_stmt AsyncClassBean = call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call AsyncClassBean.doSomething() call AsyncClassBean.doSomething() call AsyncClassBean.doSomething() call AsyncClassBean.doSomething() call AsyncClassBean.doSomething() decl_stmt java.util.concurrent.Future < = call AsyncClassBean.returnSomething() call AsyncClassBean.returnSomething() call AsyncClassBean.returnSomething() call AsyncClassBean.returnSomething() call AsyncClassBean.returnSomething() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() decl_stmt org.springframework.util.concurrent.ListenableFuture < = call AsyncClassBean.returnSomethingListenable() call AsyncClassBean.returnSomethingListenable() call AsyncClassBean.returnSomethingListenable() call AsyncClassBean.returnSomethingListenable() call AsyncClassBean.returnSomethingListenable() call decl ListenableFuture.get() call decl ListenableFuture.get() call decl ListenableFuture.get() call decl ListenableFuture.get() call decl ListenableFuture.get() decl_stmt CompletableFuture < = call AsyncClassBean.returnSomethingCompletable() call AsyncClassBean.returnSomethingCompletable() call AsyncClassBean.returnSomethingCompletable() call AsyncClassBean.returnSomethingCompletable() call AsyncClassBean.returnSomethingCompletable() call decl CompletableFuture.get() call decl CompletableFuture.get() call decl CompletableFuture.get() call decl CompletableFuture.get() call decl CompletableFuture.get() try call AsyncClassBean.returnSomething() call AsyncClassBean.returnSomething() call AsyncClassBean.returnSomething() call AsyncClassBean.returnSomething() call AsyncClassBean.returnSomething() catch instanceof try call AsyncClassBean.returnSomethingListenable() call AsyncClassBean.returnSomethingListenable() call AsyncClassBean.returnSomethingListenable() call AsyncClassBean.returnSomethingListenable() call AsyncClassBean.returnSomethingListenable() catch instanceof try call AsyncClassBean.returnSomethingCompletable() call AsyncClassBean.returnSomethingCompletable() call AsyncClassBean.returnSomethingCompletable() call AsyncClassBean.returnSomethingCompletable() call AsyncClassBean.returnSomethingCompletable() catch instanceof AsyncClassBean decl Future GenericApplicationContext public public throws = decl_stmt org.springframework.context.support.GenericApplicationContext = new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() decl_stmt AsyncClassBean = call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call AsyncClassBean.doSomething() call AsyncClassBean.doSomething() call AsyncClassBean.doSomething() call AsyncClassBean.doSomething() call AsyncClassBean.doSomething() decl_stmt java.util.concurrent.Future < = call AsyncClassBean.returnSomething() call AsyncClassBean.returnSomething() call AsyncClassBean.returnSomething() call AsyncClassBean.returnSomething() call AsyncClassBean.returnSomething() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() RegularInterface decl Future GenericApplicationContext public public throws = decl_stmt org.springframework.context.support.GenericApplicationContext = new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() decl_stmt RegularInterface = call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call RegularInterface.doSomething() call RegularInterface.doSomething() call RegularInterface.doSomething() call RegularInterface.doSomething() call RegularInterface.doSomething() decl_stmt java.util.concurrent.Future < = call RegularInterface.returnSomething() call RegularInterface.returnSomething() call RegularInterface.returnSomething() call RegularInterface.returnSomething() call RegularInterface.returnSomething() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() RegularInterface decl Future GenericApplicationContext public public throws = decl_stmt org.springframework.context.support.GenericApplicationContext = new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() decl_stmt RegularInterface = call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call RegularInterface.doSomething() call RegularInterface.doSomething() call RegularInterface.doSomething() call RegularInterface.doSomething() call RegularInterface.doSomething() decl_stmt java.util.concurrent.Future < = call RegularInterface.returnSomething() call RegularInterface.returnSomething() call RegularInterface.returnSomething() call RegularInterface.returnSomething() call RegularInterface.returnSomething() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() AsyncInterface decl Future GenericApplicationContext public public throws = decl_stmt org.springframework.context.support.GenericApplicationContext = new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() decl_stmt AsyncInterface = call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call AsyncInterface.doSomething() call AsyncInterface.doSomething() call AsyncInterface.doSomething() call AsyncInterface.doSomething() call AsyncInterface.doSomething() decl_stmt java.util.concurrent.Future < = call AsyncInterface.returnSomething() call AsyncInterface.returnSomething() call AsyncInterface.returnSomething() call AsyncInterface.returnSomething() call AsyncInterface.returnSomething() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() AsyncInterface decl Future GenericApplicationContext public public throws = decl_stmt org.springframework.context.support.GenericApplicationContext = new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() decl_stmt AsyncInterface = call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call AsyncInterface.doSomething() call AsyncInterface.doSomething() call AsyncInterface.doSomething() call AsyncInterface.doSomething() call AsyncInterface.doSomething() decl_stmt java.util.concurrent.Future < = call AsyncInterface.returnSomething() call AsyncInterface.returnSomething() call AsyncInterface.returnSomething() call AsyncInterface.returnSomething() call AsyncInterface.returnSomething() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() AsyncInterface decl Future GenericApplicationContext public public throws = decl_stmt org.springframework.context.support.GenericApplicationContext = new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() decl_stmt AsyncInterface = call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call AsyncInterface.doSomething() call AsyncInterface.doSomething() call AsyncInterface.doSomething() call AsyncInterface.doSomething() call AsyncInterface.doSomething() decl_stmt java.util.concurrent.Future < = call AsyncInterface.returnSomething() call AsyncInterface.returnSomething() call AsyncInterface.returnSomething() call AsyncInterface.returnSomething() call AsyncInterface.returnSomething() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() AsyncInterface decl Future GenericApplicationContext public public throws = decl_stmt org.springframework.context.support.GenericApplicationContext = new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() decl_stmt AsyncInterface = call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call AsyncInterface.doSomething() call AsyncInterface.doSomething() call AsyncInterface.doSomething() call AsyncInterface.doSomething() call AsyncInterface.doSomething() decl_stmt java.util.concurrent.Future < = call AsyncInterface.returnSomething() call AsyncInterface.returnSomething() call AsyncInterface.returnSomething() call AsyncInterface.returnSomething() call AsyncInterface.returnSomething() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() AsyncMethodsInterface decl Future GenericApplicationContext public public throws = decl_stmt org.springframework.context.support.GenericApplicationContext = new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() decl_stmt AsyncMethodsInterface = call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call AsyncMethodsInterface.doNothing() call AsyncMethodsInterface.doNothing() call AsyncMethodsInterface.doNothing() call AsyncMethodsInterface.doNothing() call AsyncMethodsInterface.doNothing() call AsyncMethodsInterface.doSomething() call AsyncMethodsInterface.doSomething() call AsyncMethodsInterface.doSomething() call AsyncMethodsInterface.doSomething() call AsyncMethodsInterface.doSomething() decl_stmt java.util.concurrent.Future < = call AsyncMethodsInterface.returnSomething() call AsyncMethodsInterface.returnSomething() call AsyncMethodsInterface.returnSomething() call AsyncMethodsInterface.returnSomething() call AsyncMethodsInterface.returnSomething() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() AsyncMethodsInterface decl Future GenericApplicationContext public public throws = decl_stmt org.springframework.context.support.GenericApplicationContext = new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() decl_stmt AsyncMethodsInterface = call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call AsyncMethodsInterface.doNothing() call AsyncMethodsInterface.doNothing() call AsyncMethodsInterface.doNothing() call AsyncMethodsInterface.doNothing() call AsyncMethodsInterface.doNothing() call AsyncMethodsInterface.doSomething() call AsyncMethodsInterface.doSomething() call AsyncMethodsInterface.doSomething() call AsyncMethodsInterface.doSomething() call AsyncMethodsInterface.doSomething() decl_stmt java.util.concurrent.Future < = call AsyncMethodsInterface.returnSomething() call AsyncMethodsInterface.returnSomething() call AsyncMethodsInterface.returnSomething() call AsyncMethodsInterface.returnSomething() call AsyncMethodsInterface.returnSomething() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() AsyncMethodsInterface decl Future GenericApplicationContext public public throws = decl_stmt org.springframework.context.support.GenericApplicationContext = new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() decl_stmt AsyncMethodsInterface = call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call AsyncMethodsInterface.doSomething() call AsyncMethodsInterface.doSomething() call AsyncMethodsInterface.doSomething() call AsyncMethodsInterface.doSomething() call AsyncMethodsInterface.doSomething() decl_stmt java.util.concurrent.Future < = call AsyncMethodsInterface.returnSomething() call AsyncMethodsInterface.returnSomething() call AsyncMethodsInterface.returnSomething() call AsyncMethodsInterface.returnSomething() call AsyncMethodsInterface.returnSomething() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() GenericApplicationContext public public throws = = decl_stmt org.springframework.context.support.GenericApplicationContext = new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() GenericApplicationContext public public throws = = = decl_stmt org.springframework.context.support.GenericApplicationContext = new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.close() call GenericApplicationContext.close() call GenericApplicationContext.close() call GenericApplicationContext.close() call GenericApplicationContext.close() RootBeanDefinition GenericApplicationContext public public throws = = = decl_stmt org.springframework.context.support.GenericApplicationContext = new decl_stmt org.springframework.beans.factory.support.RootBeanDefinition = new call RootBeanDefinition.setScope() call RootBeanDefinition.setScope() call RootBeanDefinition.setScope() call RootBeanDefinition.setScope() call RootBeanDefinition.setScope() call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.close() call GenericApplicationContext.close() call GenericApplicationContext.close() call GenericApplicationContext.close() call GenericApplicationContext.close() public public public public ! public < public < ! if == throw new else if < return new return public < public < ! if == throw new else if < return new return new < public < public < ! if == throw new return public < public < throw new public public public public ! public < public < ! return new < public < public < ! return new < public public ! public < public < ! if == throw new return new < public < public < ! if == throw new return new < public < public < ! if == throw new return public public public public ! public < public < ! return new < public public ! public < public < ! return new < public public throws ! if return new < return public public return public < public < return public public return public public public public ! public < public < ! return new < public public throws ! if return new < return public public return public < public < return public public return public public ++ ! public public ++ !