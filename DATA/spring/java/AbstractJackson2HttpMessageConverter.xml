org.springframework.http.converter.json java.io.IOException import java.lang.reflect.Type import java.lang.reflect.TypeVariable import java.nio.charset.Charset import java.util.concurrent.atomic.AtomicReference import com.fasterxml.jackson.core.JsonEncoding import com.fasterxml.jackson.core.JsonGenerator import com.fasterxml.jackson.core.JsonProcessingException import com.fasterxml.jackson.core.util.DefaultPrettyPrinter import com.fasterxml.jackson.databind.JavaType import com.fasterxml.jackson.databind.JsonMappingException import com.fasterxml.jackson.databind.ObjectMapper import com.fasterxml.jackson.databind.ObjectWriter import com.fasterxml.jackson.databind.SerializationFeature import com.fasterxml.jackson.databind.ser.FilterProvider import com.fasterxml.jackson.databind.type.TypeFactory import org.springframework.core.ResolvableType import org.springframework.http.HttpInputMessage import org.springframework.http.HttpOutputMessage import org.springframework.http.MediaType import org.springframework.http.converter.AbstractGenericHttpMessageConverter import org.springframework.http.converter.HttpMessageConverter import org.springframework.http.converter.HttpMessageNotReadableException import org.springframework.http.converter.HttpMessageNotWritableException import org.springframework.util.Assert import org.springframework.util.TypeUtils import class org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter super super extends Charset Boolean ObjectMapper public public = public public return public public = private private if != public public < return JavaType decl AtomicReference public public < if ! return decl_stmt JavaType = if ! return decl_stmt java.util.concurrent.atomic.AtomicReference < = new < if return call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() return decl AtomicReference public public < if ! return if ! return decl_stmt java.util.concurrent.atomic.AtomicReference < = new < if return call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() return String protected protected if != && ! instanceof && decl_stmt java.lang.String = + instanceof : + + + if else + + protected protected < throw new JavaType protected protected < throws decl_stmt JavaType = return JavaType public public < throws decl_stmt JavaType = return decl Class private private try if instanceof decl_stmt java.lang.Class < = if != return return catch throw new + MappingJacksonValue JsonGenerator decl Class JsonEncoding Object JavaType ObjectWriter FilterProvider protected protected throws decl_stmt JsonEncoding = decl_stmt JsonGenerator = try decl_stmt java.lang.Class < = decl_stmt FilterProvider = decl_stmt java.lang.Object = decl_stmt JavaType = if instanceof decl_stmt org.springframework.http.converter.json.MappingJacksonValue = = call org.springframework.http.converter.json.MappingJacksonValue.getValue() call org.springframework.http.converter.json.MappingJacksonValue.getValue() call org.springframework.http.converter.json.MappingJacksonValue.getValue() call org.springframework.http.converter.json.MappingJacksonValue.getValue() call org.springframework.http.converter.json.MappingJacksonValue.getValue() = call org.springframework.http.converter.json.MappingJacksonValue.getSerializationView() call org.springframework.http.converter.json.MappingJacksonValue.getSerializationView() call org.springframework.http.converter.json.MappingJacksonValue.getSerializationView() call org.springframework.http.converter.json.MappingJacksonValue.getSerializationView() call org.springframework.http.converter.json.MappingJacksonValue.getSerializationView() = call org.springframework.http.converter.json.MappingJacksonValue.getFilters() call org.springframework.http.converter.json.MappingJacksonValue.getFilters() call org.springframework.http.converter.json.MappingJacksonValue.getFilters() call org.springframework.http.converter.json.MappingJacksonValue.getFilters() call org.springframework.http.converter.json.MappingJacksonValue.getFilters() if != && != && call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() = decl_stmt ObjectWriter if != = else if != = else = if != && call JavaType.isContainerType() call JavaType.isContainerType() call JavaType.isContainerType() call JavaType.isContainerType() call JavaType.isContainerType() = call ObjectWriter.forType() call ObjectWriter.forType() call ObjectWriter.forType() call ObjectWriter.forType() call ObjectWriter.forType() call ObjectWriter.writeValue() call ObjectWriter.writeValue() call ObjectWriter.writeValue() call ObjectWriter.writeValue() call ObjectWriter.writeValue() call JsonGenerator.flush() call JsonGenerator.flush() call JsonGenerator.flush() call JsonGenerator.flush() call JsonGenerator.flush() catch throw new + protected protected throws protected protected throws TypeFactory ResolvableType protected protected < decl_stmt TypeFactory = if instanceof && != decl_stmt org.springframework.core.ResolvableType = < if != return call TypeFactory.constructType() call TypeFactory.constructType() call TypeFactory.constructType() call TypeFactory.constructType() call TypeFactory.constructType() call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() return call TypeFactory.constructType() call TypeFactory.constructType() call TypeFactory.constructType() call TypeFactory.constructType() call TypeFactory.constructType() ResolvableType private private < decl_stmt org.springframework.core.ResolvableType if = if call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() != return = if call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() != return for : = if call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() != return return Charset protected protected if != && != decl_stmt java.nio.charset.Charset = for : if call java.nio.charset.Charset.name() call java.nio.charset.Charset.name() call java.nio.charset.Charset.name() call java.nio.charset.Charset.name() call java.nio.charset.Charset.name() return return protected protected throws if instanceof = return protected protected throws if instanceof = return