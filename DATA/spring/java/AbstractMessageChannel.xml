org.springframework.messaging.support java.util.ArrayList import java.util.Collections import java.util.List import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.factory.BeanNameAware import org.springframework.messaging.Message import org.springframework.messaging.MessageChannel import org.springframework.messaging.MessageDeliveryException import org.springframework.messaging.MessagingException import org.springframework.util.Assert import org.springframework.util.ObjectUtils import class org.springframework.messaging.support.AbstractMessageChannel super super implements Log String decl List public public = public public return public public < public public public public public < public < return public public return public public return public final public final < return MessageDeliveryException boolean ChannelInterceptorChain public final public final < decl_stmt ChannelInterceptorChain = new decl_stmt boolean = try = call ChannelInterceptorChain.applyPreSend() call ChannelInterceptorChain.applyPreSend() call ChannelInterceptorChain.applyPreSend() call ChannelInterceptorChain.applyPreSend() call ChannelInterceptorChain.applyPreSend() if == return = call ChannelInterceptorChain.applyPostSend() call ChannelInterceptorChain.applyPostSend() call ChannelInterceptorChain.applyPostSend() call ChannelInterceptorChain.applyPostSend() call ChannelInterceptorChain.applyPostSend() call ChannelInterceptorChain.triggerAfterSendCompletion() call ChannelInterceptorChain.triggerAfterSendCompletion() call ChannelInterceptorChain.triggerAfterSendCompletion() call ChannelInterceptorChain.triggerAfterSendCompletion() call ChannelInterceptorChain.triggerAfterSendCompletion() return catch call ChannelInterceptorChain.triggerAfterSendCompletion() call ChannelInterceptorChain.triggerAfterSendCompletion() call ChannelInterceptorChain.triggerAfterSendCompletion() call ChannelInterceptorChain.triggerAfterSendCompletion() call ChannelInterceptorChain.triggerAfterSendCompletion() if instanceof throw throw new + catch decl_stmt MessageDeliveryException = new + call ChannelInterceptorChain.triggerAfterSendCompletion() call ChannelInterceptorChain.triggerAfterSendCompletion() call ChannelInterceptorChain.triggerAfterSendCompletion() call ChannelInterceptorChain.triggerAfterSendCompletion() call ChannelInterceptorChain.triggerAfterSendCompletion() throw public public return + + + decl Message decl Message String public < public < < decl_stmt org.springframework.messaging.Message < = for : decl_stmt org.springframework.messaging.Message < = if == decl_stmt java.lang.String = if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + return = ++ return public public < for : ChannelInterceptor public public < for = >= -- decl_stmt org.springframework.messaging.support.ChannelInterceptor = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() try call org.springframework.messaging.support.ChannelInterceptor.afterSendCompletion(Message,MessageChannel,boolean,Exception) call org.springframework.messaging.support.ChannelInterceptor.afterSendCompletion(Message,MessageChannel,boolean,Exception) call org.springframework.messaging.support.ChannelInterceptor.afterSendCompletion(Message,MessageChannel,boolean,Exception) call org.springframework.messaging.support.ChannelInterceptor.afterSendCompletion(Message,MessageChannel,boolean,Exception) call org.springframework.messaging.support.ChannelInterceptor.afterSendCompletion(Message,MessageChannel,boolean,Exception) catch call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + public public for : if ! return ++ return public < public < < for : = if == return return ChannelInterceptor public public < for = >= -- decl_stmt org.springframework.messaging.support.ChannelInterceptor = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() try call org.springframework.messaging.support.ChannelInterceptor.afterReceiveCompletion(Message,MessageChannel,Exception) call org.springframework.messaging.support.ChannelInterceptor.afterReceiveCompletion(Message,MessageChannel,Exception) call org.springframework.messaging.support.ChannelInterceptor.afterReceiveCompletion(Message,MessageChannel,Exception) call org.springframework.messaging.support.ChannelInterceptor.afterReceiveCompletion(Message,MessageChannel,Exception) call org.springframework.messaging.support.ChannelInterceptor.afterReceiveCompletion(Message,MessageChannel,Exception) catch if call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() +