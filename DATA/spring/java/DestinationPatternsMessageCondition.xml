org.springframework.messaging.handler java.util.ArrayList import java.util.Arrays import java.util.Collection import java.util.Collections import java.util.Comparator import java.util.Iterator import java.util.LinkedHashSet import java.util.List import java.util.Set import org.springframework.messaging.Message import org.springframework.util.AntPathMatcher import org.springframework.util.PathMatcher import org.springframework.util.StringUtils import class org.springframework.messaging.handler.DestinationPatternsMessageCondition super super extends String decl Set PathMatcher private static < private static < return != : > decl Set boolean private static < private static < < if == return decl_stmt boolean = call org.springframework.util.PathMatcher.combine(String,String) call org.springframework.util.PathMatcher.combine(String,String) call org.springframework.util.PathMatcher.combine(String,String) call org.springframework.util.PathMatcher.combine(String,String) call org.springframework.util.PathMatcher.combine(String,String) decl_stmt java.util.Set < = new < call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() for : if if && ! = + call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return public < public < return protected < protected < return protected protected return decl Set public public decl_stmt java.util.Set < = new < if ! && ! for : for : call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() else if ! call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() else if ! call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() else call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return new decl List String public public < decl_stmt java.lang.String = if == return if return decl_stmt java.util.List < = new < for : if || call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return return new int String decl Iterator decl Iterator decl Comparator public public < decl_stmt java.lang.String = decl_stmt java.util.Comparator < = decl_stmt java.util.Iterator < = call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() decl_stmt java.util.Iterator < = while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() && call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt int = call decl Comparator.compare() call decl Comparator.compare() call decl Comparator.compare() call decl Comparator.compare() call decl Comparator.compare() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if != return if call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() return - else if call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() return else return