org.springframework.context.annotation java.io.IOException import java.lang.annotation.Annotation import java.util.LinkedHashSet import java.util.LinkedList import java.util.List import java.util.Set import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.factory.BeanDefinitionStoreException import org.springframework.beans.factory.annotation.AnnotatedBeanDefinition import org.springframework.beans.factory.config.BeanDefinition import org.springframework.beans.factory.support.BeanDefinitionRegistry import org.springframework.context.ResourceLoaderAware import org.springframework.core.env.Environment import org.springframework.core.env.EnvironmentCapable import org.springframework.core.env.StandardEnvironment import org.springframework.core.io.Resource import org.springframework.core.io.ResourceLoader import org.springframework.core.io.support.PathMatchingResourcePatternResolver import org.springframework.core.io.support.ResourcePatternResolver import org.springframework.core.io.support.ResourcePatternUtils import org.springframework.core.type.classreading.CachingMetadataReaderFactory import org.springframework.core.type.classreading.MetadataReader import org.springframework.core.type.classreading.MetadataReaderFactory import org.springframework.core.type.filter.AnnotationTypeFilter import org.springframework.core.type.filter.TypeFilter import org.springframework.stereotype.Component import org.springframework.stereotype.Controller import org.springframework.stereotype.Repository import org.springframework.stereotype.Service import org.springframework.util.Assert import org.springframework.util.ClassUtils import class org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider super super implements String ConditionEvaluator MetadataReaderFactory String Environment ResourcePatternResolver decl List Log decl List public public = = new public final public final return public public = public final public final return public public = = public final public final return protected protected return public public = public public public public public public if ClassLoader protected protected new decl_stmt java.lang.ClassLoader = try new < extends extends call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() catch try new < extends extends call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() catch boolean MetadataReader boolean decl Set ScannedGenericBeanDefinition String decl Resource public < public < decl_stmt java.util.Set < = new < try decl_stmt java.lang.String = + + + decl_stmt org.springframework.core.io.Resource = decl_stmt boolean = call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() decl_stmt boolean = call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() for : if call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + if try decl_stmt org.springframework.core.type.classreading.MetadataReader = if decl_stmt org.springframework.context.annotation.ScannedGenericBeanDefinition = new call ScannedGenericBeanDefinition.setResource() call ScannedGenericBeanDefinition.setResource() call ScannedGenericBeanDefinition.setResource() call ScannedGenericBeanDefinition.setResource() call ScannedGenericBeanDefinition.setResource() call ScannedGenericBeanDefinition.setSource() call ScannedGenericBeanDefinition.setSource() call ScannedGenericBeanDefinition.setSource() call ScannedGenericBeanDefinition.setSource() call ScannedGenericBeanDefinition.setSource() if if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() else if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + else if call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + catch throw new + else if call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + catch throw new return protected protected return protected protected throws for : if return for : if return return private private if == = new return ! protected protected return && public public if instanceof