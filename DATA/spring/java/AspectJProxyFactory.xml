org.springframework.aop.aspectj.annotation java.util.HashMap import java.util.List import java.util.Map import org.aspectj.lang.reflect.PerClauseKind import org.springframework.aop.Advisor import org.springframework.aop.aspectj.AspectJProxyUtils import org.springframework.aop.framework.AopConfigException import org.springframework.aop.framework.ProxyCreatorSupport import org.springframework.aop.support.AopUtils import org.springframework.core.annotation.AnnotationAwareOrderComparator import org.springframework.util.Assert import org.springframework.util.ClassUtils import class annotation org.springframework.aop.aspectj.annotation.AspectJProxyFactory super super extends decl Map AspectJAdvisorFactory AspectMetadata decl Class String public public decl_stmt java.lang.Class < = decl_stmt java.lang.String = call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() decl_stmt org.springframework.aop.aspectj.annotation.AspectMetadata = if call org.springframework.aop.aspectj.annotation.AspectMetadata.getAjType() call org.springframework.aop.aspectj.annotation.AspectMetadata.getAjType() call org.springframework.aop.aspectj.annotation.AspectMetadata.getAjType() call org.springframework.aop.aspectj.annotation.AspectMetadata.getAjType() call org.springframework.aop.aspectj.annotation.AspectMetadata.getAjType() != throw new + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() + new MetadataAwareAspectInstanceFactory String AspectMetadata public public < decl_stmt java.lang.String = decl_stmt org.springframework.aop.aspectj.annotation.AspectMetadata = decl_stmt org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory = decl List private private decl_stmt java.util.List < = = AspectMetadata private private < decl_stmt org.springframework.aop.aspectj.annotation.AspectMetadata = new if ! call org.springframework.aop.aspectj.annotation.AspectMetadata.getAjType() call org.springframework.aop.aspectj.annotation.AspectMetadata.getAjType() call org.springframework.aop.aspectj.annotation.AspectMetadata.getAjType() call org.springframework.aop.aspectj.annotation.AspectMetadata.getAjType() call org.springframework.aop.aspectj.annotation.AspectMetadata.getAjType() throw new + + return Object MetadataAwareAspectInstanceFactory private private < decl_stmt org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory = if == decl_stmt java.lang.Object = = new else = new return Object private private < synchronized decl_stmt java.lang.Object = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != return try = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return catch throw new + + catch throw new + + public < public < return public < public < return