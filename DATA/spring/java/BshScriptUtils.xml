org.springframework.scripting.bsh java.lang.reflect.InvocationHandler import java.lang.reflect.Method import java.lang.reflect.Proxy import bsh.EvalError import bsh.Interpreter import bsh.Primitive import bsh.XThis import org.springframework.core.NestedRuntimeException import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.ReflectionUtils import class org.springframework.scripting.bsh.BshScriptUtils public static public static throws return public static public static < throws return Object decl Class public static public static < throws decl_stmt java.lang.Object = if instanceof decl_stmt java.lang.Class < = < try return call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() catch throw new + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() + + else return Interpreter Object static < static < throws decl_stmt Interpreter = new call Interpreter.setClassLoader() call Interpreter.setClassLoader() call Interpreter.setClassLoader() call Interpreter.setClassLoader() call Interpreter.setClassLoader() decl_stmt java.lang.Object = call Interpreter.eval() call Interpreter.eval() call Interpreter.eval() call Interpreter.eval() call Interpreter.eval() if instanceof return < else if != return call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() else return Interpreter Object XThis static static < throws decl_stmt Interpreter = new call Interpreter.setClassLoader() call Interpreter.setClassLoader() call Interpreter.setClassLoader() call Interpreter.setClassLoader() call Interpreter.setClassLoader() decl_stmt java.lang.Object = call Interpreter.eval() call Interpreter.eval() call Interpreter.eval() call Interpreter.eval() call Interpreter.eval() if != return else decl_stmt XThis = call Interpreter.eval() call Interpreter.eval() call Interpreter.eval() call Interpreter.eval() call Interpreter.eval() return new Object public public throws if return else if return else if return + + try decl_stmt java.lang.Object = if == || == return if instanceof return return catch throw new InvocationHandler private private if ! return decl_stmt java.lang.reflect.InvocationHandler = return instanceof &&