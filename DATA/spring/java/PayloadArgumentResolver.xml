org.springframework.messaging.handler.annotation.support java.lang.annotation.Annotation import org.springframework.core.MethodParameter import org.springframework.core.annotation.AnnotationUtils import org.springframework.messaging.Message import org.springframework.messaging.converter.MessageConversionException import org.springframework.messaging.converter.MessageConverter import org.springframework.messaging.converter.SmartMessageConverter import org.springframework.messaging.handler.annotation.Payload import org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.ObjectUtils import org.springframework.util.StringUtils import org.springframework.validation.BeanPropertyBindingResult import org.springframework.validation.BindingResult import org.springframework.validation.ObjectError import org.springframework.validation.SmartValidator import org.springframework.validation.Validator import org.springframework.validation.annotation.Validated import class org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver super super implements Validator MessageConverter public public return Object Payload SmartMessageConverter String decl Class BindingResult public public < throws decl_stmt Payload = if != && call Payload.expression() call Payload.expression() call Payload.expression() call Payload.expression() call Payload.expression() throw new decl_stmt java.lang.Object = if if == || call Payload.required() call Payload.required() call Payload.required() call Payload.required() call Payload.required() decl_stmt java.lang.String = decl_stmt org.springframework.validation.BindingResult = new call org.springframework.validation.BindingResult.addError(ObjectError) call org.springframework.validation.BindingResult.addError(ObjectError) call org.springframework.validation.BindingResult.addError(ObjectError) call org.springframework.validation.BindingResult.addError(ObjectError) call org.springframework.validation.BindingResult.addError(ObjectError) new throw new else return decl_stmt java.lang.Class < = if call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() return else if instanceof decl_stmt org.springframework.jms.support.converter.SmartMessageConverter = = call org.springframework.jms.support.converter.SmartMessageConverter.fromMessage(Message,Class,Object) call org.springframework.jms.support.converter.SmartMessageConverter.fromMessage(Message,Class,Object) call org.springframework.jms.support.converter.SmartMessageConverter.fromMessage(Message,Class,Object) call org.springframework.jms.support.converter.SmartMessageConverter.fromMessage(Message,Class,Object) call org.springframework.jms.support.converter.SmartMessageConverter.fromMessage(Message,Class,Object) else = if == throw new + + + return String private private decl_stmt java.lang.String = return != : + protected protected if == return else if instanceof return == else if instanceof return ! else return Validated BeanPropertyBindingResult decl Object Object protected protected < if == return for : decl_stmt Validated = if != || decl_stmt java.lang.Object = != call Validated.value() call Validated.value() call Validated.value() call Validated.value() call Validated.value() : decl_stmt java.lang.Object = instanceof : new decl_stmt org.springframework.validation.BeanPropertyBindingResult = new if ! && instanceof else if call BeanPropertyBindingResult.hasErrors() call BeanPropertyBindingResult.hasErrors() call BeanPropertyBindingResult.hasErrors() call BeanPropertyBindingResult.hasErrors() call BeanPropertyBindingResult.hasErrors() throw new break