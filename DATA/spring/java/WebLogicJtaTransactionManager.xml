org.springframework.transaction.jta java.io.Serializable import java.lang.reflect.InvocationTargetException import java.lang.reflect.Method import javax.transaction.InvalidTransactionException import javax.transaction.NotSupportedException import javax.transaction.SystemException import javax.transaction.Transaction import javax.transaction.TransactionManager import javax.transaction.UserTransaction import org.springframework.transaction.TransactionDefinition import org.springframework.transaction.TransactionSystemException import class annotation org.springframework.transaction.jta.WebLogicJtaTransactionManager super super extends String String Method String Method String Method Method Object boolean boolean String public public throws Method protected protected throws try decl_stmt com.sun.jdi.Method = return call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) catch throw new catch throw new Method protected protected throws try decl_stmt com.sun.jdi.Method = return call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) catch throw new catch throw new Method decl Class private private throws if == try decl_stmt java.lang.Class < = decl_stmt com.sun.jdi.Method = call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) catch throw new catch throw new decl Class decl Class decl Class private private throws try decl_stmt java.lang.Class < = = call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() if = call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() = call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() else decl_stmt java.lang.Class < = = call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() if decl_stmt java.lang.Class < = = call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() = call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() else catch throw new Integer Transaction int protected protected throws decl_stmt int = if && != try if > else catch throw new catch throw new else if if != try decl_stmt Transaction = decl_stmt java.lang.Integer = catch throw new catch throw new else protected protected throws try catch if ! throw if + + try catch throw new catch throw new public public throws if && != try if >= else catch if instanceof throw else if instanceof throw else if instanceof throw else throw new + catch throw new + return new else return