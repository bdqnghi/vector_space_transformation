org.springframework.beans.factory.xml java.io.IOException import java.net.URISyntaxException import java.util.LinkedHashSet import java.util.Set import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.w3c.dom.Document import org.w3c.dom.Element import org.w3c.dom.Node import org.w3c.dom.NodeList import org.springframework.beans.factory.BeanDefinitionStoreException import org.springframework.beans.factory.config.BeanDefinitionHolder import org.springframework.beans.factory.parsing.BeanComponentDefinition import org.springframework.beans.factory.support.BeanDefinitionReaderUtils import org.springframework.core.io.Resource import org.springframework.core.io.support.ResourcePatternUtils import org.springframework.util.ResourceUtils import org.springframework.util.StringUtils import class org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader super super implements XmlReaderContext String String String BeanDefinitionParserDelegate String String Log String String String Element public public = call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() decl_stmt javax.swing.text.Element = protected final protected final return protected protected return String decl String BeanDefinitionParserDelegate protected protected decl_stmt org.springframework.beans.factory.xml.BeanDefinitionParserDelegate = = if decl_stmt java.lang.String = if decl_stmt java.lang.String = if ! if call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() + + + return = BeanDefinitionParserDelegate protected protected decl_stmt org.springframework.beans.factory.xml.BeanDefinitionParserDelegate = new call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.initDefaults(Element,BeanDefinitionParserDelegate) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.initDefaults(Element,BeanDefinitionParserDelegate) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.initDefaults(Element,BeanDefinitionParserDelegate) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.initDefaults(Element,BeanDefinitionParserDelegate) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.initDefaults(Element,BeanDefinitionParserDelegate) return Node NodeList Element protected protected if call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.isDefaultNamespace(Node) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.isDefaultNamespace(Node) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.isDefaultNamespace(Node) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.isDefaultNamespace(Node) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.isDefaultNamespace(Node) decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt sun.tools.tree.Node = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() if instanceof decl_stmt javax.swing.text.Element = if call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.isDefaultNamespace(Node) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.isDefaultNamespace(Node) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.isDefaultNamespace(Node) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.isDefaultNamespace(Node) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.isDefaultNamespace(Node) else call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(Element,BeanDefinition) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(Element,BeanDefinition) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(Element,BeanDefinition) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(Element,BeanDefinition) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(Element,BeanDefinition) else call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(Element,BeanDefinition) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(Element,BeanDefinition) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(Element,BeanDefinition) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(Element,BeanDefinition) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(Element,BeanDefinition) private private if call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.nodeNameEquals(Node,String) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.nodeNameEquals(Node,String) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.nodeNameEquals(Node,String) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.nodeNameEquals(Node,String) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.nodeNameEquals(Node,String) else if call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.nodeNameEquals(Node,String) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.nodeNameEquals(Node,String) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.nodeNameEquals(Node,String) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.nodeNameEquals(Node,String) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.nodeNameEquals(Node,String) else if call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.nodeNameEquals(Node,String) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.nodeNameEquals(Node,String) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.nodeNameEquals(Node,String) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.nodeNameEquals(Node,String) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.nodeNameEquals(Node,String) else if call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.nodeNameEquals(Node,String) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.nodeNameEquals(Node,String) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.nodeNameEquals(Node,String) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.nodeNameEquals(Node,String) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.nodeNameEquals(Node,String) boolean Resource decl Resource int decl Set String String protected protected decl_stmt java.lang.String = if ! return = decl_stmt java.util.Set < = new < decl_stmt boolean = try = || catch if try decl_stmt int = if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + + catch + + else try decl_stmt int decl_stmt org.springframework.core.io.Resource = if call org.springframework.core.io.Resource.exists() call org.springframework.core.io.Resource.exists() call org.springframework.core.io.Resource.exists() call org.springframework.core.io.Resource.exists() call org.springframework.core.io.Resource.exists() = call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() else decl_stmt java.lang.String = = if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + + catch catch + + decl_stmt org.springframework.core.io.Resource = call decl Set.toArray() call decl Set.toArray() call decl Set.toArray() call decl Set.toArray() call decl Set.toArray() new call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() String boolean String protected protected decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt boolean = if ! = if ! = if try catch + + + + BeanDefinitionHolder protected protected decl_stmt org.springframework.beans.factory.config.BeanDefinitionHolder = call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseBeanDefinitionElement(Element) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseBeanDefinitionElement(Element) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseBeanDefinitionElement(Element) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseBeanDefinitionElement(Element) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseBeanDefinitionElement(Element) if != = call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.decorateBeanDefinitionIfRequired(Element,BeanDefinitionHolder,BeanDefinition) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.decorateBeanDefinitionIfRequired(Element,BeanDefinitionHolder,BeanDefinition) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.decorateBeanDefinitionIfRequired(Element,BeanDefinitionHolder,BeanDefinition) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.decorateBeanDefinitionIfRequired(Element,BeanDefinitionHolder,BeanDefinition) call org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.decorateBeanDefinitionIfRequired(Element,BeanDefinitionHolder,BeanDefinition) try catch + call org.springframework.beans.factory.config.BeanDefinitionHolder.getBeanName() call org.springframework.beans.factory.config.BeanDefinitionHolder.getBeanName() call org.springframework.beans.factory.config.BeanDefinitionHolder.getBeanName() call org.springframework.beans.factory.config.BeanDefinitionHolder.getBeanName() call org.springframework.beans.factory.config.BeanDefinitionHolder.getBeanName() + new protected protected protected protected