org.springframework.context.support java.io.IOException import java.io.InputStream import java.io.InputStreamReader import java.text.MessageFormat import java.util.ArrayList import java.util.List import java.util.Locale import java.util.Map import java.util.Properties import java.util.concurrent.ConcurrentHashMap import java.util.concurrent.ConcurrentMap import java.util.concurrent.locks.ReentrantLock import org.springframework.context.ResourceLoaderAware import org.springframework.core.io.DefaultResourceLoader import org.springframework.core.io.Resource import org.springframework.core.io.ResourceLoader import org.springframework.util.DefaultPropertiesPersister import org.springframework.util.PropertiesPersister import org.springframework.util.StringUtils import class org.springframework.context.support.ReloadableResourceBundleMessageSource super super extends super implements decl ConcurrentMap String Properties ResourceLoader decl ConcurrentMap boolean PropertiesPersister String decl ConcurrentMap public public = public public = public public = != : new public public = != : new PropertiesHolder String decl List protected protected if < decl_stmt PropertiesHolder = decl_stmt java.lang.String = call PropertiesHolder.getProperty() call PropertiesHolder.getProperty() call PropertiesHolder.getProperty() call PropertiesHolder.getProperty() call PropertiesHolder.getProperty() if != return else for : decl_stmt java.util.List < = for : decl_stmt PropertiesHolder = decl_stmt java.lang.String = call PropertiesHolder.getProperty() call PropertiesHolder.getProperty() call PropertiesHolder.getProperty() call PropertiesHolder.getProperty() call PropertiesHolder.getProperty() if != return return PropertiesHolder MessageFormat decl List protected protected if < decl_stmt PropertiesHolder = decl_stmt java.text.MessageFormat = call PropertiesHolder.getMessageFormat() call PropertiesHolder.getMessageFormat() call PropertiesHolder.getMessageFormat() call PropertiesHolder.getMessageFormat() call PropertiesHolder.getMessageFormat() if != return else for : decl_stmt java.util.List < = for : decl_stmt PropertiesHolder = decl_stmt java.text.MessageFormat = call PropertiesHolder.getMessageFormat() call PropertiesHolder.getMessageFormat() call PropertiesHolder.getMessageFormat() call PropertiesHolder.getMessageFormat() call PropertiesHolder.getMessageFormat() if != return return Properties PropertiesHolder PropertiesHolder String PropertiesHolder decl List decl String protected protected decl_stmt PropertiesHolder = if != return decl_stmt java.util.Properties = = new - decl_stmt java.lang.String = for = - >= -- decl_stmt java.util.List < = for = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - >= -- decl_stmt java.lang.String = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt PropertiesHolder = if call PropertiesHolder.getProperties() call PropertiesHolder.getProperties() call PropertiesHolder.getProperties() call PropertiesHolder.getProperties() call PropertiesHolder.getProperties() != call Properties.putAll() call Properties.putAll() call Properties.putAll() call Properties.putAll() call Properties.putAll() call PropertiesHolder.getProperties() call PropertiesHolder.getProperties() call PropertiesHolder.getProperties() call PropertiesHolder.getProperties() call PropertiesHolder.getProperties() decl_stmt PropertiesHolder = if != = return decl List decl Map decl Map decl List protected < protected < decl_stmt java.util.Map < < = if != decl_stmt java.util.List < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != return decl_stmt java.util.List < = new < call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() if && ! decl_stmt java.util.List < = for : if ! call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if == = new < < decl_stmt java.util.Map < < = if != = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return StringBuilder String String decl List String protected < protected < decl_stmt java.util.List < = new < decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > || call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() return PropertiesHolder PropertiesHolder long protected protected decl_stmt PropertiesHolder = decl_stmt long = - if != = call PropertiesHolder.getRefreshTimestamp() call PropertiesHolder.getRefreshTimestamp() call PropertiesHolder.getRefreshTimestamp() call PropertiesHolder.getRefreshTimestamp() call PropertiesHolder.getRefreshTimestamp() if == - || > - return else = new decl_stmt PropertiesHolder = if != = if && call PropertiesHolder.getRefreshTimestamp() call PropertiesHolder.getRefreshTimestamp() call PropertiesHolder.getRefreshTimestamp() call PropertiesHolder.getRefreshTimestamp() call PropertiesHolder.getRefreshTimestamp() >= if ! call PropertiesHolder.refreshLock() call PropertiesHolder.refreshLock() call PropertiesHolder.refreshLock() call PropertiesHolder.refreshLock() call PropertiesHolder.refreshLock() call PropertiesHolder.refreshLock() call PropertiesHolder.refreshLock() call PropertiesHolder.refreshLock() call PropertiesHolder.refreshLock() return else call PropertiesHolder.refreshLock() call PropertiesHolder.refreshLock() call PropertiesHolder.refreshLock() call PropertiesHolder.refreshLock() call PropertiesHolder.refreshLock() call PropertiesHolder.refreshLock() call PropertiesHolder.refreshLock() call PropertiesHolder.refreshLock() call PropertiesHolder.refreshLock() try decl_stmt PropertiesHolder = if != && call PropertiesHolder.getRefreshTimestamp() call PropertiesHolder.getRefreshTimestamp() call PropertiesHolder.getRefreshTimestamp() call PropertiesHolder.getRefreshTimestamp() call PropertiesHolder.getRefreshTimestamp() > return return finally call PropertiesHolder.refreshLock() call PropertiesHolder.refreshLock() call PropertiesHolder.refreshLock() call PropertiesHolder.refreshLock() call PropertiesHolder.refreshLock() call PropertiesHolder.refreshLock() call PropertiesHolder.refreshLock() call PropertiesHolder.refreshLock() call PropertiesHolder.refreshLock() long Resource Properties long protected protected decl_stmt long = < - : decl_stmt org.springframework.core.io.Resource = + if ! call org.springframework.core.io.Resource.exists() call org.springframework.core.io.Resource.exists() call org.springframework.core.io.Resource.exists() call org.springframework.core.io.Resource.exists() call org.springframework.core.io.Resource.exists() = + if call org.springframework.core.io.Resource.exists() call org.springframework.core.io.Resource.exists() call org.springframework.core.io.Resource.exists() call org.springframework.core.io.Resource.exists() call org.springframework.core.io.Resource.exists() decl_stmt long = - if >= try = call org.springframework.core.io.Resource.lastModified() call org.springframework.core.io.Resource.lastModified() call org.springframework.core.io.Resource.lastModified() call org.springframework.core.io.Resource.lastModified() call org.springframework.core.io.Resource.lastModified() if != && == if + + return catch if + = - try decl_stmt java.util.Properties = = new catch if + call org.springframework.core.io.Resource.getFilename() call org.springframework.core.io.Resource.getFilename() call org.springframework.core.io.Resource.getFilename() call org.springframework.core.io.Resource.getFilename() call org.springframework.core.io.Resource.getFilename() + = new else if + + = new return InputStream String Properties protected protected throws decl_stmt java.io.InputStream = decl_stmt java.util.Properties = try if if + + else decl_stmt java.lang.String = if != = if == = if != if + + + + new else if + + return finally call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() protected protected return new public public public public if instanceof public public return + + public public return public public return public public = public public return public public if == return return String decl Map decl Map MessageFormat public public if == return decl_stmt java.util.Map < = if != decl_stmt java.text.MessageFormat = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != return decl_stmt java.lang.String = if != if == = new < decl_stmt java.util.Map < = if != = decl_stmt java.text.MessageFormat = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return return