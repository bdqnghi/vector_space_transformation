org.springframework.jdbc.config java.util.function.Predicate import javax.sql.DataSource import org.junit.Rule import org.junit.Test import org.junit.rules.ExpectedException import org.springframework.beans.PropertyValue import org.springframework.beans.factory.config.BeanDefinition import org.springframework.beans.factory.support.DefaultListableBeanFactory import org.springframework.beans.factory.xml.XmlBeanDefinitionReader import org.springframework.context.ConfigurableApplicationContext import org.springframework.context.support.ClassPathXmlApplicationContext import org.springframework.core.io.ClassPathResource import org.springframework.jdbc.BadSqlGrammarException import org.springframework.jdbc.core.JdbcTemplate import org.springframework.jdbc.datasource.AbstractDriverBasedDataSource import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactoryBean import org.springframework.jdbc.datasource.init.DataSourceInitializer import org.springframework.tests.Assume import org.springframework.tests.TestGroup import static static org.hamcrest.CoreMatchers.* import static static org.junit.Assert.* import static static org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory.* import class org.springframework.jdbc.config.JdbcNamespaceIntegrationTests ExpectedException public public throws public public throws public public throws public public throws public public throws public public throws decl Predicate public public throws decl_stmt Predicate < = call decl Predicate.and() call decl Predicate.and() call decl Predicate.and() call decl Predicate.and() call decl Predicate.and() ! call decl Predicate.and() call decl Predicate.and() call decl Predicate.and() call decl Predicate.and() call decl Predicate.and() ! public public throws public public throws DataSource ClassPathXmlApplicationContext JdbcTemplate public public throws decl_stmt org.springframework.context.support.ClassPathXmlApplicationContext = try decl_stmt javax.sql.DataSource = call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() decl_stmt org.springframework.jdbc.core.JdbcTemplate = new call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() finally call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() DataSource ClassPathXmlApplicationContext JdbcTemplate public public throws decl_stmt org.springframework.context.support.ClassPathXmlApplicationContext = try decl_stmt javax.sql.DataSource = call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() decl_stmt org.springframework.jdbc.core.JdbcTemplate = new call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() finally call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() DataSource ClassPathXmlApplicationContext JdbcTemplate public public throws decl_stmt org.springframework.context.support.ClassPathXmlApplicationContext = try decl_stmt javax.sql.DataSource = call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() decl_stmt org.springframework.jdbc.core.JdbcTemplate = new call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ClassPathXmlApplicationContext.getBean() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() finally call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() call ClassPathXmlApplicationContext.close() DefaultListableBeanFactory public public throws decl_stmt org.springframework.beans.factory.support.DefaultListableBeanFactory = new new new public public throws public public throws private private return new BeanDefinition PropertyValue private private decl_stmt org.springframework.beans.factory.config.BeanDefinition = decl_stmt org.springframework.beans.PropertyValue = call org.springframework.beans.factory.config.BeanDefinition.getPropertyValues() call org.springframework.beans.factory.config.BeanDefinition.getPropertyValues() call org.springframework.beans.factory.config.BeanDefinition.getPropertyValues() call org.springframework.beans.factory.config.BeanDefinition.getPropertyValues() call org.springframework.beans.factory.config.BeanDefinition.getPropertyValues() call org.springframework.beans.PropertyValue.getValue() call org.springframework.beans.PropertyValue.getValue() call org.springframework.beans.PropertyValue.getValue() call org.springframework.beans.PropertyValue.getValue() call org.springframework.beans.PropertyValue.getValue() private private private private DataSource ConfigurableApplicationContext AbstractDriverBasedDataSource private private decl_stmt org.springframework.context.ConfigurableApplicationContext = try for : decl_stmt javax.sql.DataSource = call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() new instanceof decl_stmt org.springframework.jdbc.datasource.AbstractDriverBasedDataSource = call AbstractDriverBasedDataSource.getUrl() call AbstractDriverBasedDataSource.getUrl() call AbstractDriverBasedDataSource.getUrl() call AbstractDriverBasedDataSource.getUrl() call AbstractDriverBasedDataSource.getUrl() finally call org.springframework.context.ConfigurableApplicationContext.close() call org.springframework.context.ConfigurableApplicationContext.close() call org.springframework.context.ConfigurableApplicationContext.close() call org.springframework.context.ConfigurableApplicationContext.close() call org.springframework.context.ConfigurableApplicationContext.close() DataSource ConfigurableApplicationContext AbstractDriverBasedDataSource private private < decl_stmt org.springframework.context.ConfigurableApplicationContext = try decl_stmt javax.sql.DataSource = call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() new instanceof decl_stmt org.springframework.jdbc.datasource.AbstractDriverBasedDataSource = call AbstractDriverBasedDataSource.getUrl() call AbstractDriverBasedDataSource.getUrl() call AbstractDriverBasedDataSource.getUrl() call AbstractDriverBasedDataSource.getUrl() call AbstractDriverBasedDataSource.getUrl() finally call org.springframework.context.ConfigurableApplicationContext.close() call org.springframework.context.ConfigurableApplicationContext.close() call org.springframework.context.ConfigurableApplicationContext.close() call org.springframework.context.ConfigurableApplicationContext.close() call org.springframework.context.ConfigurableApplicationContext.close()