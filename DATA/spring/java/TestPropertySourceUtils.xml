org.springframework.test.context.support java.io.IOException import java.io.StringReader import java.util.ArrayList import java.util.Arrays import java.util.LinkedHashMap import java.util.List import java.util.Map import java.util.Properties import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.context.ConfigurableApplicationContext import org.springframework.core.env.ConfigurableEnvironment import org.springframework.core.env.Environment import org.springframework.core.env.MapPropertySource import org.springframework.core.env.PropertySource import org.springframework.core.env.PropertySources import org.springframework.core.io.Resource import org.springframework.core.io.ResourceLoader import org.springframework.core.io.support.ResourcePropertySource import org.springframework.test.context.TestPropertySource import org.springframework.test.context.util.TestContextResourceUtils import org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor import org.springframework.util.Assert import org.springframework.util.ObjectUtils import org.springframework.util.StringUtils import static static org.springframework.test.util.MetaAnnotationUtils.* import class org.springframework.test.context.support.TestPropertySourceUtils String Log decl Class decl String decl List decl String decl AnnotationDescriptor static static < decl_stmt java.lang.Class < = decl_stmt AnnotationDescriptor < = if == return new decl_stmt java.util.List < = decl_stmt java.lang.String = decl_stmt java.lang.String = return new decl Class decl List TestPropertySource decl AnnotationDescriptor TestPropertySourceAttributes decl Class private static < private static < < decl_stmt java.util.List final final final < = new < decl_stmt java.lang.Class final final final < = decl_stmt AnnotationDescriptor < = call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() while != decl_stmt TestPropertySource = call decl AnnotationDescriptor.synthesizeAnnotation() call decl AnnotationDescriptor.synthesizeAnnotation() call decl AnnotationDescriptor.synthesizeAnnotation() call decl AnnotationDescriptor.synthesizeAnnotation() call decl AnnotationDescriptor.synthesizeAnnotation() decl_stmt java.lang.Class < = call decl AnnotationDescriptor.getRootDeclaringClass() call decl AnnotationDescriptor.getRootDeclaringClass() call decl AnnotationDescriptor.getRootDeclaringClass() call decl AnnotationDescriptor.getRootDeclaringClass() call decl AnnotationDescriptor.getRootDeclaringClass() if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() decl_stmt org.springframework.test.context.support.TestPropertySourceAttributes = new if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() return decl List decl String private static private static < decl_stmt java.util.List final final final < = new < for : if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() decl_stmt java.lang.String = call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() > if ! break return decl List private static private static < decl_stmt java.util.List final final final < = new < for : if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() > if ! break return public static public static Resource String public static public static try for : decl_stmt java.lang.String = decl_stmt org.springframework.core.io.Resource = new catch throw new public static public static MapPropertySource public static public static if ! if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + decl_stmt org.springframework.core.env.MapPropertySource = if == = new new < call MapPropertySource.getSource() call MapPropertySource.getSource() call MapPropertySource.getSource() call MapPropertySource.getSource() call MapPropertySource.getSource() decl Map Properties public static < public static < decl_stmt java.util.Map < = new < decl_stmt java.util.Properties = new for : if ! continue try call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) new catch throw new + + call Properties.size() call Properties.size() call Properties.size() call Properties.size() call Properties.size() == + + for : call java.util.Properties.stringPropertyNames() call java.util.Properties.stringPropertyNames() call java.util.Properties.stringPropertyNames() call java.util.Properties.stringPropertyNames() call java.util.Properties.stringPropertyNames() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call Properties.clear() call Properties.clear() call Properties.clear() call Properties.clear() call Properties.clear() return