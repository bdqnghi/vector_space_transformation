org.springframework.scripting.groovy java.io.IOException import groovy.lang.GroovyClassLoader import groovy.lang.GroovyObject import groovy.lang.MetaClass import groovy.lang.Script import org.codehaus.groovy.control.CompilationFailedException import org.springframework.beans.factory.BeanClassLoaderAware import org.springframework.beans.factory.BeanFactory import org.springframework.beans.factory.BeanFactoryAware import org.springframework.beans.factory.config.ConfigurableListableBeanFactory import org.springframework.scripting.ScriptCompilationException import org.springframework.scripting.ScriptFactory import org.springframework.scripting.ScriptSource import org.springframework.util.Assert import org.springframework.util.ClassUtils import class org.springframework.scripting.groovy.GroovyScriptFactory super super implements GroovyObjectCustomizer decl Class Object boolean String CachedResultHolder GroovyClassLoader decl Class public public if instanceof public public = new public public synchronized if == = new return public public return public < public < return public public return decl Class Object public public < throws synchronized try decl_stmt java.lang.Class < = if != decl_stmt java.lang.Object = = return if == || = if decl_stmt java.lang.Object = = != call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() : return else = = return catch = = throw new Object public < public < throws synchronized try if == || = = if decl_stmt java.lang.Object = = != call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() : = new else = return catch = = = throw new public public synchronized return || GroovyObject protected protected < throws try decl_stmt GroovyObject = call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() if != if instanceof return else return catch throw new + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() catch throw new + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() public public return + +