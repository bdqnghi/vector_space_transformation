org.springframework.aop.framework java.io.FileNotFoundException import java.io.IOException import java.lang.reflect.Method import java.lang.reflect.UndeclaredThrowableException import java.rmi.MarshalException import java.sql.SQLException import java.util.HashMap import java.util.Iterator import java.util.LinkedList import java.util.List import java.util.Map import org.aopalliance.aop.Advice import org.aopalliance.intercept.MethodInterceptor import org.aopalliance.intercept.MethodInvocation import org.junit.After import org.junit.Before import org.junit.Test import test.mixin.LockMixin import test.mixin.LockMixinAdvisor import test.mixin.Lockable import test.mixin.LockedException import org.springframework.aop.Advisor import org.springframework.aop.AfterReturningAdvice import org.springframework.aop.DynamicIntroductionAdvice import org.springframework.aop.MethodBeforeAdvice import org.springframework.aop.TargetSource import org.springframework.aop.ThrowsAdvice import org.springframework.aop.interceptor.DebugInterceptor import org.springframework.aop.interceptor.ExposeInvocationInterceptor import org.springframework.aop.support.AopUtils import org.springframework.aop.support.DefaultIntroductionAdvisor import org.springframework.aop.support.DefaultPointcutAdvisor import org.springframework.aop.support.DelegatingIntroductionInterceptor import org.springframework.aop.support.DynamicMethodMatcherPointcut import org.springframework.aop.support.NameMatchMethodPointcut import org.springframework.aop.support.Pointcuts import org.springframework.aop.support.StaticMethodMatcherPointcutAdvisor import org.springframework.aop.target.HotSwappableTargetSource import org.springframework.aop.target.SingletonTargetSource import org.springframework.tests.Assume import org.springframework.tests.TestGroup import org.springframework.tests.TimeStamped import org.springframework.tests.aop.advice.CountingAfterReturningAdvice import org.springframework.tests.aop.advice.CountingBeforeAdvice import org.springframework.tests.aop.advice.MethodCounter import org.springframework.tests.aop.advice.MyThrowsHandler import org.springframework.tests.aop.interceptor.NopInterceptor import org.springframework.tests.aop.interceptor.SerializableNopInterceptor import org.springframework.tests.aop.interceptor.TimestampIntroductionInterceptor import org.springframework.tests.sample.beans.IOther import org.springframework.tests.sample.beans.ITestBean import org.springframework.tests.sample.beans.Person import org.springframework.tests.sample.beans.SerializablePerson import org.springframework.tests.sample.beans.TestBean import org.springframework.util.SerializationTestUtils import org.springframework.util.StopWatch import static static org.junit.Assert.* import class org.springframework.aop.framework.AbstractAopProxyTests ITestBean MockTargetSource public public call MockTargetSource.reset() call MockTargetSource.reset() call MockTargetSource.reset() call MockTargetSource.reset() call MockTargetSource.reset() public public call MockTargetSource.verify() call MockTargetSource.verify() call MockTargetSource.verify() call MockTargetSource.verify() call MockTargetSource.verify() protected protected return AdvisedSupport AopProxy = public = public decl_stmt org.springframework.aop.framework.AdvisedSupport = new decl_stmt org.springframework.aop.framework.AopProxy = call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) String int int ProxyFactory ITestBean TestBean public public decl_stmt int = decl_stmt int = decl_stmt java.lang.String = decl_stmt org.springframework.tests.sample.beans.TestBean = new call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() new new call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() new new decl_stmt org.springframework.scheduling.annotation.ITestBean = call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getName() call org.springframework.scheduling.annotation.ITestBean.getName() call org.springframework.scheduling.annotation.ITestBean.getName() call org.springframework.scheduling.annotation.ITestBean.getName() call org.springframework.scheduling.annotation.ITestBean.getName() call org.springframework.scheduling.annotation.ITestBean.setName(String) call org.springframework.scheduling.annotation.ITestBean.setName(String) call org.springframework.scheduling.annotation.ITestBean.setName(String) call org.springframework.scheduling.annotation.ITestBean.setName(String) call org.springframework.scheduling.annotation.ITestBean.setName(String) call org.springframework.scheduling.annotation.ITestBean.getName() call org.springframework.scheduling.annotation.ITestBean.getName() call org.springframework.scheduling.annotation.ITestBean.getName() call org.springframework.scheduling.annotation.ITestBean.getName() call org.springframework.scheduling.annotation.ITestBean.getName() StopWatch int public public decl_stmt int = decl_stmt org.springframework.util.StopWatch = new call org.springframework.util.StopWatch.start(String) call org.springframework.util.StopWatch.start(String) call org.springframework.util.StopWatch.start(String) call org.springframework.util.StopWatch.start(String) call org.springframework.util.StopWatch.start(String) + + call org.springframework.util.StopWatch.stop() call org.springframework.util.StopWatch.stop() call org.springframework.util.StopWatch.stop() call org.springframework.util.StopWatch.stop() call org.springframework.util.StopWatch.stop() call org.springframework.util.StopWatch.getTotalTimeMillis() call org.springframework.util.StopWatch.getTotalTimeMillis() call org.springframework.util.StopWatch.getTotalTimeMillis() call org.springframework.util.StopWatch.getTotalTimeMillis() call org.springframework.util.StopWatch.getTotalTimeMillis() < ProxyFactory ITestBean int TestBean private private decl_stmt int = decl_stmt org.springframework.tests.sample.beans.TestBean = new call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) call org.springframework.tests.sample.beans.TestBean.setAge(int) decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() new call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() new decl_stmt org.springframework.scheduling.annotation.ITestBean = new for = < ++ = ProxyFactory TestBean ITestBean public public throws decl_stmt org.springframework.tests.sample.beans.TestBean = new decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() new decl_stmt org.springframework.scheduling.annotation.ITestBean = Advice SerializablePerson ProxyFactory Object public public throws decl_stmt org.springframework.tests.sample.beans.SerializablePerson = new decl_stmt org.springframework.aop.framework.ProxyFactory = new decl_stmt Advice = new call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() decl_stmt java.lang.Object = Person NopInterceptor Advised Person Advised ProxyFactory CountingThrowsAdvice SerializablePerson public public throws decl_stmt org.springframework.tests.sample.beans.SerializablePerson = new call org.springframework.tests.sample.beans.SerializablePerson.setName(String) call org.springframework.tests.sample.beans.SerializablePerson.setName(String) call org.springframework.tests.sample.beans.SerializablePerson.setName(String) call org.springframework.tests.sample.beans.SerializablePerson.setName(String) call org.springframework.tests.sample.beans.SerializablePerson.setName(String) call org.springframework.tests.sample.beans.SerializablePerson.setAge(int) call org.springframework.tests.sample.beans.SerializablePerson.setAge(int) call org.springframework.tests.sample.beans.SerializablePerson.setAge(int) call org.springframework.tests.sample.beans.SerializablePerson.setAge(int) call org.springframework.tests.sample.beans.SerializablePerson.setAge(int) decl_stmt org.springframework.aop.framework.ProxyFactory = new decl_stmt CountingThrowsAdvice = new call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() new call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() new call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() new call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() decl_stmt org.springframework.test.context.junit4.orm.domain.Person = call org.springframework.test.context.junit4.orm.domain.Person.echo(Object) call org.springframework.test.context.junit4.orm.domain.Person.echo(Object) call org.springframework.test.context.junit4.orm.domain.Person.echo(Object) call org.springframework.test.context.junit4.orm.domain.Person.echo(Object) call org.springframework.test.context.junit4.orm.domain.Person.echo(Object) call CountingThrowsAdvice.getCalls() call CountingThrowsAdvice.getCalls() call CountingThrowsAdvice.getCalls() call CountingThrowsAdvice.getCalls() call CountingThrowsAdvice.getCalls() try call org.springframework.test.context.junit4.orm.domain.Person.echo(Object) call org.springframework.test.context.junit4.orm.domain.Person.echo(Object) call org.springframework.test.context.junit4.orm.domain.Person.echo(Object) call org.springframework.test.context.junit4.orm.domain.Person.echo(Object) call org.springframework.test.context.junit4.orm.domain.Person.echo(Object) new catch call CountingThrowsAdvice.getCalls() call CountingThrowsAdvice.getCalls() call CountingThrowsAdvice.getCalls() call CountingThrowsAdvice.getCalls() call CountingThrowsAdvice.getCalls() decl_stmt org.springframework.test.context.junit4.orm.domain.Person = call org.springframework.test.context.junit4.orm.domain.Person.getName() call org.springframework.test.context.junit4.orm.domain.Person.getName() call org.springframework.test.context.junit4.orm.domain.Person.getName() call org.springframework.test.context.junit4.orm.domain.Person.getName() call org.springframework.test.context.junit4.orm.domain.Person.getName() call org.springframework.test.context.junit4.orm.domain.Person.getName() call org.springframework.test.context.junit4.orm.domain.Person.getName() call org.springframework.test.context.junit4.orm.domain.Person.getName() call org.springframework.test.context.junit4.orm.domain.Person.getName() call org.springframework.test.context.junit4.orm.domain.Person.getName() call org.springframework.test.context.junit4.orm.domain.Person.getAge() call org.springframework.test.context.junit4.orm.domain.Person.getAge() call org.springframework.test.context.junit4.orm.domain.Person.getAge() call org.springframework.test.context.junit4.orm.domain.Person.getAge() call org.springframework.test.context.junit4.orm.domain.Person.getAge() call org.springframework.test.context.junit4.orm.domain.Person.getAge() call org.springframework.test.context.junit4.orm.domain.Person.getAge() call org.springframework.test.context.junit4.orm.domain.Person.getAge() call org.springframework.test.context.junit4.orm.domain.Person.getAge() call org.springframework.test.context.junit4.orm.domain.Person.getAge() decl_stmt org.springframework.aop.framework.Advised = decl_stmt org.springframework.aop.framework.Advised = call org.springframework.aop.framework.Advised.getAdvisors() call org.springframework.aop.framework.Advised.getAdvisors() call org.springframework.aop.framework.Advised.getAdvisors() call org.springframework.aop.framework.Advised.getAdvisors() call org.springframework.aop.framework.Advised.getAdvisors() call org.springframework.aop.framework.Advised.getAdvisors() call org.springframework.aop.framework.Advised.getAdvisors() call org.springframework.aop.framework.Advised.getAdvisors() call org.springframework.aop.framework.Advised.getAdvisors() call org.springframework.aop.framework.Advised.getAdvisors() decl_stmt org.springframework.tests.aop.interceptor.NopInterceptor = new call org.springframework.test.context.junit4.orm.domain.Person.getAge() call org.springframework.test.context.junit4.orm.domain.Person.getAge() call org.springframework.test.context.junit4.orm.domain.Person.getAge() call org.springframework.test.context.junit4.orm.domain.Person.getAge() call org.springframework.test.context.junit4.orm.domain.Person.getAge() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call org.springframework.aop.framework.Advised.addAdvice(Advice) call org.springframework.aop.framework.Advised.addAdvice(Advice) call org.springframework.aop.framework.Advised.addAdvice(Advice) call org.springframework.aop.framework.Advised.addAdvice(Advice) call org.springframework.aop.framework.Advised.addAdvice(Advice) call org.springframework.test.context.junit4.orm.domain.Person.getAge() call org.springframework.test.context.junit4.orm.domain.Person.getAge() call org.springframework.test.context.junit4.orm.domain.Person.getAge() call org.springframework.test.context.junit4.orm.domain.Person.getAge() call org.springframework.test.context.junit4.orm.domain.Person.getAge() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() = call org.springframework.aop.framework.Advised.getAdvisors() call org.springframework.aop.framework.Advised.getAdvisors() call org.springframework.aop.framework.Advised.getAdvisors() call org.springframework.aop.framework.Advised.getAdvisors() call org.springframework.aop.framework.Advised.getAdvisors() call org.springframework.test.context.junit4.orm.domain.Person.echo(Object) call org.springframework.test.context.junit4.orm.domain.Person.echo(Object) call org.springframework.test.context.junit4.orm.domain.Person.echo(Object) call org.springframework.test.context.junit4.orm.domain.Person.echo(Object) call org.springframework.test.context.junit4.orm.domain.Person.echo(Object) call CountingThrowsAdvice.getCalls() call CountingThrowsAdvice.getCalls() call CountingThrowsAdvice.getCalls() call CountingThrowsAdvice.getCalls() call CountingThrowsAdvice.getCalls() try call org.springframework.test.context.junit4.orm.domain.Person.echo(Object) call org.springframework.test.context.junit4.orm.domain.Person.echo(Object) call org.springframework.test.context.junit4.orm.domain.Person.echo(Object) call org.springframework.test.context.junit4.orm.domain.Person.echo(Object) call org.springframework.test.context.junit4.orm.domain.Person.echo(Object) new catch call CountingThrowsAdvice.getCalls() call CountingThrowsAdvice.getCalls() call CountingThrowsAdvice.getCalls() call CountingThrowsAdvice.getCalls() call CountingThrowsAdvice.getCalls() ITestBean ITestBean int int ProxyFactory ProxyFactory TestBean NopInterceptor NopInterceptor TestBean public public decl_stmt int = decl_stmt int = decl_stmt org.springframework.tests.sample.beans.TestBean = new decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.setExposeProxy() call ProxyFactory.setExposeProxy() call ProxyFactory.setExposeProxy() call ProxyFactory.setExposeProxy() call ProxyFactory.setExposeProxy() decl_stmt org.springframework.tests.aop.interceptor.NopInterceptor = new call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() new call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() new call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() new call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() decl_stmt org.springframework.scheduling.annotation.ITestBean = call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) decl_stmt org.springframework.tests.sample.beans.TestBean = new decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.setExposeProxy() call ProxyFactory.setExposeProxy() call ProxyFactory.setExposeProxy() call ProxyFactory.setExposeProxy() call ProxyFactory.setExposeProxy() decl_stmt org.springframework.tests.aop.interceptor.NopInterceptor = new call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() new call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() new call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() new call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() decl_stmt org.springframework.scheduling.annotation.ITestBean = call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setSpouse(ITestBean) call org.springframework.scheduling.annotation.ITestBean.setSpouse(ITestBean) call org.springframework.scheduling.annotation.ITestBean.setSpouse(ITestBean) call org.springframework.scheduling.annotation.ITestBean.setSpouse(ITestBean) call org.springframework.scheduling.annotation.ITestBean.setSpouse(ITestBean) call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getSpouse() call org.springframework.scheduling.annotation.ITestBean.getSpouse() call org.springframework.scheduling.annotation.ITestBean.getSpouse() call org.springframework.scheduling.annotation.ITestBean.getSpouse() call org.springframework.scheduling.annotation.ITestBean.getSpouse() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() ProxyFactory ITestBean NopInterceptor int TestBean public public decl_stmt int = decl_stmt org.springframework.tests.sample.beans.TestBean = new decl_stmt org.springframework.aop.framework.ProxyFactory = new decl_stmt org.springframework.tests.aop.interceptor.NopInterceptor = new call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() decl_stmt org.springframework.scheduling.annotation.ITestBean = call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setAge(int) call org.springframework.scheduling.annotation.ITestBean.setSpouse(ITestBean) call org.springframework.scheduling.annotation.ITestBean.setSpouse(ITestBean) call org.springframework.scheduling.annotation.ITestBean.setSpouse(ITestBean) call org.springframework.scheduling.annotation.ITestBean.setSpouse(ITestBean) call org.springframework.scheduling.annotation.ITestBean.setSpouse(ITestBean) call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call org.springframework.scheduling.annotation.ITestBean.getSpouse() call org.springframework.scheduling.annotation.ITestBean.getSpouse() call org.springframework.scheduling.annotation.ITestBean.getSpouse() call org.springframework.scheduling.annotation.ITestBean.getSpouse() call org.springframework.scheduling.annotation.ITestBean.getSpouse() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() INeedsToSeeProxy INeedsToSeeProxy ProxyFactory NopInterceptor public public decl_stmt org.springframework.tests.aop.interceptor.NopInterceptor = new decl_stmt org.springframework.aop.framework.INeedsToSeeProxy = new decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.setExposeProxy() call ProxyFactory.setExposeProxy() call ProxyFactory.setExposeProxy() call ProxyFactory.setExposeProxy() call ProxyFactory.setExposeProxy() call ProxyFactory.isExposeProxy() call ProxyFactory.isExposeProxy() call ProxyFactory.isExposeProxy() call ProxyFactory.isExposeProxy() call ProxyFactory.isExposeProxy() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() decl_stmt org.springframework.aop.framework.INeedsToSeeProxy = call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call org.springframework.aop.framework.INeedsToSeeProxy.getCount() call org.springframework.aop.framework.INeedsToSeeProxy.getCount() call org.springframework.aop.framework.INeedsToSeeProxy.getCount() call org.springframework.aop.framework.INeedsToSeeProxy.getCount() call org.springframework.aop.framework.INeedsToSeeProxy.getCount() call org.springframework.aop.framework.INeedsToSeeProxy.incrementViaThis() call org.springframework.aop.framework.INeedsToSeeProxy.incrementViaThis() call org.springframework.aop.framework.INeedsToSeeProxy.incrementViaThis() call org.springframework.aop.framework.INeedsToSeeProxy.incrementViaThis() call org.springframework.aop.framework.INeedsToSeeProxy.incrementViaThis() call org.springframework.aop.framework.INeedsToSeeProxy.getCount() call org.springframework.aop.framework.INeedsToSeeProxy.getCount() call org.springframework.aop.framework.INeedsToSeeProxy.getCount() call org.springframework.aop.framework.INeedsToSeeProxy.getCount() call org.springframework.aop.framework.INeedsToSeeProxy.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call org.springframework.aop.framework.INeedsToSeeProxy.getCount() call org.springframework.aop.framework.INeedsToSeeProxy.getCount() call org.springframework.aop.framework.INeedsToSeeProxy.getCount() call org.springframework.aop.framework.INeedsToSeeProxy.getCount() call org.springframework.aop.framework.INeedsToSeeProxy.getCount() call org.springframework.aop.framework.INeedsToSeeProxy.incrementViaProxy() call org.springframework.aop.framework.INeedsToSeeProxy.incrementViaProxy() call org.springframework.aop.framework.INeedsToSeeProxy.incrementViaProxy() call org.springframework.aop.framework.INeedsToSeeProxy.incrementViaProxy() call org.springframework.aop.framework.INeedsToSeeProxy.incrementViaProxy() call org.springframework.aop.framework.INeedsToSeeProxy.getCount() call org.springframework.aop.framework.INeedsToSeeProxy.getCount() call org.springframework.aop.framework.INeedsToSeeProxy.getCount() call org.springframework.aop.framework.INeedsToSeeProxy.getCount() call org.springframework.aop.framework.INeedsToSeeProxy.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() call NopInterceptor.getCount() ProxyFactory NeedsToSeeProxy INeedsToSeeProxy = public = public decl_stmt NeedsToSeeProxy = new decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.isExposeProxy() call ProxyFactory.isExposeProxy() call ProxyFactory.isExposeProxy() call ProxyFactory.isExposeProxy() call ProxyFactory.isExposeProxy() decl_stmt org.springframework.aop.framework.INeedsToSeeProxy = call org.springframework.aop.framework.INeedsToSeeProxy.incrementViaProxy() call org.springframework.aop.framework.INeedsToSeeProxy.incrementViaProxy() call org.springframework.aop.framework.INeedsToSeeProxy.incrementViaProxy() call org.springframework.aop.framework.INeedsToSeeProxy.incrementViaProxy() call org.springframework.aop.framework.INeedsToSeeProxy.incrementViaProxy() public public throws public public throws ITestBean AdvisedSupport String MethodInterceptor AopProxy private private final final throws decl_stmt java.lang.String final final = decl_stmt org.aopalliance.intercept.MethodInterceptor = new public public throws if ! else return decl_stmt org.springframework.aop.framework.AdvisedSupport = new if call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) call org.springframework.aop.framework.AdvisedSupport.addAdvice(Advice) if call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) new decl_stmt org.springframework.aop.framework.AopProxy = decl_stmt org.springframework.scheduling.annotation.ITestBean = call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.scheduling.annotation.ITestBean.getName() call org.springframework.scheduling.annotation.ITestBean.getName() call org.springframework.scheduling.annotation.ITestBean.getName() call org.springframework.scheduling.annotation.ITestBean.getName() call org.springframework.scheduling.annotation.ITestBean.getName() public public throws if ! else return TestBean ProxyCreatorSupport public public throws decl_stmt org.springframework.tests.sample.beans.TestBean = new decl_stmt org.springframework.aop.framework.ProxyCreatorSupport = new call ProxyCreatorSupport.setInterfaces() call ProxyCreatorSupport.setInterfaces() call ProxyCreatorSupport.setInterfaces() call ProxyCreatorSupport.setInterfaces() call ProxyCreatorSupport.setInterfaces() new <