org.springframework.jdbc.core.metadata java.lang.reflect.Method import java.sql.CallableStatement import java.sql.Connection import java.sql.DatabaseMetaData import java.sql.SQLException import java.sql.Types import org.springframework.dao.InvalidDataAccessApiUsageException import org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor import org.springframework.util.ReflectionUtils import class org.springframework.jdbc.core.metadata.OracleTableMetaDataProvider super super extends boolean String protected protected if != return return Method boolean Method NativeJdbcExtractor Boolean decl Class Connection public public throws if ! return decl_stmt sun.rmi.transport.Connection = decl_stmt org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor = if != = call org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor.getNativeConnection(Connection) call org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor.getNativeConnection(Connection) call org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor.getNativeConnection(Connection) call org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor.getNativeConnection(Connection) call org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor.getNativeConnection(Connection) decl_stmt boolean try decl_stmt java.lang.Class < = call Connection.getClass() call Connection.getClass() call Connection.getClass() call Connection.getClass() call Connection.getClass() = call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() catch if + = if ! + + return decl_stmt com.sun.jdi.Method decl_stmt java.lang.Boolean try decl_stmt com.sun.jdi.Method = call Connection.getClass() call Connection.getClass() call Connection.getClass() call Connection.getClass() call Connection.getClass() = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) = call Connection.getClass() call Connection.getClass() call Connection.getClass() call Connection.getClass() call Connection.getClass() call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) catch throw new try call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) catch throw new CallableStatement private private try decl_stmt java.sql.CallableStatement = try = call java.sql.CallableStatement.registerOutParameter(String,int,String) call java.sql.CallableStatement.registerOutParameter(String,int,String) call java.sql.CallableStatement.registerOutParameter(String,int,String) call java.sql.CallableStatement.registerOutParameter(String,int,String) call java.sql.CallableStatement.registerOutParameter(String,int,String) call CallableStatement.execute() call CallableStatement.execute() call CallableStatement.execute() call CallableStatement.execute() call CallableStatement.execute() = call java.sql.CallableStatement.getString(int) call java.sql.CallableStatement.getString(int) call java.sql.CallableStatement.getString(int) call java.sql.CallableStatement.getString(int) call java.sql.CallableStatement.getString(int) finally if != call CallableStatement.close() call CallableStatement.close() call CallableStatement.close() call CallableStatement.close() call CallableStatement.close() catch