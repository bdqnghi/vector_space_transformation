org.springframework.jms.remoting javax.jms.Connection import javax.jms.ConnectionFactory import javax.jms.JMSException import javax.jms.Message import javax.jms.MessageConsumer import javax.jms.MessageFormatException import javax.jms.MessageProducer import javax.jms.Queue import javax.jms.Session import javax.jms.TemporaryQueue import org.aopalliance.intercept.MethodInterceptor import org.aopalliance.intercept.MethodInvocation import org.springframework.aop.support.AopUtils import org.springframework.beans.factory.InitializingBean import org.springframework.jms.connection.ConnectionFactoryUtils import org.springframework.jms.support.JmsUtils import org.springframework.jms.support.converter.MessageConverter import org.springframework.jms.support.converter.SimpleMessageConverter import org.springframework.jms.support.destination.DestinationResolver import org.springframework.jms.support.destination.DynamicDestinationResolver import org.springframework.remoting.RemoteAccessException import org.springframework.remoting.RemoteInvocationFailureException import org.springframework.remoting.RemoteTimeoutException import org.springframework.remoting.support.DefaultRemoteInvocationFactory import org.springframework.remoting.support.RemoteInvocation import org.springframework.remoting.support.RemoteInvocationFactory import org.springframework.remoting.support.RemoteInvocationResult import class org.springframework.jms.remoting.JmsInvokerClientInterceptor super super implements RemoteInvocationFactory ConnectionFactory MessageConverter DestinationResolver long Object public public = protected protected return public public = public public = public public = != : new public public = != : new public public = != : new public public = protected protected return public public if == throw new if == throw new RemoteInvocation RemoteInvocationResult public public throws if return + + decl_stmt org.springframework.remoting.support.RemoteInvocation = decl_stmt org.springframework.remoting.support.RemoteInvocationResult try = catch throw try return catch if call org.springframework.remoting.support.RemoteInvocationResult.hasInvocationTargetException() call org.springframework.remoting.support.RemoteInvocationResult.hasInvocationTargetException() call org.springframework.remoting.support.RemoteInvocationResult.hasInvocationTargetException() call org.springframework.remoting.support.RemoteInvocationResult.hasInvocationTargetException() call org.springframework.remoting.support.RemoteInvocationResult.hasInvocationTargetException() throw else throw new + + + + protected protected return Session Message Queue Message Connection protected protected throws decl_stmt sun.rmi.transport.Connection = decl_stmt sun.security.pkcs11.Session = try = decl_stmt java.util.Queue = decl_stmt org.springframework.messaging.Message = call Connection.start() call Connection.start() call Connection.start() call Connection.start() call Connection.start() decl_stmt org.springframework.messaging.Message = if != return else return finally protected protected throws return protected protected throws return protected protected throws if instanceof return else if instanceof return else throw new + + protected protected throws return protected protected throws return MessageConsumer long MessageProducer TemporaryQueue protected protected throws decl_stmt TemporaryQueue = decl_stmt MessageProducer = decl_stmt MessageConsumer = try = = = call MessageProducer.send() call MessageProducer.send() call MessageProducer.send() call MessageProducer.send() call MessageProducer.send() decl_stmt long = return > call MessageConsumer.receive() call MessageConsumer.receive() call MessageConsumer.receive() call MessageConsumer.receive() call MessageConsumer.receive() : call MessageConsumer.receive() call MessageConsumer.receive() call MessageConsumer.receive() call MessageConsumer.receive() call MessageConsumer.receive() finally if != call TemporaryQueue.delete() call TemporaryQueue.delete() call TemporaryQueue.delete() call TemporaryQueue.delete() call TemporaryQueue.delete() Object protected protected throws decl_stmt java.lang.Object = if instanceof return return protected protected throw new + + + protected protected throws throw new + protected protected throws return protected protected return new + +