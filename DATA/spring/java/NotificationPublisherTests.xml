org.springframework.jmx.export javax.management.Attribute import javax.management.AttributeList import javax.management.AttributeNotFoundException import javax.management.DynamicMBean import javax.management.InvalidAttributeValueException import javax.management.MBeanAttributeInfo import javax.management.MBeanConstructorInfo import javax.management.MBeanException import javax.management.MBeanInfo import javax.management.MBeanNotificationInfo import javax.management.MBeanOperationInfo import javax.management.Notification import javax.management.NotificationBroadcasterSupport import javax.management.NotificationListener import javax.management.ReflectionException import org.junit.Test import org.springframework.context.ConfigurableApplicationContext import org.springframework.jmx.AbstractMBeanServerTests import org.springframework.jmx.export.notification.NotificationPublisher import org.springframework.jmx.export.notification.NotificationPublisherAware import org.springframework.jmx.support.ObjectNameManager import static static org.junit.Assert.* import class org.springframework.jmx.export.NotificationPublisherTests super super extends CountingNotificationListener MyNotificationPublisher ConfigurableApplicationContext public public throws decl_stmt org.springframework.context.ConfigurableApplicationContext = decl_stmt MyNotificationPublisher = call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call MyNotificationPublisher.getNotificationPublisher() call MyNotificationPublisher.getNotificationPublisher() call MyNotificationPublisher.getNotificationPublisher() call MyNotificationPublisher.getNotificationPublisher() call MyNotificationPublisher.getNotificationPublisher() call MyNotificationPublisher.sendNotification() call MyNotificationPublisher.sendNotification() call MyNotificationPublisher.sendNotification() call MyNotificationPublisher.sendNotification() call MyNotificationPublisher.sendNotification() MyNotificationPublisher MBeanExporter ConfigurableApplicationContext public public throws decl_stmt org.springframework.context.ConfigurableApplicationContext = decl_stmt org.springframework.jmx.export.MBeanExporter = call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() decl_stmt MyNotificationPublisher = new call org.springframework.jmx.export.MBeanExporter.registerManagedResource(Object,ObjectName) call org.springframework.jmx.export.MBeanExporter.registerManagedResource(Object,ObjectName) call org.springframework.jmx.export.MBeanExporter.registerManagedResource(Object,ObjectName) call org.springframework.jmx.export.MBeanExporter.registerManagedResource(Object,ObjectName) call org.springframework.jmx.export.MBeanExporter.registerManagedResource(Object,ObjectName) call MyNotificationPublisher.getNotificationPublisher() call MyNotificationPublisher.getNotificationPublisher() call MyNotificationPublisher.getNotificationPublisher() call MyNotificationPublisher.getNotificationPublisher() call MyNotificationPublisher.getNotificationPublisher() call MyNotificationPublisher.sendNotification() call MyNotificationPublisher.sendNotification() call MyNotificationPublisher.sendNotification() call MyNotificationPublisher.sendNotification() call MyNotificationPublisher.sendNotification() MyNotificationPublisherMBean ConfigurableApplicationContext public public throws decl_stmt org.springframework.context.ConfigurableApplicationContext = decl_stmt MyNotificationPublisherMBean = call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call MyNotificationPublisherMBean.sendNotification() call MyNotificationPublisherMBean.sendNotification() call MyNotificationPublisherMBean.sendNotification() call MyNotificationPublisherMBean.sendNotification() call MyNotificationPublisherMBean.sendNotification() MyNotificationPublisher ConfigurableApplicationContext public public throws decl_stmt org.springframework.context.ConfigurableApplicationContext = call ConfigurableApplicationContext.getBeanFactory() call ConfigurableApplicationContext.getBeanFactory() call ConfigurableApplicationContext.getBeanFactory() call ConfigurableApplicationContext.getBeanFactory() call ConfigurableApplicationContext.getBeanFactory() decl_stmt MyNotificationPublisher = call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call MyNotificationPublisher.getNotificationPublisher() call MyNotificationPublisher.getNotificationPublisher() call MyNotificationPublisher.getNotificationPublisher() call MyNotificationPublisher.getNotificationPublisher() call MyNotificationPublisher.getNotificationPublisher() call MyNotificationPublisher.sendNotification() call MyNotificationPublisher.sendNotification() call MyNotificationPublisher.sendNotification() call MyNotificationPublisher.sendNotification() call MyNotificationPublisher.sendNotification() public public = ++ public public return public public return public public = public public return public public new public public return public public throws return public public throws public public return public public return public public throws return public public return new new new new new public public new public public new