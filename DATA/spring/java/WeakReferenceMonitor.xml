org.springframework.util java.lang.ref.Reference import java.lang.ref.ReferenceQueue import java.lang.ref.WeakReference import java.util.HashMap import java.util.Map import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import class org.springframework.util.WeakReferenceMonitor decl ReferenceQueue Log decl Map Thread decl WeakReference public static public static if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + + decl_stmt WeakReference < = new < private static private static < synchronized call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if == = new new call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() private static private static < synchronized return call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() private static private static synchronized if ! call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() return else call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() = return ReleaseListener decl Reference public public call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() while try decl_stmt org.springframework.util.Reference < = call decl ReferenceQueue.remove() call decl ReferenceQueue.remove() call decl ReferenceQueue.remove() call decl ReferenceQueue.remove() call decl ReferenceQueue.remove() decl_stmt org.springframework.util.ReleaseListener = if != try call ReleaseListener.released() call ReleaseListener.released() call ReleaseListener.released() call ReleaseListener.released() call ReleaseListener.released() catch call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() catch synchronized = call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() break