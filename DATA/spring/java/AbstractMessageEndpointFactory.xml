org.springframework.jca.endpoint java.lang.reflect.Method import javax.resource.ResourceException import javax.resource.spi.ApplicationServerInternalException import javax.resource.spi.UnavailableException import javax.resource.spi.endpoint.MessageEndpoint import javax.resource.spi.endpoint.MessageEndpointFactory import javax.transaction.Transaction import javax.transaction.TransactionManager import javax.transaction.xa.XAResource import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.factory.BeanNameAware import org.springframework.transaction.jta.SimpleTransactionFactory import org.springframework.transaction.jta.TransactionFactory import class org.springframework.jca.endpoint.AbstractMessageEndpointFactory super super implements TransactionFactory Log int String String public public if instanceof = else if instanceof = new else throw new + + + public public = public public = public public = public public = public public return public public throws return != AbstractMessageEndpoint public public throws decl_stmt AbstractMessageEndpoint = call AbstractMessageEndpoint.initXAResource() call AbstractMessageEndpoint.initXAResource() call AbstractMessageEndpoint.initXAResource() call AbstractMessageEndpoint.initXAResource() call AbstractMessageEndpoint.initXAResource() return AbstractMessageEndpoint public public throws decl_stmt AbstractMessageEndpoint = call AbstractMessageEndpoint.initXAResource() call AbstractMessageEndpoint.initXAResource() call AbstractMessageEndpoint.initXAResource() call AbstractMessageEndpoint.initXAResource() call AbstractMessageEndpoint.initXAResource() return = new Thread public public throws = try catch throw new decl_stmt java.lang.Thread = = call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) protected final protected final return protected final protected final public public throws = = try catch throw new public public try catch call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() public public throws if != && != = call org.springframework.transaction.jta.TransactionFactory.createTransaction(String,int) call org.springframework.transaction.jta.TransactionFactory.createTransaction(String,int) call org.springframework.transaction.jta.TransactionFactory.createTransaction(String,int) call org.springframework.transaction.jta.TransactionFactory.createTransaction(String,int) call org.springframework.transaction.jta.TransactionFactory.createTransaction(String,int) public public if != = public public throws if != try if else finally = =