org.springframework.orm.hibernate3.support java.io.IOException import javax.servlet.FilterChain import javax.servlet.ServletException import javax.servlet.http.HttpServletRequest import javax.servlet.http.HttpServletResponse import org.hibernate.FlushMode import org.hibernate.Session import org.hibernate.SessionFactory import org.springframework.dao.DataAccessResourceFailureException import org.springframework.transaction.support.TransactionSynchronizationManager import org.springframework.util.Assert import org.springframework.web.context.WebApplicationContext import org.springframework.web.context.request.async.WebAsyncManager import org.springframework.web.context.request.async.WebAsyncUtils import org.springframework.web.context.support.WebApplicationContextUtils import org.springframework.web.filter.OncePerRequestFilter import class annotation org.springframework.orm.hibernate3.support.OpenSessionInViewFilter super super extends String String boolean FlushMode public public = protected protected return public public = protected protected return public public = protected protected return protected protected return protected protected return decl orm boolean SessionFactory Session WebAsyncManager String boolean decl springframework protected protected throws decl_stmt SessionFactory = decl_stmt boolean = decl_stmt org.springframework.web.context.request.async.WebAsyncManager = decl_stmt java.lang.String = if if = else decl_stmt boolean = ! if || ! decl_stmt sun.security.pkcs11.Session = decl_stmt org.springframework.orm.hibernate4.SessionHolder = new decl_stmt org.springframework.orm.jpa.support.AsyncRequestInterceptor = new call org.springframework.web.context.request.async.WebAsyncManager.registerCallableInterceptor(Object,CallableProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerCallableInterceptor(Object,CallableProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerCallableInterceptor(Object,CallableProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerCallableInterceptor(Object,CallableProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerCallableInterceptor(Object,CallableProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerDeferredResultInterceptor(Object,DeferredResultProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerDeferredResultInterceptor(Object,DeferredResultProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerDeferredResultInterceptor(Object,DeferredResultProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerDeferredResultInterceptor(Object,DeferredResultProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerDeferredResultInterceptor(Object,DeferredResultProcessingInterceptor) else ! if = else try finally if ! if decl_stmt org.springframework.orm.hibernate4.SessionHolder = if ! call decl orm.getSession() call decl orm.getSession() call decl orm.getSession() call decl orm.getSession() call decl orm.getSession() else protected protected return WebApplicationContext protected protected if + + decl_stmt org.springframework.web.context.WebApplicationContext = return call WebApplicationContext.getBean() call WebApplicationContext.getBean() call WebApplicationContext.getBean() call WebApplicationContext.getBean() call WebApplicationContext.getBean() Session FlushMode protected protected throws decl_stmt sun.security.pkcs11.Session = decl_stmt FlushMode = if != call Session.setFlushMode() call Session.setFlushMode() call Session.setFlushMode() call Session.setFlushMode() call Session.setFlushMode() return protected protected private private if == return return