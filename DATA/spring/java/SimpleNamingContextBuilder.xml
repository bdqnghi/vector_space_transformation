org.springframework.tests.mock.jndi java.util.Hashtable import javax.naming.Context import javax.naming.NamingException import javax.naming.spi.InitialContextFactory import javax.naming.spi.InitialContextFactoryBuilder import javax.naming.spi.NamingManager import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.util.ClassUtils import class org.springframework.tests.mock.jndi.SimpleNamingContextBuilder super super implements decl Hashtable boolean Log Object SimpleNamingContextBuilder public static public static return SimpleNamingContextBuilder public static public static throws if != call org.springframework.tests.mock.jndi.SimpleNamingContextBuilder.clear() call org.springframework.tests.mock.jndi.SimpleNamingContextBuilder.clear() call org.springframework.tests.mock.jndi.SimpleNamingContextBuilder.clear() call org.springframework.tests.mock.jndi.SimpleNamingContextBuilder.clear() call org.springframework.tests.mock.jndi.SimpleNamingContextBuilder.clear() else decl_stmt org.springframework.tests.mock.jndi.SimpleNamingContextBuilder = new call org.springframework.tests.mock.jndi.SimpleNamingContextBuilder.activate() call org.springframework.tests.mock.jndi.SimpleNamingContextBuilder.activate() call org.springframework.tests.mock.jndi.SimpleNamingContextBuilder.activate() call org.springframework.tests.mock.jndi.SimpleNamingContextBuilder.activate() call org.springframework.tests.mock.jndi.SimpleNamingContextBuilder.activate() return public public throws call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() synchronized if ! if throw new + + = = public public call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() = public public public public if call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() + + + + Object decl Class public public < if == && != decl_stmt java.lang.Object = if != decl_stmt java.lang.Class < if instanceof = < else if instanceof = else throw new + + + call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() if ! throw new + + + try return call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() catch throw new + return new public public < return new < public public < return new <