org.springframework.context.support java.io.IOException import java.util.Properties import org.springframework.beans.BeansException import org.springframework.beans.factory.BeanInitializationException import org.springframework.beans.factory.config.ConfigurableListableBeanFactory import org.springframework.beans.factory.config.PlaceholderConfigurerSupport import org.springframework.context.EnvironmentAware import org.springframework.core.env.ConfigurablePropertyResolver import org.springframework.core.env.Environment import org.springframework.core.env.MutablePropertySources import org.springframework.core.env.PropertiesPropertySource import org.springframework.core.env.PropertySource import org.springframework.core.env.PropertySources import org.springframework.core.env.PropertySourcesPropertyResolver import org.springframework.util.Assert import org.springframework.util.StringValueResolver import class org.springframework.context.support.PropertySourcesPlaceholderConfigurer super super extends super implements MutablePropertySources PropertySources String String Environment public public = new public public = decl PropertySource public public throws if == = new if != new < public public return try decl_stmt org.springframework.core.env.PropertySource < = new if else catch throw new new = public public return StringValueResolver String protected protected final final throws decl_stmt org.springframework.util.StringValueResolver = new public public decl_stmt java.lang.String = : if = call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() return call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) : String public public decl_stmt java.lang.String = : if = call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() return call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) : protected protected throw new public public throws != return