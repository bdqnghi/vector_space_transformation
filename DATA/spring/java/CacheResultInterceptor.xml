org.springframework.cache.jcache.interceptor javax.cache.annotation.CacheResult import org.springframework.cache.Cache import org.springframework.cache.interceptor.CacheErrorHandler import org.springframework.cache.interceptor.CacheOperationInvocationContext import org.springframework.cache.interceptor.CacheOperationInvoker import org.springframework.cache.interceptor.CacheResolver import org.springframework.util.ExceptionTypeFilter import org.springframework.util.SerializationUtils import class annotation org.springframework.cache.jcache.interceptor.CacheResultInterceptor super super extends Object decl ValueWrapper decl Cache Cache Cache CacheResultOperation Object protected protected < decl_stmt org.springframework.cache.jcache.interceptor.CacheResultOperation = decl_stmt java.lang.Object = decl_stmt org.springframework.cache.Cache = decl_stmt org.springframework.cache.Cache = if ! call CacheResultOperation.isAlwaysInvoked() call CacheResultOperation.isAlwaysInvoked() call CacheResultOperation.isAlwaysInvoked() call CacheResultOperation.isAlwaysInvoked() call CacheResultOperation.isAlwaysInvoked() decl_stmt ValueWrapper = if != return call decl Cache.get() call decl Cache.get() call decl Cache.get() call decl Cache.get() call decl Cache.get() try decl_stmt java.lang.Object = call org.springframework.cache.Cache.put(Object,Object) call org.springframework.cache.Cache.put(Object,Object) call org.springframework.cache.Cache.put(Object,Object) call org.springframework.cache.Cache.put(Object,Object) call org.springframework.cache.Cache.put(Object,Object) return catch decl_stmt java.lang.Throwable = call org.springframework.cache.jcache.interceptor.CacheResultOperation.getExceptionTypeFilter() call org.springframework.cache.jcache.interceptor.CacheResultOperation.getExceptionTypeFilter() call org.springframework.cache.jcache.interceptor.CacheResultOperation.getExceptionTypeFilter() call org.springframework.cache.jcache.interceptor.CacheResultOperation.getExceptionTypeFilter() call org.springframework.cache.jcache.interceptor.CacheResultOperation.getExceptionTypeFilter() throw decl Cache protected protected if == return decl_stmt ValueWrapper = if != throw call decl Cache.get() call decl Cache.get() call decl Cache.get() call decl Cache.get() call decl Cache.get() protected protected if == return if CacheResolver private private < decl_stmt org.springframework.cache.interceptor.CacheResolver = if != return return decl StackTraceElement decl StackTraceElement int Throwable int decl StackTraceElement private static private static decl_stmt java.lang.Throwable = if == return new decl_stmt java.lang.StackTraceElement = new decl_stmt java.lang.StackTraceElement = decl_stmt int = decl_stmt int = if == - || == - return new decl_stmt java.lang.StackTraceElement = new + - - call java.lang.Throwable.setStackTrace(StackTraceElement) call java.lang.Throwable.setStackTrace(StackTraceElement) call java.lang.Throwable.setStackTrace(StackTraceElement) call java.lang.Throwable.setStackTrace(StackTraceElement) call java.lang.Throwable.setStackTrace(StackTraceElement) return new private static < extends extends private static < extends extends try return catch return StackTraceElement private static private static for = < ++ decl_stmt java.lang.StackTraceElement = if call java.lang.StackTraceElement.getClassName() call java.lang.StackTraceElement.getClassName() call java.lang.StackTraceElement.getClassName() call java.lang.StackTraceElement.getClassName() call java.lang.StackTraceElement.getClassName() && call java.lang.StackTraceElement.getMethodName() call java.lang.StackTraceElement.getMethodName() call java.lang.StackTraceElement.getMethodName() call java.lang.StackTraceElement.getMethodName() call java.lang.StackTraceElement.getMethodName() return return -