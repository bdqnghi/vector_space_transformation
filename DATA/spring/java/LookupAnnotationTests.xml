org.springframework.beans.factory.annotation org.junit.Before import org.junit.Test import org.springframework.beans.factory.support.DefaultListableBeanFactory import org.springframework.beans.factory.support.RootBeanDefinition import org.springframework.tests.sample.beans.TestBean import static static org.junit.Assert.* import class org.springframework.beans.factory.annotation.LookupAnnotationTests DefaultListableBeanFactory AutowiredAnnotationBeanPostProcessor RootBeanDefinition public public = new decl_stmt org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new call org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.setBeanFactory(BeanFactory) call org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.setBeanFactory(BeanFactory) call org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.setBeanFactory(BeanFactory) call org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.setBeanFactory(BeanFactory) call org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.setBeanFactory(BeanFactory) call DefaultListableBeanFactory.addBeanPostProcessor() call DefaultListableBeanFactory.addBeanPostProcessor() call DefaultListableBeanFactory.addBeanPostProcessor() call DefaultListableBeanFactory.addBeanPostProcessor() call DefaultListableBeanFactory.addBeanPostProcessor() call org.springframework.beans.factory.support.DefaultListableBeanFactory.registerBeanDefinition(String,BeanDefinition) call org.springframework.beans.factory.support.DefaultListableBeanFactory.registerBeanDefinition(String,BeanDefinition) call org.springframework.beans.factory.support.DefaultListableBeanFactory.registerBeanDefinition(String,BeanDefinition) call org.springframework.beans.factory.support.DefaultListableBeanFactory.registerBeanDefinition(String,BeanDefinition) call org.springframework.beans.factory.support.DefaultListableBeanFactory.registerBeanDefinition(String,BeanDefinition) new decl_stmt org.springframework.beans.factory.support.RootBeanDefinition = new call RootBeanDefinition.setScope() call RootBeanDefinition.setScope() call RootBeanDefinition.setScope() call RootBeanDefinition.setScope() call RootBeanDefinition.setScope() call org.springframework.beans.factory.support.DefaultListableBeanFactory.registerBeanDefinition(String,BeanDefinition) call org.springframework.beans.factory.support.DefaultListableBeanFactory.registerBeanDefinition(String,BeanDefinition) call org.springframework.beans.factory.support.DefaultListableBeanFactory.registerBeanDefinition(String,BeanDefinition) call org.springframework.beans.factory.support.DefaultListableBeanFactory.registerBeanDefinition(String,BeanDefinition) call org.springframework.beans.factory.support.DefaultListableBeanFactory.registerBeanDefinition(String,BeanDefinition) Object AbstractBean public public decl_stmt AbstractBean = call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) decl_stmt java.lang.Object = call AbstractBean.get() call AbstractBean.get() call AbstractBean.get() call AbstractBean.get() call AbstractBean.get() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() TestBean AbstractBean public public decl_stmt AbstractBean = call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) decl_stmt org.springframework.tests.sample.beans.TestBean = call AbstractBean.get() call AbstractBean.get() call AbstractBean.get() call AbstractBean.get() call AbstractBean.get() call TestBean.getClass() call TestBean.getClass() call TestBean.getClass() call TestBean.getClass() call TestBean.getClass() call org.springframework.tests.sample.beans.TestBean.getName() call org.springframework.tests.sample.beans.TestBean.getName() call org.springframework.tests.sample.beans.TestBean.getName() call org.springframework.tests.sample.beans.TestBean.getName() call org.springframework.tests.sample.beans.TestBean.getName() TestBean AbstractBean public public decl_stmt AbstractBean = call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) decl_stmt org.springframework.tests.sample.beans.TestBean = call AbstractBean.getOneArgument() call AbstractBean.getOneArgument() call AbstractBean.getOneArgument() call AbstractBean.getOneArgument() call AbstractBean.getOneArgument() call TestBean.getClass() call TestBean.getClass() call TestBean.getClass() call TestBean.getClass() call TestBean.getClass() call org.springframework.tests.sample.beans.TestBean.getName() call org.springframework.tests.sample.beans.TestBean.getName() call org.springframework.tests.sample.beans.TestBean.getName() call org.springframework.tests.sample.beans.TestBean.getName() call org.springframework.tests.sample.beans.TestBean.getName() TestBean AbstractBean public public decl_stmt AbstractBean = call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) decl_stmt org.springframework.tests.sample.beans.TestBean = call AbstractBean.getTwoArguments() call AbstractBean.getTwoArguments() call AbstractBean.getTwoArguments() call AbstractBean.getTwoArguments() call AbstractBean.getTwoArguments() call TestBean.getClass() call TestBean.getClass() call TestBean.getClass() call TestBean.getClass() call TestBean.getClass() call org.springframework.tests.sample.beans.TestBean.getName() call org.springframework.tests.sample.beans.TestBean.getName() call org.springframework.tests.sample.beans.TestBean.getName() call org.springframework.tests.sample.beans.TestBean.getName() call org.springframework.tests.sample.beans.TestBean.getName() call org.springframework.tests.sample.beans.TestBean.getAge() call org.springframework.tests.sample.beans.TestBean.getAge() call org.springframework.tests.sample.beans.TestBean.getAge() call org.springframework.tests.sample.beans.TestBean.getAge() call org.springframework.tests.sample.beans.TestBean.getAge() AbstractBean public public decl_stmt AbstractBean = call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) call org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(Class,Object) try call AbstractBean.getThreeArguments() call AbstractBean.getThreeArguments() call AbstractBean.getThreeArguments() call AbstractBean.getThreeArguments() call AbstractBean.getThreeArguments() catch