org.springframework.beans.factory.support java.lang.reflect.Constructor import java.lang.reflect.Method import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.BeanInstantiationException import org.springframework.beans.BeanUtils import org.springframework.beans.factory.BeanFactory import org.springframework.beans.factory.config.ConfigurableBeanFactory import org.springframework.cglib.core.ClassGenerator import org.springframework.cglib.core.DefaultGeneratorStrategy import org.springframework.cglib.core.SpringNamingPolicy import org.springframework.cglib.proxy.Callback import org.springframework.cglib.proxy.CallbackFilter import org.springframework.cglib.proxy.Enhancer import org.springframework.cglib.proxy.Factory import org.springframework.cglib.proxy.MethodInterceptor import org.springframework.cglib.proxy.MethodProxy import org.springframework.cglib.proxy.NoOp import org.springframework.util.StringUtils import class org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy super super extends int int int protected protected return protected protected < return new Object Factory decl Class decl Constructor public public < decl_stmt java.lang.Class < = decl_stmt java.lang.Object if == = else try decl_stmt java.lang.reflect.Constructor < = call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() = call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() catch throw new + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() + decl_stmt Factory = call Factory.setCallbacks() call Factory.setCallbacks() call Factory.setCallbacks() call Factory.setCallbacks() call Factory.setCallbacks() new new new return Enhancer ClassLoader private < private < decl_stmt Enhancer = new call Enhancer.setSuperclass() call Enhancer.setSuperclass() call Enhancer.setSuperclass() call Enhancer.setSuperclass() call Enhancer.setSuperclass() call Enhancer.setNamingPolicy() call Enhancer.setNamingPolicy() call Enhancer.setNamingPolicy() call Enhancer.setNamingPolicy() call Enhancer.setNamingPolicy() if instanceof decl_stmt java.lang.ClassLoader = call Enhancer.setStrategy() call Enhancer.setStrategy() call Enhancer.setStrategy() call Enhancer.setStrategy() call Enhancer.setStrategy() new call Enhancer.setCallbackFilter() call Enhancer.setCallbackFilter() call Enhancer.setCallbackFilter() call Enhancer.setCallbackFilter() call Enhancer.setCallbackFilter() new call Enhancer.setCallbackTypes() call Enhancer.setCallbackTypes() call Enhancer.setCallbackTypes() call Enhancer.setCallbackTypes() call Enhancer.setCallbackTypes() return call Enhancer.createClass() call Enhancer.createClass() call Enhancer.createClass() call Enhancer.createClass() call Enhancer.createClass() public public return public public return == && public public return boolean ClassLoader Thread public public throws if == return decl_stmt java.lang.Thread = decl_stmt java.lang.ClassLoader try = call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() catch return decl_stmt boolean = ! if call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) try return finally if call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) MethodOverride public public decl_stmt org.springframework.beans.factory.support.MethodOverride = if + + + + if == return else if instanceof return else if instanceof return throw new + call MethodOverride.getClass() call MethodOverride.getClass() call MethodOverride.getClass() call MethodOverride.getClass() call MethodOverride.getClass() LookupOverride decl Object public public throws decl_stmt org.springframework.beans.factory.support.LookupOverride = decl_stmt java.lang.Object = > : if call LookupOverride.getBeanName() call LookupOverride.getBeanName() call LookupOverride.getBeanName() call LookupOverride.getBeanName() call LookupOverride.getBeanName() return call LookupOverride.getBeanName() call LookupOverride.getBeanName() call LookupOverride.getBeanName() call LookupOverride.getBeanName() call LookupOverride.getBeanName() else return ReplaceOverride MethodReplacer public public throws decl_stmt org.springframework.beans.factory.support.ReplaceOverride = decl_stmt org.springframework.beans.factory.support.MethodReplacer = call org.springframework.beans.factory.support.ReplaceOverride.getMethodReplacerBeanName() call org.springframework.beans.factory.support.ReplaceOverride.getMethodReplacerBeanName() call org.springframework.beans.factory.support.ReplaceOverride.getMethodReplacerBeanName() call org.springframework.beans.factory.support.ReplaceOverride.getMethodReplacerBeanName() call org.springframework.beans.factory.support.ReplaceOverride.getMethodReplacerBeanName() return call MethodReplacer.reimplement() call MethodReplacer.reimplement() call MethodReplacer.reimplement() call MethodReplacer.reimplement() call MethodReplacer.reimplement()