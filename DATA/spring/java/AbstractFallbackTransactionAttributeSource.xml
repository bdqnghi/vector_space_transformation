org.springframework.transaction.interceptor java.lang.reflect.Method import java.lang.reflect.Modifier import java.util.Map import java.util.concurrent.ConcurrentHashMap import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.core.BridgeMethodResolver import org.springframework.core.MethodClassKey import org.springframework.util.ClassUtils import class org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource super super implements decl Map Log TransactionAttribute Object TransactionAttribute Object decl Class public public < decl_stmt java.lang.Object = decl_stmt java.lang.Object = if != if == return else return else decl_stmt org.springframework.transaction.interceptor.TransactionAttribute = if == else if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() decl_stmt java.lang.Class < = != : call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + call decl Class.getSimpleName() call decl Class.getSimpleName() call decl Class.getSimpleName() call decl Class.getSimpleName() call decl Class.getSimpleName() + + + + return protected protected < return new TransactionAttribute Method decl Class protected protected < if && ! return decl_stmt java.lang.Class < = decl_stmt com.sun.jdi.Method = = decl_stmt org.springframework.transaction.interceptor.TransactionAttribute = if != return = call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() if != && return if != = if != return = if != && return return protected protected return