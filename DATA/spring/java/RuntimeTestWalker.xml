org.springframework.aop.aspectj java.lang.reflect.Field import org.aspectj.weaver.ReferenceType import org.aspectj.weaver.ReferenceTypeDelegate import org.aspectj.weaver.ResolvedType import org.aspectj.weaver.ast.And import org.aspectj.weaver.ast.Call import org.aspectj.weaver.ast.FieldGetCall import org.aspectj.weaver.ast.HasAnnotation import org.aspectj.weaver.ast.ITestVisitor import org.aspectj.weaver.ast.Instanceof import org.aspectj.weaver.ast.Literal import org.aspectj.weaver.ast.Not import org.aspectj.weaver.ast.Or import org.aspectj.weaver.ast.Test import org.aspectj.weaver.internal.tools.MatchingContextBasedTest import org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegate import org.aspectj.weaver.reflect.ReflectionVar import org.aspectj.weaver.reflect.ShadowMatchImpl import org.aspectj.weaver.tools.ShadowMatch import org.springframework.util.ClassUtils import org.springframework.util.ReflectionUtils import class org.springframework.aop.aspectj.RuntimeTestWalker Field Test Field Field public public return != && new public public < return != && new public public < return != && new public public public public public public public public public public public public public public public public public public protected protected try return call com.sun.jdi.Field.get(Object) call com.sun.jdi.Field.get(Object) call com.sun.jdi.Field.get(Object) call com.sun.jdi.Field.get(Object) call com.sun.jdi.Field.get(Object) catch throw new public public return decl Class int ReferenceTypeDelegate ResolvedType public public decl_stmt int = if != return decl_stmt java.lang.Class < = decl_stmt ResolvedType = if instanceof decl_stmt ReferenceTypeDelegate = if instanceof try = < call com.sun.jdi.Field.get(Object) call com.sun.jdi.Field.get(Object) call com.sun.jdi.Field.get(Object) call com.sun.jdi.Field.get(Object) call com.sun.jdi.Field.get(Object) catch throw new try if == = call ResolvedType.getName() call ResolvedType.getName() call ResolvedType.getName() call ResolvedType.getName() call ResolvedType.getName() = call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() catch = public public return public public return public public return Object ReflectionVar public public decl_stmt ReflectionVar = decl_stmt java.lang.Object = call ReflectionVar.getBindingAtJoinPoint() call ReflectionVar.getBindingAtJoinPoint() call ReflectionVar.getBindingAtJoinPoint() call ReflectionVar.getBindingAtJoinPoint() call ReflectionVar.getBindingAtJoinPoint() if == || == = int ReflectionVar public public decl_stmt ReflectionVar = decl_stmt int = if == || == || == =