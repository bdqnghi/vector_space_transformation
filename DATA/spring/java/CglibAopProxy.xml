org.springframework.aop.framework java.io.Serializable import java.lang.reflect.Method import java.lang.reflect.Modifier import java.lang.reflect.UndeclaredThrowableException import java.util.HashMap import java.util.List import java.util.Map import java.util.WeakHashMap import org.aopalliance.aop.Advice import org.aopalliance.intercept.MethodInvocation import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.aop.Advisor import org.springframework.aop.AopInvocationException import org.springframework.aop.PointcutAdvisor import org.springframework.aop.RawTargetAccess import org.springframework.aop.TargetSource import org.springframework.aop.support.AopUtils import org.springframework.cglib.core.ClassGenerator import org.springframework.cglib.core.CodeGenerationException import org.springframework.cglib.core.SpringNamingPolicy import org.springframework.cglib.proxy.Callback import org.springframework.cglib.proxy.CallbackFilter import org.springframework.cglib.proxy.Dispatcher import org.springframework.cglib.proxy.Enhancer import org.springframework.cglib.proxy.Factory import org.springframework.cglib.proxy.MethodInterceptor import org.springframework.cglib.proxy.MethodProxy import org.springframework.cglib.proxy.NoOp import org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy import org.springframework.core.SmartClassLoader import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.ObjectUtils import class annotation org.springframework.aop.framework.CglibAopProxy super super implements int AdvisedDispatcher int decl Map int int int AdvisedSupport decl Map int int Log decl Object int public public < if == || == throw new if != throw new + + + + = = public public return decl Class decl Class decl Callback Enhancer public public if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + try decl_stmt java.lang.Class < = != decl_stmt java.lang.Class < = if = call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() = call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() for < : decl_stmt Enhancer = if != call decl Callback.setClassLoader() call decl Callback.setClassLoader() call decl Callback.setClassLoader() call decl Callback.setClassLoader() call decl Callback.setClassLoader() if instanceof && call decl Callback.setUseCache() call decl Callback.setUseCache() call decl Callback.setUseCache() call decl Callback.setUseCache() call decl Callback.setUseCache() call decl Callback.setSuperclass() call decl Callback.setSuperclass() call decl Callback.setSuperclass() call decl Callback.setSuperclass() call decl Callback.setSuperclass() call decl Callback.setInterfaces() call decl Callback.setInterfaces() call decl Callback.setInterfaces() call decl Callback.setInterfaces() call decl Callback.setInterfaces() call decl Callback.setNamingPolicy() call decl Callback.setNamingPolicy() call decl Callback.setNamingPolicy() call decl Callback.setNamingPolicy() call decl Callback.setNamingPolicy() call decl Callback.setStrategy() call decl Callback.setStrategy() call decl Callback.setStrategy() call decl Callback.setStrategy() call decl Callback.setStrategy() new decl_stmt Callback = decl_stmt java.lang.Class < = != decl_stmt java.lang.Class < = if = call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() = call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() for < : decl_stmt Enhancer = if != call decl Callback.setClassLoader() call decl Callback.setClassLoader() call decl Callback.setClassLoader() call decl Callback.setClassLoader() call decl Callback.setClassLoader() if instanceof && call decl Callback.setUseCache() call decl Callback.setUseCache() call decl Callback.setUseCache() call decl Callback.setUseCache() call decl Callback.setUseCache() call decl Callback.setSuperclass() call decl Callback.setSuperclass() call decl Callback.setSuperclass() call decl Callback.setSuperclass() call decl Callback.setSuperclass() call decl Callback.setInterfaces() call decl Callback.setInterfaces() call decl Callback.setInterfaces() call decl Callback.setInterfaces() call decl Callback.setInterfaces() call decl Callback.setNamingPolicy() call decl Callback.setNamingPolicy() call decl Callback.setNamingPolicy() call decl Callback.setNamingPolicy() call decl Callback.setNamingPolicy() call decl Callback.setStrategy() call decl Callback.setStrategy() call decl Callback.setStrategy() call decl Callback.setStrategy() call decl Callback.setStrategy() new decl_stmt Callback = for = < ++ = call decl Callback.setCallbackFilter() call decl Callback.setCallbackFilter() call decl Callback.setCallbackFilter() call decl Callback.setCallbackFilter() call decl Callback.setCallbackFilter() new call decl Callback.setCallbackTypes() call decl Callback.setCallbackTypes() call decl Callback.setCallbackTypes() call decl Callback.setCallbackTypes() call decl Callback.setCallbackTypes() return catch throw new + + + catch throw new + + + catch throw new protected protected return != : protected protected return new private private < if call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() synchronized if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl Method int private private < if != decl_stmt com.sun.jdi.Method = for : decl_stmt int = if ! if call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() + + + else if ! && ! && ! && != && != call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() + + + + decl Callback boolean Callback decl Method decl List decl Callback boolean decl Callback Callback boolean Callback private private < throws decl_stmt boolean = decl_stmt boolean = decl_stmt boolean = decl_stmt Callback = new decl_stmt Callback if = new : new else = new : new decl_stmt Callback = new : new decl_stmt Callback = new new new new decl_stmt Callback if && decl_stmt com.sun.jdi.Method = decl_stmt Callback = new = new < for = < ++ decl_stmt java.util.List < = = new = new + = else = return decl Class private static private static if != && == && ! = decl_stmt java.lang.Class < = if == && != && call decl Class.isPrimitive() call decl Class.isPrimitive() call decl Class.isPrimitive() call decl Class.isPrimitive() call decl Class.isPrimitive() throw new + return public public return == || instanceof && public public return * + Object public public throws decl_stmt java.lang.Object = return Object Object public public throws decl_stmt java.lang.Object = try = decl_stmt java.lang.Object = return finally Object Object public public throws decl_stmt java.lang.Object = try decl_stmt java.lang.Object = return finally Object Object Object public public throws decl_stmt java.lang.Object = decl_stmt java.lang.Object = try = decl_stmt java.lang.Object = return finally public public return public public throws return Callback Object AdvisedSupport public public decl_stmt java.lang.Object = if == return if instanceof decl_stmt Callback = if ! instanceof return decl_stmt org.springframework.aop.framework.AdvisedSupport = return else return public public return * + MethodInvocation Object public public throws decl_stmt org.aopalliance.intercept.MethodInvocation = new decl_stmt java.lang.Object = call MethodInvocation.proceed() call MethodInvocation.proceed() call MethodInvocation.proceed() call MethodInvocation.proceed() call MethodInvocation.proceed() = return Object decl Object Object decl List boolean decl Class Object public public throws decl_stmt java.lang.Object = decl_stmt boolean = decl_stmt java.lang.Class < = decl_stmt java.lang.Object = try if = = = if != = call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() decl_stmt java.util.List < = decl_stmt java.lang.Object if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() && decl_stmt java.lang.Object = = else = new = return finally if != if public public return == || instanceof && public public return protected protected throws return protected protected throws protected protected throws if return else return int boolean decl List boolean boolean String boolean decl Class decl Class public public if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() return if ! && && if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + return if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + return if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + return decl_stmt java.lang.Class < = decl_stmt java.util.List < = decl_stmt boolean = ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() decl_stmt boolean = decl_stmt boolean = decl_stmt boolean = if || ! if if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + return decl_stmt java.lang.String = if && && if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + decl_stmt int = return + else if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + return else if || ! return decl_stmt java.lang.Class < = if == if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + return else if call decl Class.isPrimitive() call decl Class.isPrimitive() call decl Class.isPrimitive() call decl Class.isPrimitive() call decl Class.isPrimitive() || ! call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + return else if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + return Advisor Advisor ProxyCallbackFilter decl Advisor decl Advisor AdvisedSupport public public if == return if ! instanceof return decl_stmt ProxyCallbackFilter = decl_stmt org.springframework.aop.framework.AdvisedSupport = if == || == return if != call AdvisedSupport.isFrozen() call AdvisedSupport.isFrozen() call AdvisedSupport.isFrozen() call AdvisedSupport.isFrozen() call AdvisedSupport.isFrozen() return if != call AdvisedSupport.isExposeProxy() call AdvisedSupport.isExposeProxy() call AdvisedSupport.isExposeProxy() call AdvisedSupport.isExposeProxy() call AdvisedSupport.isExposeProxy() return if != call org.springframework.aop.framework.AdvisedSupport.getTargetSource() call org.springframework.aop.framework.AdvisedSupport.getTargetSource() call org.springframework.aop.framework.AdvisedSupport.getTargetSource() call org.springframework.aop.framework.AdvisedSupport.getTargetSource() call org.springframework.aop.framework.AdvisedSupport.getTargetSource() return if ! return decl_stmt org.springframework.aop.Advisor = decl_stmt org.springframework.aop.Advisor = call org.springframework.aop.framework.AdvisedSupport.getAdvisors() call org.springframework.aop.framework.AdvisedSupport.getAdvisors() call org.springframework.aop.framework.AdvisedSupport.getAdvisors() call org.springframework.aop.framework.AdvisedSupport.getAdvisors() call org.springframework.aop.framework.AdvisedSupport.getAdvisors() if != return for = < ++ decl_stmt org.springframework.aop.Advisor = decl_stmt org.springframework.aop.Advisor = if ! return if ! return return Advice Advice private private decl_stmt Advice = decl_stmt Advice = if == || == return == return call Advice.getClass() call Advice.getClass() call Advice.getClass() call Advice.getClass() call Advice.getClass() == call Advice.getClass() call Advice.getClass() call Advice.getClass() call Advice.getClass() call Advice.getClass() private private return ! instanceof || instanceof && Advice decl Advisor int public public decl_stmt int = decl_stmt org.springframework.aop.Advisor = for : decl_stmt Advice = if != = * + call Advice.getClass() call Advice.getClass() call Advice.getClass() call Advice.getClass() call Advice.getClass() = * + : = * + : = * + : = * + : return boolean ClassLoader Thread public public throws if == return decl_stmt java.lang.Thread = decl_stmt java.lang.ClassLoader try = call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() catch return decl_stmt boolean = ! if call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) try return finally if call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader)