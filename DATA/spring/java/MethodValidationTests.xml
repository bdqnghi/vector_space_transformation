org.springframework.validation.beanvalidation java.lang.annotation.Retention import java.lang.annotation.RetentionPolicy import javax.validation.constraints.Max import javax.validation.constraints.NotNull import javax.validation.groups.Default import org.junit.Test import org.springframework.aop.framework.ProxyFactory import org.springframework.beans.MutablePropertyValues import org.springframework.context.support.StaticApplicationContext import org.springframework.scheduling.annotation.Async import org.springframework.scheduling.annotation.AsyncAnnotationAdvisor import org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor import org.springframework.validation.annotation.Validated import static static org.junit.Assert.* import class org.springframework.validation.beanvalidation.MethodValidationTests MyValidBean ProxyFactory public public decl_stmt MyValidBean = new decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() new call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() new call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) StaticApplicationContext MutablePropertyValues public public decl_stmt org.springframework.context.support.StaticApplicationContext = new call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) decl_stmt org.springframework.beans.MutablePropertyValues = new call org.springframework.beans.MutablePropertyValues.add(String,Object) call org.springframework.beans.MutablePropertyValues.add(String,Object) call org.springframework.beans.MutablePropertyValues.add(String,Object) call org.springframework.beans.MutablePropertyValues.add(String,Object) call org.springframework.beans.MutablePropertyValues.add(String,Object) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call StaticApplicationContext.refresh() call StaticApplicationContext.refresh() call StaticApplicationContext.refresh() call StaticApplicationContext.refresh() call StaticApplicationContext.refresh() call StaticApplicationContext.getBean() call StaticApplicationContext.getBean() call StaticApplicationContext.getBean() call StaticApplicationContext.getBean() call StaticApplicationContext.getBean() call StaticApplicationContext.close() call StaticApplicationContext.close() call StaticApplicationContext.close() call StaticApplicationContext.close() call StaticApplicationContext.close() private private try catch try catch try catch try catch try catch try catch public public return == : public public public public return