org.springframework.expression.common java.util.LinkedList import java.util.List import java.util.Stack import org.springframework.expression.Expression import org.springframework.expression.ExpressionParser import org.springframework.expression.ParseException import org.springframework.expression.ParserContext import class org.springframework.expression.common.TemplateAwareExpressionParser super super implements ParserContext public public return public public return public public return public public throws return public public throws if == = if return else return decl Expression private private throws if == return new decl_stmt org.springframework.expression.Expression = if == return else return new int String int String String int decl List int private private throws decl_stmt java.util.List < = new < decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt int = while < decl_stmt int = if >= if > call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt int = + call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() decl_stmt int = if == - throw new + + + + + if == throw new + + + + decl_stmt java.lang.String = + call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() = call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() == throw new + + + + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = + call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() else call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = return call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() private private return new int private private decl_stmt int = for = < && < ++ if ++ != ++ return if != return return char int Bracket int int int decl Stack private private throws decl_stmt int = decl_stmt int = decl_stmt int = if == - return - decl_stmt java.util.Stack < = new < while < if && call decl Stack.isEmpty() call decl Stack.isEmpty() call decl Stack.isEmpty() call decl Stack.isEmpty() call decl Stack.isEmpty() break decl_stmt char = switch case case case call decl Stack.push() call decl Stack.push() call decl Stack.push() call decl Stack.push() call decl Stack.push() new break case case case if call decl Stack.isEmpty() call decl Stack.isEmpty() call decl Stack.isEmpty() call decl Stack.isEmpty() call decl Stack.isEmpty() throw new + + + + + + decl_stmt Bracket = call decl Stack.pop() call decl Stack.pop() call decl Stack.pop() call decl Stack.pop() call decl Stack.pop() if ! call Bracket.compatibleWithCloseBracket() call Bracket.compatibleWithCloseBracket() call Bracket.compatibleWithCloseBracket() call Bracket.compatibleWithCloseBracket() call Bracket.compatibleWithCloseBracket() throw new + + + + + + + break case case decl_stmt int = + if == - throw new + = break ++ if ! call decl Stack.isEmpty() call decl Stack.isEmpty() call decl Stack.isEmpty() call decl Stack.isEmpty() call decl Stack.isEmpty() decl_stmt Bracket = call decl Stack.pop() call decl Stack.pop() call decl Stack.pop() call decl Stack.pop() call decl Stack.pop() throw new + + + + + if ! return - return if == return == else if == return == return == static static if == return else if == return return static static if == return else if == return return