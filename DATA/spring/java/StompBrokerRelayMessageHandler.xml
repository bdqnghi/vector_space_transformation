org.springframework.messaging.simp.stomp java.util.Collection import java.util.HashMap import java.util.Map import java.util.concurrent.Callable import java.util.concurrent.ConcurrentHashMap import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicInteger import org.springframework.messaging.Message import org.springframework.messaging.MessageChannel import org.springframework.messaging.MessageDeliveryException import org.springframework.messaging.MessageHandler import org.springframework.messaging.MessageHeaders import org.springframework.messaging.SubscribableChannel import org.springframework.messaging.simp.SimpMessageHeaderAccessor import org.springframework.messaging.simp.SimpMessageType import org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler import org.springframework.messaging.support.MessageBuilder import org.springframework.messaging.support.MessageHeaderAccessor import org.springframework.messaging.support.MessageHeaderInitializer import org.springframework.messaging.tcp.FixedIntervalReconnectStrategy import org.springframework.messaging.tcp.TcpConnection import org.springframework.messaging.tcp.TcpConnectionHandler import org.springframework.messaging.tcp.TcpOperations import org.springframework.messaging.tcp.reactor.Reactor2TcpClient import org.springframework.util.Assert import org.springframework.util.concurrent.ListenableFuture import org.springframework.util.concurrent.ListenableFutureCallback import org.springframework.util.concurrent.ListenableFutureTask import class org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler super super extends decl Map decl TcpOperations String Stats decl Message long decl ListenableFutureTask int String long MessageHeaderInitializer String String String String decl Map decl byte long String public public = public public return public public = public public return public public = public public return public public = public public return public public = public public return public public = public public return public public = public public return public public = public public return public public < if != public < public < return public public = public public return public public < = public < public < return public public return public public = public public return public public return SystemStompConnectionHandler Reactor2StompCodec StompHeaderAccessor StompDecoder protected protected if == decl_stmt org.springframework.messaging.simp.stomp.StompDecoder = new call org.springframework.messaging.simp.stomp.StompDecoder.setHeaderInitializer(MessageHeaderInitializer) call org.springframework.messaging.simp.stomp.StompDecoder.setHeaderInitializer(MessageHeaderInitializer) call org.springframework.messaging.simp.stomp.StompDecoder.setHeaderInitializer(MessageHeaderInitializer) call org.springframework.messaging.simp.stomp.StompDecoder.setHeaderInitializer(MessageHeaderInitializer) call org.springframework.messaging.simp.stomp.StompDecoder.setHeaderInitializer(MessageHeaderInitializer) decl_stmt org.springframework.messaging.simp.stomp.Reactor2StompCodec = new new = new if + + + decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setAcceptVersion(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setAcceptVersion(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setAcceptVersion(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setAcceptVersion(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setAcceptVersion(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setLogin(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setLogin(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setLogin(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setLogin(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setLogin(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setPasscode(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setPasscode(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setPasscode(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setPasscode(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setPasscode(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHeartbeat(long,long) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHeartbeat(long,long) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHeartbeat(long,long) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHeartbeat(long,long) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHeartbeat(long,long) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHost(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHost(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHost(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHost(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHost(String) call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() if + call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getShortLogMessage(Object) decl_stmt SystemStompConnectionHandler = new call SystemStompConnectionHandler.getSessionId() call SystemStompConnectionHandler.getSessionId() call SystemStompConnectionHandler.getSessionId() call SystemStompConnectionHandler.getSessionId() call SystemStompConnectionHandler.getSessionId() new protected protected try catch String MessageHeaders String StompConnectionHandler StompCommand StompHeaderAccessor MessageHeaderAccessor protected protected < decl_stmt java.lang.String = if ! if == || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) throw new + decl_stmt StompConnectionHandler = if != call StompConnectionHandler.sendStompErrorFrameToClient() call StompConnectionHandler.sendStompErrorFrameToClient() call StompConnectionHandler.sendStompErrorFrameToClient() call StompConnectionHandler.sendStompErrorFrameToClient() call StompConnectionHandler.sendStompErrorFrameToClient() call StompConnectionHandler.clearConnection() call StompConnectionHandler.clearConnection() call StompConnectionHandler.clearConnection() call StompConnectionHandler.clearConnection() call StompConnectionHandler.clearConnection() else decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = if != call MessageHeaderAccessor.setSessionId() call MessageHeaderAccessor.setSessionId() call MessageHeaderAccessor.setSessionId() call MessageHeaderAccessor.setSessionId() call MessageHeaderAccessor.setSessionId() call MessageHeaderAccessor.setUser() call MessageHeaderAccessor.setUser() call MessageHeaderAccessor.setUser() call MessageHeaderAccessor.setUser() call MessageHeaderAccessor.setUser() call MessageHeaderAccessor.setMessage() call MessageHeaderAccessor.setMessage() call MessageHeaderAccessor.setMessage() call MessageHeaderAccessor.setMessage() call MessageHeaderAccessor.setMessage() decl_stmt org.springframework.messaging.MessageHeaders = call org.springframework.messaging.support.MessageHeaderAccessor.getMessageHeaders() call org.springframework.messaging.support.MessageHeaderAccessor.getMessageHeaders() call org.springframework.messaging.support.MessageHeaderAccessor.getMessageHeaders() call org.springframework.messaging.support.MessageHeaderAccessor.getMessageHeaders() call org.springframework.messaging.support.MessageHeaderAccessor.getMessageHeaders() return decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor decl_stmt StompCommand decl_stmt org.springframework.messaging.support.MessageHeaderAccessor = if == throw new + else if instanceof = = call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() else if instanceof = = call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() if == = call org.springframework.messaging.simp.stomp.StompHeaderAccessor.updateStompCommandAsClientMessage() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.updateStompCommandAsClientMessage() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.updateStompCommandAsClientMessage() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.updateStompCommandAsClientMessage() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.updateStompCommandAsClientMessage() else throw new + call MessageHeaderAccessor.getClass() call MessageHeaderAccessor.getClass() call MessageHeaderAccessor.getClass() call MessageHeaderAccessor.getClass() call MessageHeaderAccessor.getClass() + + if == if ! call StompHeaderAccessor.getMessageType() call StompHeaderAccessor.getMessageType() call StompHeaderAccessor.getMessageType() call StompHeaderAccessor.getMessageType() call StompHeaderAccessor.getMessageType() if + return = call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() decl_stmt java.lang.String = call StompHeaderAccessor.getDestination() call StompHeaderAccessor.getDestination() call StompHeaderAccessor.getDestination() call StompHeaderAccessor.getDestination() call StompHeaderAccessor.getDestination() if != && call StompCommand.requiresDestination() call StompCommand.requiresDestination() call StompCommand.requiresDestination() call StompCommand.requiresDestination() call StompCommand.requiresDestination() && ! return if if call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getShortLogMessage(Object) = call StompHeaderAccessor.isMutable() call StompHeaderAccessor.isMutable() call StompHeaderAccessor.isMutable() call StompHeaderAccessor.isMutable() call StompHeaderAccessor.isMutable() : call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setLogin(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setLogin(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setLogin(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setLogin(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setLogin(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setPasscode(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setPasscode(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setPasscode(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setPasscode(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setPasscode(String) if != call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHost(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHost(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHost(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHost(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHost(String) decl_stmt StompConnectionHandler = new else if decl_stmt StompConnectionHandler = if == if + + return call Stats.incrementDisconnectCount() call Stats.incrementDisconnectCount() call Stats.incrementDisconnectCount() call Stats.incrementDisconnectCount() call Stats.incrementDisconnectCount() call StompConnectionHandler.forward() call StompConnectionHandler.forward() call StompConnectionHandler.forward() call StompConnectionHandler.forward() call StompConnectionHandler.forward() else decl_stmt StompConnectionHandler = if == if + + + return call StompConnectionHandler.forward() call StompConnectionHandler.forward() call StompConnectionHandler.forward() call StompConnectionHandler.forward() call StompConnectionHandler.forward() public public return + + + + public public return protected < protected < return public public < if + = public public + protected protected if + + + try finally try catch if + StompHeaderAccessor decl Message private private if decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = if != call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setUser() call StompHeaderAccessor.setUser() call StompHeaderAccessor.setUser() call StompHeaderAccessor.setUser() call StompHeaderAccessor.setUser() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setMessage(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setMessage(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setMessage(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setMessage(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setMessage(String) decl_stmt org.springframework.messaging.Message < = call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() StompHeaderAccessor protected protected < if decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = call StompHeaderAccessor.setImmutable() call StompHeaderAccessor.setImmutable() call StompHeaderAccessor.setImmutable() call StompHeaderAccessor.setImmutable() call StompHeaderAccessor.setImmutable() StompCommand StompHeaderAccessor public public < decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setUser() call StompHeaderAccessor.setUser() call StompHeaderAccessor.setUser() call StompHeaderAccessor.setUser() call StompHeaderAccessor.setUser() decl_stmt StompCommand = call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() if if + call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getShortLogMessage(Object) else if && + call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getShortLogMessage(Object) else if + call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) protected protected = call Stats.incrementConnectedCount() call Stats.incrementConnectedCount() call Stats.incrementConnectedCount() call Stats.incrementConnectedCount() call Stats.incrementConnectedCount() long long long long long decl TcpConnection private private if return decl_stmt long = decl_stmt long = decl_stmt long = decl_stmt long = if > && > decl_stmt long = new public public decl_stmt org.springframework.messaging.tcp.TcpConnection < = if != call decl TcpConnection.send() call decl TcpConnection.send() call decl TcpConnection.send() call decl TcpConnection.send() call decl TcpConnection.send() new < public public public public + if > && > decl_stmt long final final = * new public public + + decl TcpConnection public public decl_stmt org.springframework.messaging.tcp.TcpConnection < = if != call decl TcpConnection.send() call decl TcpConnection.send() call decl TcpConnection.send() call decl TcpConnection.send() call decl TcpConnection.send() new < public public public public + public public public public + public public + + public public if != + else if + public public if == return try if + finally try = catch decl ListenableFuture StompCommand decl Message decl TcpConnection public < public < final final final < final final decl_stmt org.springframework.messaging.tcp.TcpConnection < = if ! if if + return else throw new + != : + + + decl_stmt org.springframework.messaging.Message final final final < = && : decl_stmt StompCommand = if && || || || + else if + decl_stmt org.springframework.util.concurrent.ListenableFuture < = call decl TcpConnection.send() call decl TcpConnection.send() call decl TcpConnection.send() call decl TcpConnection.send() call decl TcpConnection.send() < call decl ListenableFuture.addCallback() call decl ListenableFuture.addCallback() call decl ListenableFuture.addCallback() call decl ListenableFuture.addCallback() call decl ListenableFuture.addCallback() new < public public if == public public if != + else if + return public public if == public public if != + else if + private private if == try catch if + decl TcpConnection public public if + if = decl_stmt org.springframework.messaging.tcp.TcpConnection < = = if != if + call decl TcpConnection.close() call decl TcpConnection.close() call decl TcpConnection.close() call decl TcpConnection.close() call decl TcpConnection.close() public public return + + protected protected if int MessageHeaders StompHeaderAccessor decl TcpConnection String private private decl_stmt int = for : decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setSubscriptionId(String) ++ call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) if + + decl_stmt org.springframework.messaging.tcp.TcpConnection < = if != decl_stmt org.springframework.messaging.MessageHeaders = call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call decl TcpConnection.send() call decl TcpConnection.send() call decl TcpConnection.send() call decl TcpConnection.send() call decl TcpConnection.send() new < public public public public decl_stmt java.lang.String = public public String public public decl_stmt java.lang.String = MessageHandler String StompHeaderAccessor protected protected < decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = if call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() decl_stmt java.lang.String = call StompHeaderAccessor.getDestination() call StompHeaderAccessor.getDestination() call StompHeaderAccessor.getDestination() call StompHeaderAccessor.getDestination() call StompHeaderAccessor.getDestination() if == if + call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) return if ! if + call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) return try decl_stmt org.springframework.messaging.MessageHandler = call MessageHandler.handleMessage() call MessageHandler.handleMessage() call MessageHandler.handleMessage() call MessageHandler.handleMessage() call MessageHandler.handleMessage() catch if protected protected public public decl ListenableFuture public < public < < try decl_stmt org.springframework.util.concurrent.ListenableFuture < = if == call decl ListenableFuture.get() call decl ListenableFuture.get() call decl ListenableFuture.get() call decl ListenableFuture.get() call decl ListenableFuture.get() return catch throw new public < public < return new < public public throws return public public public public public public public public return call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() + + + + + : + + + + + + +