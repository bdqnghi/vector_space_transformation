org.springframework.core java.util.ArrayList import java.util.Collection import java.util.EnumMap import java.util.EnumSet import java.util.HashMap import java.util.HashSet import java.util.LinkedHashMap import java.util.LinkedHashSet import java.util.LinkedList import java.util.List import java.util.Map import java.util.NavigableMap import java.util.NavigableSet import java.util.Set import java.util.SortedMap import java.util.SortedSet import java.util.TreeMap import java.util.TreeSet import org.springframework.util.Assert import org.springframework.util.LinkedMultiValueMap import org.springframework.util.MultiValueMap import class org.springframework.core.CollectionFactory decl Set decl Set public static public static < return != && call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() decl Collection public static < < public static < < if instanceof return new < else if instanceof return new < else if instanceof decl_stmt java.util.Collection < = < call decl Collection.clear() call decl Collection.clear() call decl Collection.clear() call decl Collection.clear() call decl Collection.clear() return else if instanceof return new < < else return new < public static < < public static < < < return public static < < public static < < < < if if == || == return new < else if == return new < else if == || == return new < else throw new + else if == return < else if ! throw new + try return < catch throw new + public static public static < return != && call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() EnumMap public static < < public static < < if instanceof decl_stmt java.util.EnumMap = new call java.util.EnumMap.clear() call java.util.EnumMap.clear() call java.util.EnumMap.clear() call java.util.EnumMap.clear() call java.util.EnumMap.clear() return else if instanceof return new < < else return new < public static < < public static < < < return public static < < public static < < < < if if == return new < else if == || == return new < else if == return new else throw new + else if == return new else if ! throw new + try return < catch throw new + private static < extends extends private static < extends extends < if ! throw new + return