org.springframework.mail.javamail java.io.InputStream import java.util.ArrayList import java.util.Date import java.util.LinkedHashMap import java.util.List import java.util.Map import java.util.Properties import javax.activation.FileTypeMap import javax.mail.AuthenticationFailedException import javax.mail.MessagingException import javax.mail.NoSuchProviderException import javax.mail.Session import javax.mail.Transport import javax.mail.internet.MimeMessage import org.springframework.mail.MailAuthenticationException import org.springframework.mail.MailException import org.springframework.mail.MailParseException import org.springframework.mail.MailPreparationException import org.springframework.mail.MailSendException import org.springframework.mail.SimpleMailMessage import org.springframework.util.Assert import class org.springframework.mail.javamail.JavaMailSenderImpl super super implements String String String String Properties String Session int String String int FileTypeMap public public = synchronized = public public return public synchronized public synchronized = public synchronized public synchronized if == = return public public = public public return public public = public public return public public = public public return public public = public public return public public = public public return public public = public public return public public = public public return public public throws new decl List MimeMailMessage public public throws decl_stmt java.util.List < = new < for : decl_stmt org.springframework.mail.javamail.MimeMailMessage = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call org.springframework.mail.javamail.MimeMailMessage.getMimeMessage() call org.springframework.mail.javamail.MimeMailMessage.getMimeMessage() call org.springframework.mail.javamail.MimeMailMessage.getMimeMessage() call org.springframework.mail.javamail.MimeMailMessage.getMimeMessage() call org.springframework.mail.javamail.MimeMailMessage.getMimeMessage() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() public public return new public public throws try return new catch throw new public public throws new public public throws public public throws new decl List MimeMessage public public throws try decl_stmt java.util.List < = new < for : decl_stmt MimeMessage = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() catch throw catch throw new catch throw new Transport public public throws decl_stmt org.springframework.web.socket.sockjs.client.Transport = try = finally if != call Transport.close() call Transport.close() call Transport.close() call Transport.close() call Transport.close() decl Map MimeMessage Object Transport String protected protected throws decl_stmt java.util.Map < = new < decl_stmt org.springframework.web.socket.sockjs.client.Transport = try for = < ++ if == || ! call Transport.isConnected() call Transport.isConnected() call Transport.isConnected() call Transport.isConnected() call Transport.isConnected() if != try call Transport.close() call Transport.close() call Transport.close() call Transport.close() call Transport.close() catch = try = catch throw new catch for = < ++ decl_stmt java.lang.Object = != : call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() throw new decl_stmt MimeMessage = try if call MimeMessage.getSentDate() call MimeMessage.getSentDate() call MimeMessage.getSentDate() call MimeMessage.getSentDate() call MimeMessage.getSentDate() == call MimeMessage.setSentDate() call MimeMessage.setSentDate() call MimeMessage.setSentDate() call MimeMessage.setSentDate() call MimeMessage.setSentDate() new decl_stmt java.lang.String = call MimeMessage.getMessageID() call MimeMessage.getMessageID() call MimeMessage.getMessageID() call MimeMessage.getMessageID() call MimeMessage.getMessageID() call MimeMessage.saveChanges() call MimeMessage.saveChanges() call MimeMessage.saveChanges() call MimeMessage.saveChanges() call MimeMessage.saveChanges() if != call MimeMessage.setHeader() call MimeMessage.setHeader() call MimeMessage.setHeader() call MimeMessage.setHeader() call MimeMessage.setHeader() call Transport.sendMessage() call Transport.sendMessage() call Transport.sendMessage() call Transport.sendMessage() call Transport.sendMessage() call MimeMessage.getAllRecipients() call MimeMessage.getAllRecipients() call MimeMessage.getAllRecipients() call MimeMessage.getAllRecipients() call MimeMessage.getAllRecipients() catch decl_stmt java.lang.Object = != : call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() finally try if != call Transport.close() call Transport.close() call Transport.close() call Transport.close() call Transport.close() catch if ! call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() throw new else throw new if ! call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() throw new String String Transport protected protected throws decl_stmt java.lang.String = decl_stmt java.lang.String = if = if = decl_stmt org.springframework.web.socket.sockjs.client.Transport = call Transport.connect() call Transport.connect() call Transport.connect() call Transport.connect() call Transport.connect() return String protected protected throws decl_stmt java.lang.String = if == = call Session.getProperty() call Session.getProperty() call Session.getProperty() call Session.getProperty() call Session.getProperty() if == = return call Session.getTransport() call Session.getTransport() call Session.getTransport() call Session.getTransport() call Session.getTransport()