org.springframework.web.servlet.mvc.method.annotation java.io.IOException import java.io.OutputStream import java.util.HashMap import java.util.List import java.util.Map import javax.servlet.ServletRequest import javax.servlet.http.HttpServletResponse import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.core.MethodParameter import org.springframework.core.ResolvableType import org.springframework.http.HttpHeaders import org.springframework.http.HttpStatus import org.springframework.http.MediaType import org.springframework.http.ResponseEntity import org.springframework.http.converter.HttpMessageConverter import org.springframework.http.server.ServerHttpResponse import org.springframework.http.server.ServletServerHttpResponse import org.springframework.util.Assert import org.springframework.web.context.request.NativeWebRequest import org.springframework.web.context.request.async.DeferredResult import org.springframework.web.context.request.async.WebAsyncUtils import org.springframework.web.filter.ShallowEtagHeaderFilter import org.springframework.web.method.support.AsyncHandlerMethodReturnValueHandler import org.springframework.web.method.support.ModelAndViewContainer import class org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler super super implements Log decl Map decl List public < < public < < return private private < if != for < : if return return decl Class public public decl_stmt java.lang.Class < if = else = return != Object public public if != decl_stmt java.lang.Object = if instanceof = if != return call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() != return ServerHttpResponse ResponseBodyEmitterAdapter ServletRequest ResponseBodyEmitter HttpMessageConvertingHandler decl ResponseEntity decl DeferredResult HttpServletResponse public public throws if == return decl_stmt HttpServletResponse = decl_stmt org.springframework.http.server.ServerHttpResponse = new if decl_stmt org.springframework.http.ResponseEntity < = < call org.springframework.http.server.ServerHttpResponse.setStatusCode(HttpStatus) call org.springframework.http.server.ServerHttpResponse.setStatusCode(HttpStatus) call org.springframework.http.server.ServerHttpResponse.setStatusCode(HttpStatus) call org.springframework.http.server.ServerHttpResponse.setStatusCode(HttpStatus) call org.springframework.http.server.ServerHttpResponse.setStatusCode(HttpStatus) call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call decl ResponseEntity.getStatusCode() call ServerHttpResponse.getHeaders() call ServerHttpResponse.getHeaders() call ServerHttpResponse.getHeaders() call ServerHttpResponse.getHeaders() call ServerHttpResponse.getHeaders() call decl ResponseEntity.getHeaders() call decl ResponseEntity.getHeaders() call decl ResponseEntity.getHeaders() call decl ResponseEntity.getHeaders() call decl ResponseEntity.getHeaders() = call decl ResponseEntity.getBody() call decl ResponseEntity.getBody() call decl ResponseEntity.getBody() call decl ResponseEntity.getBody() call decl ResponseEntity.getBody() if == return decl_stmt ServletRequest = decl_stmt org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterAdapter = decl_stmt org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter = call ResponseBodyEmitterAdapter.adaptToEmitter() call ResponseBodyEmitterAdapter.adaptToEmitter() call ResponseBodyEmitterAdapter.adaptToEmitter() call ResponseBodyEmitterAdapter.adaptToEmitter() call ResponseBodyEmitterAdapter.adaptToEmitter() call org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.extendResponse(ServerHttpResponse) call org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.extendResponse(ServerHttpResponse) call org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.extendResponse(ServerHttpResponse) call org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.extendResponse(ServerHttpResponse) call org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.extendResponse(ServerHttpResponse) call ServerHttpResponse.getBody() call ServerHttpResponse.getBody() call ServerHttpResponse.getBody() call ServerHttpResponse.getBody() call ServerHttpResponse.getBody() call org.springframework.http.server.ServerHttpResponse.flush() call org.springframework.http.server.ServerHttpResponse.flush() call org.springframework.http.server.ServerHttpResponse.flush() call org.springframework.http.server.ServerHttpResponse.flush() call org.springframework.http.server.ServerHttpResponse.flush() = new decl_stmt org.springframework.web.context.request.async.DeferredResult < = new < call org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.getTimeout() call org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.getTimeout() call org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.getTimeout() call org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.getTimeout() call org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.getTimeout() decl_stmt HttpMessageConvertingHandler = new call org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.initialize(Handler) call org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.initialize(Handler) call org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.initialize(Handler) call org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.initialize(Handler) call org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.initialize(Handler) public public return public public throws private < private < throws for < : if < if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + + return throw new + public public public public public public public public public public public public return public public throws return public public throws public public