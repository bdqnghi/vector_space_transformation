org.springframework.context.support java.lang.management.ManagementFactory import java.util.Collections import java.util.Iterator import java.util.LinkedHashSet import java.util.Set import javax.management.MBeanServer import javax.management.ObjectName import org.springframework.beans.factory.config.BeanDefinition import org.springframework.beans.factory.config.ConfigurableBeanFactory import org.springframework.beans.factory.config.ConfigurableListableBeanFactory import org.springframework.context.ApplicationContext import org.springframework.context.ApplicationContextAware import org.springframework.context.ApplicationContextException import org.springframework.context.ConfigurableApplicationContext import org.springframework.util.Assert import org.springframework.util.StringUtils import class org.springframework.context.support.LiveBeansView super super implements String ConfigurableApplicationContext String decl Set String MBeanServer static static decl_stmt java.lang.String = call org.springframework.context.ConfigurableApplicationContext.getEnvironment() call org.springframework.context.ConfigurableApplicationContext.getEnvironment() call org.springframework.context.ConfigurableApplicationContext.getEnvironment() call org.springframework.context.ConfigurableApplicationContext.getEnvironment() call org.springframework.context.ConfigurableApplicationContext.getEnvironment() if != synchronized if call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() try decl_stmt MBeanServer = call MBeanServer.registerMBean() call MBeanServer.registerMBean() call MBeanServer.registerMBean() call MBeanServer.registerMBean() call MBeanServer.registerMBean() new new call ConfigurableApplicationContext.getApplicationName() call ConfigurableApplicationContext.getApplicationName() call ConfigurableApplicationContext.getApplicationName() call ConfigurableApplicationContext.getApplicationName() call ConfigurableApplicationContext.getApplicationName() catch throw new call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() String MBeanServer static static synchronized if call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() && call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() try decl_stmt MBeanServer = decl_stmt java.lang.String = call org.springframework.context.ConfigurableApplicationContext.getEnvironment() call org.springframework.context.ConfigurableApplicationContext.getEnvironment() call org.springframework.context.ConfigurableApplicationContext.getEnvironment() call org.springframework.context.ConfigurableApplicationContext.getEnvironment() call org.springframework.context.ConfigurableApplicationContext.getEnvironment() call MBeanServer.unregisterMBean() call MBeanServer.unregisterMBean() call MBeanServer.unregisterMBean() call MBeanServer.unregisterMBean() call MBeanServer.unregisterMBean() new call ConfigurableApplicationContext.getApplicationName() call ConfigurableApplicationContext.getApplicationName() call ConfigurableApplicationContext.getApplicationName() call ConfigurableApplicationContext.getApplicationName() call ConfigurableApplicationContext.getApplicationName() catch throw new public public instanceof = decl Set public public decl_stmt java.util.Set < if != = else = return protected < protected < synchronized return new < BeanDefinition ConfigurableListableBeanFactory decl Class decl String boolean StringBuilder ConfigurableApplicationContext String decl String protected protected < decl_stmt java.lang.StringBuilder = new for < = decl_stmt org.springframework.context.ConfigurableApplicationContext = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call ConfigurableApplicationContext.getId() call ConfigurableApplicationContext.getId() call ConfigurableApplicationContext.getId() call ConfigurableApplicationContext.getId() call ConfigurableApplicationContext.getId() if call ConfigurableApplicationContext.getParent() call ConfigurableApplicationContext.getParent() call ConfigurableApplicationContext.getParent() call ConfigurableApplicationContext.getParent() call ConfigurableApplicationContext.getParent() != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call ConfigurableApplicationContext.getParent() call ConfigurableApplicationContext.getParent() call ConfigurableApplicationContext.getParent() call ConfigurableApplicationContext.getParent() call ConfigurableApplicationContext.getParent() else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt org.springframework.beans.factory.config.ConfigurableListableBeanFactory = call ConfigurableApplicationContext.getBeanFactory() call ConfigurableApplicationContext.getBeanFactory() call ConfigurableApplicationContext.getBeanFactory() call ConfigurableApplicationContext.getBeanFactory() call ConfigurableApplicationContext.getBeanFactory() decl_stmt java.lang.String = call ConfigurableListableBeanFactory.getBeanDefinitionNames() call ConfigurableListableBeanFactory.getBeanDefinitionNames() call ConfigurableListableBeanFactory.getBeanDefinitionNames() call ConfigurableListableBeanFactory.getBeanDefinitionNames() call ConfigurableListableBeanFactory.getBeanDefinitionNames() decl_stmt boolean = for : decl_stmt org.springframework.beans.factory.config.BeanDefinition = call org.springframework.beans.factory.config.ConfigurableListableBeanFactory.getBeanDefinition(String) call org.springframework.beans.factory.config.ConfigurableListableBeanFactory.getBeanDefinition(String) call org.springframework.beans.factory.config.ConfigurableListableBeanFactory.getBeanDefinition(String) call org.springframework.beans.factory.config.ConfigurableListableBeanFactory.getBeanDefinition(String) call org.springframework.beans.factory.config.ConfigurableListableBeanFactory.getBeanDefinition(String) if if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.lang.String = call org.springframework.beans.factory.config.BeanDefinition.getScope() call org.springframework.beans.factory.config.BeanDefinition.getScope() call org.springframework.beans.factory.config.BeanDefinition.getScope() call org.springframework.beans.factory.config.BeanDefinition.getScope() call org.springframework.beans.factory.config.BeanDefinition.getScope() if ! = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.lang.Class < = call ConfigurableListableBeanFactory.getType() call ConfigurableListableBeanFactory.getType() call ConfigurableListableBeanFactory.getType() call ConfigurableListableBeanFactory.getType() call ConfigurableListableBeanFactory.getType() if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.lang.String = call ConfigurableListableBeanFactory.getDependenciesForBean() call ConfigurableListableBeanFactory.getDependenciesForBean() call ConfigurableListableBeanFactory.getDependenciesForBean() call ConfigurableListableBeanFactory.getDependenciesForBean() call ConfigurableListableBeanFactory.getDependenciesForBean() if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() protected protected return != && ! || String char StringBuilder protected protected decl_stmt java.lang.String = if == return decl_stmt java.lang.StringBuilder = new call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() + for = < call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() ++ decl_stmt char = call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString()