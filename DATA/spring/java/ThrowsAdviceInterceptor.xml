org.springframework.aop.framework.adapter java.lang.reflect.InvocationTargetException import java.lang.reflect.Method import java.util.HashMap import java.util.Map import org.aopalliance.intercept.MethodInterceptor import org.aopalliance.intercept.MethodInvocation import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.aop.AfterAdvice import org.springframework.util.Assert import class org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor super super implements Log String Object decl Map public public return Method decl Class private private decl_stmt java.lang.Class < = if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() + decl_stmt com.sun.jdi.Method = while == && != = call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() = if != && call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() + + return Method public public throws try return catch decl_stmt com.sun.jdi.Method = if != throw decl Object private private throws decl_stmt java.lang.Object if == = new else = new try catch throw