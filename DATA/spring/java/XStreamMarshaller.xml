org.springframework.oxm.xstream java.io.IOException import java.io.InputStream import java.io.InputStreamReader import java.io.OutputStream import java.io.OutputStreamWriter import java.io.Reader import java.io.Writer import java.lang.reflect.Constructor import java.util.LinkedHashMap import java.util.List import java.util.Map import javax.xml.stream.XMLEventReader import javax.xml.stream.XMLEventWriter import javax.xml.stream.XMLStreamException import javax.xml.stream.XMLStreamReader import javax.xml.stream.XMLStreamWriter import javax.xml.transform.stream.StreamSource import com.thoughtworks.xstream.MarshallingStrategy import com.thoughtworks.xstream.XStream import com.thoughtworks.xstream.converters.ConversionException import com.thoughtworks.xstream.converters.Converter import com.thoughtworks.xstream.converters.ConverterLookup import com.thoughtworks.xstream.converters.ConverterMatcher import com.thoughtworks.xstream.converters.ConverterRegistry import com.thoughtworks.xstream.converters.DataHolder import com.thoughtworks.xstream.converters.SingleValueConverter import com.thoughtworks.xstream.converters.reflection.ReflectionProvider import com.thoughtworks.xstream.core.ClassLoaderReference import com.thoughtworks.xstream.core.DefaultConverterLookup import com.thoughtworks.xstream.core.util.CompositeClassLoader import com.thoughtworks.xstream.io.HierarchicalStreamDriver import com.thoughtworks.xstream.io.HierarchicalStreamReader import com.thoughtworks.xstream.io.HierarchicalStreamWriter import com.thoughtworks.xstream.io.StreamException import com.thoughtworks.xstream.io.naming.NameCoder import com.thoughtworks.xstream.io.xml.CompactWriter import com.thoughtworks.xstream.io.xml.DomReader import com.thoughtworks.xstream.io.xml.DomWriter import com.thoughtworks.xstream.io.xml.QNameMap import com.thoughtworks.xstream.io.xml.SaxWriter import com.thoughtworks.xstream.io.xml.StaxReader import com.thoughtworks.xstream.io.xml.StaxWriter import com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder import com.thoughtworks.xstream.io.xml.XppDriver import com.thoughtworks.xstream.mapper.CannotResolveClassException import com.thoughtworks.xstream.mapper.Mapper import com.thoughtworks.xstream.mapper.MapperWrapper import org.w3c.dom.Document import org.w3c.dom.Element import org.w3c.dom.Node import org.xml.sax.ContentHandler import org.xml.sax.InputSource import org.xml.sax.XMLReader import org.xml.sax.ext.LexicalHandler import org.springframework.beans.factory.BeanClassLoaderAware import org.springframework.beans.factory.InitializingBean import org.springframework.oxm.MarshallingFailureException import org.springframework.oxm.UncategorizedMappingException import org.springframework.oxm.UnmarshallingFailureException import org.springframework.oxm.XmlMappingException import org.springframework.oxm.support.AbstractMarshaller import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.ObjectUtils import org.springframework.util.StringUtils import org.springframework.util.xml.StaxUtils import class org.springframework.oxm.xstream.XStreamMarshaller super super extends super implements Mapper Integer decl Map XStream HierarchicalStreamDriver ConverterRegistry decl Map String decl Map String boolean HierarchicalStreamDriver NameCoder decl Map ClassLoader decl Map ConverterLookup decl ConverterMatcher MarshallingStrategy ReflectionProvider decl Map public public = public public = = private private if == = new return public public = public public < = public public = if instanceof = public public = public public = public public = public public = public public < = public public < = public public < = public public < = public public < = public public < < = public public < < = public public < = public public = public public = protected protected return public public = public public < = public public = public public = XStream protected protected decl_stmt XStream = return MapperWrapper decl Constructor protected protected return new new protected protected decl_stmt MapperWrapper = if != for < : decl_stmt java.lang.reflect.Constructor < try = catch try = catch throw new + try = call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() catch throw new + return MapperWrapper decl Constructor protected protected decl_stmt MapperWrapper = if != for < : decl_stmt java.lang.reflect.Constructor < try = catch try = catch throw new + try = call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() catch throw new + return decl String int String decl String decl Class String String decl Map String decl Class decl List protected protected if != for = < ++ if instanceof else if instanceof else throw new + + if != if != try if != decl_stmt java.util.Map < < = for < < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() if != decl_stmt java.util.Map < < = for < < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() if != for < : decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt int = call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) if != - decl_stmt java.lang.String = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) decl_stmt java.lang.Class < = decl_stmt java.lang.String = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) + else throw new + + catch throw new if != for < : if != for < : if instanceof if instanceof < else throw new else if instanceof decl_stmt java.lang.Class < = < if instanceof else if instanceof decl_stmt java.util.List < = < for : if instanceof else throw new + else throw new if != for < < : decl_stmt java.lang.String = for : if != for < < : decl_stmt java.lang.String = for : if != if String Object decl Class decl Map String private < < private < < < throws decl_stmt java.util.Map < < = new < < for < : decl_stmt java.lang.String = decl_stmt java.lang.Object = decl_stmt java.lang.Class < if instanceof = < else if instanceof decl_stmt java.lang.String = = else throw new + + call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return protected protected public final public final if == = return public public < if return else for < : if return return HierarchicalStreamWriter protected protected throws decl_stmt HierarchicalStreamWriter if instanceof = new else if instanceof = new else throw new LexicalHandler ContentHandler protected protected throws decl_stmt java.net.ContentHandler = decl_stmt LexicalHandler = if instanceof = protected protected throws try new new catch throw SaxWriter protected protected throws decl_stmt SaxWriter = new call SaxWriter.setContentHandler() call SaxWriter.setContentHandler() call SaxWriter.setContentHandler() call SaxWriter.setContentHandler() call SaxWriter.setContentHandler() public public throws public public throws if != else new public public throws public public throws if != else new private private try catch throw finally try catch protected protected throws if != return else if != return else throw new HierarchicalStreamReader protected protected throws decl_stmt HierarchicalStreamReader if instanceof = new else if instanceof = new else throw new return XMLStreamReader protected protected throws try decl_stmt XMLStreamReader = return catch throw protected protected throws return new new protected protected throws throw new public public throws return public public throws if != return else return new public public throws return public public throws return private private try return catch throw protected protected if instanceof || instanceof || instanceof if return new else return new else return new