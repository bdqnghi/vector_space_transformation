org.springframework.aop.framework java.io.Serializable import java.lang.reflect.InvocationHandler import java.lang.reflect.Method import java.lang.reflect.Proxy import java.util.List import org.aopalliance.intercept.MethodInvocation import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.aop.AopInvocationException import org.springframework.aop.RawTargetAccess import org.springframework.aop.TargetSource import org.springframework.aop.support.AopUtils import org.springframework.core.DecoratingProxy import org.springframework.util.Assert import org.springframework.util.ClassUtils import class org.springframework.aop.framework.JdkDynamicAopProxy super super implements boolean Log boolean long AdvisedSupport public public return public public if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + return decl Method private private < for < : decl_stmt com.sun.jdi.Method = for : if = if = if && return Object decl Object Object decl List boolean TargetSource decl Class MethodInvocation decl Class Object public public throws decl_stmt org.aopalliance.intercept.MethodInvocation decl_stmt java.lang.Object = decl_stmt boolean = decl_stmt org.springframework.aop.TargetSource = decl_stmt java.lang.Class < = decl_stmt java.lang.Object = try if ! && return else if ! && return else if == return else if ! && && return decl_stmt java.lang.Object if = = = call org.springframework.aop.TargetSource.getTarget() call org.springframework.aop.TargetSource.getTarget() call org.springframework.aop.TargetSource.getTarget() call org.springframework.aop.TargetSource.getTarget() call org.springframework.aop.TargetSource.getTarget() if != = call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() decl_stmt java.util.List < = if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() decl_stmt java.lang.Object = = else = new = call MethodInvocation.proceed() call MethodInvocation.proceed() call MethodInvocation.proceed() call MethodInvocation.proceed() call MethodInvocation.proceed() decl_stmt java.lang.Class < = if != && == && call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() && ! = else if == && != && call decl Class.isPrimitive() call decl Class.isPrimitive() call decl Class.isPrimitive() call decl Class.isPrimitive() call decl Class.isPrimitive() throw new + return finally if != && ! call org.springframework.aop.TargetSource.isStatic() call org.springframework.aop.TargetSource.isStatic() call org.springframework.aop.TargetSource.isStatic() call org.springframework.aop.TargetSource.isStatic() call org.springframework.aop.TargetSource.isStatic() call TargetSource.releaseTarget() call TargetSource.releaseTarget() call TargetSource.releaseTarget() call TargetSource.releaseTarget() call TargetSource.releaseTarget() if JdkDynamicAopProxy InvocationHandler public public if == return if == return decl_stmt org.springframework.aop.framework.JdkDynamicAopProxy if instanceof = else if decl_stmt java.lang.reflect.InvocationHandler = if ! instanceof return = else return return public public return * +