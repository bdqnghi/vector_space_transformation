org.springframework.core.type.filter java.io.IOException import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.core.type.ClassMetadata import org.springframework.core.type.classreading.MetadataReader import org.springframework.core.type.classreading.MetadataReaderFactory import class org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter super super implements Log boolean boolean Boolean Boolean ClassMetadata public public throws if return decl_stmt org.springframework.core.type.ClassMetadata = if call org.springframework.core.type.ClassMetadata.getClassName() call org.springframework.core.type.ClassMetadata.getClassName() call org.springframework.core.type.ClassMetadata.getClassName() call org.springframework.core.type.ClassMetadata.getClassName() call org.springframework.core.type.ClassMetadata.getClassName() return if if call org.springframework.core.type.ClassMetadata.hasSuperClass() call org.springframework.core.type.ClassMetadata.hasSuperClass() call org.springframework.core.type.ClassMetadata.hasSuperClass() call org.springframework.core.type.ClassMetadata.hasSuperClass() call org.springframework.core.type.ClassMetadata.hasSuperClass() decl_stmt java.lang.Boolean = call ClassMetadata.getSuperClassName() call ClassMetadata.getSuperClassName() call ClassMetadata.getSuperClassName() call ClassMetadata.getSuperClassName() call ClassMetadata.getSuperClassName() if != if call java.lang.Boolean.booleanValue() call java.lang.Boolean.booleanValue() call java.lang.Boolean.booleanValue() call java.lang.Boolean.booleanValue() call java.lang.Boolean.booleanValue() return else try if call ClassMetadata.getSuperClassName() call ClassMetadata.getSuperClassName() call ClassMetadata.getSuperClassName() call ClassMetadata.getSuperClassName() call ClassMetadata.getSuperClassName() return catch call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + call ClassMetadata.getSuperClassName() call ClassMetadata.getSuperClassName() call ClassMetadata.getSuperClassName() call ClassMetadata.getSuperClassName() call ClassMetadata.getSuperClassName() + + call org.springframework.core.type.ClassMetadata.getClassName() call org.springframework.core.type.ClassMetadata.getClassName() call org.springframework.core.type.ClassMetadata.getClassName() call org.springframework.core.type.ClassMetadata.getClassName() call org.springframework.core.type.ClassMetadata.getClassName() + if for : call org.springframework.core.type.ClassMetadata.getInterfaceNames() call org.springframework.core.type.ClassMetadata.getInterfaceNames() call org.springframework.core.type.ClassMetadata.getInterfaceNames() call org.springframework.core.type.ClassMetadata.getInterfaceNames() call org.springframework.core.type.ClassMetadata.getInterfaceNames() decl_stmt java.lang.Boolean = if != if call java.lang.Boolean.booleanValue() call java.lang.Boolean.booleanValue() call java.lang.Boolean.booleanValue() call java.lang.Boolean.booleanValue() call java.lang.Boolean.booleanValue() return else try if return catch call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + call org.springframework.core.type.ClassMetadata.getClassName() call org.springframework.core.type.ClassMetadata.getClassName() call org.springframework.core.type.ClassMetadata.getClassName() call org.springframework.core.type.ClassMetadata.getClassName() call org.springframework.core.type.ClassMetadata.getClassName() + return private private throws return protected protected return protected protected return protected protected return protected protected return