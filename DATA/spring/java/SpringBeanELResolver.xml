org.springframework.beans.factory.access.el java.beans.FeatureDescriptor import java.util.Iterator import javax.el.ELContext import javax.el.ELException import javax.el.ELResolver import javax.el.PropertyNotWritableException import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.factory.BeanFactory import class org.springframework.beans.factory.access.el.SpringBeanELResolver super super extends Log BeanFactory String public public throws if == decl_stmt java.lang.String = decl_stmt org.springframework.beans.factory.BeanFactory = if call org.springframework.beans.factory.BeanFactory.containsBean(String) call org.springframework.beans.factory.BeanFactory.containsBean(String) call org.springframework.beans.factory.BeanFactory.containsBean(String) call org.springframework.beans.factory.BeanFactory.containsBean(String) call org.springframework.beans.factory.BeanFactory.containsBean(String) if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + + return call org.springframework.beans.factory.BeanFactory.getBean(String) call org.springframework.beans.factory.BeanFactory.getBean(String) call org.springframework.beans.factory.BeanFactory.getBean(String) call org.springframework.beans.factory.BeanFactory.getBean(String) call org.springframework.beans.factory.BeanFactory.getBean(String) return BeanFactory String public < public < throws if == decl_stmt java.lang.String = decl_stmt org.springframework.beans.factory.BeanFactory = if call org.springframework.beans.factory.BeanFactory.containsBean(String) call org.springframework.beans.factory.BeanFactory.containsBean(String) call org.springframework.beans.factory.BeanFactory.containsBean(String) call org.springframework.beans.factory.BeanFactory.containsBean(String) call org.springframework.beans.factory.BeanFactory.containsBean(String) return call org.springframework.beans.factory.BeanFactory.getType(String) call org.springframework.beans.factory.BeanFactory.getType(String) call org.springframework.beans.factory.BeanFactory.getType(String) call org.springframework.beans.factory.BeanFactory.getType(String) call org.springframework.beans.factory.BeanFactory.getType(String) return BeanFactory String public public throws if == decl_stmt java.lang.String = decl_stmt org.springframework.beans.factory.BeanFactory = if call org.springframework.beans.factory.BeanFactory.containsBean(String) call org.springframework.beans.factory.BeanFactory.containsBean(String) call org.springframework.beans.factory.BeanFactory.containsBean(String) call org.springframework.beans.factory.BeanFactory.containsBean(String) call org.springframework.beans.factory.BeanFactory.containsBean(String) if == call org.springframework.beans.factory.BeanFactory.getBean(String) call org.springframework.beans.factory.BeanFactory.getBean(String) call org.springframework.beans.factory.BeanFactory.getBean(String) call org.springframework.beans.factory.BeanFactory.getBean(String) call org.springframework.beans.factory.BeanFactory.getBean(String) else throw new + + BeanFactory String public public throws if == decl_stmt java.lang.String = decl_stmt org.springframework.beans.factory.BeanFactory = if call org.springframework.beans.factory.BeanFactory.containsBean(String) call org.springframework.beans.factory.BeanFactory.containsBean(String) call org.springframework.beans.factory.BeanFactory.containsBean(String) call org.springframework.beans.factory.BeanFactory.containsBean(String) call org.springframework.beans.factory.BeanFactory.containsBean(String) return return public < public < return public < public < return