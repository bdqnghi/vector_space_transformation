org.springframework.core.convert.support java.lang.reflect.Constructor import java.lang.reflect.InvocationTargetException import java.lang.reflect.Member import java.lang.reflect.Method import java.lang.reflect.Modifier import java.util.Collections import java.util.Map import java.util.Set import org.springframework.core.convert.ConversionFailedException import org.springframework.core.convert.TypeDescriptor import org.springframework.core.convert.converter.ConditionalGenericConverter import org.springframework.util.ClassUtils import org.springframework.util.ConcurrentReferenceHashMap import org.springframework.util.ReflectionUtils import class org.springframework.core.convert.support.ObjectToObjectConverter super super implements decl Map public < public < return new public public return != && Member decl Class Method decl Class decl Constructor public public if == return decl_stmt java.lang.Class < = decl_stmt java.lang.Class < = decl_stmt java.lang.reflect.Member = try if instanceof decl_stmt com.sun.jdi.Method = if ! call com.sun.jdi.Method.getModifiers() call com.sun.jdi.Method.getModifiers() call com.sun.jdi.Method.getModifiers() call com.sun.jdi.Method.getModifiers() call com.sun.jdi.Method.getModifiers() return call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) else return call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) else if instanceof decl_stmt java.lang.reflect.Constructor < = < return call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() catch throw new catch throw new throw new + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getSimpleName() call decl Class.getSimpleName() call decl Class.getSimpleName() call decl Class.getSimpleName() call decl Class.getSimpleName() static static < < return != Member private static private static < < decl_stmt java.lang.reflect.Member = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if return = if == = if == = if == return call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return Method decl Constructor private static private static < if instanceof decl_stmt com.sun.jdi.Method = return ! call com.sun.jdi.Method.getModifiers() call com.sun.jdi.Method.getModifiers() call com.sun.jdi.Method.getModifiers() call com.sun.jdi.Method.getModifiers() call com.sun.jdi.Method.getModifiers() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() : call com.sun.jdi.Method.getParameterTypes() call com.sun.jdi.Method.getParameterTypes() call com.sun.jdi.Method.getParameterTypes() call com.sun.jdi.Method.getParameterTypes() call com.sun.jdi.Method.getParameterTypes() == else if instanceof decl_stmt java.lang.reflect.Constructor < = < return call decl Constructor.getParameterTypes() call decl Constructor.getParameterTypes() call decl Constructor.getParameterTypes() call decl Constructor.getParameterTypes() call decl Constructor.getParameterTypes() == else return Method private static private static < < if == || == return decl_stmt com.sun.jdi.Method = + return != && ! call com.sun.jdi.Method.getModifiers() call com.sun.jdi.Method.getModifiers() call com.sun.jdi.Method.getModifiers() call com.sun.jdi.Method.getModifiers() call com.sun.jdi.Method.getModifiers() && call com.sun.jdi.Method.getReturnType() call com.sun.jdi.Method.getReturnType() call com.sun.jdi.Method.getReturnType() call com.sun.jdi.Method.getReturnType() call com.sun.jdi.Method.getReturnType() : Method private static private static < < if == return decl_stmt com.sun.jdi.Method = if == = if == = if == return return private static < private static < < < return