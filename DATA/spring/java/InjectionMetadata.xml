org.springframework.beans.factory.annotation java.beans.PropertyDescriptor import java.lang.reflect.Field import java.lang.reflect.InvocationTargetException import java.lang.reflect.Member import java.lang.reflect.Method import java.util.Collection import java.util.LinkedHashSet import java.util.Set import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.MutablePropertyValues import org.springframework.beans.PropertyValues import org.springframework.beans.factory.support.RootBeanDefinition import org.springframework.util.ReflectionUtils import class org.springframework.beans.factory.annotation.InjectionMetadata Log decl Collection decl Class decl Set Member decl Set public public decl_stmt java.util.Set < = new < for : decl_stmt java.lang.reflect.Member = if ! call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + = boolean decl Collection public public throws decl_stmt java.util.Collection < = != : if ! call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() decl_stmt boolean = call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() for : if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + decl Collection public public decl_stmt java.util.Collection < = != : if ! call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() for : public static public static < return == || != public final public final return protected final < protected final < if return else if != return else return decl Class decl Class protected final protected final < if decl_stmt java.lang.Class < = if ! || call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() throw new + + + + else decl_stmt java.lang.Class < = != : if ! || call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() call decl Class.isAssignableFrom() throw new + + + + Field Method protected protected throws if decl_stmt com.sun.jdi.Field = call com.sun.jdi.Field.set(Object,Object) call com.sun.jdi.Field.set(Object,Object) call com.sun.jdi.Field.set(Object,Object) call com.sun.jdi.Field.set(Object,Object) call com.sun.jdi.Field.set(Object,Object) else if return try decl_stmt com.sun.jdi.Method = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) catch throw protected protected if != return if == = return synchronized if != return if != if = return else if instanceof = return protected protected if == return synchronized if && != && instanceof protected protected return InjectedElement public public if == return if ! instanceof return decl_stmt InjectedElement = return public public return * + public public return + +