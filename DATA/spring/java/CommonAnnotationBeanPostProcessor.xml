org.springframework.context.annotation java.beans.Introspector import java.beans.PropertyDescriptor import java.io.Serializable import java.lang.annotation.Annotation import java.lang.reflect.AnnotatedElement import java.lang.reflect.Constructor import java.lang.reflect.Field import java.lang.reflect.Member import java.lang.reflect.Method import java.lang.reflect.Modifier import java.net.MalformedURLException import java.net.URL import java.util.Collections import java.util.HashSet import java.util.LinkedHashSet import java.util.LinkedList import java.util.Map import java.util.Set import java.util.concurrent.ConcurrentHashMap import javax.annotation.PostConstruct import javax.annotation.PreDestroy import javax.annotation.Resource import javax.ejb.EJB import javax.xml.namespace.QName import javax.xml.ws.Service import javax.xml.ws.WebServiceClient import javax.xml.ws.WebServiceRef import org.springframework.aop.TargetSource import org.springframework.aop.framework.ProxyFactory import org.springframework.beans.BeanUtils import org.springframework.beans.BeansException import org.springframework.beans.PropertyValues import org.springframework.beans.factory.BeanCreationException import org.springframework.beans.factory.BeanFactory import org.springframework.beans.factory.BeanFactoryAware import org.springframework.beans.factory.NoSuchBeanDefinitionException import org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor import org.springframework.beans.factory.annotation.InjectionMetadata import org.springframework.beans.factory.config.AutowireCapableBeanFactory import org.springframework.beans.factory.config.ConfigurableBeanFactory import org.springframework.beans.factory.config.DependencyDescriptor import org.springframework.beans.factory.config.EmbeddedValueResolver import org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor import org.springframework.beans.factory.support.RootBeanDefinition import org.springframework.core.BridgeMethodResolver import org.springframework.core.MethodParameter import org.springframework.core.Ordered import org.springframework.jndi.support.SimpleJndiBeanFactory import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.ReflectionUtils import org.springframework.util.StringUtils import org.springframework.util.StringValueResolver import class annotation org.springframework.context.annotation.CommonAnnotationBeanPostProcessor super super extends super implements decl Map BeanFactory BeanFactory decl Class decl Set BeanFactory boolean boolean Method StringValueResolver decl Class public public public public = public public = public public = public public = public public = if == = if instanceof = new InjectionMetadata public public < if != decl_stmt org.springframework.beans.factory.annotation.InjectionMetadata = call org.springframework.beans.factory.annotation.InjectionMetadata.checkConfigMembers(RootBeanDefinition) call org.springframework.beans.factory.annotation.InjectionMetadata.checkConfigMembers(RootBeanDefinition) call org.springframework.beans.factory.annotation.InjectionMetadata.checkConfigMembers(RootBeanDefinition) call org.springframework.beans.factory.annotation.InjectionMetadata.checkConfigMembers(RootBeanDefinition) call org.springframework.beans.factory.annotation.InjectionMetadata.checkConfigMembers(RootBeanDefinition) public public < throws return public public throws return InjectionMetadata public public throws decl_stmt org.springframework.beans.factory.annotation.InjectionMetadata = try call org.springframework.beans.factory.annotation.InjectionMetadata.inject(Object,String,PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.inject(Object,String,PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.inject(Object,String,PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.inject(Object,String,PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.inject(Object,String,PropertyValues) catch throw new return String InjectionMetadata private private final final final < decl_stmt java.lang.String = : decl_stmt org.springframework.beans.factory.annotation.InjectionMetadata = if synchronized = if if != call org.springframework.beans.factory.annotation.InjectionMetadata.clear(PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.clear(PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.clear(PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.clear(PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.clear(PropertyValues) try = catch throw new + + return decl LinkedList decl LinkedList Method PropertyDescriptor PropertyDescriptor decl Class private private final final final < decl_stmt java.util.LinkedList < = new < decl_stmt java.lang.Class < = do decl_stmt java.util.LinkedList final final final < = new < new public public throws if != && if throw new call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() new else if != && if throw new call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() new else if if throw new if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() new new public public throws decl_stmt com.sun.jdi.Method = if ! return if if != && call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() if throw new if != throw new + decl_stmt java.beans.PropertyDescriptor = call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() new else if != && call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() if throw new if != throw new + decl_stmt java.beans.PropertyDescriptor = call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() new else if call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() if throw new if throw new if != throw new + if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() decl_stmt java.beans.PropertyDescriptor = call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() new call decl LinkedList.addAll() call decl LinkedList.addAll() call decl LinkedList.addAll() call decl LinkedList.addAll() call decl LinkedList.addAll() = call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() != && != return new public public throws if != && if throw new new else if != && if throw new new else if if throw new if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() new PropertyDescriptor Method PropertyDescriptor public public throws decl_stmt com.sun.jdi.Method = if ! return if if != && call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() if throw new if != throw new + decl_stmt java.beans.PropertyDescriptor = new else if != && call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() if throw new if != throw new + decl_stmt java.beans.PropertyDescriptor = new else if call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() if throw new if throw new if != throw new + if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() decl_stmt java.beans.PropertyDescriptor = new ClassLoader ProxyFactory TargetSource protected protected final final final final decl_stmt org.springframework.aop.TargetSource = new public < public < return public public return public public return public public decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.setTargetSource() call ProxyFactory.setTargetSource() call ProxyFactory.setTargetSource() call ProxyFactory.setTargetSource() call ProxyFactory.setTargetSource() if call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() decl_stmt java.lang.ClassLoader = instanceof : return call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) public < public < return public public return public public return public public protected protected throws if return if return if == throw new return Object String decl Set ConfigurableBeanFactory protected protected throws decl_stmt java.lang.Object decl_stmt java.util.Set < decl_stmt java.lang.String = if && && instanceof && ! = new < = else = = if instanceof decl_stmt org.springframework.beans.factory.config.ConfigurableBeanFactory = for : if call ConfigurableBeanFactory.containsBean() call ConfigurableBeanFactory.containsBean() call ConfigurableBeanFactory.containsBean() call ConfigurableBeanFactory.containsBean() call ConfigurableBeanFactory.containsBean() call org.springframework.beans.factory.config.ConfigurableBeanFactory.registerDependentBean(String,String) call org.springframework.beans.factory.config.ConfigurableBeanFactory.registerDependentBean(String,String) call org.springframework.beans.factory.config.ConfigurableBeanFactory.registerDependentBean(String,String) call org.springframework.beans.factory.config.ConfigurableBeanFactory.registerDependentBean(String,String) call org.springframework.beans.factory.config.ConfigurableBeanFactory.registerDependentBean(String,String) return public final public final return public final < public final < return public final public final if return new else return new protected protected return : WebServiceClient decl Constructor Service protected protected decl_stmt org.springframework.context.annotation.configuration.Service try = catch if == throw new + + + + + if try decl_stmt java.lang.reflect.Constructor < = decl_stmt WebServiceClient = if == throw new + + = new new call WebServiceClient.targetNamespace() call WebServiceClient.targetNamespace() call WebServiceClient.targetNamespace() call WebServiceClient.targetNamespace() call WebServiceClient.targetNamespace() call WebServiceClient.name() call WebServiceClient.name() call WebServiceClient.name() call WebServiceClient.name() call WebServiceClient.name() catch throw new + + + + catch throw new + + else = return call Service.getPort() call Service.getPort() call Service.getPort() call Service.getPort() call Service.getPort() Object protected protected if if != && call org.springframework.beans.factory.BeanFactory.containsBean(String) call org.springframework.beans.factory.BeanFactory.containsBean(String) call org.springframework.beans.factory.BeanFactory.containsBean(String) call org.springframework.beans.factory.BeanFactory.containsBean(String) call org.springframework.beans.factory.BeanFactory.containsBean(String) decl_stmt java.lang.Object = call org.springframework.beans.factory.BeanFactory.getBean(String) call org.springframework.beans.factory.BeanFactory.getBean(String) call org.springframework.beans.factory.BeanFactory.getBean(String) call org.springframework.beans.factory.BeanFactory.getBean(String) call org.springframework.beans.factory.BeanFactory.getBean(String) if instanceof return else if && ! throw new return public < public < return