org.springframework.orm.jpa java.lang.reflect.Method import java.util.Map import javax.persistence.EntityExistsException import javax.persistence.EntityManager import javax.persistence.EntityManagerFactory import javax.persistence.EntityNotFoundException import javax.persistence.LockTimeoutException import javax.persistence.NoResultException import javax.persistence.NonUniqueResultException import javax.persistence.OptimisticLockException import javax.persistence.PersistenceException import javax.persistence.PessimisticLockException import javax.persistence.Query import javax.persistence.QueryTimeoutException import javax.persistence.TransactionRequiredException import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.factory.BeanFactoryUtils import org.springframework.beans.factory.ListableBeanFactory import org.springframework.beans.factory.NoSuchBeanDefinitionException import org.springframework.core.Ordered import org.springframework.dao.CannotAcquireLockException import org.springframework.dao.DataAccessException import org.springframework.dao.DataAccessResourceFailureException import org.springframework.dao.DataIntegrityViolationException import org.springframework.dao.EmptyResultDataAccessException import org.springframework.dao.IncorrectResultSizeDataAccessException import org.springframework.dao.InvalidDataAccessApiUsageException import org.springframework.dao.PessimisticLockingFailureException import org.springframework.jdbc.datasource.DataSourceUtils import org.springframework.transaction.support.ResourceHolderSynchronization import org.springframework.transaction.support.TransactionSynchronizationManager import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.CollectionUtils import org.springframework.util.ReflectionUtils import org.springframework.util.StringUtils import class annotation org.springframework.orm.jpa.EntityManagerFactoryUtils int Log Object Method EntityManagerFactory decl String public static public static throws if decl_stmt java.lang.String = for : decl_stmt EntityManagerFactory = if instanceof if return return else return public static public static throws return public static public static < throws try return catch throw new public static public static < throws return EntityManager EntityManagerHolder Object public static public static < throws decl_stmt org.springframework.orm.jpa.EntityManagerHolder = if != if if ! call EntityManagerHolder.isSynchronizedWithTransaction() call EntityManagerHolder.isSynchronizedWithTransaction() call EntityManagerHolder.isSynchronizedWithTransaction() call EntityManagerHolder.isSynchronizedWithTransaction() call EntityManagerHolder.isSynchronizedWithTransaction() if try call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() catch call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() if decl_stmt java.lang.Object = call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() new call EntityManagerHolder.setSynchronizedWithTransaction() call EntityManagerHolder.setSynchronizedWithTransaction() call EntityManagerHolder.setSynchronizedWithTransaction() call EntityManagerHolder.setSynchronizedWithTransaction() call EntityManagerHolder.setSynchronizedWithTransaction() call EntityManagerHolder.requested() call EntityManagerHolder.requested() call EntityManagerHolder.requested() call EntityManagerHolder.requested() call EntityManagerHolder.requested() return call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() else if call EntityManagerHolder.isTransactionActive() call EntityManagerHolder.isTransactionActive() call EntityManagerHolder.isTransactionActive() call EntityManagerHolder.isTransactionActive() call EntityManagerHolder.isTransactionActive() && ! call EntityManagerHolder.isOpen() call EntityManagerHolder.isOpen() call EntityManagerHolder.isOpen() call EntityManagerHolder.isOpen() call EntityManagerHolder.isOpen() if ! return else return call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() else if ! return call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() decl_stmt EntityManager = if ! && != try = catch if == = ! : call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() = new if decl_stmt java.lang.Object = new call EntityManagerHolder.setSynchronizedWithTransaction() call EntityManagerHolder.setSynchronizedWithTransaction() call EntityManagerHolder.setSynchronizedWithTransaction() call EntityManagerHolder.setSynchronizedWithTransaction() call EntityManagerHolder.setSynchronizedWithTransaction() else new return JpaDialect EntityManagerFactoryInfo private static private static if instanceof decl_stmt org.springframework.orm.jpa.EntityManagerFactoryInfo = decl_stmt org.springframework.orm.jpa.JpaDialect = call org.springframework.orm.jpa.EntityManagerFactoryInfo.getJpaDialect() call org.springframework.orm.jpa.EntityManagerFactoryInfo.getJpaDialect() call org.springframework.orm.jpa.EntityManagerFactoryInfo.getJpaDialect() call org.springframework.orm.jpa.EntityManagerFactoryInfo.getJpaDialect() call org.springframework.orm.jpa.EntityManagerFactoryInfo.getJpaDialect() if != return call org.springframework.orm.jpa.JpaDialect.prepareTransaction(EntityManager,boolean,String) call org.springframework.orm.jpa.JpaDialect.prepareTransaction(EntityManager,boolean,String) call org.springframework.orm.jpa.JpaDialect.prepareTransaction(EntityManager,boolean,String) call org.springframework.orm.jpa.JpaDialect.prepareTransaction(EntityManager,boolean,String) call org.springframework.orm.jpa.JpaDialect.prepareTransaction(EntityManager,boolean,String) return JpaDialect EntityManagerFactoryInfo private static private static if instanceof decl_stmt org.springframework.orm.jpa.EntityManagerFactoryInfo = decl_stmt org.springframework.orm.jpa.JpaDialect = call org.springframework.orm.jpa.EntityManagerFactoryInfo.getJpaDialect() call org.springframework.orm.jpa.EntityManagerFactoryInfo.getJpaDialect() call org.springframework.orm.jpa.EntityManagerFactoryInfo.getJpaDialect() call org.springframework.orm.jpa.EntityManagerFactoryInfo.getJpaDialect() call org.springframework.orm.jpa.EntityManagerFactoryInfo.getJpaDialect() if != call JpaDialect.cleanupTransaction() call JpaDialect.cleanupTransaction() call JpaDialect.cleanupTransaction() call JpaDialect.cleanupTransaction() call JpaDialect.cleanupTransaction() int EntityManagerHolder public static public static decl_stmt org.springframework.orm.jpa.EntityManagerHolder = if != && call EntityManagerHolder.hasTimeout() call EntityManagerHolder.hasTimeout() call EntityManagerHolder.hasTimeout() call EntityManagerHolder.hasTimeout() call EntityManagerHolder.hasTimeout() decl_stmt int = int call EntityManagerHolder.getTimeToLiveInMillis() call EntityManagerHolder.getTimeToLiveInMillis() call EntityManagerHolder.getTimeToLiveInMillis() call EntityManagerHolder.getTimeToLiveInMillis() call EntityManagerHolder.getTimeToLiveInMillis() try catch public static public static if instanceof return new if instanceof return new if instanceof return new if instanceof return new if instanceof return new if instanceof return new if instanceof return new if instanceof return new if instanceof return new if instanceof return new if instanceof return new if instanceof return new return public static public static if != call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() try if catch call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() catch call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() public public return EntityManager EntityManager protected protected decl_stmt EntityManager = if instanceof decl_stmt EntityManager = if return try call EntityManager.flush() call EntityManager.flush() call EntityManager.flush() call EntityManager.flush() call EntityManager.flush() catch if != throw else throw protected protected return protected protected protected protected if ! public public return + protected protected