org.springframework.core.task java.util.concurrent.ThreadFactory import org.junit.Ignore import org.junit.Rule import org.junit.Test import org.junit.rules.ExpectedException import org.springframework.util.ConcurrencyThrottleSupport import static static org.hamcrest.CoreMatchers.* import static static org.junit.Assert.* import class org.springframework.core.task.SimpleAsyncTaskExecutorTests ExpectedException SimpleAsyncTaskExecutor public public throws decl_stmt org.springframework.core.task.SimpleAsyncTaskExecutor = new call org.springframework.core.task.SimpleAsyncTaskExecutor.setConcurrencyLimit(int) call org.springframework.core.task.SimpleAsyncTaskExecutor.setConcurrencyLimit(int) call org.springframework.core.task.SimpleAsyncTaskExecutor.setConcurrencyLimit(int) call org.springframework.core.task.SimpleAsyncTaskExecutor.setConcurrencyLimit(int) call org.springframework.core.task.SimpleAsyncTaskExecutor.setConcurrencyLimit(int) call org.springframework.core.task.SimpleAsyncTaskExecutor.isThrottleActive() call org.springframework.core.task.SimpleAsyncTaskExecutor.isThrottleActive() call org.springframework.core.task.SimpleAsyncTaskExecutor.isThrottleActive() call org.springframework.core.task.SimpleAsyncTaskExecutor.isThrottleActive() call org.springframework.core.task.SimpleAsyncTaskExecutor.isThrottleActive() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call org.springframework.core.task.SimpleAsyncTaskExecutor.execute(Runnable,long) call org.springframework.core.task.SimpleAsyncTaskExecutor.execute(Runnable,long) call org.springframework.core.task.SimpleAsyncTaskExecutor.execute(Runnable,long) call org.springframework.core.task.SimpleAsyncTaskExecutor.execute(Runnable,long) call org.springframework.core.task.SimpleAsyncTaskExecutor.execute(Runnable,long) new SimpleAsyncTaskExecutor public public throws decl_stmt org.springframework.core.task.SimpleAsyncTaskExecutor = new call org.springframework.core.task.SimpleAsyncTaskExecutor.isThrottleActive() call org.springframework.core.task.SimpleAsyncTaskExecutor.isThrottleActive() call org.springframework.core.task.SimpleAsyncTaskExecutor.isThrottleActive() call org.springframework.core.task.SimpleAsyncTaskExecutor.isThrottleActive() call org.springframework.core.task.SimpleAsyncTaskExecutor.isThrottleActive() String ThreadNameHarvester Object SimpleAsyncTaskExecutor public public throws decl_stmt java.lang.String final final = decl_stmt java.lang.Object final final = new decl_stmt org.springframework.core.task.SimpleAsyncTaskExecutor = new decl_stmt ThreadNameHarvester = new call ThreadNameHarvester.getThreadName() call ThreadNameHarvester.getThreadName() call ThreadNameHarvester.getThreadName() call ThreadNameHarvester.getThreadName() call ThreadNameHarvester.getThreadName() ThreadNameHarvester Object SimpleAsyncTaskExecutor public public throws decl_stmt java.lang.Object final final = new decl_stmt org.springframework.core.task.SimpleAsyncTaskExecutor = new new public public return new decl_stmt ThreadNameHarvester = new call ThreadNameHarvester.getThreadName() call ThreadNameHarvester.getThreadName() call ThreadNameHarvester.getThreadName() call ThreadNameHarvester.getThreadName() call ThreadNameHarvester.getThreadName() public public return new public public throws call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() new private private synchronized try catch public public public final public final synchronized try finally public public return protected protected =