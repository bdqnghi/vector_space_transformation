org.springframework.cache.interceptor java.lang.reflect.Method import java.lang.reflect.Modifier import java.util.Collection import java.util.Collections import java.util.Map import java.util.concurrent.ConcurrentHashMap import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.core.BridgeMethodResolver import org.springframework.core.MethodClassKey import org.springframework.util.ClassUtils import class org.springframework.cache.interceptor.AbstractFallbackCacheOperationSource super super implements decl Map Log decl Collection decl Collection Object decl Collection public < public < < decl_stmt java.lang.Object = decl_stmt java.util.Collection < = if != return != : else decl_stmt java.util.Collection < = if != if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + else return protected protected < return new Method decl Collection private < private < < if && ! return decl_stmt com.sun.jdi.Method = = decl_stmt java.util.Collection < = if != return = call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() if != && return if != = if != return = if != && return return protected protected return