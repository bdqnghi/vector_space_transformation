org.springframework.expression.spel java.util.GregorianCalendar import org.springframework.expression.spel.support.StandardEvaluationContext import org.springframework.expression.spel.testresources.Inventor import org.springframework.expression.spel.testresources.PlaceOfBirth import class org.springframework.expression.spel.TestScenarioCreator StandardEvaluationContext public static public static decl_stmt org.springframework.expression.spel.support.StandardEvaluationContext = new return private static private static try catch throw new private static private static Inventor GregorianCalendar private static private static decl_stmt java.util.GregorianCalendar = new call GregorianCalendar.set() call GregorianCalendar.set() call GregorianCalendar.set() call GregorianCalendar.set() call GregorianCalendar.set() decl_stmt org.springframework.expression.spel.testresources.Inventor = new call GregorianCalendar.getTime() call GregorianCalendar.getTime() call GregorianCalendar.getTime() call GregorianCalendar.getTime() call GregorianCalendar.getTime() call org.springframework.expression.spel.testresources.Inventor.setPlaceOfBirth(PlaceOfBirth) call org.springframework.expression.spel.testresources.Inventor.setPlaceOfBirth(PlaceOfBirth) call org.springframework.expression.spel.testresources.Inventor.setPlaceOfBirth(PlaceOfBirth) call org.springframework.expression.spel.testresources.Inventor.setPlaceOfBirth(PlaceOfBirth) call org.springframework.expression.spel.testresources.Inventor.setPlaceOfBirth(PlaceOfBirth) new call org.springframework.expression.spel.testresources.Inventor.setInventions(String) call org.springframework.expression.spel.testresources.Inventor.setInventions(String) call org.springframework.expression.spel.testresources.Inventor.setInventions(String) call org.springframework.expression.spel.testresources.Inventor.setInventions(String) call org.springframework.expression.spel.testresources.Inventor.setInventions(String) new public static public static if == return return public static public static return new StringBuilder public static public static decl_stmt java.lang.StringBuilder = new for = < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) - - return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() StringBuilder public static public static decl_stmt java.lang.StringBuilder = new if != for = - >= -- call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() StringBuilder public static public static decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if != for = - >= -- call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString()