org.springframework.context.annotation java.lang.annotation.Annotation import java.lang.reflect.Method import org.springframework.aop.TargetSource import org.springframework.aop.framework.ProxyFactory import org.springframework.beans.factory.NoSuchBeanDefinitionException import org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver import org.springframework.beans.factory.config.DependencyDescriptor import org.springframework.beans.factory.support.DefaultListableBeanFactory import org.springframework.core.MethodParameter import org.springframework.core.annotation.AnnotationUtils import org.springframework.util.Assert import class org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver super super extends public public return : MethodParameter Lazy Method protected protected for : decl_stmt Lazy = if != && call Lazy.value() call Lazy.value() call Lazy.value() call Lazy.value() call Lazy.value() return decl_stmt org.springframework.core.MethodParameter = if != decl_stmt com.sun.jdi.Method = call org.springframework.core.MethodParameter.getMethod() call org.springframework.core.MethodParameter.getMethod() call org.springframework.core.MethodParameter.getMethod() call org.springframework.core.MethodParameter.getMethod() call org.springframework.core.MethodParameter.getMethod() if == || == call com.sun.jdi.Method.getReturnType() call com.sun.jdi.Method.getReturnType() call com.sun.jdi.Method.getReturnType() call com.sun.jdi.Method.getReturnType() call com.sun.jdi.Method.getReturnType() decl_stmt Lazy = call org.springframework.core.MethodParameter.getAnnotatedElement() call org.springframework.core.MethodParameter.getAnnotatedElement() call org.springframework.core.MethodParameter.getAnnotatedElement() call org.springframework.core.MethodParameter.getAnnotatedElement() call org.springframework.core.MethodParameter.getAnnotatedElement() if != && call Lazy.value() call Lazy.value() call Lazy.value() call Lazy.value() call Lazy.value() return return ProxyFactory decl Class Object TargetSource DefaultListableBeanFactory protected protected final final final final instanceof decl_stmt org.springframework.beans.factory.support.DefaultListableBeanFactory final final = decl_stmt org.springframework.aop.TargetSource = new public < public < return public public return public public decl_stmt java.lang.Object = call org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DependencyDescriptor,String,Set,TypeConverter) call org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DependencyDescriptor,String,Set,TypeConverter) call org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DependencyDescriptor,String,Set,TypeConverter) call org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DependencyDescriptor,String,Set,TypeConverter) call org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DependencyDescriptor,String,Set,TypeConverter) if == throw new return public public decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.setTargetSource() call ProxyFactory.setTargetSource() call ProxyFactory.setTargetSource() call ProxyFactory.setTargetSource() call ProxyFactory.setTargetSource() decl_stmt java.lang.Class < = if call decl Class.isInterface() call decl Class.isInterface() call decl Class.isInterface() call decl Class.isInterface() call decl Class.isInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() return call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call DefaultListableBeanFactory.getBeanClassLoader() call DefaultListableBeanFactory.getBeanClassLoader() call DefaultListableBeanFactory.getBeanClassLoader() call DefaultListableBeanFactory.getBeanClassLoader() call DefaultListableBeanFactory.getBeanClassLoader() public < public < return public public return Object public public decl_stmt java.lang.Object = if == throw new return public public