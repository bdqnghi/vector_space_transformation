org.springframework.messaging.simp.config java.util.ArrayList import java.util.HashMap import java.util.List import java.util.Map import org.springframework.beans.BeanUtils import org.springframework.beans.factory.BeanInitializationException import org.springframework.context.ApplicationContext import org.springframework.context.ApplicationContextAware import org.springframework.context.annotation.Bean import org.springframework.messaging.Message import org.springframework.messaging.MessageHandler import org.springframework.messaging.converter.ByteArrayMessageConverter import org.springframework.messaging.converter.CompositeMessageConverter import org.springframework.messaging.converter.DefaultContentTypeResolver import org.springframework.messaging.converter.MappingJackson2MessageConverter import org.springframework.messaging.converter.MessageConverter import org.springframework.messaging.converter.StringMessageConverter import org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver import org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler import org.springframework.messaging.simp.SimpMessagingTemplate import org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler import org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler import org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler import org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler import org.springframework.messaging.simp.user.DefaultUserDestinationResolver import org.springframework.messaging.simp.user.MultiServerUserRegistry import org.springframework.messaging.simp.user.SimpUserRegistry import org.springframework.messaging.simp.user.UserDestinationMessageHandler import org.springframework.messaging.simp.user.UserDestinationResolver import org.springframework.messaging.simp.user.UserRegistryMessageHandler import org.springframework.messaging.support.AbstractSubscribableChannel import org.springframework.messaging.support.ExecutorSubscribableChannel import org.springframework.messaging.support.ImmutableMessageChannelInterceptor import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.MimeTypeUtils import org.springframework.util.PathMatcher import org.springframework.validation.Errors import org.springframework.validation.Validator import class org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration super super implements ApplicationContext ChannelRegistration String ChannelRegistration MessageBrokerRegistry boolean public public = public public return ChannelRegistration ExecutorSubscribableChannel public public decl_stmt org.springframework.messaging.support.ExecutorSubscribableChannel = new decl_stmt org.springframework.messaging.simp.config.ChannelRegistration = call org.springframework.messaging.support.ExecutorSubscribableChannel.setInterceptors(List) call org.springframework.messaging.support.ExecutorSubscribableChannel.setInterceptors(List) call org.springframework.messaging.support.ExecutorSubscribableChannel.setInterceptors(List) call org.springframework.messaging.support.ExecutorSubscribableChannel.setInterceptors(List) call org.springframework.messaging.support.ExecutorSubscribableChannel.setInterceptors(List) call ChannelRegistration.getInterceptors() call ChannelRegistration.getInterceptors() call ChannelRegistration.getInterceptors() call ChannelRegistration.getInterceptors() call ChannelRegistration.getInterceptors() return TaskExecutorRegistration ThreadPoolTaskExecutor public public decl_stmt org.springframework.messaging.simp.config.TaskExecutorRegistration = decl_stmt org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor = call org.springframework.messaging.simp.config.TaskExecutorRegistration.getTaskExecutor() call org.springframework.messaging.simp.config.TaskExecutorRegistration.getTaskExecutor() call org.springframework.messaging.simp.config.TaskExecutorRegistration.getTaskExecutor() call org.springframework.messaging.simp.config.TaskExecutorRegistration.getTaskExecutor() call org.springframework.messaging.simp.config.TaskExecutorRegistration.getTaskExecutor() call ThreadPoolTaskExecutor.setThreadNamePrefix() call ThreadPoolTaskExecutor.setThreadNamePrefix() call ThreadPoolTaskExecutor.setThreadNamePrefix() call ThreadPoolTaskExecutor.setThreadNamePrefix() call ThreadPoolTaskExecutor.setThreadNamePrefix() return ChannelRegistration protected final protected final if == decl_stmt org.springframework.messaging.simp.config.ChannelRegistration = new call org.springframework.messaging.simp.config.ChannelRegistration.setInterceptors(ChannelInterceptor) call org.springframework.messaging.simp.config.ChannelRegistration.setInterceptors(ChannelInterceptor) call org.springframework.messaging.simp.config.ChannelRegistration.setInterceptors(ChannelInterceptor) call org.springframework.messaging.simp.config.ChannelRegistration.setInterceptors(ChannelInterceptor) call org.springframework.messaging.simp.config.ChannelRegistration.setInterceptors(ChannelInterceptor) new = return protected protected ChannelRegistration ExecutorSubscribableChannel public public decl_stmt org.springframework.messaging.support.ExecutorSubscribableChannel = new decl_stmt org.springframework.messaging.simp.config.ChannelRegistration = call org.springframework.messaging.support.ExecutorSubscribableChannel.setInterceptors(List) call org.springframework.messaging.support.ExecutorSubscribableChannel.setInterceptors(List) call org.springframework.messaging.support.ExecutorSubscribableChannel.setInterceptors(List) call org.springframework.messaging.support.ExecutorSubscribableChannel.setInterceptors(List) call org.springframework.messaging.support.ExecutorSubscribableChannel.setInterceptors(List) call ChannelRegistration.getInterceptors() call ChannelRegistration.getInterceptors() call ChannelRegistration.getInterceptors() call ChannelRegistration.getInterceptors() call ChannelRegistration.getInterceptors() return TaskExecutorRegistration ThreadPoolTaskExecutor public public decl_stmt org.springframework.messaging.simp.config.TaskExecutorRegistration = decl_stmt org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor = call org.springframework.messaging.simp.config.TaskExecutorRegistration.getTaskExecutor() call org.springframework.messaging.simp.config.TaskExecutorRegistration.getTaskExecutor() call org.springframework.messaging.simp.config.TaskExecutorRegistration.getTaskExecutor() call org.springframework.messaging.simp.config.TaskExecutorRegistration.getTaskExecutor() call org.springframework.messaging.simp.config.TaskExecutorRegistration.getTaskExecutor() call ThreadPoolTaskExecutor.setThreadNamePrefix() call ThreadPoolTaskExecutor.setThreadNamePrefix() call ThreadPoolTaskExecutor.setThreadNamePrefix() call ThreadPoolTaskExecutor.setThreadNamePrefix() call ThreadPoolTaskExecutor.setThreadNamePrefix() return ChannelRegistration protected final protected final if == decl_stmt org.springframework.messaging.simp.config.ChannelRegistration = new call org.springframework.messaging.simp.config.ChannelRegistration.setInterceptors(ChannelInterceptor) call org.springframework.messaging.simp.config.ChannelRegistration.setInterceptors(ChannelInterceptor) call org.springframework.messaging.simp.config.ChannelRegistration.setInterceptors(ChannelInterceptor) call org.springframework.messaging.simp.config.ChannelRegistration.setInterceptors(ChannelInterceptor) call org.springframework.messaging.simp.config.ChannelRegistration.setInterceptors(ChannelInterceptor) new = return protected protected ChannelRegistration ExecutorSubscribableChannel public public decl_stmt org.springframework.messaging.simp.config.ChannelRegistration = decl_stmt org.springframework.messaging.support.ExecutorSubscribableChannel = call org.springframework.messaging.simp.config.ChannelRegistration.hasTaskExecutor() call org.springframework.messaging.simp.config.ChannelRegistration.hasTaskExecutor() call org.springframework.messaging.simp.config.ChannelRegistration.hasTaskExecutor() call org.springframework.messaging.simp.config.ChannelRegistration.hasTaskExecutor() call org.springframework.messaging.simp.config.ChannelRegistration.hasTaskExecutor() new : new call org.springframework.messaging.simp.config.ChannelRegistration.setInterceptors(ChannelInterceptor) call org.springframework.messaging.simp.config.ChannelRegistration.setInterceptors(ChannelInterceptor) call org.springframework.messaging.simp.config.ChannelRegistration.setInterceptors(ChannelInterceptor) call org.springframework.messaging.simp.config.ChannelRegistration.setInterceptors(ChannelInterceptor) call org.springframework.messaging.simp.config.ChannelRegistration.setInterceptors(ChannelInterceptor) new call org.springframework.messaging.support.ExecutorSubscribableChannel.setInterceptors(List) call org.springframework.messaging.support.ExecutorSubscribableChannel.setInterceptors(List) call org.springframework.messaging.support.ExecutorSubscribableChannel.setInterceptors(List) call org.springframework.messaging.support.ExecutorSubscribableChannel.setInterceptors(List) call org.springframework.messaging.support.ExecutorSubscribableChannel.setInterceptors(List) call ChannelRegistration.getInterceptors() call ChannelRegistration.getInterceptors() call ChannelRegistration.getInterceptors() call ChannelRegistration.getInterceptors() call ChannelRegistration.getInterceptors() return ChannelRegistration ThreadPoolTaskExecutor public public decl_stmt org.springframework.messaging.simp.config.ChannelRegistration = decl_stmt org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor if call org.springframework.messaging.simp.config.ChannelRegistration.hasTaskExecutor() call org.springframework.messaging.simp.config.ChannelRegistration.hasTaskExecutor() call org.springframework.messaging.simp.config.ChannelRegistration.hasTaskExecutor() call org.springframework.messaging.simp.config.ChannelRegistration.hasTaskExecutor() call org.springframework.messaging.simp.config.ChannelRegistration.hasTaskExecutor() = call org.springframework.messaging.simp.config.ChannelRegistration.taskExecutor(ThreadPoolTaskExecutor) call org.springframework.messaging.simp.config.ChannelRegistration.taskExecutor(ThreadPoolTaskExecutor) call org.springframework.messaging.simp.config.ChannelRegistration.taskExecutor(ThreadPoolTaskExecutor) call org.springframework.messaging.simp.config.ChannelRegistration.taskExecutor(ThreadPoolTaskExecutor) call org.springframework.messaging.simp.config.ChannelRegistration.taskExecutor(ThreadPoolTaskExecutor) else = new call ThreadPoolTaskExecutor.setCorePoolSize() call ThreadPoolTaskExecutor.setCorePoolSize() call ThreadPoolTaskExecutor.setCorePoolSize() call ThreadPoolTaskExecutor.setCorePoolSize() call ThreadPoolTaskExecutor.setCorePoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.setMaxPoolSize(int) call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.setMaxPoolSize(int) call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.setMaxPoolSize(int) call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.setMaxPoolSize(int) call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.setMaxPoolSize(int) call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.setQueueCapacity(int) call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.setQueueCapacity(int) call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.setQueueCapacity(int) call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.setQueueCapacity(int) call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.setQueueCapacity(int) call ThreadPoolTaskExecutor.setThreadNamePrefix() call ThreadPoolTaskExecutor.setThreadNamePrefix() call ThreadPoolTaskExecutor.setThreadNamePrefix() call ThreadPoolTaskExecutor.setThreadNamePrefix() call ThreadPoolTaskExecutor.setThreadNamePrefix() return MessageBrokerRegistry protected final protected final if == decl_stmt org.springframework.messaging.simp.config.MessageBrokerRegistry = new = return protected protected public final public final return decl List SimpAnnotationMethodMessageHandler decl List PathMatcher public public decl_stmt org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler = call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setDestinationPrefixes(Collection) call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setDestinationPrefixes(Collection) call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setDestinationPrefixes(Collection) call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setDestinationPrefixes(Collection) call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setDestinationPrefixes(Collection) call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setMessageConverter(MessageConverter) call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setMessageConverter(MessageConverter) call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setMessageConverter(MessageConverter) call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setMessageConverter(MessageConverter) call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setMessageConverter(MessageConverter) call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setValidator(Validator) call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setValidator(Validator) call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setValidator(Validator) call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setValidator(Validator) call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setValidator(Validator) decl_stmt java.util.List < = new < call SimpAnnotationMethodMessageHandler.setCustomArgumentResolvers() call SimpAnnotationMethodMessageHandler.setCustomArgumentResolvers() call SimpAnnotationMethodMessageHandler.setCustomArgumentResolvers() call SimpAnnotationMethodMessageHandler.setCustomArgumentResolvers() call SimpAnnotationMethodMessageHandler.setCustomArgumentResolvers() decl_stmt java.util.List < = new < call SimpAnnotationMethodMessageHandler.setCustomReturnValueHandlers() call SimpAnnotationMethodMessageHandler.setCustomReturnValueHandlers() call SimpAnnotationMethodMessageHandler.setCustomReturnValueHandlers() call SimpAnnotationMethodMessageHandler.setCustomReturnValueHandlers() call SimpAnnotationMethodMessageHandler.setCustomReturnValueHandlers() decl_stmt org.springframework.util.PathMatcher = if != call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setPathMatcher(PathMatcher) call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setPathMatcher(PathMatcher) call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setPathMatcher(PathMatcher) call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setPathMatcher(PathMatcher) call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setPathMatcher(PathMatcher) return protected protected return new protected protected < protected protected < SimpleBrokerMessageHandler public public decl_stmt org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler = return != : new String StompBrokerRelayMessageHandler decl Map public public decl_stmt org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler = if == return new decl_stmt java.util.Map < = new < decl_stmt java.lang.String = if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() = if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.setSystemSubscriptions(Map) call org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.setSystemSubscriptions(Map) call org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.setSystemSubscriptions(Map) call org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.setSystemSubscriptions(Map) call org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.setSystemSubscriptions(Map) return String UserDestinationMessageHandler public public decl_stmt org.springframework.messaging.simp.user.UserDestinationMessageHandler = new decl_stmt java.lang.String = call UserDestinationMessageHandler.setBroadcastDestination() call UserDestinationMessageHandler.setBroadcastDestination() call UserDestinationMessageHandler.setBroadcastDestination() call UserDestinationMessageHandler.setBroadcastDestination() call UserDestinationMessageHandler.setBroadcastDestination() return SimpUserRegistry public public if == return new decl_stmt org.springframework.messaging.simp.user.SimpUserRegistry = return new ThreadPoolTaskScheduler = public = public decl_stmt org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler = new call ThreadPoolTaskScheduler.setThreadNamePrefix() call ThreadPoolTaskScheduler.setThreadNamePrefix() call ThreadPoolTaskScheduler.setThreadNamePrefix() call ThreadPoolTaskScheduler.setThreadNamePrefix() call ThreadPoolTaskScheduler.setThreadNamePrefix() call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setPoolSize(int) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setPoolSize(int) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setPoolSize(int) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setPoolSize(int) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setPoolSize(int) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setRemoveOnCancelPolicy(boolean) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setRemoveOnCancelPolicy(boolean) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setRemoveOnCancelPolicy(boolean) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setRemoveOnCancelPolicy(boolean) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setRemoveOnCancelPolicy(boolean) return String SimpMessagingTemplate public public decl_stmt org.springframework.messaging.simp.SimpMessagingTemplate = new decl_stmt java.lang.String = if != call org.springframework.messaging.simp.SimpMessagingTemplate.setUserDestinationPrefix(String) call org.springframework.messaging.simp.SimpMessagingTemplate.setUserDestinationPrefix(String) call org.springframework.messaging.simp.SimpMessagingTemplate.setUserDestinationPrefix(String) call org.springframework.messaging.simp.SimpMessagingTemplate.setUserDestinationPrefix(String) call org.springframework.messaging.simp.SimpMessagingTemplate.setUserDestinationPrefix(String) call SimpMessagingTemplate.setMessageConverter() call SimpMessagingTemplate.setMessageConverter() call SimpMessagingTemplate.setMessageConverter() call SimpMessagingTemplate.setMessageConverter() call SimpMessagingTemplate.setMessageConverter() return boolean decl List public public decl_stmt java.util.List < = new < decl_stmt boolean = if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return new MappingJackson2MessageConverter DefaultContentTypeResolver protected protected decl_stmt org.springframework.messaging.converter.DefaultContentTypeResolver = new call org.springframework.messaging.converter.DefaultContentTypeResolver.setDefaultMimeType(MimeType) call org.springframework.messaging.converter.DefaultContentTypeResolver.setDefaultMimeType(MimeType) call org.springframework.messaging.converter.DefaultContentTypeResolver.setDefaultMimeType(MimeType) call org.springframework.messaging.converter.DefaultContentTypeResolver.setDefaultMimeType(MimeType) call org.springframework.messaging.converter.DefaultContentTypeResolver.setDefaultMimeType(MimeType) decl_stmt org.springframework.jms.support.converter.MappingJackson2MessageConverter = new call MappingJackson2MessageConverter.setContentTypeResolver() call MappingJackson2MessageConverter.setContentTypeResolver() call MappingJackson2MessageConverter.setContentTypeResolver() call MappingJackson2MessageConverter.setContentTypeResolver() call MappingJackson2MessageConverter.setContentTypeResolver() return protected protected < return String DefaultUserDestinationResolver public public decl_stmt org.springframework.messaging.simp.user.DefaultUserDestinationResolver = new decl_stmt java.lang.String = if != call org.springframework.messaging.simp.user.DefaultUserDestinationResolver.setUserDestinationPrefix(String) call org.springframework.messaging.simp.user.DefaultUserDestinationResolver.setUserDestinationPrefix(String) call org.springframework.messaging.simp.user.DefaultUserDestinationResolver.setUserDestinationPrefix(String) call org.springframework.messaging.simp.user.DefaultUserDestinationResolver.setUserDestinationPrefix(String) call org.springframework.messaging.simp.user.DefaultUserDestinationResolver.setUserDestinationPrefix(String) call org.springframework.messaging.simp.user.DefaultUserDestinationResolver.setPathMatcher(PathMatcher) call org.springframework.messaging.simp.user.DefaultUserDestinationResolver.setPathMatcher(PathMatcher) call org.springframework.messaging.simp.user.DefaultUserDestinationResolver.setPathMatcher(PathMatcher) call org.springframework.messaging.simp.user.DefaultUserDestinationResolver.setPathMatcher(PathMatcher) call org.springframework.messaging.simp.user.DefaultUserDestinationResolver.setPathMatcher(PathMatcher) return public public return != new : protected protected return String Validator decl Class protected protected decl_stmt org.springframework.validation.Validator = if == if = else if decl_stmt java.lang.Class < try decl_stmt java.lang.String = = catch throw new = else = new public public < return public public return public public < return public public public public return public public < public public public public public public < protected protected <