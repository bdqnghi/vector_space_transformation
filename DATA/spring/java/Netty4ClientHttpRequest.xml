org.springframework.http.client java.io.IOException import java.io.OutputStream import java.net.URI import java.util.List import java.util.Map import java.util.concurrent.ExecutionException import io.netty.bootstrap.Bootstrap import io.netty.buffer.ByteBufOutputStream import io.netty.buffer.Unpooled import io.netty.channel.Channel import io.netty.channel.ChannelFuture import io.netty.channel.ChannelFutureListener import io.netty.channel.ChannelHandlerContext import io.netty.channel.SimpleChannelInboundHandler import io.netty.handler.codec.http.DefaultFullHttpRequest import io.netty.handler.codec.http.FullHttpRequest import io.netty.handler.codec.http.FullHttpResponse import io.netty.handler.codec.http.HttpVersion import org.springframework.http.HttpHeaders import org.springframework.http.HttpMethod import org.springframework.util.concurrent.ListenableFuture import org.springframework.util.concurrent.SettableListenableFuture import class org.springframework.http.client.Netty4ClientHttpRequest super super extends super implements ByteBufOutputStream Bootstrap URI HttpMethod public public return public public return protected protected throws return ChannelFutureListener FullHttpRequest Channel decl SettableListenableFuture protected < protected < final final throws decl_stmt org.springframework.util.concurrent.SettableListenableFuture final final final < = new < decl_stmt ChannelFutureListener = new public public throws if decl_stmt java.nio.channels.Channel = call Channel.pipeline() call Channel.pipeline() call Channel.pipeline() call Channel.pipeline() call Channel.pipeline() new decl_stmt FullHttpRequest = call Channel.writeAndFlush() call Channel.writeAndFlush() call Channel.writeAndFlush() call Channel.writeAndFlush() call Channel.writeAndFlush() else call decl SettableListenableFuture.setException() call decl SettableListenableFuture.setException() call decl SettableListenableFuture.setException() call decl SettableListenableFuture.setException() call decl SettableListenableFuture.setException() return FullHttpRequest Channel public public throws if decl_stmt java.nio.channels.Channel = call Channel.pipeline() call Channel.pipeline() call Channel.pipeline() call Channel.pipeline() call Channel.pipeline() new decl_stmt FullHttpRequest = call Channel.writeAndFlush() call Channel.writeAndFlush() call Channel.writeAndFlush() call Channel.writeAndFlush() call Channel.writeAndFlush() else public public throws try return catch throw new catch if instanceof throw else throw new int private static private static decl_stmt int = call java.net.URI.getPort() call java.net.URI.getPort() call java.net.URI.getPort() call java.net.URI.getPort() call java.net.URI.getPort() if == - if call java.net.URI.getScheme() call java.net.URI.getScheme() call java.net.URI.getScheme() call java.net.URI.getScheme() call java.net.URI.getScheme() = else if call java.net.URI.getScheme() call java.net.URI.getScheme() call java.net.URI.getScheme() call java.net.URI.getScheme() call java.net.URI.getScheme() = return decl netty decl io private private decl_stmt HttpMethod = decl_stmt FullHttpRequest = new call decl netty.headers() call decl netty.headers() call decl netty.headers() call decl netty.headers() call decl netty.headers() call decl netty.headers() call decl netty.headers() call decl netty.headers() call decl netty.headers() call decl netty.headers() for < < : call decl netty.headers() call decl netty.headers() call decl netty.headers() call decl netty.headers() call decl netty.headers() return protected protected throws new public public throws