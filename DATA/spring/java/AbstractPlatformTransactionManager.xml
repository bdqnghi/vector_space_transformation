org.springframework.transaction.support java.io.IOException import java.io.ObjectInputStream import java.io.Serializable import java.util.List import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.core.Constants import org.springframework.transaction.IllegalTransactionStateException import org.springframework.transaction.InvalidTimeoutException import org.springframework.transaction.NestedTransactionNotSupportedException import org.springframework.transaction.PlatformTransactionManager import org.springframework.transaction.TransactionDefinition import org.springframework.transaction.TransactionException import org.springframework.transaction.TransactionStatus import org.springframework.transaction.TransactionSuspensionNotSupportedException import org.springframework.transaction.UnexpectedRollbackException import class annotation org.springframework.transaction.support.AbstractPlatformTransactionManager super super implements int boolean boolean int int boolean boolean int int Log boolean Constants public final public final call org.springframework.core.Constants.asNumber(String) call org.springframework.core.Constants.asNumber(String) call org.springframework.core.Constants.asNumber(String) call org.springframework.core.Constants.asNumber(String) call org.springframework.core.Constants.asNumber(String) public final public final = public final public final return public final public final if < throw new = public final public final return public final public final = public final public final return public final public final = public final public final return public final public final = public final public final return public final public final = public final public final return public final public final = public final public final return boolean boolean Object SuspendedResourcesHolder DefaultTransactionStatus public final public final throws decl_stmt java.lang.Object = decl_stmt boolean = call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() if == = new if return if < throw new if == throw new else if == || == || == decl_stmt SuspendedResourcesHolder = if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + try decl_stmt boolean = != decl_stmt org.springframework.transaction.support.DefaultTransactionStatus = return catch throw catch throw else if != && call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() + + decl_stmt boolean = == return DefaultTransactionStatus boolean Constants SuspendedResourcesHolder Integer private private throws if == throw new if == if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() decl_stmt java.lang.Object = decl_stmt boolean = == return if == if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + decl_stmt SuspendedResourcesHolder = try decl_stmt boolean = != decl_stmt org.springframework.transaction.support.DefaultTransactionStatus = return catch throw catch throw if == if ! throw new + if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + if decl_stmt org.springframework.transaction.support.DefaultTransactionStatus = call DefaultTransactionStatus.createAndHoldSavepoint() call DefaultTransactionStatus.createAndHoldSavepoint() call DefaultTransactionStatus.createAndHoldSavepoint() call DefaultTransactionStatus.createAndHoldSavepoint() call DefaultTransactionStatus.createAndHoldSavepoint() return else decl_stmt boolean = != decl_stmt org.springframework.transaction.support.DefaultTransactionStatus = return if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() if if != decl_stmt java.lang.Integer = if == || != decl_stmt org.springframework.core.Constants = throw new + + + != call org.springframework.core.Constants.toCode(Object,String) call org.springframework.core.Constants.toCode(Object,String) call org.springframework.core.Constants.toCode(Object,String) call org.springframework.core.Constants.toCode(Object,String) call org.springframework.core.Constants.toCode(Object,String) : if ! if throw new + + decl_stmt boolean = != return DefaultTransactionStatus protected final protected final decl_stmt org.springframework.transaction.support.DefaultTransactionStatus = return boolean protected protected decl_stmt boolean = && ! return new protected protected if != : protected protected if != return return boolean String decl List Integer boolean Object protected final protected final throws if decl_stmt java.util.List < = try decl_stmt java.lang.Object = if != = decl_stmt java.lang.String = decl_stmt boolean = decl_stmt java.lang.Integer = decl_stmt boolean = return new catch throw catch throw else if != decl_stmt java.lang.Object = return new else return decl List Object protected final protected final throws if != decl_stmt java.lang.Object = if != decl_stmt java.util.List < = if != String private private decl_stmt java.lang.String = try catch call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() throw catch call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() throw decl List private < private < decl_stmt java.util.List < = for : return private private < for : DefaultTransactionStatus public final public final throws if throw new decl_stmt org.springframework.transaction.support.DefaultTransactionStatus = if call DefaultTransactionStatus.isLocalRollbackOnly() call DefaultTransactionStatus.isLocalRollbackOnly() call DefaultTransactionStatus.isLocalRollbackOnly() call DefaultTransactionStatus.isLocalRollbackOnly() call DefaultTransactionStatus.isLocalRollbackOnly() if call org.springframework.transaction.support.DefaultTransactionStatus.isDebug() call org.springframework.transaction.support.DefaultTransactionStatus.isDebug() call org.springframework.transaction.support.DefaultTransactionStatus.isDebug() call org.springframework.transaction.support.DefaultTransactionStatus.isDebug() call org.springframework.transaction.support.DefaultTransactionStatus.isDebug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() return if ! && call org.springframework.transaction.support.DefaultTransactionStatus.isGlobalRollbackOnly() call org.springframework.transaction.support.DefaultTransactionStatus.isGlobalRollbackOnly() call org.springframework.transaction.support.DefaultTransactionStatus.isGlobalRollbackOnly() call org.springframework.transaction.support.DefaultTransactionStatus.isGlobalRollbackOnly() call org.springframework.transaction.support.DefaultTransactionStatus.isGlobalRollbackOnly() if call org.springframework.transaction.support.DefaultTransactionStatus.isDebug() call org.springframework.transaction.support.DefaultTransactionStatus.isDebug() call org.springframework.transaction.support.DefaultTransactionStatus.isDebug() call org.springframework.transaction.support.DefaultTransactionStatus.isDebug() call org.springframework.transaction.support.DefaultTransactionStatus.isDebug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() if || throw new return boolean boolean private private throws try decl_stmt boolean = try = decl_stmt boolean = if || = if if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() else if if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() if throw new catch throw catch if else throw catch if ! throw catch if ! throw try finally finally DefaultTransactionStatus public final public final throws if throw new decl_stmt org.springframework.transaction.support.DefaultTransactionStatus = private private try try if if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() else if if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() else if if || if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() else if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() else call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() catch throw catch throw finally private private throws try if if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() else if && if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() catch call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() throw catch call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() throw protected final protected final if if call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() protected final protected final if if call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() private private if if call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() decl List private private if decl_stmt java.util.List < = if ! || if call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() else if ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() protected final protected final < private private if if if != if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() protected protected throws return protected protected return protected protected throws throw new + + protected protected throws throw new + + protected protected return protected protected protected protected throws throw new + protected protected < throws call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + protected protected private private throws =