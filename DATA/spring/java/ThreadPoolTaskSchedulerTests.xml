org.springframework.scheduling.concurrent java.util.Date import java.util.concurrent.Callable import java.util.concurrent.CountDownLatch import java.util.concurrent.ExecutionException import java.util.concurrent.Future import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicInteger import org.junit.After import org.junit.Before import org.junit.Test import org.springframework.scheduling.Trigger import org.springframework.scheduling.TriggerContext import org.springframework.util.ErrorHandler import static static org.junit.Assert.* import class org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests ThreadPoolTaskScheduler String public public call ThreadPoolTaskScheduler.setThreadNamePrefix() call ThreadPoolTaskScheduler.setThreadNamePrefix() call ThreadPoolTaskScheduler.setThreadNamePrefix() call ThreadPoolTaskScheduler.setThreadNamePrefix() call ThreadPoolTaskScheduler.setThreadNamePrefix() call ThreadPoolTaskScheduler.afterPropertiesSet() call ThreadPoolTaskScheduler.afterPropertiesSet() call ThreadPoolTaskScheduler.afterPropertiesSet() call ThreadPoolTaskScheduler.afterPropertiesSet() call ThreadPoolTaskScheduler.afterPropertiesSet() public public call ThreadPoolTaskScheduler.destroy() call ThreadPoolTaskScheduler.destroy() call ThreadPoolTaskScheduler.destroy() call ThreadPoolTaskScheduler.destroy() call ThreadPoolTaskScheduler.destroy() TestTask public public decl_stmt TestTask = new call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.execute(Runnable,long) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.execute(Runnable,long) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.execute(Runnable,long) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.execute(Runnable,long) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.execute(Runnable,long) TestTask public public decl_stmt TestTask = new call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.execute(Runnable,long) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.execute(Runnable,long) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.execute(Runnable,long) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.execute(Runnable,long) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.execute(Runnable,long) TestTask TestErrorHandler public public decl_stmt TestTask = new decl_stmt TestErrorHandler = new call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setErrorHandler(ErrorHandler) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setErrorHandler(ErrorHandler) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setErrorHandler(ErrorHandler) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setErrorHandler(ErrorHandler) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setErrorHandler(ErrorHandler) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.execute(Runnable,long) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.execute(Runnable,long) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.execute(Runnable,long) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.execute(Runnable,long) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.execute(Runnable,long) decl Future TestTask Object public public throws decl_stmt TestTask = new decl_stmt java.util.concurrent.Future < = call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) decl_stmt java.lang.Object = call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() decl Future TestTask = public = public throws decl_stmt TestTask = new decl_stmt java.util.concurrent.Future < = call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) try call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() catch call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() throw decl Future TestTask Object TestErrorHandler public public throws decl_stmt TestTask = new decl_stmt TestErrorHandler = new call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setErrorHandler(ErrorHandler) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setErrorHandler(ErrorHandler) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setErrorHandler(ErrorHandler) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setErrorHandler(ErrorHandler) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setErrorHandler(ErrorHandler) decl_stmt java.util.concurrent.Future < = call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) decl_stmt java.lang.Object = call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() decl Future TestCallable String public public throws decl_stmt TestCallable = new decl_stmt java.util.concurrent.Future < = call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) decl_stmt java.lang.String = call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() decl Future TestCallable = public = public throws decl_stmt TestCallable = new decl_stmt java.util.concurrent.Future < = call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() decl Future TestCallable Object TestErrorHandler public public throws decl_stmt TestCallable = new decl_stmt TestErrorHandler = new call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setErrorHandler(ErrorHandler) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setErrorHandler(ErrorHandler) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setErrorHandler(ErrorHandler) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setErrorHandler(ErrorHandler) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setErrorHandler(ErrorHandler) decl_stmt java.util.concurrent.Future < = call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(Callable) decl_stmt java.lang.Object = call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() decl Future TestTask Object public public throws decl_stmt TestTask = new decl_stmt java.util.concurrent.Future < = call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.schedule(Runnable,Trigger) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.schedule(Runnable,Trigger) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.schedule(Runnable,Trigger) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.schedule(Runnable,Trigger) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.schedule(Runnable,Trigger) new decl_stmt java.lang.Object = call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() decl Future TestTask = public = public throws decl_stmt TestTask = new decl_stmt java.util.concurrent.Future < = call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.schedule(Runnable,Trigger) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.schedule(Runnable,Trigger) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.schedule(Runnable,Trigger) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.schedule(Runnable,Trigger) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.schedule(Runnable,Trigger) new try call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() catch call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() throw decl Future TestTask Object TestErrorHandler public public throws decl_stmt TestTask = new decl_stmt TestErrorHandler = new call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setErrorHandler(ErrorHandler) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setErrorHandler(ErrorHandler) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setErrorHandler(ErrorHandler) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setErrorHandler(ErrorHandler) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setErrorHandler(ErrorHandler) decl_stmt java.util.concurrent.Future < = call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.schedule(Runnable,Trigger) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.schedule(Runnable,Trigger) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.schedule(Runnable,Trigger) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.schedule(Runnable,Trigger) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.schedule(Runnable,Trigger) new decl_stmt java.lang.Object = call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() decl Future TestTask Object public public throws decl_stmt TestTask = new decl_stmt java.util.concurrent.Future < = call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.schedule(Runnable,Trigger) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.schedule(Runnable,Trigger) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.schedule(Runnable,Trigger) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.schedule(Runnable,Trigger) call org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.schedule(Runnable,Trigger) new decl_stmt java.lang.Object = call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() public public throws for = < ++ private private call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() private private private private private private try catch throw new public public = if > throw new public public throws if > throw new return public public = public public if > return return new