org.springframework.jms.connection java.lang.reflect.InvocationHandler import java.lang.reflect.InvocationTargetException import java.lang.reflect.Method import java.lang.reflect.Proxy import java.util.ArrayList import java.util.HashMap import java.util.Iterator import java.util.LinkedList import java.util.List import java.util.Map import javax.jms.Connection import javax.jms.ConnectionFactory import javax.jms.Destination import javax.jms.JMSException import javax.jms.MessageConsumer import javax.jms.MessageProducer import javax.jms.QueueSession import javax.jms.Session import javax.jms.TemporaryQueue import javax.jms.TemporaryTopic import javax.jms.Topic import javax.jms.TopicSession import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.ObjectUtils import org.springframework.util.ReflectionUtils import class org.springframework.jms.connection.CachingConnectionFactory super super extends decl Map boolean Method boolean Method int boolean public public >= = public public return public public = public public return public public = public public return public public = synchronized for < : synchronized for : try catch = Session Session decl LinkedList protected protected throws decl_stmt java.util.LinkedList < synchronized = if == = new < decl_stmt sun.security.pkcs11.Session = synchronized if ! call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() = call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() if != if + + + instanceof : else decl_stmt sun.security.pkcs11.Session = if + + + = return decl List protected protected < decl_stmt java.util.List < < = new < < call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if instanceof call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if instanceof call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() new Destination String public public throws decl_stmt java.lang.String = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return == else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return + else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if synchronized if < try return catch return else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) = else if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) = if && call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return else if if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) decl_stmt javax.print.attribute.standard.Destination = if != && ! instanceof || instanceof return > : > && else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) decl_stmt javax.print.attribute.standard.Destination = if != return > : > && else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) decl_stmt javax.print.attribute.standard.Destination = if != return > : else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) decl_stmt javax.print.attribute.standard.Destination = if != return > : try return catch throw DestinationCacheKey MessageProducer private private throws decl_stmt DestinationCacheKey = != new : decl_stmt MessageProducer = if != if + + + else = if + + + return new ConsumerCacheKey MessageConsumer Method private private throws decl_stmt ConsumerCacheKey = new decl_stmt MessageConsumer = if != if + + + else if instanceof if == decl_stmt com.sun.jdi.Method = : try = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) catch if instanceof throw catch throw new + else = : else = if + + + return new decl Map boolean private private throws if && = for < < = decl_stmt java.util.Map < = if call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() != call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() decl_stmt boolean = synchronized if ! = if && + private private throws if + try for : for : finally private private if == = return protected protected return == && || public public return == || public public return public public return public public return ConsumerCacheKey public public if == return decl_stmt ConsumerCacheKey = return && && && && == public public return + + + + + + + + +