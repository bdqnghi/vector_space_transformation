org.springframework.test.web.client.match java.io.IOException import java.util.Map import javax.xml.xpath.XPathExpressionException import org.hamcrest.Matcher import org.w3c.dom.Node import org.springframework.http.client.ClientHttpRequest import org.springframework.mock.http.client.MockClientHttpRequest import org.springframework.test.util.XpathExpectationsHelper import org.springframework.test.web.client.RequestMatcher import class org.springframework.test.web.client.match.XpathRequestMatchers XpathExpectationsHelper String public < public < final final final < super super return new protected protected throws call org.springframework.test.util.XpathExpectationsHelper.assertNode(byte,String,Matcher) call org.springframework.test.util.XpathExpectationsHelper.assertNode(byte,String,Matcher) call org.springframework.test.util.XpathExpectationsHelper.assertNode(byte,String,Matcher) call org.springframework.test.util.XpathExpectationsHelper.assertNode(byte,String,Matcher) call org.springframework.test.util.XpathExpectationsHelper.assertNode(byte,String,Matcher) protected protected throws call org.springframework.test.util.XpathExpectationsHelper.assertNode(byte,String,Matcher) call org.springframework.test.util.XpathExpectationsHelper.assertNode(byte,String,Matcher) call org.springframework.test.util.XpathExpectationsHelper.assertNode(byte,String,Matcher) call org.springframework.test.util.XpathExpectationsHelper.assertNode(byte,String,Matcher) call org.springframework.test.util.XpathExpectationsHelper.assertNode(byte,String,Matcher) public < public < return new protected protected throws call org.springframework.test.util.XpathExpectationsHelper.exists(byte,String) call org.springframework.test.util.XpathExpectationsHelper.exists(byte,String) call org.springframework.test.util.XpathExpectationsHelper.exists(byte,String) call org.springframework.test.util.XpathExpectationsHelper.exists(byte,String) call org.springframework.test.util.XpathExpectationsHelper.exists(byte,String) protected protected throws call org.springframework.test.util.XpathExpectationsHelper.exists(byte,String) call org.springframework.test.util.XpathExpectationsHelper.exists(byte,String) call org.springframework.test.util.XpathExpectationsHelper.exists(byte,String) call org.springframework.test.util.XpathExpectationsHelper.exists(byte,String) call org.springframework.test.util.XpathExpectationsHelper.exists(byte,String) public < public < return new protected protected throws call org.springframework.test.util.XpathExpectationsHelper.doesNotExist(byte,String) call org.springframework.test.util.XpathExpectationsHelper.doesNotExist(byte,String) call org.springframework.test.util.XpathExpectationsHelper.doesNotExist(byte,String) call org.springframework.test.util.XpathExpectationsHelper.doesNotExist(byte,String) call org.springframework.test.util.XpathExpectationsHelper.doesNotExist(byte,String) protected protected throws call org.springframework.test.util.XpathExpectationsHelper.doesNotExist(byte,String) call org.springframework.test.util.XpathExpectationsHelper.doesNotExist(byte,String) call org.springframework.test.util.XpathExpectationsHelper.doesNotExist(byte,String) call org.springframework.test.util.XpathExpectationsHelper.doesNotExist(byte,String) call org.springframework.test.util.XpathExpectationsHelper.doesNotExist(byte,String) public < public < final final final < return new protected protected throws call org.springframework.test.util.XpathExpectationsHelper.assertNodeCount(byte,String,int) call org.springframework.test.util.XpathExpectationsHelper.assertNodeCount(byte,String,int) call org.springframework.test.util.XpathExpectationsHelper.assertNodeCount(byte,String,int) call org.springframework.test.util.XpathExpectationsHelper.assertNodeCount(byte,String,int) call org.springframework.test.util.XpathExpectationsHelper.assertNodeCount(byte,String,int) protected protected throws call org.springframework.test.util.XpathExpectationsHelper.assertNodeCount(byte,String,int) call org.springframework.test.util.XpathExpectationsHelper.assertNodeCount(byte,String,int) call org.springframework.test.util.XpathExpectationsHelper.assertNodeCount(byte,String,int) call org.springframework.test.util.XpathExpectationsHelper.assertNodeCount(byte,String,int) call org.springframework.test.util.XpathExpectationsHelper.assertNodeCount(byte,String,int) public < public < final final return new protected protected throws call org.springframework.test.util.XpathExpectationsHelper.assertNodeCount(byte,String,int) call org.springframework.test.util.XpathExpectationsHelper.assertNodeCount(byte,String,int) call org.springframework.test.util.XpathExpectationsHelper.assertNodeCount(byte,String,int) call org.springframework.test.util.XpathExpectationsHelper.assertNodeCount(byte,String,int) call org.springframework.test.util.XpathExpectationsHelper.assertNodeCount(byte,String,int) protected protected throws call org.springframework.test.util.XpathExpectationsHelper.assertNodeCount(byte,String,int) call org.springframework.test.util.XpathExpectationsHelper.assertNodeCount(byte,String,int) call org.springframework.test.util.XpathExpectationsHelper.assertNodeCount(byte,String,int) call org.springframework.test.util.XpathExpectationsHelper.assertNodeCount(byte,String,int) call org.springframework.test.util.XpathExpectationsHelper.assertNodeCount(byte,String,int) public < public < final final final < super super return new protected protected throws call org.springframework.test.util.XpathExpectationsHelper.assertString(byte,String,Matcher) call org.springframework.test.util.XpathExpectationsHelper.assertString(byte,String,Matcher) call org.springframework.test.util.XpathExpectationsHelper.assertString(byte,String,Matcher) call org.springframework.test.util.XpathExpectationsHelper.assertString(byte,String,Matcher) call org.springframework.test.util.XpathExpectationsHelper.assertString(byte,String,Matcher) protected protected throws call org.springframework.test.util.XpathExpectationsHelper.assertString(byte,String,Matcher) call org.springframework.test.util.XpathExpectationsHelper.assertString(byte,String,Matcher) call org.springframework.test.util.XpathExpectationsHelper.assertString(byte,String,Matcher) call org.springframework.test.util.XpathExpectationsHelper.assertString(byte,String,Matcher) call org.springframework.test.util.XpathExpectationsHelper.assertString(byte,String,Matcher) public public final final return new protected protected throws call org.springframework.test.util.XpathExpectationsHelper.assertString(byte,String,Matcher) call org.springframework.test.util.XpathExpectationsHelper.assertString(byte,String,Matcher) call org.springframework.test.util.XpathExpectationsHelper.assertString(byte,String,Matcher) call org.springframework.test.util.XpathExpectationsHelper.assertString(byte,String,Matcher) call org.springframework.test.util.XpathExpectationsHelper.assertString(byte,String,Matcher) protected protected throws call org.springframework.test.util.XpathExpectationsHelper.assertString(byte,String,Matcher) call org.springframework.test.util.XpathExpectationsHelper.assertString(byte,String,Matcher) call org.springframework.test.util.XpathExpectationsHelper.assertString(byte,String,Matcher) call org.springframework.test.util.XpathExpectationsHelper.assertString(byte,String,Matcher) call org.springframework.test.util.XpathExpectationsHelper.assertString(byte,String,Matcher) public < public < final final final < super super return new protected protected throws call org.springframework.test.util.XpathExpectationsHelper.assertNumber(byte,String,Double) call org.springframework.test.util.XpathExpectationsHelper.assertNumber(byte,String,Double) call org.springframework.test.util.XpathExpectationsHelper.assertNumber(byte,String,Double) call org.springframework.test.util.XpathExpectationsHelper.assertNumber(byte,String,Double) call org.springframework.test.util.XpathExpectationsHelper.assertNumber(byte,String,Double) protected protected throws call org.springframework.test.util.XpathExpectationsHelper.assertNumber(byte,String,Double) call org.springframework.test.util.XpathExpectationsHelper.assertNumber(byte,String,Double) call org.springframework.test.util.XpathExpectationsHelper.assertNumber(byte,String,Double) call org.springframework.test.util.XpathExpectationsHelper.assertNumber(byte,String,Double) call org.springframework.test.util.XpathExpectationsHelper.assertNumber(byte,String,Double) public public final final return new protected protected throws call org.springframework.test.util.XpathExpectationsHelper.assertNumber(byte,String,Double) call org.springframework.test.util.XpathExpectationsHelper.assertNumber(byte,String,Double) call org.springframework.test.util.XpathExpectationsHelper.assertNumber(byte,String,Double) call org.springframework.test.util.XpathExpectationsHelper.assertNumber(byte,String,Double) call org.springframework.test.util.XpathExpectationsHelper.assertNumber(byte,String,Double) protected protected throws call org.springframework.test.util.XpathExpectationsHelper.assertNumber(byte,String,Double) call org.springframework.test.util.XpathExpectationsHelper.assertNumber(byte,String,Double) call org.springframework.test.util.XpathExpectationsHelper.assertNumber(byte,String,Double) call org.springframework.test.util.XpathExpectationsHelper.assertNumber(byte,String,Double) call org.springframework.test.util.XpathExpectationsHelper.assertNumber(byte,String,Double) public < public < final final return new protected protected throws call org.springframework.test.util.XpathExpectationsHelper.assertBoolean(byte,String,boolean) call org.springframework.test.util.XpathExpectationsHelper.assertBoolean(byte,String,boolean) call org.springframework.test.util.XpathExpectationsHelper.assertBoolean(byte,String,boolean) call org.springframework.test.util.XpathExpectationsHelper.assertBoolean(byte,String,boolean) call org.springframework.test.util.XpathExpectationsHelper.assertBoolean(byte,String,boolean) protected protected throws call org.springframework.test.util.XpathExpectationsHelper.assertBoolean(byte,String,boolean) call org.springframework.test.util.XpathExpectationsHelper.assertBoolean(byte,String,boolean) call org.springframework.test.util.XpathExpectationsHelper.assertBoolean(byte,String,boolean) call org.springframework.test.util.XpathExpectationsHelper.assertBoolean(byte,String,boolean) call org.springframework.test.util.XpathExpectationsHelper.assertBoolean(byte,String,boolean) MockClientHttpRequest public final public final throws try decl_stmt org.springframework.mock.http.client.MockClientHttpRequest = catch throw new +