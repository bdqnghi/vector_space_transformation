org.springframework.orm.jpa.vendor java.lang.reflect.Method import java.sql.Connection import java.sql.SQLException import javax.persistence.EntityManager import javax.persistence.PersistenceException import org.apache.commons.logging.LogFactory import org.hibernate.FlushMode import org.hibernate.HibernateException import org.hibernate.NonUniqueObjectException import org.hibernate.NonUniqueResultException import org.hibernate.ObjectDeletedException import org.hibernate.OptimisticLockException import org.hibernate.PersistentObjectException import org.hibernate.PessimisticLockException import org.hibernate.PropertyValueException import org.hibernate.QueryException import org.hibernate.QueryTimeoutException import org.hibernate.Session import org.hibernate.StaleObjectStateException import org.hibernate.StaleStateException import org.hibernate.TransientObjectException import org.hibernate.UnresolvableObjectException import org.hibernate.WrongClassException import org.hibernate.exception.ConstraintViolationException import org.hibernate.exception.DataException import org.hibernate.exception.JDBCConnectionException import org.hibernate.exception.LockAcquisitionException import org.hibernate.exception.SQLGrammarException import org.springframework.dao.CannotAcquireLockException import org.springframework.dao.DataAccessException import org.springframework.dao.DataAccessResourceFailureException import org.springframework.dao.DataIntegrityViolationException import org.springframework.dao.DuplicateKeyException import org.springframework.dao.IncorrectResultSizeDataAccessException import org.springframework.dao.InvalidDataAccessApiUsageException import org.springframework.dao.InvalidDataAccessResourceUsageException import org.springframework.dao.PessimisticLockingFailureException import org.springframework.jdbc.datasource.ConnectionHandle import org.springframework.jdbc.datasource.DataSourceUtils import org.springframework.jdbc.support.JdbcUtils import org.springframework.orm.ObjectOptimisticLockingFailureException import org.springframework.orm.ObjectRetrievalFailureException import org.springframework.orm.jpa.DefaultJpaDialect import org.springframework.orm.jpa.EntityManagerFactoryUtils import org.springframework.orm.jpa.JpaSystemException import org.springframework.transaction.InvalidIsolationLevelException import org.springframework.transaction.TransactionDefinition import org.springframework.transaction.TransactionException import org.springframework.util.ClassUtils import org.springframework.util.ReflectionUtils import class annotation org.springframework.orm.jpa.vendor.HibernateJpaDialect super super extends boolean decl Class decl Class public public = Integer boolean Connection Session FlushMode public public throws decl_stmt sun.security.pkcs11.Session = if != call Session.getTransaction() call Session.getTransaction() call Session.getTransaction() call Session.getTransaction() call Session.getTransaction() decl_stmt boolean = != decl_stmt java.lang.Integer = decl_stmt sun.rmi.transport.Connection = if || if = = else if throw new + + + decl_stmt FlushMode = return new Session FlushMode public public throws decl_stmt sun.security.pkcs11.Session = decl_stmt FlushMode = return new FlushMode protected protected throws decl_stmt FlushMode = if if ! call FlushMode.equals() call FlushMode.equals() call FlushMode.equals() call FlushMode.equals() call FlushMode.equals() return else if call FlushMode.lessThan() call FlushMode.lessThan() call FlushMode.lessThan() call FlushMode.lessThan() call FlushMode.lessThan() return return public public Session public public throws decl_stmt sun.security.pkcs11.Session = return new public public if instanceof return if instanceof && instanceof return return DataException StaleObjectStateException protected protected if instanceof return new if instanceof decl_stmt SQLGrammarException = return new + + call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() + if instanceof decl_stmt QueryTimeoutException = return new + + call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() + if instanceof decl_stmt LockAcquisitionException = return new + + call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() + if instanceof decl_stmt PessimisticLockException = return new + + call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() + if instanceof decl_stmt ConstraintViolationException = return new + + call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() + + call DataException.getConstraintName() call DataException.getConstraintName() call DataException.getConstraintName() call DataException.getConstraintName() call DataException.getConstraintName() + if instanceof decl_stmt DataException = return new + + call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() call DataException.getSQL() + if instanceof return new if instanceof return new if instanceof return new if instanceof return new if instanceof return new if instanceof return new if instanceof return new if instanceof decl_stmt UnresolvableObjectException = return new call StaleObjectStateException.getEntityName() call StaleObjectStateException.getEntityName() call StaleObjectStateException.getEntityName() call StaleObjectStateException.getEntityName() call StaleObjectStateException.getEntityName() call StaleObjectStateException.getIdentifier() call StaleObjectStateException.getIdentifier() call StaleObjectStateException.getIdentifier() call StaleObjectStateException.getIdentifier() call StaleObjectStateException.getIdentifier() if instanceof decl_stmt WrongClassException = return new call StaleObjectStateException.getEntityName() call StaleObjectStateException.getEntityName() call StaleObjectStateException.getEntityName() call StaleObjectStateException.getEntityName() call StaleObjectStateException.getEntityName() call StaleObjectStateException.getIdentifier() call StaleObjectStateException.getIdentifier() call StaleObjectStateException.getIdentifier() call StaleObjectStateException.getIdentifier() call StaleObjectStateException.getIdentifier() if instanceof decl_stmt StaleObjectStateException = return new call StaleObjectStateException.getEntityName() call StaleObjectStateException.getEntityName() call StaleObjectStateException.getEntityName() call StaleObjectStateException.getEntityName() call StaleObjectStateException.getEntityName() call StaleObjectStateException.getIdentifier() call StaleObjectStateException.getIdentifier() call StaleObjectStateException.getIdentifier() call StaleObjectStateException.getIdentifier() call StaleObjectStateException.getIdentifier() if instanceof return new if call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() return new if != && call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() if instanceof return new return new return new protected protected return Connection public public if != if != && decl_stmt sun.rmi.transport.Connection = if != + + public public return public public if != public static public static try if == = return catch throw new