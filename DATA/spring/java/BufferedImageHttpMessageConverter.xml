org.springframework.http.converter java.awt.image.BufferedImage import java.io.File import java.io.IOException import java.io.InputStream import java.io.OutputStream import java.util.ArrayList import java.util.Collections import java.util.Iterator import java.util.List import javax.imageio.IIOImage import javax.imageio.ImageIO import javax.imageio.ImageReadParam import javax.imageio.ImageReader import javax.imageio.ImageWriteParam import javax.imageio.ImageWriter import javax.imageio.stream.FileCacheImageInputStream import javax.imageio.stream.FileCacheImageOutputStream import javax.imageio.stream.ImageInputStream import javax.imageio.stream.ImageOutputStream import javax.imageio.stream.MemoryCacheImageInputStream import javax.imageio.stream.MemoryCacheImageOutputStream import org.springframework.http.HttpInputMessage import org.springframework.http.HttpOutputMessage import org.springframework.http.MediaType import org.springframework.http.StreamingHttpOutputMessage import org.springframework.util.Assert import org.springframework.util.StringUtils import class org.springframework.http.converter.BufferedImageHttpMessageConverter super super implements decl List File MediaType decl Iterator public public decl_stmt java.util.Iterator < = call org.springframework.http.MediaType.toString(Collection) call org.springframework.http.MediaType.toString(Collection) call org.springframework.http.MediaType.toString(Collection) call org.springframework.http.MediaType.toString(Collection) call org.springframework.http.MediaType.toString(Collection) if ! call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() throw new + + = public public return public public call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() = public public < return == && decl Iterator private private if == return decl_stmt java.util.Iterator < = return call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() public public < return == && decl Iterator private private if == || return decl_stmt java.util.Iterator < = return call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() public < public < return ImageReadParam ImageInputStream decl Iterator MediaType ImageReader public public < extends extends throws decl_stmt ImageInputStream = decl_stmt javax.imageio.ImageReader = try = decl_stmt org.springframework.http.MediaType = decl_stmt java.util.Iterator < = call org.springframework.http.MediaType.toString(Collection) call org.springframework.http.MediaType.toString(Collection) call org.springframework.http.MediaType.toString(Collection) call org.springframework.http.MediaType.toString(Collection) call org.springframework.http.MediaType.toString(Collection) if call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt javax.imageio.ImageReadParam = call javax.imageio.ImageReader.getDefaultReadParam() call javax.imageio.ImageReader.getDefaultReadParam() call javax.imageio.ImageReader.getDefaultReadParam() call javax.imageio.ImageReader.getDefaultReadParam() call javax.imageio.ImageReader.getDefaultReadParam() call javax.imageio.ImageReader.setInput(Object,boolean,boolean) call javax.imageio.ImageReader.setInput(Object,boolean,boolean) call javax.imageio.ImageReader.setInput(Object,boolean,boolean) call javax.imageio.ImageReader.setInput(Object,boolean,boolean) call javax.imageio.ImageReader.setInput(Object,boolean,boolean) return call javax.imageio.ImageReader.read(int) call javax.imageio.ImageReader.read(int) call javax.imageio.ImageReader.read(int) call javax.imageio.ImageReader.read(int) call javax.imageio.ImageReader.read(int) else throw new + + finally if != call javax.imageio.ImageReader.dispose() call javax.imageio.ImageReader.dispose() call javax.imageio.ImageReader.dispose() call javax.imageio.ImageReader.dispose() call javax.imageio.ImageReader.dispose() if != try call ImageInputStream.close() call ImageInputStream.close() call ImageInputStream.close() call ImageInputStream.close() call ImageInputStream.close() catch private private throws if != return new else return new MediaType StreamingHttpOutputMessage public public final final final final final final throws decl_stmt org.springframework.http.MediaType final final = if instanceof decl_stmt org.springframework.http.StreamingHttpOutputMessage = call StreamingHttpOutputMessage.setBody() call StreamingHttpOutputMessage.setBody() call StreamingHttpOutputMessage.setBody() call StreamingHttpOutputMessage.setBody() call StreamingHttpOutputMessage.setBody() new public public throws else public public throws private private if == || || = + return decl Iterator ImageWriteParam ImageOutputStream ImageWriter private private throws decl_stmt javax.imageio.stream.ImageOutputStream = decl_stmt ImageWriter = try decl_stmt java.util.Iterator < = if call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt javax.imageio.ImageWriteParam = call ImageWriter.getDefaultWriteParam() call ImageWriter.getDefaultWriteParam() call ImageWriter.getDefaultWriteParam() call ImageWriter.getDefaultWriteParam() call ImageWriter.getDefaultWriteParam() = call ImageWriter.setOutput() call ImageWriter.setOutput() call ImageWriter.setOutput() call ImageWriter.setOutput() call ImageWriter.setOutput() call ImageWriter.write() call ImageWriter.write() call ImageWriter.write() call ImageWriter.write() call ImageWriter.write() new else throw new + + finally if != call ImageWriter.dispose() call ImageWriter.dispose() call ImageWriter.dispose() call ImageWriter.dispose() call ImageWriter.dispose() if != try call ImageOutputStream.close() call ImageOutputStream.close() call ImageOutputStream.close() call ImageOutputStream.close() call ImageOutputStream.close() catch private private throws if != return new else return new protected protected protected protected