org.springframework.scripting.support java.io.IOException import javax.script.Invocable import javax.script.ScriptEngine import javax.script.ScriptEngineManager import org.springframework.beans.factory.BeanClassLoaderAware import org.springframework.scripting.ScriptCompilationException import org.springframework.scripting.ScriptFactory import org.springframework.scripting.ScriptSource import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.ObjectUtils import org.springframework.util.StringUtils import class org.springframework.scripting.support.StandardScriptFactory super super implements ScriptEngine ClassLoader String String public public = public public return public < public < return public public return boolean decl Class Object public public < throws decl_stmt java.lang.Object = if ! decl_stmt boolean = for < : if instanceof ! < : ! = if = if instanceof decl_stmt java.lang.Class < = < try return call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() catch throw new + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() catch throw new + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() return protected protected try if == = if == throw new + return catch throw new ScriptEngine String String ScriptEngineManager protected protected decl_stmt javax.script.ScriptEngineManager = new if != return if instanceof decl_stmt java.lang.String = if != decl_stmt java.lang.String = if != decl_stmt ScriptEngine = call javax.script.ScriptEngineManager.getEngineByExtension(String) call javax.script.ScriptEngineManager.getEngineByExtension(String) call javax.script.ScriptEngineManager.getEngineByExtension(String) call javax.script.ScriptEngineManager.getEngineByExtension(String) call javax.script.ScriptEngineManager.getEngineByExtension(String) if != return return decl Class Invocable protected protected < decl_stmt java.lang.Class < if == = else = if != if ! instanceof throw new + decl_stmt javax.script.Invocable = if != = call javax.script.Invocable.getInterface(Class) call javax.script.Invocable.getInterface(Class) call javax.script.Invocable.getInterface(Class) call javax.script.Invocable.getInterface(Class) call javax.script.Invocable.getInterface(Class) if == = call javax.script.Invocable.getInterface(Class) call javax.script.Invocable.getInterface(Class) call javax.script.Invocable.getInterface(Class) call javax.script.Invocable.getInterface(Class) call javax.script.Invocable.getInterface(Class) if == throw new + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() + return public < public < throws return public public return public public return + +