org.springframework.web.servlet.mvc.method.annotation java.lang.reflect.Method import java.util.HashMap import java.util.Map import java.util.Optional import org.junit.Before import org.junit.Test import org.springframework.core.MethodParameter import org.springframework.core.convert.support.DefaultConversionService import org.springframework.mock.web.test.MockHttpServletRequest import org.springframework.tests.sample.beans.TestBean import org.springframework.web.bind.annotation.ModelAttribute import org.springframework.web.bind.support.ConfigurableWebBindingInitializer import org.springframework.web.bind.support.WebDataBinderFactory import org.springframework.web.context.request.NativeWebRequest import org.springframework.web.context.request.ServletWebRequest import org.springframework.web.method.support.ModelAndViewContainer import org.springframework.web.servlet.HandlerMapping import static static org.junit.Assert.* import class org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessorTests WebDataBinderFactory MockHttpServletRequest ModelAndViewContainer ServletModelAttributeMethodProcessor MethodParameter NativeWebRequest MethodParameter MethodParameter Method ConfigurableWebBindingInitializer public public throws = new decl_stmt com.sun.jdi.Method = = new = new = new decl_stmt org.springframework.web.bind.support.ConfigurableWebBindingInitializer = new call org.springframework.web.bind.support.ConfigurableWebBindingInitializer.setConversionService(ConversionService) call org.springframework.web.bind.support.ConfigurableWebBindingInitializer.setConversionService(ConversionService) call org.springframework.web.bind.support.ConfigurableWebBindingInitializer.setConversionService(ConversionService) call org.springframework.web.bind.support.ConfigurableWebBindingInitializer.setConversionService(ConversionService) call org.springframework.web.bind.support.ConfigurableWebBindingInitializer.setConversionService(ConversionService) new = new = new = new = new decl Map TestBean public public throws decl_stmt java.util.Map < = new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.springframework.tests.sample.beans.TestBean = call org.springframework.tests.sample.beans.TestBean.getName() call org.springframework.tests.sample.beans.TestBean.getName() call org.springframework.tests.sample.beans.TestBean.getName() call org.springframework.tests.sample.beans.TestBean.getName() call org.springframework.tests.sample.beans.TestBean.getName() decl Map TestBeanWithoutStringConstructor public public throws decl_stmt java.util.Map < = new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) decl_stmt TestBeanWithoutStringConstructor = decl Map decl Optional public public throws decl_stmt java.util.Map < = new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt Optional < = < call decl Optional.get() call decl Optional.get() call decl Optional.get() call decl Optional.get() call decl Optional.get() TestBean public public throws decl_stmt org.springframework.tests.sample.beans.TestBean = call org.springframework.tests.sample.beans.TestBean.getName() call org.springframework.tests.sample.beans.TestBean.getName() call org.springframework.tests.sample.beans.TestBean.getName() call org.springframework.tests.sample.beans.TestBean.getName() call org.springframework.tests.sample.beans.TestBean.getName() TestBeanWithoutStringConstructor public public throws decl_stmt TestBeanWithoutStringConstructor = decl Optional public public throws decl_stmt Optional < = < call decl Optional.get() call decl Optional.get() call decl Optional.get() call decl Optional.get() call decl Optional.get() decl Optional public public throws decl_stmt Optional < = < call decl Optional.isPresent() call decl Optional.isPresent() call decl Optional.isPresent() call decl Optional.isPresent() call decl Optional.isPresent() decl Optional public public throws decl_stmt Optional < = < call decl Optional.isPresent() call decl Optional.isPresent() call decl Optional.isPresent() call decl Optional.isPresent() call decl Optional.isPresent() private private <