org.springframework.scheduling.quartz java.io.IOException import java.util.Map import java.util.Properties import java.util.concurrent.Executor import javax.sql.DataSource import org.quartz.Scheduler import org.quartz.SchedulerException import org.quartz.SchedulerFactory import org.quartz.impl.RemoteScheduler import org.quartz.impl.SchedulerRepository import org.quartz.impl.StdSchedulerFactory import org.quartz.simpl.SimpleThreadPool import org.quartz.spi.JobFactory import org.springframework.beans.BeanUtils import org.springframework.beans.factory.BeanNameAware import org.springframework.beans.factory.DisposableBean import org.springframework.beans.factory.FactoryBean import org.springframework.beans.factory.InitializingBean import org.springframework.context.ApplicationContext import org.springframework.context.ApplicationContextAware import org.springframework.context.SmartLifecycle import org.springframework.core.io.Resource import org.springframework.core.io.ResourceLoader import org.springframework.core.io.support.PropertiesLoaderUtils import org.springframework.scheduling.SchedulingException import org.springframework.util.Assert import org.springframework.util.CollectionUtils import class org.springframework.scheduling.quartz.SchedulerFactoryBean super super extends super implements decl ThreadLocal boolean DataSource String decl ThreadLocal decl ThreadLocal String ApplicationContext Resource boolean boolean int String decl Map decl ThreadLocal int Properties DataSource Scheduler int decl Class boolean Executor JobFactory public static public static return call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() public static public static return call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() public static public static return call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() public static public static return call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() public public < extends extends = public public = public public = public public = public public = public public = public public = public public < = public public = public public = = public public = public public return public public = public public return public public = public public = public public = public public if == = public public = SchedulerFactory public public throws if == && != = if != && == = decl_stmt SchedulerFactory = if != call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() if != call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() if != call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() if != call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() try = if ! && ! instanceof = new if != if instanceof finally if != call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() if != call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() if != call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() if != call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() Properties private private throws if ! instanceof if != || != || != || != throw new + return decl_stmt java.util.Properties = new if != call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() if != call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() else call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() if != if + + if != call Properties.put() call Properties.put() call Properties.put() call Properties.put() call Properties.put() if != call Properties.put() call Properties.put() call Properties.put() call Properties.put() call Properties.put() boolean Scheduler SchedulerRepository Thread ClassLoader Scheduler protected protected throws decl_stmt java.lang.Thread = decl_stmt java.lang.ClassLoader = call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() decl_stmt boolean = != && ! if call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) try decl_stmt SchedulerRepository = synchronized decl_stmt Scheduler = != call SchedulerRepository.lookup() call SchedulerRepository.lookup() call SchedulerRepository.lookup() call SchedulerRepository.lookup() call SchedulerRepository.lookup() : decl_stmt Scheduler = if == throw new + + + if ! call Scheduler.getSchedulerName() call Scheduler.getSchedulerName() call Scheduler.getSchedulerName() call Scheduler.getSchedulerName() call Scheduler.getSchedulerName() return finally if call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) private private throws if != if != if == throw new + Thread protected protected final final final final throws if <= call Scheduler.start() call Scheduler.start() call Scheduler.start() call Scheduler.start() call Scheduler.start() else if + call Scheduler.getSchedulerName() call Scheduler.getSchedulerName() call Scheduler.getSchedulerName() call Scheduler.getSchedulerName() call Scheduler.getSchedulerName() + + + decl_stmt java.lang.Thread = new public public try * catch if + + try call Scheduler.start() call Scheduler.start() call Scheduler.start() call Scheduler.start() call Scheduler.start() catch throw new call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) + call Scheduler.getSchedulerName() call Scheduler.getSchedulerName() call Scheduler.getSchedulerName() call Scheduler.getSchedulerName() call Scheduler.getSchedulerName() + call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() public public try * catch if + + try call Scheduler.start() call Scheduler.start() call Scheduler.start() call Scheduler.start() call Scheduler.start() catch throw new public public return public public return public < extends extends public < extends extends return != : public public return public public throws if != try catch throw new public public throws if != try catch throw new public public throws public public throws if != try return ! catch return return public public throws