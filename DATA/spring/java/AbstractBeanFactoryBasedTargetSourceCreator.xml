org.springframework.aop.framework.autoproxy.target java.util.HashMap import java.util.Iterator import java.util.Map import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.aop.TargetSource import org.springframework.aop.framework.AopInfrastructureBean import org.springframework.aop.framework.autoproxy.TargetSourceCreator import org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource import org.springframework.beans.factory.BeanFactory import org.springframework.beans.factory.BeanFactoryAware import org.springframework.beans.factory.DisposableBean import org.springframework.beans.factory.config.BeanDefinition import org.springframework.beans.factory.config.BeanPostProcessor import org.springframework.beans.factory.config.ConfigurableBeanFactory import org.springframework.beans.factory.support.DefaultListableBeanFactory import org.springframework.beans.factory.support.GenericBeanDefinition import class org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator super super implements decl Map Log ConfigurableBeanFactory public final public final if ! instanceof throw new + + call ConfigurableBeanFactory.getClass() call ConfigurableBeanFactory.getClass() call ConfigurableBeanFactory.getClass() call ConfigurableBeanFactory.getClass() call ConfigurableBeanFactory.getClass() = protected final protected final return AbstractBeanFactoryBasedTargetSource BeanDefinition DefaultListableBeanFactory GenericBeanDefinition public final public final < decl_stmt org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource = if == return if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + decl_stmt org.springframework.beans.factory.support.DefaultListableBeanFactory = decl_stmt org.springframework.beans.factory.config.BeanDefinition = decl_stmt org.springframework.beans.factory.support.GenericBeanDefinition = new if call GenericBeanDefinition.setScope() call GenericBeanDefinition.setScope() call GenericBeanDefinition.setScope() call GenericBeanDefinition.setScope() call GenericBeanDefinition.setScope() call org.springframework.beans.factory.support.DefaultListableBeanFactory.registerBeanDefinition(String,BeanDefinition) call org.springframework.beans.factory.support.DefaultListableBeanFactory.registerBeanDefinition(String,BeanDefinition) call org.springframework.beans.factory.support.DefaultListableBeanFactory.registerBeanDefinition(String,BeanDefinition) call org.springframework.beans.factory.support.DefaultListableBeanFactory.registerBeanDefinition(String,BeanDefinition) call org.springframework.beans.factory.support.DefaultListableBeanFactory.registerBeanDefinition(String,BeanDefinition) call org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource.setTargetBeanName(String) call org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource.setTargetBeanName(String) call org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource.setTargetBeanName(String) call org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource.setTargetBeanName(String) call org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource.setTargetBeanName(String) call org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource.setBeanFactory(BeanFactory) call org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource.setBeanFactory(BeanFactory) call org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource.setBeanFactory(BeanFactory) call org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource.setBeanFactory(BeanFactory) call org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource.setBeanFactory(BeanFactory) return DefaultListableBeanFactory protected protected synchronized decl_stmt org.springframework.beans.factory.support.DefaultListableBeanFactory = if == = return DefaultListableBeanFactory protected protected decl_stmt org.springframework.beans.factory.support.DefaultListableBeanFactory = new call org.springframework.beans.factory.support.DefaultListableBeanFactory.copyConfigurationFrom(ConfigurableBeanFactory) call org.springframework.beans.factory.support.DefaultListableBeanFactory.copyConfigurationFrom(ConfigurableBeanFactory) call org.springframework.beans.factory.support.DefaultListableBeanFactory.copyConfigurationFrom(ConfigurableBeanFactory) call org.springframework.beans.factory.support.DefaultListableBeanFactory.copyConfigurationFrom(ConfigurableBeanFactory) call org.springframework.beans.factory.support.DefaultListableBeanFactory.copyConfigurationFrom(ConfigurableBeanFactory) for < = call DefaultListableBeanFactory.getBeanPostProcessors() call DefaultListableBeanFactory.getBeanPostProcessors() call DefaultListableBeanFactory.getBeanPostProcessors() call DefaultListableBeanFactory.getBeanPostProcessors() call DefaultListableBeanFactory.getBeanPostProcessors() if instanceof return public public synchronized for : protected protected return