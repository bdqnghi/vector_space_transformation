org.springframework.jdbc.support java.lang.reflect.Constructor import java.sql.BatchUpdateException import java.sql.SQLException import java.util.Arrays import javax.sql.DataSource import org.springframework.dao.CannotAcquireLockException import org.springframework.dao.CannotSerializeTransactionException import org.springframework.dao.DataAccessException import org.springframework.dao.DataAccessResourceFailureException import org.springframework.dao.DataIntegrityViolationException import org.springframework.dao.DeadlockLoserDataAccessException import org.springframework.dao.DuplicateKeyException import org.springframework.dao.PermissionDeniedDataAccessException import org.springframework.dao.TransientDataAccessResourceException import org.springframework.jdbc.BadSqlGrammarException import org.springframework.jdbc.InvalidResultSetAccessException import class org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator super super extends int int SQLErrorCodes int int int public public = public public = public public = public public return DataAccessException SQLException decl CustomSQLErrorCodesTranslation DataAccessException SQLExceptionTranslator String SQLException SQLException DataAccessException String protected protected decl_stmt java.sql.SQLException = if instanceof && call java.sql.SQLException.getNextException() call java.sql.SQLException.getNextException() call java.sql.SQLException.getNextException() call java.sql.SQLException.getNextException() call java.sql.SQLException.getNextException() != decl_stmt java.sql.SQLException = call java.sql.SQLException.getNextException() call java.sql.SQLException.getNextException() call java.sql.SQLException.getNextException() call java.sql.SQLException.getNextException() call java.sql.SQLException.getNextException() if call java.sql.SQLException.getErrorCode() call java.sql.SQLException.getErrorCode() call java.sql.SQLException.getErrorCode() call java.sql.SQLException.getErrorCode() call java.sql.SQLException.getErrorCode() > || call java.sql.SQLException.getSQLState() call java.sql.SQLException.getSQLState() call java.sql.SQLException.getSQLState() call java.sql.SQLException.getSQLState() call java.sql.SQLException.getSQLState() != = decl_stmt DataAccessException = if != return if != decl_stmt org.springframework.jdbc.support.SQLExceptionTranslator = if != decl_stmt DataAccessException = call SQLExceptionTranslator.translate() call SQLExceptionTranslator.translate() call SQLExceptionTranslator.translate() call SQLExceptionTranslator.translate() call SQLExceptionTranslator.translate() if != return if != decl_stmt java.lang.String if = call java.sql.SQLException.getSQLState() call java.sql.SQLException.getSQLState() call java.sql.SQLException.getSQLState() call java.sql.SQLException.getSQLState() call java.sql.SQLException.getSQLState() else decl_stmt java.sql.SQLException = while call java.sql.SQLException.getErrorCode() call java.sql.SQLException.getErrorCode() call java.sql.SQLException.getErrorCode() call java.sql.SQLException.getErrorCode() call java.sql.SQLException.getErrorCode() == && call SQLException.getCause() call SQLException.getCause() call SQLException.getCause() call SQLException.getCause() call SQLException.getCause() instanceof = call SQLException.getCause() call SQLException.getCause() call SQLException.getCause() call SQLException.getCause() call SQLException.getCause() = call java.sql.SQLException.getErrorCode() call java.sql.SQLException.getErrorCode() call java.sql.SQLException.getErrorCode() call java.sql.SQLException.getErrorCode() call java.sql.SQLException.getErrorCode() if != decl_stmt org.springframework.jdbc.support.CustomSQLErrorCodesTranslation = if != for : if >= if != decl_stmt DataAccessException = if != return if >= return new else if >= return new else if >= return new else if >= return new else if >= return new else if >= return new else if >= return new else if >= return new else if >= return new else if >= return new if decl_stmt java.lang.String if != && = + call java.sql.SQLException.getSQLState() call java.sql.SQLException.getSQLState() call java.sql.SQLException.getSQLState() call java.sql.SQLException.getSQLState() call java.sql.SQLException.getSQLState() + + call java.sql.SQLException.getErrorCode() call java.sql.SQLException.getErrorCode() call java.sql.SQLException.getErrorCode() call java.sql.SQLException.getErrorCode() call java.sql.SQLException.getErrorCode() else = + call java.sql.SQLException.getErrorCode() call java.sql.SQLException.getErrorCode() call java.sql.SQLException.getErrorCode() call java.sql.SQLException.getErrorCode() call java.sql.SQLException.getErrorCode() + + + return protected protected return decl Object decl Object decl Object decl Constructor decl Object decl Object int protected protected < try decl_stmt int = decl_stmt int = for < : if == && == if < = if == && == && == if < = if == && == && == if < = if == && == && == && == if < = if == && == && == && == if < = decl_stmt java.lang.reflect.Constructor < switch case case decl_stmt java.lang.Object = new = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case case case decl_stmt java.lang.Object = new = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case decl_stmt java.lang.Object = new = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case case case decl_stmt java.lang.Object = new = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case case case decl_stmt java.lang.Object = new = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case decl_stmt java.lang.Object = new = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case decl_stmt java.lang.Object = new + + = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case case case decl_stmt java.lang.Object = new = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case case case decl_stmt java.lang.Object = new = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case decl_stmt java.lang.Object = new = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case case case decl_stmt java.lang.Object = new = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case case case decl_stmt java.lang.Object = new = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case decl_stmt java.lang.Object = new = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case decl_stmt java.lang.Object = new + + = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case decl_stmt java.lang.Object = new + + = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case case case decl_stmt java.lang.Object = new = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case case case decl_stmt java.lang.Object = new = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case decl_stmt java.lang.Object = new = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case case case decl_stmt java.lang.Object = new = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case case case decl_stmt java.lang.Object = new = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case decl_stmt java.lang.Object = new = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case decl_stmt java.lang.Object = new + + = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case case case decl_stmt java.lang.Object = new = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case case case decl_stmt java.lang.Object = new = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case decl_stmt java.lang.Object = new = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case case case decl_stmt java.lang.Object = new = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case case case decl_stmt java.lang.Object = new = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case decl_stmt java.lang.Object = new = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case decl_stmt java.lang.Object = new + + = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case decl_stmt java.lang.Object = new + + = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() case decl_stmt java.lang.Object = new + + = return call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() call decl Object.newInstance() default: if + + return catch if + + return String private private if decl_stmt java.lang.String = : + + + + + + + + + + +