org.springframework.beans.factory.groovy java.io.IOException import java.util.Arrays import java.util.Collection import java.util.HashMap import java.util.List import java.util.Map import groovy.lang.Binding import groovy.lang.Closure import groovy.lang.GString import groovy.lang.GroovyObject import groovy.lang.GroovyObjectSupport import groovy.lang.GroovyShell import groovy.lang.GroovySystem import groovy.lang.MetaClass import org.codehaus.groovy.runtime.DefaultGroovyMethods import org.codehaus.groovy.runtime.InvokerHelper import org.springframework.beans.MutablePropertyValues import org.springframework.beans.factory.BeanDefinitionStoreException import org.springframework.beans.factory.config.RuntimeBeanReference import org.springframework.beans.factory.parsing.BeanDefinitionParsingException import org.springframework.beans.factory.parsing.Location import org.springframework.beans.factory.parsing.Problem import org.springframework.beans.factory.support.AbstractBeanDefinition import org.springframework.beans.factory.support.AbstractBeanDefinitionReader import org.springframework.beans.factory.support.BeanDefinitionRegistry import org.springframework.beans.factory.support.GenericBeanDefinition import org.springframework.beans.factory.support.ManagedList import org.springframework.beans.factory.support.ManagedMap import org.springframework.beans.factory.xml.BeanDefinitionParserDelegate import org.springframework.beans.factory.xml.NamespaceHandler import org.springframework.beans.factory.xml.XmlBeanDefinitionReader import org.springframework.beans.factory.xml.XmlReaderContext import org.springframework.core.io.DescriptiveResource import org.springframework.core.io.Resource import org.springframework.core.io.support.EncodedResource import org.springframework.util.ObjectUtils import org.springframework.util.StringUtils import class org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader super super extends super implements XmlBeanDefinitionReader decl Map XmlBeanDefinitionReader Binding decl Map GroovyBeanDefinitionWrapper MetaClass public public = public public return public public = public public return public public throws return new Binding GroovyShell int Closure String public public throws decl_stmt java.lang.String = if return decl_stmt sun.tools.jstat.Closure = new public public return decl_stmt Binding = new public public if != else call Binding.setVariable() call Binding.setVariable() call Binding.setVariable() call Binding.setVariable() call Binding.setVariable() decl_stmt int = try decl_stmt GroovyShell = new call GroovyShell.evaluate() call GroovyShell.evaluate() call GroovyShell.evaluate() call GroovyShell.evaluate() call GroovyShell.evaluate() catch throw new new + new return - public public return public public if != else public public return GenericBeanDefinition public public < decl_stmt org.springframework.beans.factory.support.GenericBeanDefinition = new call GenericBeanDefinition.setBeanClass() call GenericBeanDefinition.setBeanClass() call GenericBeanDefinition.setBeanClass() call GenericBeanDefinition.setBeanClass() call GenericBeanDefinition.setBeanClass() return GroovyBeanDefinitionWrapper Closure Object Collection int public public < decl_stmt org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper = try decl_stmt sun.tools.jstat.Closure = decl_stmt java.util.Collection = if ! decl_stmt int = decl_stmt java.lang.Object = - if instanceof = -- if > - = = new if != call Closure.call() call Closure.call() call Closure.call() call Closure.call() call Closure.call() return finally = NamespaceHandler String String public public < if ! for < : decl_stmt java.lang.String = decl_stmt java.lang.String = if == throw new decl_stmt org.springframework.beans.factory.xml.NamespaceHandler = if == throw new new + new new public public throws MetaClass decl Object String boolean GroovyDynamicElementReader public public decl_stmt java.lang.Object = if && == && instanceof return else if decl_stmt java.lang.String if == throw new if instanceof = else = decl_stmt boolean = if > if instanceof = return new else if && > && instanceof decl_stmt GroovyDynamicElementReader = call GroovyDynamicElementReader.invokeMethod() call GroovyDynamicElementReader.invokeMethod() call GroovyDynamicElementReader.invokeMethod() call GroovyDynamicElementReader.invokeMethod() call GroovyDynamicElementReader.invokeMethod() else if > && instanceof return else if > && instanceof || instanceof || instanceof return else if > && - instanceof return decl_stmt MetaClass = if ! call MetaClass.respondsTo() call MetaClass.respondsTo() call MetaClass.respondsTo() call MetaClass.respondsTo() call MetaClass.respondsTo() return call MetaClass.invokeMethod() call MetaClass.invokeMethod() call MetaClass.invokeMethod() call MetaClass.invokeMethod() call MetaClass.invokeMethod() return private private if instanceof + + new return else if instanceof + + new return return private private for : if instanceof = else if instanceof = protected protected return List decl Entry decl Map String boolean Closure int Map int decl Class private private decl_stmt boolean = - instanceof if instanceof decl_stmt java.lang.Class < = instanceof : if >= if if - != = new - else = new else = new else if instanceof = new else if instanceof if > && instanceof decl_stmt java.util.List = - : = new decl_stmt java.util.Map = for : call java.util.Map.keySet() call java.util.Map.keySet() call java.util.Map.keySet() call java.util.Map.keySet() call java.util.Map.keySet() decl_stmt java.lang.String = call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) else = new decl_stmt Entry = decl_stmt int = : if > decl_stmt int = - : = new else = new call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() else if instanceof = new else decl_stmt java.util.List = - : = new if decl_stmt sun.tools.jstat.Closure = - call List.setDelegate() call List.setDelegate() call List.setDelegate() call List.setDelegate() call List.setDelegate() call List.setResolveStrategy() call List.setResolveStrategy() call List.setResolveStrategy() call List.setResolveStrategy() call List.setResolveStrategy() call List.call() call List.call() call List.call() call List.call() call List.call() new decl_stmt org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper = = call Closure.getBeanDefinition() call Closure.getBeanDefinition() call Closure.getBeanDefinition() call Closure.getBeanDefinition() call Closure.getBeanDefinition() call Closure.getBeanDefinition() call Closure.getBeanDefinition() call Closure.getBeanDefinition() call Closure.getBeanDefinition() call Closure.getBeanDefinition() return decl Object protected < protected < decl_stmt java.lang.Object = for = < ++ if instanceof = else if instanceof = else if instanceof = return boolean decl Map private private < decl_stmt boolean = for : if instanceof = break if decl_stmt java.util.Map < = new < call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() return return boolean decl List private private < decl_stmt boolean = for : if instanceof = break if decl_stmt java.util.List < = new < call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() return return public public if != GroovyBeanDefinitionWrapper Closure decl Class protected protected if instanceof = if return else if instanceof decl_stmt org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper = try decl_stmt sun.tools.jstat.Closure = decl_stmt java.lang.Class < = call Closure.getParameterTypes() call Closure.getParameterTypes() call Closure.getParameterTypes() call Closure.getParameterTypes() call Closure.getParameterTypes() if == = new call Closure.call() call Closure.call() call Closure.call() call Closure.call() call Closure.call() else = new call Closure.call() call Closure.call() call Closure.call() call Closure.call() call Closure.call() = finally = MutablePropertyValues Binding DeferredProperty GroovyBeanDefinitionWrapper public public decl_stmt Binding = if != && call Binding.hasVariable() call Binding.hasVariable() call Binding.hasVariable() call Binding.hasVariable() call Binding.hasVariable() return call Binding.getVariable() call Binding.getVariable() call Binding.getVariable() call Binding.getVariable() call Binding.getVariable() else if return if decl_stmt org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper = if != return new else return new else if != decl_stmt org.springframework.beans.MutablePropertyValues = if call org.springframework.beans.MutablePropertyValues.contains(String) call org.springframework.beans.MutablePropertyValues.contains(String) call org.springframework.beans.MutablePropertyValues.contains(String) call org.springframework.beans.MutablePropertyValues.contains(String) call org.springframework.beans.MutablePropertyValues.contains(String) return call org.springframework.beans.MutablePropertyValues.get(String) call org.springframework.beans.MutablePropertyValues.get(String) call org.springframework.beans.MutablePropertyValues.get(String) call org.springframework.beans.MutablePropertyValues.get(String) call org.springframework.beans.MutablePropertyValues.get(String) else decl_stmt DeferredProperty = + if != return else return else return boolean XmlReaderContext BeanDefinitionParserDelegate private private decl_stmt org.springframework.beans.factory.xml.XmlReaderContext = new decl_stmt org.springframework.beans.factory.xml.BeanDefinitionParserDelegate = new decl_stmt boolean = != if ! = new return new protected protected if ! = protected protected if ! = public public public public return public public if return else if return else if != return new else return public public return public public = public public if ! public public boolean public public decl_stmt boolean = return boolean public public decl_stmt boolean = for : return public public return public public return public public private private if instanceof call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new