org.springframework.context.event org.junit.Before import org.junit.Test import org.springframework.aop.framework.ProxyFactory import org.springframework.beans.BeansException import org.springframework.beans.MutablePropertyValues import org.springframework.beans.factory.FactoryBean import org.springframework.context.ApplicationEvent import org.springframework.context.ApplicationEventPublisher import org.springframework.context.TestListener import org.springframework.context.event.test.TestEvent import org.springframework.context.support.StaticApplicationContext import org.springframework.tests.sample.beans.ITestBean import org.springframework.tests.sample.beans.TestBean import static static org.junit.Assert.* import static static org.mockito.BDDMockito.* import class org.springframework.context.event.EventPublicationInterceptorTests ApplicationEventPublisher public public = EventPublicationInterceptor = public = public throws decl_stmt org.springframework.context.event.EventPublicationInterceptor = new call EventPublicationInterceptor.setApplicationEventPublisher() call EventPublicationInterceptor.setApplicationEventPublisher() call EventPublicationInterceptor.setApplicationEventPublisher() call EventPublicationInterceptor.setApplicationEventPublisher() call EventPublicationInterceptor.setApplicationEventPublisher() call EventPublicationInterceptor.afterPropertiesSet() call EventPublicationInterceptor.afterPropertiesSet() call EventPublicationInterceptor.afterPropertiesSet() call EventPublicationInterceptor.afterPropertiesSet() call EventPublicationInterceptor.afterPropertiesSet() EventPublicationInterceptor = public = public throws decl_stmt org.springframework.context.event.EventPublicationInterceptor = new call EventPublicationInterceptor.setApplicationEventPublisher() call EventPublicationInterceptor.setApplicationEventPublisher() call EventPublicationInterceptor.setApplicationEventPublisher() call EventPublicationInterceptor.setApplicationEventPublisher() call EventPublicationInterceptor.setApplicationEventPublisher() call EventPublicationInterceptor.setApplicationEventClass() call EventPublicationInterceptor.setApplicationEventClass() call EventPublicationInterceptor.setApplicationEventClass() call EventPublicationInterceptor.setApplicationEventClass() call EventPublicationInterceptor.setApplicationEventClass() call EventPublicationInterceptor.afterPropertiesSet() call EventPublicationInterceptor.afterPropertiesSet() call EventPublicationInterceptor.afterPropertiesSet() call EventPublicationInterceptor.afterPropertiesSet() call EventPublicationInterceptor.afterPropertiesSet() EventPublicationInterceptor = public = public throws decl_stmt org.springframework.context.event.EventPublicationInterceptor = new call EventPublicationInterceptor.setApplicationEventPublisher() call EventPublicationInterceptor.setApplicationEventPublisher() call EventPublicationInterceptor.setApplicationEventPublisher() call EventPublicationInterceptor.setApplicationEventPublisher() call EventPublicationInterceptor.setApplicationEventPublisher() call EventPublicationInterceptor.setApplicationEventClass() call EventPublicationInterceptor.setApplicationEventClass() call EventPublicationInterceptor.setApplicationEventClass() call EventPublicationInterceptor.setApplicationEventClass() call EventPublicationInterceptor.setApplicationEventClass() call EventPublicationInterceptor.afterPropertiesSet() call EventPublicationInterceptor.afterPropertiesSet() call EventPublicationInterceptor.afterPropertiesSet() call EventPublicationInterceptor.afterPropertiesSet() call EventPublicationInterceptor.afterPropertiesSet() EventPublicationInterceptor = public = public throws decl_stmt org.springframework.context.event.EventPublicationInterceptor = new call EventPublicationInterceptor.setApplicationEventPublisher() call EventPublicationInterceptor.setApplicationEventPublisher() call EventPublicationInterceptor.setApplicationEventPublisher() call EventPublicationInterceptor.setApplicationEventPublisher() call EventPublicationInterceptor.setApplicationEventPublisher() call EventPublicationInterceptor.setApplicationEventClass() call EventPublicationInterceptor.setApplicationEventClass() call EventPublicationInterceptor.setApplicationEventClass() call EventPublicationInterceptor.setApplicationEventClass() call EventPublicationInterceptor.setApplicationEventClass() call EventPublicationInterceptor.afterPropertiesSet() call EventPublicationInterceptor.afterPropertiesSet() call EventPublicationInterceptor.afterPropertiesSet() call EventPublicationInterceptor.afterPropertiesSet() call EventPublicationInterceptor.afterPropertiesSet() MutablePropertyValues TestBean TestListener StaticApplicationContext ProxyFactory TestListener EventPublicationInterceptor ITestBean public public throws decl_stmt org.springframework.tests.sample.beans.TestBean = new decl_stmt org.springframework.context.TestListener final final = new class class extends extends protected protected throws decl_stmt org.springframework.context.support.StaticApplicationContext = new decl_stmt org.springframework.beans.MutablePropertyValues = new call org.springframework.beans.MutablePropertyValues.add(String,Object) call org.springframework.beans.MutablePropertyValues.add(String,Object) call org.springframework.beans.MutablePropertyValues.add(String,Object) call org.springframework.beans.MutablePropertyValues.add(String,Object) call org.springframework.beans.MutablePropertyValues.add(String,Object) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call StaticApplicationContext.refresh() call StaticApplicationContext.refresh() call StaticApplicationContext.refresh() call StaticApplicationContext.refresh() call StaticApplicationContext.refresh() decl_stmt org.springframework.context.event.EventPublicationInterceptor = call StaticApplicationContext.getBean() call StaticApplicationContext.getBean() call StaticApplicationContext.getBean() call StaticApplicationContext.getBean() call StaticApplicationContext.getBean() decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() decl_stmt org.springframework.scheduling.annotation.ITestBean = call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.scheduling.annotation.ITestBean.getAge() call org.springframework.context.TestListener.getEventCount() call org.springframework.context.TestListener.getEventCount() call org.springframework.context.TestListener.getEventCount() call org.springframework.context.TestListener.getEventCount() call org.springframework.context.TestListener.getEventCount() == decl_stmt org.springframework.context.TestListener = call StaticApplicationContext.getBean() call StaticApplicationContext.getBean() call StaticApplicationContext.getBean() call StaticApplicationContext.getBean() call StaticApplicationContext.getBean() call org.springframework.context.TestListener.getEventCount() call org.springframework.context.TestListener.getEventCount() call org.springframework.context.TestListener.getEventCount() call org.springframework.context.TestListener.getEventCount() call org.springframework.context.TestListener.getEventCount() == protected protected throws public public throws return public < public < return public public return