org.springframework.oxm.xmlbeans java.io.IOException import java.io.InputStream import java.io.OutputStream import java.io.Reader import java.io.Writer import java.lang.ref.WeakReference import java.nio.CharBuffer import java.util.ArrayList import java.util.List import javax.xml.stream.XMLEventReader import javax.xml.stream.XMLEventWriter import javax.xml.stream.XMLStreamReader import javax.xml.stream.XMLStreamWriter import org.apache.xmlbeans.XMLStreamValidationException import org.apache.xmlbeans.XmlError import org.apache.xmlbeans.XmlException import org.apache.xmlbeans.XmlObject import org.apache.xmlbeans.XmlOptions import org.apache.xmlbeans.XmlSaxHandler import org.apache.xmlbeans.XmlValidationError import org.w3c.dom.Document import org.w3c.dom.Node import org.w3c.dom.NodeList import org.xml.sax.ContentHandler import org.xml.sax.InputSource import org.xml.sax.SAXException import org.xml.sax.SAXNotRecognizedException import org.xml.sax.SAXNotSupportedException import org.xml.sax.XMLReader import org.xml.sax.ext.LexicalHandler import org.springframework.oxm.Marshaller import org.springframework.oxm.MarshallingFailureException import org.springframework.oxm.UncategorizedMappingException import org.springframework.oxm.UnmarshallingFailureException import org.springframework.oxm.ValidationFailureException import org.springframework.oxm.XmlMappingException import org.springframework.oxm.support.AbstractMarshaller import org.springframework.util.xml.StaxUtils import class annotation org.springframework.oxm.xmlbeans.XmlBeansMarshaller super super extends XmlOptions boolean public public = public public return public public = public public return public public < return Node NodeList Document Node Node protected protected throws decl_stmt javax.swing.text.Document = == : decl_stmt sun.tools.tree.Node = decl_stmt NodeList = call Node.getChildNodes() call Node.getChildNodes() call Node.getChildNodes() call Node.getChildNodes() call Node.getChildNodes() for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt sun.tools.tree.Node = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt sun.tools.tree.Node = call Document.importNode() call Document.importNode() call Document.importNode() call Document.importNode() call Document.importNode() LexicalHandler ContentHandler protected protected decl_stmt java.net.ContentHandler = decl_stmt LexicalHandler = if instanceof = LexicalHandler ContentHandler protected protected throws decl_stmt java.net.ContentHandler = decl_stmt LexicalHandler = if instanceof = protected protected throws try catch throw protected protected throws protected protected throws XmlObject protected protected throws try decl_stmt XmlObject = return catch throw XMLReader protected protected throws decl_stmt XMLReader = try return new catch throw XmlObject protected protected throws try decl_stmt XmlObject = return catch throw XmlObject XmlSaxHandler protected protected throws decl_stmt XmlSaxHandler = call XmlSaxHandler.getContentHandler() call XmlSaxHandler.getContentHandler() call XmlSaxHandler.getContentHandler() call XmlSaxHandler.getContentHandler() call XmlSaxHandler.getContentHandler() try call XmlSaxHandler.getLexicalHandler() call XmlSaxHandler.getLexicalHandler() call XmlSaxHandler.getLexicalHandler() call XmlSaxHandler.getLexicalHandler() call XmlSaxHandler.getLexicalHandler() catch catch try decl_stmt XmlObject = call XmlSaxHandler.getObject() call XmlSaxHandler.getObject() call XmlSaxHandler.getObject() call XmlSaxHandler.getObject() call XmlSaxHandler.getObject() return catch throw catch throw XmlObject InputStream protected protected throws try decl_stmt java.io.InputStream = new decl_stmt XmlObject = return catch throw XmlObject Reader protected protected throws try decl_stmt java.io.Reader = new decl_stmt XmlObject = return catch throw StringBuilder decl List boolean XmlOptions protected protected throws if && != decl_stmt XmlOptions = if == = new decl_stmt java.util.List < = new < call XmlOptions.setErrorListener() call XmlOptions.setErrorListener() call XmlOptions.setErrorListener() call XmlOptions.setErrorListener() call XmlOptions.setErrorListener() if ! decl_stmt java.lang.StringBuilder = new decl_stmt boolean = for : if instanceof if ! call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = throw new new call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() protected protected if instanceof return new else if instanceof || instanceof if return new else return new else return new private private return InputStream public public throws decl_stmt java.io.InputStream = return != call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) : - InputStream public public throws decl_stmt java.io.InputStream = return != call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) : - InputStream public public throws decl_stmt java.io.InputStream = return != call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) : - InputStream public public throws decl_stmt java.io.InputStream = return != call java.io.InputStream.skip(long) call java.io.InputStream.skip(long) call java.io.InputStream.skip(long) call java.io.InputStream.skip(long) call java.io.InputStream.skip(long) : InputStream public public decl_stmt java.io.InputStream = return != && call java.io.InputStream.markSupported() call java.io.InputStream.markSupported() call java.io.InputStream.markSupported() call java.io.InputStream.markSupported() call java.io.InputStream.markSupported() InputStream public public decl_stmt java.io.InputStream = if != call java.io.InputStream.mark(int) call java.io.InputStream.mark(int) call java.io.InputStream.mark(int) call java.io.InputStream.mark(int) call java.io.InputStream.mark(int) InputStream public public throws decl_stmt java.io.InputStream = if != call java.io.InputStream.reset() call java.io.InputStream.reset() call java.io.InputStream.reset() call java.io.InputStream.reset() call java.io.InputStream.reset() InputStream public public throws decl_stmt java.io.InputStream = return != call InputStream.available() call InputStream.available() call InputStream.available() call InputStream.available() call InputStream.available() : InputStream public public throws decl_stmt java.io.InputStream = if != private private return Reader public public throws decl_stmt java.io.Reader = return != call java.io.Reader.read(char) call java.io.Reader.read(char) call java.io.Reader.read(char) call java.io.Reader.read(char) call java.io.Reader.read(char) : - Reader public public throws decl_stmt java.io.Reader = return != call java.io.Reader.read(char) call java.io.Reader.read(char) call java.io.Reader.read(char) call java.io.Reader.read(char) call java.io.Reader.read(char) : - Reader public public throws decl_stmt java.io.Reader = return != call java.io.Reader.read(char) call java.io.Reader.read(char) call java.io.Reader.read(char) call java.io.Reader.read(char) call java.io.Reader.read(char) : - Reader public public throws decl_stmt java.io.Reader = return != call java.io.Reader.read(char) call java.io.Reader.read(char) call java.io.Reader.read(char) call java.io.Reader.read(char) call java.io.Reader.read(char) : - Reader public public throws decl_stmt java.io.Reader = return != call java.io.Reader.skip(long) call java.io.Reader.skip(long) call java.io.Reader.skip(long) call java.io.Reader.skip(long) call java.io.Reader.skip(long) : Reader public public throws decl_stmt java.io.Reader = return != && call java.io.Reader.ready() call java.io.Reader.ready() call java.io.Reader.ready() call java.io.Reader.ready() call java.io.Reader.ready() Reader public public decl_stmt java.io.Reader = return != && call java.io.Reader.markSupported() call java.io.Reader.markSupported() call java.io.Reader.markSupported() call java.io.Reader.markSupported() call java.io.Reader.markSupported() Reader public public throws decl_stmt java.io.Reader = if != call java.io.Reader.mark(int) call java.io.Reader.mark(int) call java.io.Reader.mark(int) call java.io.Reader.mark(int) call java.io.Reader.mark(int) Reader public public throws decl_stmt java.io.Reader = if != call java.io.Reader.reset() call java.io.Reader.reset() call java.io.Reader.reset() call java.io.Reader.reset() call java.io.Reader.reset() Reader public public throws decl_stmt java.io.Reader = if !=