org.springframework.core.annotation java.lang.annotation.Annotation import java.lang.reflect.AnnotatedElement import java.lang.reflect.InvocationHandler import java.lang.reflect.Method import java.util.Arrays import java.util.Iterator import java.util.Map import java.util.concurrent.ConcurrentHashMap import org.springframework.util.Assert import org.springframework.util.ObjectUtils import org.springframework.util.StringUtils import static static org.springframework.core.annotation.AnnotationUtils.* import static static org.springframework.util.ReflectionUtils.* import class org.springframework.core.annotation.SynthesizedAnnotationInvocationHandler super super implements decl Map decl AnnotationAttributeExtractor String public public throws if return if return if return if return if ! decl_stmt java.lang.String = throw new return private < extends extends private < extends extends return String String Object private private decl_stmt java.lang.String = decl_stmt java.lang.Object = if == = if == decl_stmt java.lang.String = throw new if instanceof = else if instanceof = if call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() = return private private if instanceof return if instanceof return if instanceof return if instanceof return if instanceof return if instanceof return if instanceof return if instanceof return return Object Object private private if == return if ! return for : decl_stmt java.lang.Object = decl_stmt java.lang.Object = if ! return return int Object int private private decl_stmt int = for : decl_stmt java.lang.Object = decl_stmt int if call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() = else = call Object.hashCode() call Object.hashCode() call Object.hashCode() call Object.hashCode() call Object.hashCode() += * ^ return private private if instanceof return if instanceof return if instanceof return if instanceof return if instanceof return if instanceof return if instanceof return if instanceof return return StringBuilder Method decl Iterator private private decl_stmt java.lang.StringBuilder = new decl_stmt java.util.Iterator < = while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt com.sun.jdi.Method = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call com.sun.jdi.Method.getName() call com.sun.jdi.Method.getName() call com.sun.jdi.Method.getName() call com.sun.jdi.Method.getName() call com.sun.jdi.Method.getName() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() : return call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) private private if instanceof return + + return