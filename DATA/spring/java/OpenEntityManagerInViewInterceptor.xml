org.springframework.orm.jpa.support javax.persistence.EntityManager import javax.persistence.PersistenceException import org.springframework.dao.DataAccessException import org.springframework.dao.DataAccessResourceFailureException import org.springframework.orm.jpa.EntityManagerFactoryAccessor import org.springframework.orm.jpa.EntityManagerFactoryUtils import org.springframework.orm.jpa.EntityManagerHolder import org.springframework.transaction.support.TransactionSynchronizationManager import org.springframework.ui.ModelMap import org.springframework.web.context.request.AsyncWebRequestInterceptor import org.springframework.web.context.request.WebRequest import org.springframework.web.context.request.async.WebAsyncManager import org.springframework.web.context.request.async.WebAsyncUtils import class org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor super super extends super implements String Integer EntityManager int WebAsyncManager AsyncRequestInterceptor EntityManagerHolder String public public throws decl_stmt java.lang.String = decl_stmt org.springframework.web.context.request.async.WebAsyncManager = if call org.springframework.web.context.request.async.WebAsyncManager.hasConcurrentResult() call org.springframework.web.context.request.async.WebAsyncManager.hasConcurrentResult() call org.springframework.web.context.request.async.WebAsyncManager.hasConcurrentResult() call org.springframework.web.context.request.async.WebAsyncManager.hasConcurrentResult() call org.springframework.web.context.request.async.WebAsyncManager.hasConcurrentResult() if return if decl_stmt java.lang.Integer = decl_stmt int = != + : else try decl_stmt EntityManager = decl_stmt org.springframework.orm.jpa.EntityManagerHolder = new decl_stmt org.springframework.orm.jpa.support.AsyncRequestInterceptor = new call org.springframework.web.context.request.async.WebAsyncManager.registerCallableInterceptor(Object,CallableProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerCallableInterceptor(Object,CallableProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerCallableInterceptor(Object,CallableProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerCallableInterceptor(Object,CallableProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerCallableInterceptor(Object,CallableProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerDeferredResultInterceptor(Object,DeferredResultProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerDeferredResultInterceptor(Object,DeferredResultProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerDeferredResultInterceptor(Object,DeferredResultProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerDeferredResultInterceptor(Object,DeferredResultProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerDeferredResultInterceptor(Object,DeferredResultProcessingInterceptor) catch throw new public public EntityManagerHolder public public throws if ! decl_stmt org.springframework.orm.jpa.EntityManagerHolder = call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() Integer String private private decl_stmt java.lang.String = decl_stmt java.lang.Integer = if == return if > - else return public public if ! protected protected return + private private if == return return