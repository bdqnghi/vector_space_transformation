org.springframework.context.weaving java.lang.instrument.ClassFileTransformer import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.factory.BeanClassLoaderAware import org.springframework.beans.factory.DisposableBean import org.springframework.instrument.InstrumentationSavingAgent import org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver import org.springframework.instrument.classloading.LoadTimeWeaver import org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver import org.springframework.instrument.classloading.glassfish.GlassFishLoadTimeWeaver import org.springframework.instrument.classloading.jboss.JBossLoadTimeWeaver import org.springframework.instrument.classloading.tomcat.TomcatLoadTimeWeaver import org.springframework.instrument.classloading.weblogic.WebLogicLoadTimeWeaver import org.springframework.instrument.classloading.websphere.WebSphereLoadTimeWeaver import class org.springframework.context.weaving.DefaultContextLoadTimeWeaver super super implements LoadTimeWeaver Log LoadTimeWeaver public public decl_stmt org.springframework.instrument.classloading.LoadTimeWeaver = if != if call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() + call LoadTimeWeaver.getClass() call LoadTimeWeaver.getClass() call LoadTimeWeaver.getClass() call LoadTimeWeaver.getClass() call LoadTimeWeaver.getClass() = else if call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() = new else try = new call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() + catch throw new + + String protected protected decl_stmt java.lang.String = try if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) return new else if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) return new else if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) return new else if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) return new else if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) return new catch call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() + return public public if instanceof call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() + public public public public return public public return