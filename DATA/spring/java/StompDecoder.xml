org.springframework.messaging.simp.stomp java.io.ByteArrayOutputStream import java.nio.ByteBuffer import java.nio.charset.Charset import java.util.ArrayList import java.util.List import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.messaging.Message import org.springframework.messaging.support.MessageBuilder import org.springframework.messaging.support.MessageHeaderInitializer import org.springframework.messaging.support.NativeMessageHeaderAccessor import org.springframework.util.InvalidMimeTypeException import org.springframework.util.MultiValueMap import class org.springframework.messaging.simp.stomp.StompDecoder Charset MessageHeaderInitializer Log decl byte public public = public public return public < < public < < return decl Message decl List public < < public < < < decl_stmt java.util.List < < = new < < while decl_stmt org.springframework.messaging.Message < = if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else break return StompHeaderAccessor decl MultiValueMap StompCommand String decl byte String decl Message private < private < < decl_stmt org.springframework.messaging.Message < = decl_stmt java.lang.String = if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = decl_stmt byte = if > decl_stmt StompCommand = = = if != if > && ! call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() throw new call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() + + + + call org.springframework.messaging.simp.stomp.StompHeaderAccessor.updateSimpMessageHeadersFromStompHeaders() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.updateSimpMessageHeadersFromStompHeaders() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.updateSimpMessageHeadersFromStompHeaders() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.updateSimpMessageHeadersFromStompHeaders() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.updateSimpMessageHeadersFromStompHeaders() call StompHeaderAccessor.setLeaveMutable() call StompHeaderAccessor.setLeaveMutable() call StompHeaderAccessor.setLeaveMutable() call StompHeaderAccessor.setLeaveMutable() call StompHeaderAccessor.setLeaveMutable() = call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) else if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() if != && != decl_stmt java.lang.String = decl_stmt org.springframework.util.MultiValueMap < = < call StompHeaderAccessor.getHeader() call StompHeaderAccessor.getHeader() call StompHeaderAccessor.getHeader() call StompHeaderAccessor.getHeader() call StompHeaderAccessor.getHeader() if != else decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = call StompHeaderAccessor.setLeaveMutable() call StompHeaderAccessor.setLeaveMutable() call StompHeaderAccessor.setLeaveMutable() call StompHeaderAccessor.setLeaveMutable() call StompHeaderAccessor.setLeaveMutable() = call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) return MessageHeaderInitializer private private decl_stmt org.springframework.messaging.support.MessageHeaderInitializer = if != call MessageHeaderInitializer.initHeaders() call MessageHeaderInitializer.initHeaders() call MessageHeaderInitializer.initHeaders() call MessageHeaderInitializer.initHeaders() call MessageHeaderInitializer.initHeaders() protected protected while if ! break ByteArrayOutputStream private private decl_stmt java.io.ByteArrayOutputStream = new while > && ! call java.io.ByteArrayOutputStream.write(int) call java.io.ByteArrayOutputStream.write(int) call java.io.ByteArrayOutputStream.write(int) call java.io.ByteArrayOutputStream.write(int) call java.io.ByteArrayOutputStream.write(int) return new call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() String String boolean int String ByteArrayOutputStream private private while decl_stmt java.io.ByteArrayOutputStream = new decl_stmt boolean = while if = break call java.io.ByteArrayOutputStream.write(int) call java.io.ByteArrayOutputStream.write(int) call java.io.ByteArrayOutputStream.write(int) call java.io.ByteArrayOutputStream.write(int) call java.io.ByteArrayOutputStream.write(int) if call java.io.ByteArrayOutputStream.size() call java.io.ByteArrayOutputStream.size() call java.io.ByteArrayOutputStream.size() call java.io.ByteArrayOutputStream.size() call java.io.ByteArrayOutputStream.size() > && decl_stmt java.lang.String = new call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() decl_stmt int = call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) if <= if > throw new + + else decl_stmt java.lang.String = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) decl_stmt java.lang.String = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) + try catch if > throw else break StringBuilder Character int int private private decl_stmt java.lang.StringBuilder = new decl_stmt int = decl_stmt int = while >= call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if + >= throw new + + + decl_stmt java.lang.Character = + if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else throw new + + + = + = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() Integer byte ByteArrayOutputStream private private decl_stmt java.lang.Integer try = catch call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() + = if != && >= if > decl_stmt byte = new if != throw new return else return else decl_stmt java.io.ByteArrayOutputStream = new while > decl_stmt byte = if == return call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() else call java.io.ByteArrayOutputStream.write(int) call java.io.ByteArrayOutputStream.write(int) call java.io.ByteArrayOutputStream.write(int) call java.io.ByteArrayOutputStream.write(int) call java.io.ByteArrayOutputStream.write(int) return byte private private if > decl_stmt byte = if == return else if == if > && == return else throw new - return