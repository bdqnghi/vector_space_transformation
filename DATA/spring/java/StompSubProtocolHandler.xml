org.springframework.web.socket.messaging java.io.IOException import java.nio.ByteBuffer import java.security.Principal import java.util.Arrays import java.util.List import java.util.Map import java.util.Set import java.util.concurrent.ConcurrentHashMap import java.util.concurrent.atomic.AtomicInteger import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.context.ApplicationEvent import org.springframework.context.ApplicationEventPublisher import org.springframework.context.ApplicationEventPublisherAware import org.springframework.messaging.Message import org.springframework.messaging.MessageChannel import org.springframework.messaging.simp.SimpAttributes import org.springframework.messaging.simp.SimpAttributesContextHolder import org.springframework.messaging.simp.SimpMessageHeaderAccessor import org.springframework.messaging.simp.SimpMessageType import org.springframework.messaging.simp.stomp.BufferingStompDecoder import org.springframework.messaging.simp.stomp.StompCommand import org.springframework.messaging.simp.stomp.StompDecoder import org.springframework.messaging.simp.stomp.StompEncoder import org.springframework.messaging.simp.stomp.StompHeaderAccessor import org.springframework.messaging.simp.user.DestinationUserNameProvider import org.springframework.messaging.support.AbstractMessageChannel import org.springframework.messaging.support.ChannelInterceptor import org.springframework.messaging.support.ImmutableMessageChannelInterceptor import org.springframework.messaging.support.MessageBuilder import org.springframework.messaging.support.MessageHeaderAccessor import org.springframework.messaging.support.MessageHeaderInitializer import org.springframework.util.Assert import org.springframework.util.MimeTypeUtils import org.springframework.web.socket.BinaryMessage import org.springframework.web.socket.CloseStatus import org.springframework.web.socket.TextMessage import org.springframework.web.socket.WebSocketMessage import org.springframework.web.socket.WebSocketSession import org.springframework.web.socket.handler.SessionLimitExceededException import org.springframework.web.socket.handler.WebSocketSessionDecorator import org.springframework.web.socket.sockjs.transport.SockJsSession import class org.springframework.web.socket.messaging.StompSubProtocolHandler super super implements decl org StompDecoder String decl messaging decl simp StompSubProtocolErrorHandler decl byte decl springframework StompEncoder decl UserSessionRegistry decl user int Log int public public = public public return public public = public public return public public = public public return public public = public public return public < public < return public public = public public return StompHeaderAccessor decl List Principal ByteBuffer BufferingStompDecoder boolean public public < decl_stmt java.util.List < < try decl_stmt ByteBuffer if instanceof = else if instanceof = else return decl_stmt org.springframework.messaging.simp.stomp.BufferingStompDecoder = if == throw new + + = call org.springframework.messaging.simp.stomp.BufferingStompDecoder.decode(ByteBuffer) call org.springframework.messaging.simp.stomp.BufferingStompDecoder.decode(ByteBuffer) call org.springframework.messaging.simp.stomp.BufferingStompDecoder.decode(ByteBuffer) call org.springframework.messaging.simp.stomp.BufferingStompDecoder.decode(ByteBuffer) call org.springframework.messaging.simp.stomp.BufferingStompDecoder.decode(ByteBuffer) if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + + + call BufferingStompDecoder.getBufferSize() call BufferingStompDecoder.getBufferSize() call BufferingStompDecoder.getBufferSize() call BufferingStompDecoder.getBufferSize() call BufferingStompDecoder.getBufferSize() + + call org.springframework.messaging.simp.stomp.BufferingStompDecoder.getBufferSizeLimit() call org.springframework.messaging.simp.stomp.BufferingStompDecoder.getBufferSizeLimit() call org.springframework.messaging.simp.stomp.BufferingStompDecoder.getBufferSizeLimit() call org.springframework.messaging.simp.stomp.BufferingStompDecoder.getBufferSizeLimit() call org.springframework.messaging.simp.stomp.BufferingStompDecoder.getBufferSizeLimit() + return catch if call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + + + + return for < : try decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = decl_stmt java.security.Principal = call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionAttributes() call StompHeaderAccessor.setSessionAttributes() call StompHeaderAccessor.setSessionAttributes() call StompHeaderAccessor.setSessionAttributes() call StompHeaderAccessor.setSessionAttributes() call StompHeaderAccessor.setUser() call StompHeaderAccessor.setUser() call StompHeaderAccessor.setUser() call StompHeaderAccessor.setUser() call StompHeaderAccessor.setUser() call StompHeaderAccessor.setHeader() call StompHeaderAccessor.setHeader() call StompHeaderAccessor.setHeader() call StompHeaderAccessor.setHeader() call StompHeaderAccessor.setHeader() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getHeartbeat() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getHeartbeat() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getHeartbeat() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getHeartbeat() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getHeartbeat() if ! call StompHeaderAccessor.setImmutable() call StompHeaderAccessor.setImmutable() call StompHeaderAccessor.setImmutable() call StompHeaderAccessor.setImmutable() call StompHeaderAccessor.setImmutable() if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getShortLogMessage(Object) if call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() else if call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() try decl_stmt boolean = if && != if call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() new else if call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() new else if call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() new finally catch call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + + + decl Message StompHeaderAccessor private private < if == return decl_stmt org.springframework.messaging.Message < = if == return decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = call decl Message.getPayload() call decl Message.getPayload() call decl Message.getPayload() call decl Message.getPayload() call decl Message.getPayload() StompHeaderAccessor decl byte protected protected decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setMessage(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setMessage(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setMessage(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setMessage(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setMessage(String) decl_stmt byte = call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() try new catch call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() private private if != return if instanceof for : if instanceof = return = return private private try catch call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + String decl Message SimpAttributes StompCommand Principal StompHeaderAccessor decl byte public public < if ! instanceof call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + + return decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = decl_stmt StompCommand = call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() if if call StompHeaderAccessor.getSubscriptionId() call StompHeaderAccessor.getSubscriptionId() call StompHeaderAccessor.getSubscriptionId() call StompHeaderAccessor.getSubscriptionId() call StompHeaderAccessor.getSubscriptionId() == call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() + decl_stmt java.lang.String = call StompHeaderAccessor.getFirstNativeHeader() call StompHeaderAccessor.getFirstNativeHeader() call StompHeaderAccessor.getFirstNativeHeader() call StompHeaderAccessor.getFirstNativeHeader() call StompHeaderAccessor.getFirstNativeHeader() if != = call StompHeaderAccessor.removeNativeHeader() call StompHeaderAccessor.removeNativeHeader() call StompHeaderAccessor.removeNativeHeader() call StompHeaderAccessor.removeNativeHeader() call StompHeaderAccessor.removeNativeHeader() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) else if = if != && try decl_stmt org.springframework.messaging.simp.SimpAttributes = new decl_stmt java.security.Principal = new < finally decl_stmt byte = if && != decl_stmt org.springframework.messaging.Message < = < = = call decl Message.getPayload() call decl Message.getPayload() call decl Message.getPayload() call decl Message.getPayload() call decl Message.getPayload() decl byte boolean StompCommand private private decl_stmt StompCommand = try decl_stmt byte = decl_stmt boolean = > && ! instanceof && if new else new catch throw catch call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + = finally if try catch StompHeaderAccessor MessageHeaderAccessor SimpMessageType private private < decl_stmt org.springframework.messaging.support.MessageHeaderAccessor = if == throw new + decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor if instanceof = else if instanceof = decl_stmt SimpMessageType = if = else if = call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setMessage(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setMessage(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setMessage(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setMessage(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setMessage(String) else if = else if call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() == || call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.updateStompCommandAsServerMessage() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.updateStompCommandAsServerMessage() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.updateStompCommandAsServerMessage() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.updateStompCommandAsServerMessage() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.updateStompCommandAsServerMessage() else throw new + call MessageHeaderAccessor.getClass() call MessageHeaderAccessor.getClass() call MessageHeaderAccessor.getClass() call MessageHeaderAccessor.getClass() call MessageHeaderAccessor.getClass() + + return String decl Set StompHeaderAccessor decl long StompHeaderAccessor decl Message private private decl_stmt java.lang.String = decl_stmt org.springframework.messaging.Message < = < + decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = decl_stmt java.util.Set < = call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getAcceptVersion() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getAcceptVersion() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getAcceptVersion() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getAcceptVersion() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getAcceptVersion() if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setVersion(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setVersion(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setVersion(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setVersion(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setVersion(String) else if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setVersion(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setVersion(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setVersion(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setVersion(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setVersion(String) else if ! call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() throw new + + decl_stmt long = if != call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHeartbeat(long,long) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHeartbeat(long,long) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHeartbeat(long,long) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHeartbeat(long,long) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHeartbeat(long,long) else call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHeartbeat(long,long) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHeartbeat(long,long) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHeartbeat(long,long) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHeartbeat(long,long) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHeartbeat(long,long) return protected protected < return : String decl long Principal private private < decl_stmt java.security.Principal = if != = call java.security.Principal.getName() call java.security.Principal.getName() call java.security.Principal.getName() call java.security.Principal.getName() call java.security.Principal.getName() if != decl_stmt java.lang.String = decl_stmt long = if > = if instanceof return String private private decl_stmt java.lang.String = if instanceof = return public public < return public public if < new String decl Message Principal SimpAttributes Principal public public decl_stmt java.security.Principal = if != && != decl_stmt java.lang.String = decl_stmt org.springframework.messaging.Message < = decl_stmt org.springframework.messaging.simp.SimpAttributes = try if != decl_stmt java.security.Principal = new finally call org.springframework.messaging.simp.SimpAttributes.sessionCompleted() call org.springframework.messaging.simp.SimpAttributes.sessionCompleted() call org.springframework.messaging.simp.SimpAttributes.sessionCompleted() call org.springframework.messaging.simp.SimpAttributes.sessionCompleted() call org.springframework.messaging.simp.SimpAttributes.sessionCompleted() StompHeaderAccessor private < private < decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = if != call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionAttributes() call StompHeaderAccessor.setSessionAttributes() call StompHeaderAccessor.setSessionAttributes() call StompHeaderAccessor.setSessionAttributes() call StompHeaderAccessor.setSessionAttributes() call StompHeaderAccessor.setUser() call StompHeaderAccessor.setUser() call StompHeaderAccessor.setUser() call StompHeaderAccessor.setUser() call StompHeaderAccessor.setUser() return call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() public public return + public public public public public public public public return + + + + + +