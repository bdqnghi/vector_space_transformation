org.springframework.jms.support.converter java.io.Serializable import java.util.Enumeration import java.util.HashMap import java.util.Map import javax.jms.BytesMessage import javax.jms.JMSException import javax.jms.MapMessage import javax.jms.Message import javax.jms.ObjectMessage import javax.jms.Session import javax.jms.TextMessage import org.springframework.util.ObjectUtils import class org.springframework.jms.support.converter.SimpleMessageConverter super super implements public public throws if instanceof return else if instanceof return else if instanceof return else if instanceof return < else if instanceof return else throw new + + + public public throws if instanceof return else if instanceof return else if instanceof return else if instanceof return else return protected protected throws return BytesMessage protected protected throws decl_stmt BytesMessage = call BytesMessage.writeBytes() call BytesMessage.writeBytes() call BytesMessage.writeBytes() call BytesMessage.writeBytes() call BytesMessage.writeBytes() return MapMessage protected protected < throws decl_stmt MapMessage = for < : if ! instanceof throw new + + call MapMessage.setObject() call MapMessage.setObject() call MapMessage.setObject() call MapMessage.setObject() call MapMessage.setObject() return protected protected throws return protected protected throws return decl byte protected protected throws decl_stmt byte = new int return decl Map decl Enumeration String protected < protected < throws decl_stmt java.util.Map < = new < decl_stmt java.util.Enumeration < = while call decl Enumeration.hasMoreElements() call decl Enumeration.hasMoreElements() call decl Enumeration.hasMoreElements() call decl Enumeration.hasMoreElements() call decl Enumeration.hasMoreElements() decl_stmt java.lang.String = call decl Enumeration.nextElement() call decl Enumeration.nextElement() call decl Enumeration.nextElement() call decl Enumeration.nextElement() call decl Enumeration.nextElement() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return protected protected throws return