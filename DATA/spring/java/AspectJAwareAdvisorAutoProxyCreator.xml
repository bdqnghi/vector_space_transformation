org.springframework.aop.aspectj.autoproxy java.util.ArrayList import java.util.Comparator import java.util.List import org.aopalliance.aop.Advice import org.aspectj.util.PartialOrder import org.aspectj.util.PartialOrder.PartialComparable import org.springframework.aop.Advisor import org.springframework.aop.aspectj.AbstractAspectJAdvice import org.springframework.aop.aspectj.AspectJPointcutAdvisor import org.springframework.aop.aspectj.AspectJProxyUtils import org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator import org.springframework.aop.interceptor.ExposeInvocationInterceptor import org.springframework.core.Ordered import org.springframework.util.ClassUtils import class annotation org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator super super extends decl Comparator decl List decl List decl List protected < protected < < decl_stmt java.util.List < = new < for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new decl_stmt java.util.List < = if != decl_stmt java.util.List < = new < for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return else return protected protected < decl List protected protected < decl_stmt java.util.List < = for : if instanceof if return return Advisor public public decl_stmt org.springframework.aop.Advisor = return public public return public public return StringBuilder Advice AbstractAspectJAdvice public public decl_stmt java.lang.StringBuilder = new decl_stmt Advice = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call Advice.getClass() call Advice.getClass() call Advice.getClass() call Advice.getClass() call Advice.getClass() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if instanceof call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if instanceof decl_stmt org.springframework.aop.aspectj.AbstractAspectJAdvice = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call org.springframework.aop.aspectj.AbstractAspectJAdvice.getAspectName() call org.springframework.aop.aspectj.AbstractAspectJAdvice.getAspectName() call org.springframework.aop.aspectj.AbstractAspectJAdvice.getAspectName() call org.springframework.aop.aspectj.AbstractAspectJAdvice.getAspectName() call org.springframework.aop.aspectj.AbstractAspectJAdvice.getAspectName() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call org.springframework.aop.aspectj.AbstractAspectJAdvice.getDeclarationOrder() call org.springframework.aop.aspectj.AbstractAspectJAdvice.getDeclarationOrder() call org.springframework.aop.aspectj.AbstractAspectJAdvice.getDeclarationOrder() call org.springframework.aop.aspectj.AbstractAspectJAdvice.getDeclarationOrder() call org.springframework.aop.aspectj.AbstractAspectJAdvice.getDeclarationOrder() return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString()