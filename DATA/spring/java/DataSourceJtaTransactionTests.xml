org.springframework.jdbc.datasource java.sql.Connection import java.sql.SQLException import java.util.HashMap import java.util.List import java.util.Map import javax.sql.DataSource import javax.transaction.RollbackException import javax.transaction.Status import javax.transaction.SystemException import javax.transaction.Transaction import javax.transaction.TransactionManager import javax.transaction.UserTransaction import org.junit.After import org.junit.Before import org.junit.Test import org.springframework.beans.factory.support.StaticListableBeanFactory import org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup import org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter import org.springframework.transaction.TransactionDefinition import org.springframework.transaction.TransactionException import org.springframework.transaction.TransactionStatus import org.springframework.transaction.jta.JtaTransactionManager import org.springframework.transaction.jta.JtaTransactionObject import org.springframework.transaction.support.TransactionCallbackWithoutResult import org.springframework.transaction.support.TransactionSynchronization import org.springframework.transaction.support.TransactionSynchronizationManager import org.springframework.transaction.support.TransactionTemplate import static static org.junit.Assert.* import static static org.mockito.BDDMockito.* import class org.springframework.jdbc.datasource.DataSourceJtaTransactionTests UserTransaction Connection Transaction DataSource TransactionManager public public throws = = = = = call javax.sql.DataSource.getConnection() call javax.sql.DataSource.getConnection() call javax.sql.DataSource.getConnection() call javax.sql.DataSource.getConnection() call javax.sql.DataSource.getConnection() public public public public throws public public throws Connection JtaTransactionManager TransactionTemplate private private final final throws if call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() else call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() decl_stmt org.springframework.transaction.jta.JtaTransactionManager = new decl_stmt org.springframework.transaction.support.TransactionTemplate = new ! ! call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) new protected protected throws ! decl_stmt sun.rmi.transport.Connection = = if ! ! if Connection protected protected throws ! decl_stmt sun.rmi.transport.Connection = = if public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws Connection DataSource TransactionTemplate JtaTransactionManager private private final final final final final final final final throws call TransactionManager.suspend() call TransactionManager.suspend() call TransactionManager.suspend() call TransactionManager.suspend() call TransactionManager.suspend() if call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() else call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() decl_stmt javax.sql.DataSource final final = new : decl_stmt org.springframework.transaction.jta.JtaTransactionManager = new decl_stmt org.springframework.transaction.support.TransactionTemplate final final = new call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() ! ! call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) new protected protected throws ! decl_stmt sun.rmi.transport.Connection = try call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() = if ! catch for = < ++ call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) new protected protected throws ! try decl_stmt sun.rmi.transport.Connection = call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() = catch if if try if ! = call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() = catch else if ! ! if else if && ! else Connection protected protected throws ! decl_stmt sun.rmi.transport.Connection = try call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() = if ! catch for = < ++ new protected protected throws ! try decl_stmt sun.rmi.transport.Connection = call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() = catch if if try if ! = call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() = catch else if Connection protected protected throws ! try decl_stmt sun.rmi.transport.Connection = call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() = catch public public throws public public throws public public throws public public throws JtaTransactionManager TransactionTemplate TransactionTemplate Connection Connection DataSource private private final final throws if call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call TransactionManager.suspend() call TransactionManager.suspend() call TransactionManager.suspend() call TransactionManager.suspend() call TransactionManager.suspend() else call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() decl_stmt javax.sql.DataSource final final = decl_stmt sun.rmi.transport.Connection final final = decl_stmt sun.rmi.transport.Connection final final = call javax.sql.DataSource.getConnection() call javax.sql.DataSource.getConnection() call javax.sql.DataSource.getConnection() call javax.sql.DataSource.getConnection() call javax.sql.DataSource.getConnection() decl_stmt org.springframework.transaction.jta.JtaTransactionManager final final = new decl_stmt org.springframework.transaction.support.TransactionTemplate = new call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() : call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) new protected protected decl_stmt org.springframework.transaction.support.TransactionTemplate = new call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() : call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) new protected protected if TransactionTemplate protected protected decl_stmt org.springframework.transaction.support.TransactionTemplate = new call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() : call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) new protected protected protected protected public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws Connection DataSource TransactionTemplate JtaTransactionManager private private final final final final throws call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() if call TransactionManager.suspend() call TransactionManager.suspend() call TransactionManager.suspend() call TransactionManager.suspend() call TransactionManager.suspend() new else call TransactionManager.suspend() call TransactionManager.suspend() call TransactionManager.suspend() call TransactionManager.suspend() call TransactionManager.suspend() new call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() decl_stmt javax.sql.DataSource final final = new : if instanceof decl_stmt org.springframework.transaction.jta.JtaTransactionManager = new decl_stmt org.springframework.transaction.support.TransactionTemplate final final = new call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() call TransactionTemplate.setPropagationBehavior() ! ! try call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) new protected protected throws ! decl_stmt sun.rmi.transport.Connection = try call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() = if ! catch try call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) new protected protected throws ! decl_stmt sun.rmi.transport.Connection = = finally if try call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() catch catch ! ! if if else Connection protected protected throws ! decl_stmt sun.rmi.transport.Connection = try call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() = if ! catch try new protected protected throws ! decl_stmt sun.rmi.transport.Connection = = finally if try call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() call sun.rmi.transport.Connection.isReadOnly() catch Connection protected protected throws ! decl_stmt sun.rmi.transport.Connection = = Thread JtaTransactionManager boolean TransactionTemplate Connection public public throws decl_stmt org.springframework.transaction.jta.JtaTransactionManager = new protected protected final final final < throws decl_stmt java.lang.Thread = new public public call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() try call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) catch decl_stmt org.springframework.transaction.support.TransactionTemplate = new ! ! call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() for = < ++ decl_stmt boolean final final = != call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) new protected protected throws ! decl_stmt sun.rmi.transport.Connection = = if if ! else ! ! Thread protected protected final final final < throws decl_stmt java.lang.Thread = new public public call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() try call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) catch public public Connection protected protected throws ! decl_stmt sun.rmi.transport.Connection = = if Connection IsolationLevelDataSourceAdapter TransactionTemplate JtaTransactionManager public public throws call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() decl_stmt org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter final final = new call IsolationLevelDataSourceAdapter.setTargetDataSource() call IsolationLevelDataSourceAdapter.setTargetDataSource() call IsolationLevelDataSourceAdapter.setTargetDataSource() call IsolationLevelDataSourceAdapter.setTargetDataSource() call IsolationLevelDataSourceAdapter.setTargetDataSource() call IsolationLevelDataSourceAdapter.afterPropertiesSet() call IsolationLevelDataSourceAdapter.afterPropertiesSet() call IsolationLevelDataSourceAdapter.afterPropertiesSet() call IsolationLevelDataSourceAdapter.afterPropertiesSet() call IsolationLevelDataSourceAdapter.afterPropertiesSet() decl_stmt org.springframework.transaction.jta.JtaTransactionManager = new call org.springframework.transaction.jta.JtaTransactionManager.setAllowCustomIsolationLevels(boolean) call org.springframework.transaction.jta.JtaTransactionManager.setAllowCustomIsolationLevels(boolean) call org.springframework.transaction.jta.JtaTransactionManager.setAllowCustomIsolationLevels(boolean) call org.springframework.transaction.jta.JtaTransactionManager.setAllowCustomIsolationLevels(boolean) call org.springframework.transaction.jta.JtaTransactionManager.setAllowCustomIsolationLevels(boolean) decl_stmt org.springframework.transaction.support.TransactionTemplate = new call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) new protected protected throws decl_stmt sun.rmi.transport.Connection = call TransactionTemplate.setIsolationLevel() call TransactionTemplate.setIsolationLevel() call TransactionTemplate.setIsolationLevel() call TransactionTemplate.setIsolationLevel() call TransactionTemplate.setIsolationLevel() call TransactionTemplate.setReadOnly() call TransactionTemplate.setReadOnly() call TransactionTemplate.setReadOnly() call TransactionTemplate.setReadOnly() call TransactionTemplate.setReadOnly() call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) new protected protected throws decl_stmt sun.rmi.transport.Connection = Connection protected protected throws decl_stmt sun.rmi.transport.Connection = Connection protected protected throws decl_stmt sun.rmi.transport.Connection = public public throws public public throws JtaTransactionManager DataSource decl Map DataSource TransactionTemplate StaticListableBeanFactory Connection Connection Connection IsolationLevelDataSourceRouter private private throws call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() call UserTransaction.getStatus() decl_stmt javax.sql.DataSource final final = decl_stmt sun.rmi.transport.Connection final final = call javax.sql.DataSource.getConnection() call javax.sql.DataSource.getConnection() call javax.sql.DataSource.getConnection() call javax.sql.DataSource.getConnection() call javax.sql.DataSource.getConnection() decl_stmt javax.sql.DataSource final final = decl_stmt sun.rmi.transport.Connection final final = call javax.sql.DataSource.getConnection() call javax.sql.DataSource.getConnection() call javax.sql.DataSource.getConnection() call javax.sql.DataSource.getConnection() call javax.sql.DataSource.getConnection() decl_stmt org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter final final = new decl_stmt java.util.Map < = new < if call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call IsolationLevelDataSourceRouter.setDefaultTargetDataSource() call IsolationLevelDataSourceRouter.setDefaultTargetDataSource() call IsolationLevelDataSourceRouter.setDefaultTargetDataSource() call IsolationLevelDataSourceRouter.setDefaultTargetDataSource() call IsolationLevelDataSourceRouter.setDefaultTargetDataSource() decl_stmt org.springframework.beans.factory.support.StaticListableBeanFactory = new call org.springframework.beans.factory.support.StaticListableBeanFactory.addBean(String,Object) call org.springframework.beans.factory.support.StaticListableBeanFactory.addBean(String,Object) call org.springframework.beans.factory.support.StaticListableBeanFactory.addBean(String,Object) call org.springframework.beans.factory.support.StaticListableBeanFactory.addBean(String,Object) call org.springframework.beans.factory.support.StaticListableBeanFactory.addBean(String,Object) call org.springframework.beans.factory.support.StaticListableBeanFactory.addBean(String,Object) call org.springframework.beans.factory.support.StaticListableBeanFactory.addBean(String,Object) call org.springframework.beans.factory.support.StaticListableBeanFactory.addBean(String,Object) call org.springframework.beans.factory.support.StaticListableBeanFactory.addBean(String,Object) call org.springframework.beans.factory.support.StaticListableBeanFactory.addBean(String,Object) call IsolationLevelDataSourceRouter.setDataSourceLookup() call IsolationLevelDataSourceRouter.setDataSourceLookup() call IsolationLevelDataSourceRouter.setDataSourceLookup() call IsolationLevelDataSourceRouter.setDataSourceLookup() call IsolationLevelDataSourceRouter.setDataSourceLookup() new else call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call IsolationLevelDataSourceRouter.setDefaultTargetDataSource() call IsolationLevelDataSourceRouter.setDefaultTargetDataSource() call IsolationLevelDataSourceRouter.setDefaultTargetDataSource() call IsolationLevelDataSourceRouter.setDefaultTargetDataSource() call IsolationLevelDataSourceRouter.setDefaultTargetDataSource() call IsolationLevelDataSourceRouter.setTargetDataSources() call IsolationLevelDataSourceRouter.setTargetDataSources() call IsolationLevelDataSourceRouter.setTargetDataSources() call IsolationLevelDataSourceRouter.setTargetDataSources() call IsolationLevelDataSourceRouter.setTargetDataSources() call IsolationLevelDataSourceRouter.afterPropertiesSet() call IsolationLevelDataSourceRouter.afterPropertiesSet() call IsolationLevelDataSourceRouter.afterPropertiesSet() call IsolationLevelDataSourceRouter.afterPropertiesSet() call IsolationLevelDataSourceRouter.afterPropertiesSet() decl_stmt org.springframework.transaction.jta.JtaTransactionManager = new call org.springframework.transaction.jta.JtaTransactionManager.setAllowCustomIsolationLevels(boolean) call org.springframework.transaction.jta.JtaTransactionManager.setAllowCustomIsolationLevels(boolean) call org.springframework.transaction.jta.JtaTransactionManager.setAllowCustomIsolationLevels(boolean) call org.springframework.transaction.jta.JtaTransactionManager.setAllowCustomIsolationLevels(boolean) call org.springframework.transaction.jta.JtaTransactionManager.setAllowCustomIsolationLevels(boolean) decl_stmt org.springframework.transaction.support.TransactionTemplate = new call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) new protected protected throws decl_stmt sun.rmi.transport.Connection = call TransactionTemplate.setIsolationLevel() call TransactionTemplate.setIsolationLevel() call TransactionTemplate.setIsolationLevel() call TransactionTemplate.setIsolationLevel() call TransactionTemplate.setIsolationLevel() call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) call org.springframework.transaction.support.TransactionTemplate.execute(TransactionCallback) new protected protected throws decl_stmt sun.rmi.transport.Connection = Connection protected protected throws decl_stmt sun.rmi.transport.Connection = Connection protected protected throws decl_stmt sun.rmi.transport.Connection =