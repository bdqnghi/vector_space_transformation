org.springframework.messaging.handler.invocation java.lang.reflect.Method import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.Comparator import java.util.LinkedHashMap import java.util.List import java.util.Map import java.util.Set import java.util.concurrent.ConcurrentHashMap import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.factory.InitializingBean import org.springframework.context.ApplicationContext import org.springframework.context.ApplicationContextAware import org.springframework.core.MethodIntrospector import org.springframework.core.MethodParameter import org.springframework.messaging.Message import org.springframework.messaging.MessageHandler import org.springframework.messaging.MessagingException import org.springframework.messaging.handler.DestinationPatternsMessageCondition import org.springframework.messaging.handler.HandlerMethod import org.springframework.messaging.handler.MessagingAdviceBean import org.springframework.messaging.support.MessageBuilder import org.springframework.messaging.support.MessageHeaderAccessor import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.CollectionUtils import org.springframework.util.LinkedMultiValueMap import org.springframework.util.MultiValueMap import org.springframework.util.concurrent.ListenableFuture import org.springframework.util.concurrent.ListenableFutureCallback import class super super implements HandlerMethodReturnValueHandlerComposite HandlerMethodArgumentResolverComposite decl Map ApplicationContext decl Map decl Collection decl List decl MultiValueMap String decl List decl Map Log public public < if != for : = public < public < return public public < if != public < public < return public public < if != public < public < return public public < if == return public < public < return public public < if == return public < public < return public < public < return public public = public public return decl Class public public if if for : if ! decl_stmt java.lang.Class < = try = catch if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + if != && decl Class decl Map decl Class protected final protected final final final decl_stmt java.lang.Class < = instanceof : decl_stmt java.lang.Class final final final < = decl_stmt java.util.Map < = new < public public return if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() + + + + for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() public public return HandlerMethod HandlerMethod protected protected decl_stmt org.springframework.web.method.HandlerMethod = decl_stmt org.springframework.web.method.HandlerMethod = if != && ! call org.springframework.web.method.HandlerMethod.equals(Object) call org.springframework.web.method.HandlerMethod.equals(Object) call org.springframework.web.method.HandlerMethod.equals(Object) call org.springframework.web.method.HandlerMethod.equals(Object) call org.springframework.web.method.HandlerMethod.equals(Object) throw new + call org.springframework.web.method.HandlerMethod.getBean() call org.springframework.web.method.HandlerMethod.getBean() call org.springframework.web.method.HandlerMethod.getBean() call org.springframework.web.method.HandlerMethod.getBean() call org.springframework.web.method.HandlerMethod.getBean() + + + + + + call org.springframework.web.method.HandlerMethod.getBean() call org.springframework.web.method.HandlerMethod.getBean() call org.springframework.web.method.HandlerMethod.getBean() call org.springframework.web.method.HandlerMethod.getBean() call org.springframework.web.method.HandlerMethod.getBean() + + + if call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() + + + for : HandlerMethod String protected protected decl_stmt org.springframework.web.method.HandlerMethod if instanceof decl_stmt java.lang.String = = new else = new return protected protected MessageHeaderAccessor String String public public < throws decl_stmt java.lang.String = if == return decl_stmt java.lang.String = if == return decl_stmt org.springframework.messaging.support.MessageHeaderAccessor = call org.springframework.messaging.support.MessageHeaderAccessor.setHeader(String,Object) call org.springframework.messaging.support.MessageHeaderAccessor.setHeader(String,Object) call org.springframework.messaging.support.MessageHeaderAccessor.setHeader(String,Object) call org.springframework.messaging.support.MessageHeaderAccessor.setHeader(String,Object) call org.springframework.messaging.support.MessageHeaderAccessor.setHeader(String,Object) call org.springframework.messaging.support.MessageHeaderAccessor.setLeaveMutable(boolean) call org.springframework.messaging.support.MessageHeaderAccessor.setLeaveMutable(boolean) call org.springframework.messaging.support.MessageHeaderAccessor.setLeaveMutable(boolean) call org.springframework.messaging.support.MessageHeaderAccessor.setLeaveMutable(boolean) call org.springframework.messaging.support.MessageHeaderAccessor.setLeaveMutable(boolean) = call org.springframework.messaging.support.MessageHeaderAccessor.getMessageHeaders() call org.springframework.messaging.support.MessageHeaderAccessor.getMessageHeaders() call org.springframework.messaging.support.MessageHeaderAccessor.getMessageHeaders() call org.springframework.messaging.support.MessageHeaderAccessor.getMessageHeaders() call org.springframework.messaging.support.MessageHeaderAccessor.getMessageHeaders() if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + call org.springframework.messaging.support.MessageHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.support.MessageHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.support.MessageHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.support.MessageHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.support.MessageHeaderAccessor.getShortLogMessage(Object) call org.springframework.messaging.support.MessageHeaderAccessor.setImmutable() call org.springframework.messaging.support.MessageHeaderAccessor.setImmutable() call org.springframework.messaging.support.MessageHeaderAccessor.setImmutable() call org.springframework.messaging.support.MessageHeaderAccessor.setImmutable() call org.springframework.messaging.support.MessageHeaderAccessor.setImmutable() protected protected if == return if return for : if return return decl List decl Comparator Match decl List Match Method Method decl Set protected protected < decl_stmt java.util.List < = new < decl_stmt java.util.List < = if != if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() decl_stmt java.util.Set < = if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() return decl_stmt java.util.Comparator < = new if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + + decl_stmt Match = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > decl_stmt Match = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if call decl Comparator.compare() call decl Comparator.compare() call decl Comparator.compare() call decl Comparator.compare() call decl Comparator.compare() == decl_stmt com.sun.jdi.Method = call Match.handlerMethod() call Match.handlerMethod() call Match.handlerMethod() call Match.handlerMethod() call Match.handlerMethod() call Match.handlerMethod() call Match.handlerMethod() call Match.handlerMethod() call Match.handlerMethod() decl_stmt com.sun.jdi.Method = call Match.handlerMethod() call Match.handlerMethod() call Match.handlerMethod() call Match.handlerMethod() call Match.handlerMethod() call Match.handlerMethod() call Match.handlerMethod() call Match.handlerMethod() call Match.handlerMethod() throw new + + + + + + T private private < < < for : decl_stmt T = if != new protected protected < < call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() MethodParameter decl ListenableFuture Object InvocableHandlerMethod protected protected < if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + = decl_stmt org.springframework.messaging.handler.invocation.InvocableHandlerMethod = new call org.springframework.messaging.handler.invocation.InvocableHandlerMethod.setMessageMethodArgumentResolvers(HandlerMethodArgumentResolverComposite) call org.springframework.messaging.handler.invocation.InvocableHandlerMethod.setMessageMethodArgumentResolvers(HandlerMethodArgumentResolverComposite) call org.springframework.messaging.handler.invocation.InvocableHandlerMethod.setMessageMethodArgumentResolvers(HandlerMethodArgumentResolverComposite) call org.springframework.messaging.handler.invocation.InvocableHandlerMethod.setMessageMethodArgumentResolvers(HandlerMethodArgumentResolverComposite) call org.springframework.messaging.handler.invocation.InvocableHandlerMethod.setMessageMethodArgumentResolvers(HandlerMethodArgumentResolverComposite) try decl_stmt java.lang.Object = call org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(Message,Object) call org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(Message,Object) call org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(Message,Object) call org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(Message,Object) call org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(Message,Object) decl_stmt org.springframework.core.MethodParameter = if == call org.springframework.core.MethodParameter.getParameterType() call org.springframework.core.MethodParameter.getParameterType() call org.springframework.core.MethodParameter.getParameterType() call org.springframework.core.MethodParameter.getParameterType() call org.springframework.core.MethodParameter.getParameterType() return if decl_stmt org.springframework.util.concurrent.ListenableFuture < = if != call decl ListenableFuture.addCallback() call decl ListenableFuture.addCallback() call decl ListenableFuture.addCallback() call decl ListenableFuture.addCallback() call decl ListenableFuture.addCallback() new else catch catch if call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + MethodParameter Object InvocableHandlerMethod protected protected < decl_stmt org.springframework.messaging.handler.invocation.InvocableHandlerMethod = if == call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() return call org.springframework.messaging.handler.invocation.InvocableHandlerMethod.setMessageMethodArgumentResolvers(HandlerMethodArgumentResolverComposite) call org.springframework.messaging.handler.invocation.InvocableHandlerMethod.setMessageMethodArgumentResolvers(HandlerMethodArgumentResolverComposite) call org.springframework.messaging.handler.invocation.InvocableHandlerMethod.setMessageMethodArgumentResolvers(HandlerMethodArgumentResolverComposite) call org.springframework.messaging.handler.invocation.InvocableHandlerMethod.setMessageMethodArgumentResolvers(HandlerMethodArgumentResolverComposite) call org.springframework.messaging.handler.invocation.InvocableHandlerMethod.setMessageMethodArgumentResolvers(HandlerMethodArgumentResolverComposite) if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + call InvocableHandlerMethod.getShortLogMessage() call InvocableHandlerMethod.getShortLogMessage() call InvocableHandlerMethod.getShortLogMessage() call InvocableHandlerMethod.getShortLogMessage() call InvocableHandlerMethod.getShortLogMessage() try decl_stmt java.lang.Object = call org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(Message,Object) call org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(Message,Object) call org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(Message,Object) call org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(Message,Object) call org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(Message,Object) decl_stmt org.springframework.core.MethodParameter = call InvocableHandlerMethod.getReturnType() call InvocableHandlerMethod.getReturnType() call InvocableHandlerMethod.getReturnType() call InvocableHandlerMethod.getReturnType() call InvocableHandlerMethod.getReturnType() if == call org.springframework.core.MethodParameter.getParameterType() call org.springframework.core.MethodParameter.getParameterType() call org.springframework.core.MethodParameter.getParameterType() call org.springframework.core.MethodParameter.getParameterType() call org.springframework.core.MethodParameter.getParameterType() return catch call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() AbstractExceptionHandlerMethodResolver decl Class Method protected protected if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + decl_stmt java.lang.Class < = decl_stmt org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver = if == = decl_stmt com.sun.jdi.Method = call org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver.resolveMethod(Exception) call org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver.resolveMethod(Exception) call org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver.resolveMethod(Exception) call org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver.resolveMethod(Exception) call org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver.resolveMethod(Exception) if != return new for : if = = call org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver.resolveMethod(Exception) call org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver.resolveMethod(Exception) call org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver.resolveMethod(Exception) call org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver.resolveMethod(Exception) call org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver.resolveMethod(Exception) if != return new return public public return + + + public public return public public return MethodParameter public public try decl_stmt org.springframework.core.MethodParameter = call org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite.handleReturnValue(Object,MethodParameter,Message) call org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite.handleReturnValue(Object,MethodParameter,Message) call org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite.handleReturnValue(Object,MethodParameter,Message) call org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite.handleReturnValue(Object,MethodParameter,Message) call org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite.handleReturnValue(Object,MethodParameter,Message) catch public public Exception private private decl_stmt Exception = instanceof : new