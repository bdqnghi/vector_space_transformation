org.springframework.messaging.simp.stomp java.lang.reflect.Type import java.util.ArrayList import java.util.Arrays import java.util.Date import java.util.List import java.util.Map import java.util.concurrent.ConcurrentHashMap import java.util.concurrent.ExecutionException import java.util.concurrent.ScheduledFuture import java.util.concurrent.atomic.AtomicInteger import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.core.ResolvableType import org.springframework.messaging.Message import org.springframework.messaging.MessageDeliveryException import org.springframework.messaging.converter.MessageConversionException import org.springframework.messaging.converter.MessageConverter import org.springframework.messaging.converter.SimpleMessageConverter import org.springframework.messaging.support.MessageBuilder import org.springframework.messaging.support.MessageHeaderAccessor import org.springframework.messaging.tcp.TcpConnection import org.springframework.scheduling.TaskScheduler import org.springframework.util.AlternativeJdkIdGenerator import org.springframework.util.Assert import org.springframework.util.IdGenerator import org.springframework.util.StringUtils import org.springframework.util.concurrent.ListenableFuture import org.springframework.util.concurrent.ListenableFutureCallback import org.springframework.util.concurrent.SettableListenableFuture import class org.springframework.messaging.simp.stomp.DefaultStompSession super super implements StompHeaders TaskScheduler IdGenerator decl Map boolean AtomicInteger long decl TcpConnection StompSessionHandler AtomicInteger String boolean decl Map decl Message Log decl SettableListenableFuture decl byte long MessageConverter public public return public public return public < public < return public public = public public return public public = public public return public public > = public public return public public = public public return public public return != StompHeaders public public decl_stmt org.springframework.messaging.simp.stomp.StompHeaders = new call org.springframework.messaging.simp.stomp.StompHeaders.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaders.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaders.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaders.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaders.setDestination(String) return String decl Message StompHeaderAccessor Receiptable public public decl_stmt java.lang.String = decl_stmt Receiptable = new decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = call StompHeaderAccessor.addNativeHeaders() call StompHeaderAccessor.addNativeHeaders() call StompHeaderAccessor.addNativeHeaders() call StompHeaderAccessor.addNativeHeaders() call StompHeaderAccessor.addNativeHeaders() decl_stmt org.springframework.messaging.Message < = return String private private decl_stmt java.lang.String = if && == = return StompHeaderAccessor private private decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setLeaveMutable() call StompHeaderAccessor.setLeaveMutable() call StompHeaderAccessor.setLeaveMutable() call StompHeaderAccessor.setLeaveMutable() call StompHeaderAccessor.setLeaveMutable() return decl Message private < private < decl_stmt org.springframework.messaging.Message < if == = else if instanceof = else = < if == throw new + + + + + + return StompHeaderAccessor decl TcpConnection private private < decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) decl_stmt org.springframework.messaging.tcp.TcpConnection < = != try call decl TcpConnection.send() call decl TcpConnection.send() call decl TcpConnection.send() call decl TcpConnection.send() call decl TcpConnection.send() catch throw new catch throw new StompHeaders public public decl_stmt org.springframework.messaging.simp.stomp.StompHeaders = new call org.springframework.messaging.simp.stomp.StompHeaders.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaders.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaders.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaders.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaders.setDestination(String) return String decl Message String String StompHeaderAccessor Subscription public public decl_stmt java.lang.String = decl_stmt java.lang.String = if ! = decl_stmt java.lang.String = decl_stmt Subscription = new decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = call StompHeaderAccessor.addNativeHeaders() call StompHeaderAccessor.addNativeHeaders() call StompHeaderAccessor.addNativeHeaders() call StompHeaderAccessor.addNativeHeaders() call StompHeaderAccessor.addNativeHeaders() decl_stmt org.springframework.messaging.Message < = return decl Message StompHeaderAccessor private private decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setSubscriptionId(String) decl_stmt org.springframework.messaging.Message < = decl Message StompHeaderAccessor public public = try decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = decl_stmt org.springframework.messaging.Message < = finally decl Message StompHeaderAccessor public public < = if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = call StompHeaderAccessor.addNativeHeaders() call StompHeaderAccessor.addNativeHeaders() call StompHeaderAccessor.addNativeHeaders() call StompHeaderAccessor.addNativeHeaders() call StompHeaderAccessor.addNativeHeaders() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setAcceptVersion(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setAcceptVersion(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setAcceptVersion(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setAcceptVersion(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setAcceptVersion(String) decl_stmt org.springframework.messaging.Message < = public public if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + decl Map ReceiptHandler String boolean StompCommand StompHeaders StompHeaderAccessor DefaultSubscription public public < decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() decl_stmt StompCommand = call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() decl_stmt java.util.Map < < = call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getNativeHeaders() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getNativeHeaders() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getNativeHeaders() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getNativeHeaders() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getNativeHeaders() decl_stmt org.springframework.messaging.simp.stomp.StompHeaders = decl_stmt boolean = call org.springframework.messaging.simp.stomp.StompHeaderAccessor.isHeartbeat() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.isHeartbeat() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.isHeartbeat() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.isHeartbeat() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.isHeartbeat() if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) try if decl_stmt DefaultSubscription = call org.springframework.messaging.simp.stomp.StompHeaders.getSubscription() call org.springframework.messaging.simp.stomp.StompHeaders.getSubscription() call org.springframework.messaging.simp.stomp.StompHeaders.getSubscription() call org.springframework.messaging.simp.stomp.StompHeaders.getSubscription() call org.springframework.messaging.simp.stomp.StompHeaders.getSubscription() if != call DefaultSubscription.getHandler() call DefaultSubscription.getHandler() call DefaultSubscription.getHandler() call DefaultSubscription.getHandler() call DefaultSubscription.getHandler() else if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) + else if decl_stmt java.lang.String = call org.springframework.messaging.simp.stomp.StompHeaders.getReceiptId() call org.springframework.messaging.simp.stomp.StompHeaders.getReceiptId() call org.springframework.messaging.simp.stomp.StompHeaders.getReceiptId() call org.springframework.messaging.simp.stomp.StompHeaders.getReceiptId() call org.springframework.messaging.simp.stomp.StompHeaders.getReceiptId() decl_stmt ReceiptHandler = if != call ReceiptHandler.handleReceiptReceived() call ReceiptHandler.handleReceiptReceived() call ReceiptHandler.handleReceiptReceived() call ReceiptHandler.handleReceiptReceived() call ReceiptHandler.handleReceiptReceived() else if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(Object) else if else if else if ! && call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() catch decl Class Object Type private private < if == return decl_stmt org.springframework.asm.Type = decl_stmt java.lang.Class < = decl_stmt java.lang.Object = if == throw new + + + long decl long decl long private private decl_stmt long = decl_stmt long = if == || == return if > && > decl_stmt long = new if > && > decl_stmt long final final = * new public public try catch if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() public public if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + if ! new decl TcpConnection private private decl_stmt org.springframework.messaging.tcp.TcpConnection < = = if != try call decl TcpConnection.close() call decl TcpConnection.close() call decl TcpConnection.close() call decl TcpConnection.close() call decl TcpConnection.close() catch Date private private decl_stmt java.util.Date = new + = new public public public public public public return public public public public private private synchronized if != && == else if else private private < for : try catch public public public public private private synchronized if != return = : if != public public return public public return public public return public public public public return + + + + + + + + decl TcpConnection public public decl_stmt org.springframework.messaging.tcp.TcpConnection < = if != call decl TcpConnection.send() call decl TcpConnection.send() call decl TcpConnection.send() call decl TcpConnection.send() call decl TcpConnection.send() new < public public public public public public public public String public public = decl_stmt java.lang.String = + + if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() new