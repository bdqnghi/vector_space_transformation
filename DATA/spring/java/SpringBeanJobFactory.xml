org.springframework.scheduling.quartz org.quartz.SchedulerContext import org.quartz.spi.TriggerFiredBundle import org.springframework.beans.BeanWrapper import org.springframework.beans.MutablePropertyValues import org.springframework.beans.PropertyAccessorFactory import class org.springframework.scheduling.quartz.SpringBeanJobFactory super super extends super implements SchedulerContext decl String public public = public public = Object BeanWrapper MutablePropertyValues protected protected throws decl_stmt java.lang.Object = if decl_stmt org.springframework.beans.BeanWrapper = decl_stmt org.springframework.beans.MutablePropertyValues = new if != call org.springframework.beans.MutablePropertyValues.addPropertyValues(PropertyValues) call org.springframework.beans.MutablePropertyValues.addPropertyValues(PropertyValues) call org.springframework.beans.MutablePropertyValues.addPropertyValues(PropertyValues) call org.springframework.beans.MutablePropertyValues.addPropertyValues(PropertyValues) call org.springframework.beans.MutablePropertyValues.addPropertyValues(PropertyValues) call org.springframework.beans.MutablePropertyValues.addPropertyValues(PropertyValues) call org.springframework.beans.MutablePropertyValues.addPropertyValues(PropertyValues) call org.springframework.beans.MutablePropertyValues.addPropertyValues(PropertyValues) call org.springframework.beans.MutablePropertyValues.addPropertyValues(PropertyValues) call org.springframework.beans.MutablePropertyValues.addPropertyValues(PropertyValues) call org.springframework.beans.MutablePropertyValues.addPropertyValues(PropertyValues) call org.springframework.beans.MutablePropertyValues.addPropertyValues(PropertyValues) call org.springframework.beans.MutablePropertyValues.addPropertyValues(PropertyValues) call org.springframework.beans.MutablePropertyValues.addPropertyValues(PropertyValues) call org.springframework.beans.MutablePropertyValues.addPropertyValues(PropertyValues) if != for : if call org.springframework.beans.MutablePropertyValues.contains(String) call org.springframework.beans.MutablePropertyValues.contains(String) call org.springframework.beans.MutablePropertyValues.contains(String) call org.springframework.beans.MutablePropertyValues.contains(String) call org.springframework.beans.MutablePropertyValues.contains(String) && ! call BeanWrapper.isWritableProperty() call BeanWrapper.isWritableProperty() call BeanWrapper.isWritableProperty() call BeanWrapper.isWritableProperty() call BeanWrapper.isWritableProperty() call org.springframework.beans.MutablePropertyValues.removePropertyValue(PropertyValue) call org.springframework.beans.MutablePropertyValues.removePropertyValue(PropertyValue) call org.springframework.beans.MutablePropertyValues.removePropertyValue(PropertyValue) call org.springframework.beans.MutablePropertyValues.removePropertyValue(PropertyValue) call org.springframework.beans.MutablePropertyValues.removePropertyValue(PropertyValue) call BeanWrapper.setPropertyValues() call BeanWrapper.setPropertyValues() call BeanWrapper.setPropertyValues() call BeanWrapper.setPropertyValues() call BeanWrapper.setPropertyValues() else call BeanWrapper.setPropertyValues() call BeanWrapper.setPropertyValues() call BeanWrapper.setPropertyValues() call BeanWrapper.setPropertyValues() call BeanWrapper.setPropertyValues() return protected protected return ! instanceof