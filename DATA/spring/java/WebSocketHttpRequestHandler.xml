org.springframework.web.socket.server.support java.io.IOException import java.util.ArrayList import java.util.HashMap import java.util.List import java.util.Map import javax.servlet.ServletContext import javax.servlet.ServletException import javax.servlet.http.HttpServletRequest import javax.servlet.http.HttpServletResponse import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.context.Lifecycle import org.springframework.http.server.ServerHttpRequest import org.springframework.http.server.ServerHttpResponse import org.springframework.http.server.ServletServerHttpRequest import org.springframework.http.server.ServletServerHttpResponse import org.springframework.util.Assert import org.springframework.web.HttpRequestHandler import org.springframework.web.context.ServletContextAware import org.springframework.web.socket.WebSocketHandler import org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator import org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator import org.springframework.web.socket.server.HandshakeFailureException import org.springframework.web.socket.server.HandshakeHandler import org.springframework.web.socket.server.HandshakeInterceptor import class org.springframework.web.socket.server.support.WebSocketHttpRequestHandler super super implements boolean Log decl List HandshakeHandler WebSocketHandler public public return public public return public public < if != public < public < return public public if instanceof public public return public public if ! = if instanceof public public if = if instanceof HandshakeFailureException ServerHttpRequest ServerHttpResponse HandshakeInterceptorChain decl Map public public throws decl_stmt org.springframework.http.server.ServerHttpRequest = new decl_stmt org.springframework.http.server.ServerHttpResponse = new decl_stmt org.springframework.web.socket.server.support.HandshakeInterceptorChain = new decl_stmt HandshakeFailureException = try if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + decl_stmt java.util.Map < = new < if ! call org.springframework.web.socket.server.support.HandshakeInterceptorChain.applyBeforeHandshake(ServerHttpRequest,ServerHttpResponse,Map) call org.springframework.web.socket.server.support.HandshakeInterceptorChain.applyBeforeHandshake(ServerHttpRequest,ServerHttpResponse,Map) call org.springframework.web.socket.server.support.HandshakeInterceptorChain.applyBeforeHandshake(ServerHttpRequest,ServerHttpResponse,Map) call org.springframework.web.socket.server.support.HandshakeInterceptorChain.applyBeforeHandshake(ServerHttpRequest,ServerHttpResponse,Map) call org.springframework.web.socket.server.support.HandshakeInterceptorChain.applyBeforeHandshake(ServerHttpRequest,ServerHttpResponse,Map) return call HandshakeInterceptorChain.applyAfterHandshake() call HandshakeInterceptorChain.applyAfterHandshake() call HandshakeInterceptorChain.applyAfterHandshake() call HandshakeInterceptorChain.applyAfterHandshake() call HandshakeInterceptorChain.applyAfterHandshake() call ServerHttpResponse.close() call ServerHttpResponse.close() call ServerHttpResponse.close() call ServerHttpResponse.close() call ServerHttpResponse.close() catch = catch = new + call ServerHttpRequest.getURI() call ServerHttpRequest.getURI() call ServerHttpRequest.getURI() call ServerHttpRequest.getURI() call ServerHttpRequest.getURI() finally if != call HandshakeInterceptorChain.applyAfterHandshake() call HandshakeInterceptorChain.applyAfterHandshake() call HandshakeInterceptorChain.applyAfterHandshake() call HandshakeInterceptorChain.applyAfterHandshake() call HandshakeInterceptorChain.applyAfterHandshake() throw