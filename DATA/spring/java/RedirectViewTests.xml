org.springframework.web.servlet.view java.util.ArrayList import java.util.Collections import java.util.HashMap import java.util.LinkedHashMap import java.util.List import java.util.Map import org.junit.Before import org.junit.Test import org.springframework.http.HttpStatus import org.springframework.mock.web.test.MockHttpServletRequest import org.springframework.mock.web.test.MockHttpServletResponse import org.springframework.mock.web.test.MockServletContext import org.springframework.tests.sample.beans.TestBean import org.springframework.ui.ModelMap import org.springframework.web.context.ContextLoader import org.springframework.web.context.support.StaticWebApplicationContext import org.springframework.web.servlet.DispatcherServlet import org.springframework.web.servlet.FlashMap import org.springframework.web.servlet.View import org.springframework.web.servlet.support.RequestDataValueProcessor import org.springframework.web.servlet.support.RequestDataValueProcessorWrapper import org.springframework.web.servlet.support.SessionFlashMapManager import org.springframework.web.util.WebUtils import static static org.junit.Assert.assertEquals import static static org.junit.Assert.assertFalse import static static org.junit.Assert.assertTrue import static static org.mockito.BDDMockito.given import static static org.mockito.BDDMockito.mock import static static org.mockito.BDDMockito.verify import class org.springframework.web.servlet.view.RedirectViewTests MockHttpServletRequest MockHttpServletResponse public public throws = new new new = new RedirectView = public = public throws decl_stmt org.springframework.web.servlet.view.RedirectView = new call RedirectView.afterPropertiesSet() call RedirectView.afterPropertiesSet() call RedirectView.afterPropertiesSet() call RedirectView.afterPropertiesSet() call RedirectView.afterPropertiesSet() RedirectView public public throws decl_stmt org.springframework.web.servlet.view.RedirectView = new call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call org.springframework.web.servlet.view.RedirectView.setHttp10Compatible(boolean) call org.springframework.web.servlet.view.RedirectView.setHttp10Compatible(boolean) call org.springframework.web.servlet.view.RedirectView.setHttp10Compatible(boolean) call org.springframework.web.servlet.view.RedirectView.setHttp10Compatible(boolean) call org.springframework.web.servlet.view.RedirectView.setHttp10Compatible(boolean) call RedirectView.render() call RedirectView.render() call RedirectView.render() call RedirectView.render() call RedirectView.render() new <> call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) RedirectView public public throws decl_stmt org.springframework.web.servlet.view.RedirectView = new call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call org.springframework.web.servlet.view.RedirectView.setHttp10Compatible(boolean) call org.springframework.web.servlet.view.RedirectView.setHttp10Compatible(boolean) call org.springframework.web.servlet.view.RedirectView.setHttp10Compatible(boolean) call org.springframework.web.servlet.view.RedirectView.setHttp10Compatible(boolean) call org.springframework.web.servlet.view.RedirectView.setHttp10Compatible(boolean) call org.springframework.web.servlet.view.RedirectView.setStatusCode(HttpStatus) call org.springframework.web.servlet.view.RedirectView.setStatusCode(HttpStatus) call org.springframework.web.servlet.view.RedirectView.setStatusCode(HttpStatus) call org.springframework.web.servlet.view.RedirectView.setStatusCode(HttpStatus) call org.springframework.web.servlet.view.RedirectView.setStatusCode(HttpStatus) call RedirectView.render() call RedirectView.render() call RedirectView.render() call RedirectView.render() call RedirectView.render() new <> call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) RedirectView public public throws decl_stmt org.springframework.web.servlet.view.RedirectView = new call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call org.springframework.web.servlet.view.RedirectView.setStatusCode(HttpStatus) call org.springframework.web.servlet.view.RedirectView.setStatusCode(HttpStatus) call org.springframework.web.servlet.view.RedirectView.setStatusCode(HttpStatus) call org.springframework.web.servlet.view.RedirectView.setStatusCode(HttpStatus) call org.springframework.web.servlet.view.RedirectView.setStatusCode(HttpStatus) call RedirectView.render() call RedirectView.render() call RedirectView.render() call RedirectView.render() call RedirectView.render() new <> call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) RedirectView public public throws decl_stmt org.springframework.web.servlet.view.RedirectView = new call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call RedirectView.render() call RedirectView.render() call RedirectView.render() call RedirectView.render() call RedirectView.render() new <> call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) RedirectView public public throws decl_stmt org.springframework.web.servlet.view.RedirectView = new call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call org.springframework.web.servlet.view.RedirectView.setHttp10Compatible(boolean) call org.springframework.web.servlet.view.RedirectView.setHttp10Compatible(boolean) call org.springframework.web.servlet.view.RedirectView.setHttp10Compatible(boolean) call org.springframework.web.servlet.view.RedirectView.setHttp10Compatible(boolean) call org.springframework.web.servlet.view.RedirectView.setHttp10Compatible(boolean) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call RedirectView.render() call RedirectView.render() call RedirectView.render() call RedirectView.render() call RedirectView.render() new <> call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) RedirectView FlashMap ModelMap public public throws decl_stmt org.springframework.web.servlet.view.RedirectView = new call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call org.springframework.web.servlet.view.RedirectView.setHttp10Compatible(boolean) call org.springframework.web.servlet.view.RedirectView.setHttp10Compatible(boolean) call org.springframework.web.servlet.view.RedirectView.setHttp10Compatible(boolean) call org.springframework.web.servlet.view.RedirectView.setHttp10Compatible(boolean) call org.springframework.web.servlet.view.RedirectView.setHttp10Compatible(boolean) decl_stmt org.springframework.web.servlet.FlashMap = new call FlashMap.put() call FlashMap.put() call FlashMap.put() call FlashMap.put() call FlashMap.put() call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) decl_stmt org.springframework.ui.ModelMap = new call RedirectView.render() call RedirectView.render() call RedirectView.render() call RedirectView.render() call RedirectView.render() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.web.servlet.FlashMap.getTargetRequestPath() call org.springframework.web.servlet.FlashMap.getTargetRequestPath() call org.springframework.web.servlet.FlashMap.getTargetRequestPath() call org.springframework.web.servlet.FlashMap.getTargetRequestPath() call org.springframework.web.servlet.FlashMap.getTargetRequestPath() call org.springframework.web.servlet.FlashMap.getTargetRequestParams() call org.springframework.web.servlet.FlashMap.getTargetRequestParams() call org.springframework.web.servlet.FlashMap.getTargetRequestParams() call org.springframework.web.servlet.FlashMap.getTargetRequestParams() call org.springframework.web.servlet.FlashMap.getTargetRequestParams() RedirectView RequestDataValueProcessor StaticWebApplicationContext public public throws decl_stmt org.springframework.web.context.support.StaticWebApplicationContext = new call StaticWebApplicationContext.registerSingleton() call StaticWebApplicationContext.registerSingleton() call StaticWebApplicationContext.registerSingleton() call StaticWebApplicationContext.registerSingleton() call StaticWebApplicationContext.registerSingleton() call org.springframework.web.context.support.StaticWebApplicationContext.setServletContext(ServletContext) call org.springframework.web.context.support.StaticWebApplicationContext.setServletContext(ServletContext) call org.springframework.web.context.support.StaticWebApplicationContext.setServletContext(ServletContext) call org.springframework.web.context.support.StaticWebApplicationContext.setServletContext(ServletContext) call org.springframework.web.context.support.StaticWebApplicationContext.setServletContext(ServletContext) new call StaticWebApplicationContext.refresh() call StaticWebApplicationContext.refresh() call StaticWebApplicationContext.refresh() call StaticWebApplicationContext.refresh() call StaticWebApplicationContext.refresh() decl_stmt org.springframework.web.servlet.support.RequestDataValueProcessor = call StaticWebApplicationContext.getBean() call StaticWebApplicationContext.getBean() call StaticWebApplicationContext.getBean() call StaticWebApplicationContext.getBean() call StaticWebApplicationContext.getBean() decl_stmt org.springframework.web.servlet.view.RedirectView = new call RedirectView.setApplicationContext() call RedirectView.setApplicationContext() call RedirectView.setApplicationContext() call RedirectView.setApplicationContext() call RedirectView.setApplicationContext() call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.mock.web.MockHttpServletRequest.setAttribute(String,Object) call org.springframework.web.servlet.support.RequestDataValueProcessor.processUrl(HttpServletRequest,String) call org.springframework.web.servlet.support.RequestDataValueProcessor.processUrl(HttpServletRequest,String) call org.springframework.web.servlet.support.RequestDataValueProcessor.processUrl(HttpServletRequest,String) call org.springframework.web.servlet.support.RequestDataValueProcessor.processUrl(HttpServletRequest,String) call org.springframework.web.servlet.support.RequestDataValueProcessor.processUrl(HttpServletRequest,String) call RedirectView.render() call RedirectView.render() call RedirectView.render() call RedirectView.render() call RedirectView.render() new RedirectView RequestDataValueProcessor StaticWebApplicationContext ContextLoader MockServletContext public public throws decl_stmt org.springframework.web.context.support.StaticWebApplicationContext = new call StaticWebApplicationContext.registerSingleton() call StaticWebApplicationContext.registerSingleton() call StaticWebApplicationContext.registerSingleton() call StaticWebApplicationContext.registerSingleton() call StaticWebApplicationContext.registerSingleton() decl_stmt org.springframework.mock.web.MockServletContext = new decl_stmt org.springframework.test.context.ContextLoader = new call org.springframework.test.context.ContextLoader.initWebApplicationContext(ServletContext) call org.springframework.test.context.ContextLoader.initWebApplicationContext(ServletContext) call org.springframework.test.context.ContextLoader.initWebApplicationContext(ServletContext) call org.springframework.test.context.ContextLoader.initWebApplicationContext(ServletContext) call org.springframework.test.context.ContextLoader.initWebApplicationContext(ServletContext) try decl_stmt org.springframework.web.servlet.support.RequestDataValueProcessor = call StaticWebApplicationContext.getBean() call StaticWebApplicationContext.getBean() call StaticWebApplicationContext.getBean() call StaticWebApplicationContext.getBean() call StaticWebApplicationContext.getBean() decl_stmt org.springframework.web.servlet.view.RedirectView = new call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call org.springframework.web.servlet.support.RequestDataValueProcessor.processUrl(HttpServletRequest,String) call org.springframework.web.servlet.support.RequestDataValueProcessor.processUrl(HttpServletRequest,String) call org.springframework.web.servlet.support.RequestDataValueProcessor.processUrl(HttpServletRequest,String) call org.springframework.web.servlet.support.RequestDataValueProcessor.processUrl(HttpServletRequest,String) call org.springframework.web.servlet.support.RequestDataValueProcessor.processUrl(HttpServletRequest,String) call RedirectView.render() call RedirectView.render() call RedirectView.render() call RedirectView.render() call RedirectView.render() new finally call ContextLoader.closeWebApplicationContext() call ContextLoader.closeWebApplicationContext() call ContextLoader.closeWebApplicationContext() call ContextLoader.closeWebApplicationContext() call ContextLoader.closeWebApplicationContext() RedirectView public public throws decl_stmt org.springframework.web.servlet.view.RedirectView = new call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.setHosts(String) call org.springframework.web.servlet.view.RedirectView.setHosts(String) call org.springframework.web.servlet.view.RedirectView.setHosts(String) call org.springframework.web.servlet.view.RedirectView.setHosts(String) call org.springframework.web.servlet.view.RedirectView.setHosts(String) new call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) call org.springframework.web.servlet.view.RedirectView.isRemoteHost(String) String public public throws decl_stmt java.lang.String = new <> String public public throws decl_stmt java.lang.String = new <> + String decl Map String String String public public throws decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt java.lang.String = + + + + String decl Map TestRedirectView public public throws decl_stmt java.lang.String = decl_stmt java.util.Map < = decl_stmt TestRedirectView = new call TestRedirectView.setExposeModelAttributes() call TestRedirectView.setExposeModelAttributes() call TestRedirectView.setExposeModelAttributes() call TestRedirectView.setExposeModelAttributes() call TestRedirectView.setExposeModelAttributes() call TestRedirectView.render() call TestRedirectView.render() call TestRedirectView.render() call TestRedirectView.render() call TestRedirectView.render() String decl Map String String String public public throws decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt java.lang.String = + + + + + String public public throws decl_stmt java.lang.String = new <> + String String String String String decl Map String public public throws decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() try decl_stmt java.lang.String = + + + + + + + + catch decl_stmt java.lang.String = + + + + + + + + String decl Map decl String String String public public throws decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = new decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() try decl_stmt java.lang.String = + + + + + + + + catch decl_stmt java.lang.String = + + + + + + + + String decl Map decl List String String public public throws decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.util.List < = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt java.util.Map < < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() try decl_stmt java.lang.String = + + + + call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() + + + + call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() catch decl_stmt java.lang.String = + + + + call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() + + + + call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() String String String String String Object Object decl Map String public public throws decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.Object = decl_stmt java.lang.String = decl_stmt java.lang.Object = new decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt java.lang.String = + + + + + + + + RedirectView public public throws decl_stmt org.springframework.web.servlet.view.RedirectView = new call org.springframework.web.servlet.view.RedirectView.setPropagateQueryParams(boolean) call org.springframework.web.servlet.view.RedirectView.setPropagateQueryParams(boolean) call org.springframework.web.servlet.view.RedirectView.setPropagateQueryParams(boolean) call org.springframework.web.servlet.view.RedirectView.setPropagateQueryParams(boolean) call org.springframework.web.servlet.view.RedirectView.setPropagateQueryParams(boolean) call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call RedirectView.setUrl() call org.springframework.mock.web.MockHttpServletRequest.setQueryString(String) call org.springframework.mock.web.MockHttpServletRequest.setQueryString(String) call org.springframework.mock.web.MockHttpServletRequest.setQueryString(String) call org.springframework.mock.web.MockHttpServletRequest.setQueryString(String) call org.springframework.mock.web.MockHttpServletRequest.setQueryString(String) call RedirectView.render() call RedirectView.render() call RedirectView.render() call RedirectView.render() call RedirectView.render() new <> call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getStatus() call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) call org.springframework.mock.web.MockHttpServletResponse.getHeader(String) TestRedirectView private private < throws decl_stmt TestRedirectView = new call TestRedirectView.render() call TestRedirectView.render() call TestRedirectView.render() call TestRedirectView.render() call TestRedirectView.render() protected < protected < < = return