org.springframework.http.converter.xml java.io.IOException import java.lang.reflect.ParameterizedType import java.lang.reflect.Type import java.util.ArrayList import java.util.Collection import java.util.LinkedHashSet import java.util.List import java.util.SortedSet import java.util.TreeSet import javax.xml.bind.JAXBException import javax.xml.bind.UnmarshalException import javax.xml.bind.Unmarshaller import javax.xml.bind.annotation.XmlRootElement import javax.xml.bind.annotation.XmlType import javax.xml.stream.XMLInputFactory import javax.xml.stream.XMLResolver import javax.xml.stream.XMLStreamException import javax.xml.stream.XMLStreamReader import javax.xml.transform.Result import javax.xml.transform.Source import org.springframework.http.HttpHeaders import org.springframework.http.HttpInputMessage import org.springframework.http.HttpOutputMessage import org.springframework.http.MediaType import org.springframework.http.converter.GenericHttpMessageConverter import org.springframework.http.converter.HttpMessageConversionException import org.springframework.http.converter.HttpMessageNotReadableException import org.springframework.http.converter.HttpMessageNotWritableException import org.springframework.util.StreamUtils import class annotation super super extends super implements XMLInputFactory XMLResolver public public < return Type ParameterizedType decl Class decl Class public public < if ! instanceof return decl_stmt java.lang.reflect.ParameterizedType = if ! call java.lang.reflect.ParameterizedType.getRawType() call java.lang.reflect.ParameterizedType.getRawType() call java.lang.reflect.ParameterizedType.getRawType() call java.lang.reflect.ParameterizedType.getRawType() call java.lang.reflect.ParameterizedType.getRawType() instanceof return decl_stmt java.lang.Class < = < call java.lang.reflect.ParameterizedType.getRawType() call java.lang.reflect.ParameterizedType.getRawType() call java.lang.reflect.ParameterizedType.getRawType() call java.lang.reflect.ParameterizedType.getRawType() call java.lang.reflect.ParameterizedType.getRawType() if ! return if call ParameterizedType.getActualTypeArguments() call ParameterizedType.getActualTypeArguments() call ParameterizedType.getActualTypeArguments() call ParameterizedType.getActualTypeArguments() call ParameterizedType.getActualTypeArguments() != return decl_stmt org.springframework.asm.Type = call ParameterizedType.getActualTypeArguments() call ParameterizedType.getActualTypeArguments() call ParameterizedType.getActualTypeArguments() call ParameterizedType.getActualTypeArguments() call ParameterizedType.getActualTypeArguments() if ! instanceof return decl_stmt java.lang.Class < = < return call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() || call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() && public public < return public public < return protected protected < throw new protected protected < extends extends throws throw new Unmarshaller decl Class int T ParameterizedType XMLStreamReader public public < throws decl_stmt java.lang.reflect.ParameterizedType = decl_stmt T = < call java.lang.reflect.ParameterizedType.getRawType() call java.lang.reflect.ParameterizedType.getRawType() call java.lang.reflect.ParameterizedType.getRawType() call java.lang.reflect.ParameterizedType.getRawType() call java.lang.reflect.ParameterizedType.getRawType() decl_stmt java.lang.Class < = < call ParameterizedType.getActualTypeArguments() call ParameterizedType.getActualTypeArguments() call ParameterizedType.getActualTypeArguments() call ParameterizedType.getActualTypeArguments() call ParameterizedType.getActualTypeArguments() try decl_stmt org.springframework.oxm.Unmarshaller = decl_stmt XMLStreamReader = decl_stmt int = while != if call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call T.add() call T.add() call T.add() call T.add() call T.add() call Unmarshaller.unmarshal() call Unmarshaller.unmarshal() call Unmarshaller.unmarshal() call Unmarshaller.unmarshal() call Unmarshaller.unmarshal() else if call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call T.add() call T.add() call T.add() call T.add() call T.add() call Unmarshaller.unmarshal() call Unmarshaller.unmarshal() call Unmarshaller.unmarshal() call Unmarshaller.unmarshal() call Unmarshaller.unmarshal() else throw new + + = return catch throw new + + + catch throw new + catch throw new protected protected < if ! try return catch throw new + + + else if == return new else if == return new else return new int private private throws decl_stmt int = while != = = while != && != = return int private private throws decl_stmt int = while != && != = return public public throws throw new protected protected throws throw new XMLInputFactory protected protected decl_stmt XMLInputFactory = call XMLInputFactory.setProperty() call XMLInputFactory.setProperty() call XMLInputFactory.setProperty() call XMLInputFactory.setProperty() call XMLInputFactory.setProperty() call XMLInputFactory.setProperty() call XMLInputFactory.setProperty() call XMLInputFactory.setProperty() call XMLInputFactory.setProperty() call XMLInputFactory.setProperty() call XMLInputFactory.setXMLResolver() call XMLInputFactory.setXMLResolver() call XMLInputFactory.setXMLResolver() call XMLInputFactory.setXMLResolver() call XMLInputFactory.setXMLResolver() return public public return