org.springframework.messaging.simp.stomp java.nio.charset.Charset import java.util.ArrayList import java.util.Arrays import java.util.List import java.util.concurrent.BlockingQueue import java.util.concurrent.CountDownLatch import java.util.concurrent.LinkedBlockingQueue import java.util.concurrent.TimeUnit import org.apache.activemq.broker.BrokerService import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.junit.After import org.junit.Before import org.junit.Rule import org.junit.Test import org.junit.rules.TestName import org.springframework.context.ApplicationEvent import org.springframework.context.ApplicationEventPublisher import org.springframework.messaging.Message import org.springframework.messaging.MessageDeliveryException import org.springframework.messaging.MessageHandler import org.springframework.messaging.MessagingException import org.springframework.messaging.StubMessageChannel import org.springframework.messaging.simp.SimpMessageHeaderAccessor import org.springframework.messaging.simp.SimpMessageType import org.springframework.messaging.simp.broker.BrokerAvailabilityEvent import org.springframework.messaging.support.ExecutorSubscribableChannel import org.springframework.messaging.support.MessageBuilder import org.springframework.util.Assert import org.springframework.util.SocketUtils import static static org.junit.Assert.assertEquals import static static org.junit.Assert.assertNotNull import static static org.junit.Assert.assertTrue import class org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests Charset StompBrokerRelayMessageHandler TestMessageHandler TestName TestEventPublisher BrokerService ExecutorSubscribableChannel Log int public public throws call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + = = new = new = new private private throws = new + * * * * private private throws = new new new public public throws try call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + finally CountDownLatch private private throws call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() if ! call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() return decl_stmt java.util.concurrent.CountDownLatch final final = new new public public call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() public public String String String MessageExchange MessageExchange String MessageExchange MessageExchange public public throws call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt MessageExchange = decl_stmt MessageExchange = decl_stmt MessageExchange = decl_stmt MessageExchange = StompHeaderAccessor = public = public throws call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() MessageExchange String MessageExchange public public throws call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() decl_stmt java.lang.String = decl_stmt MessageExchange = decl_stmt MessageExchange = public public throws call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() String String MessageExchange String MessageExchange MessageExchange public public throws call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() decl_stmt java.lang.String = decl_stmt MessageExchange = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt MessageExchange = decl_stmt MessageExchange = MessageExchange MessageExchange public public throws call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() decl_stmt MessageExchange = decl_stmt MessageExchange = public public public public call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + if instanceof BrokerAvailabilityEvent public public throws decl_stmt org.springframework.messaging.simp.broker.BrokerAvailabilityEvent = + + call BrokerAvailabilityEvent.isBrokerAvailable() call BrokerAvailabilityEvent.isBrokerAvailable() call BrokerAvailabilityEvent.isBrokerAvailable() call BrokerAvailabilityEvent.isBrokerAvailable() call BrokerAvailabilityEvent.isBrokerAvailable() public public < throws if == return decl Message decl List MessageExchange public public throws decl_stmt java.util.List < = new < > while call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > decl_stmt org.springframework.messaging.Message < = + + decl_stmt MessageExchange = + + + + call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() private private < < for : if return return public public < for = < ++ if = return return public public return + + + + + + + + public static public static return new StompHeaderAccessor decl Message MessageExchangeBuilder public static public static decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setAcceptVersion(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setAcceptVersion(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setAcceptVersion(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setAcceptVersion(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setAcceptVersion(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHeartbeat(long,long) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHeartbeat(long,long) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHeartbeat(long,long) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHeartbeat(long,long) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHeartbeat(long,long) decl_stmt org.springframework.messaging.Message < = new call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() decl_stmt MessageExchangeBuilder = new call MessageExchangeBuilder.expected() call MessageExchangeBuilder.expected() call MessageExchangeBuilder.expected() call MessageExchangeBuilder.expected() call MessageExchangeBuilder.expected() call MessageExchangeBuilder.expected() call MessageExchangeBuilder.expected() call MessageExchangeBuilder.expected() call MessageExchangeBuilder.expected() new return StompHeaderAccessor decl Message MessageExchangeBuilder public static public static decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setAcceptVersion(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setAcceptVersion(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setAcceptVersion(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setAcceptVersion(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setAcceptVersion(String) decl_stmt org.springframework.messaging.Message < = new call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() decl_stmt MessageExchangeBuilder = new return call MessageExchangeBuilder.andExpectError() call MessageExchangeBuilder.andExpectError() call MessageExchangeBuilder.andExpectError() call MessageExchangeBuilder.andExpectError() call MessageExchangeBuilder.andExpectError() StompHeaderAccessor decl Message MessageExchangeBuilder public static public static decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setReceipt(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setReceipt(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setReceipt(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setReceipt(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setReceipt(String) decl_stmt org.springframework.messaging.Message < = new call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() decl_stmt MessageExchangeBuilder = new call MessageExchangeBuilder.expected() call MessageExchangeBuilder.expected() call MessageExchangeBuilder.expected() call MessageExchangeBuilder.expected() call MessageExchangeBuilder.expected() call MessageExchangeBuilder.expected() call MessageExchangeBuilder.expected() call MessageExchangeBuilder.expected() call MessageExchangeBuilder.expected() new return SimpMessageHeaderAccessor decl Message public static public static decl_stmt org.springframework.messaging.simp.SimpMessageHeaderAccessor = call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.SimpMessageHeaderAccessor.setDestination(String) decl_stmt org.springframework.messaging.Message < = call SimpMessageHeaderAccessor.getMessageHeaders() call SimpMessageHeaderAccessor.getMessageHeaders() call SimpMessageHeaderAccessor.getMessageHeaders() call SimpMessageHeaderAccessor.getMessageHeaders() call SimpMessageHeaderAccessor.getMessageHeaders() return new StompHeaderAccessor decl Message MessageExchangeBuilder public static public static decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setReceipt(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setReceipt(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setReceipt(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setReceipt(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setReceipt(String) decl_stmt org.springframework.messaging.Message < = new call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() decl_stmt MessageExchangeBuilder = new call MessageExchangeBuilder.expected() call MessageExchangeBuilder.expected() call MessageExchangeBuilder.expected() call MessageExchangeBuilder.expected() call MessageExchangeBuilder.expected() call MessageExchangeBuilder.expected() call MessageExchangeBuilder.expected() call MessageExchangeBuilder.expected() call MessageExchangeBuilder.expected() new return String Object public public decl_stmt java.lang.String = decl_stmt java.lang.Object = new return String public public decl_stmt java.lang.String = return public public new return public public return new new StompHeaderAccessor public final public final < decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = if ! call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand() || != call StompHeaderAccessor.getSessionId() call StompHeaderAccessor.getSessionId() call StompHeaderAccessor.getSessionId() call StompHeaderAccessor.getSessionId() call StompHeaderAccessor.getSessionId() return return protected protected return public public return + + + + protected protected return public public return + + + protected protected if ! || ! return if instanceof && instanceof return else return public public return + + + + + + + protected protected return instanceof new :