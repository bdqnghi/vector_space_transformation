org.springframework.orm.jpa.support java.beans.PropertyDescriptor import java.io.Serializable import java.lang.reflect.AnnotatedElement import java.lang.reflect.Field import java.lang.reflect.Member import java.lang.reflect.Method import java.lang.reflect.Modifier import java.util.LinkedList import java.util.Map import java.util.Properties import java.util.concurrent.ConcurrentHashMap import javax.persistence.EntityManager import javax.persistence.EntityManagerFactory import javax.persistence.PersistenceContext import javax.persistence.PersistenceContextType import javax.persistence.PersistenceProperty import javax.persistence.PersistenceUnit import org.springframework.beans.BeanUtils import org.springframework.beans.BeansException import org.springframework.beans.PropertyValues import org.springframework.beans.factory.BeanCreationException import org.springframework.beans.factory.BeanFactory import org.springframework.beans.factory.BeanFactoryAware import org.springframework.beans.factory.BeanFactoryUtils import org.springframework.beans.factory.ListableBeanFactory import org.springframework.beans.factory.NoSuchBeanDefinitionException import org.springframework.beans.factory.NoUniqueBeanDefinitionException import org.springframework.beans.factory.annotation.InjectionMetadata import org.springframework.beans.factory.config.ConfigurableBeanFactory import org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor import org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor import org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor import org.springframework.beans.factory.support.RootBeanDefinition import org.springframework.core.BridgeMethodResolver import org.springframework.core.Ordered import org.springframework.core.PriorityOrdered import org.springframework.jndi.JndiLocatorDelegate import org.springframework.jndi.JndiTemplate import org.springframework.orm.jpa.EntityManagerFactoryInfo import org.springframework.orm.jpa.EntityManagerFactoryUtils import org.springframework.orm.jpa.EntityManagerProxy import org.springframework.orm.jpa.ExtendedEntityManagerCreator import org.springframework.orm.jpa.SharedEntityManagerCreator import org.springframework.util.ClassUtils import org.springframework.util.ObjectUtils import org.springframework.util.ReflectionUtils import org.springframework.util.StringUtils import class annotation org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor super super implements decl Map Method Object ListableBeanFactory String decl Map decl Map decl Map boolean int decl Map public public = public public = public public = public public < = public public < = public public < = public public = != : public public = public public return public public if instanceof = InjectionMetadata public public < if != decl_stmt org.springframework.beans.factory.annotation.InjectionMetadata = call org.springframework.beans.factory.annotation.InjectionMetadata.checkConfigMembers(RootBeanDefinition) call org.springframework.beans.factory.annotation.InjectionMetadata.checkConfigMembers(RootBeanDefinition) call org.springframework.beans.factory.annotation.InjectionMetadata.checkConfigMembers(RootBeanDefinition) call org.springframework.beans.factory.annotation.InjectionMetadata.checkConfigMembers(RootBeanDefinition) call org.springframework.beans.factory.annotation.InjectionMetadata.checkConfigMembers(RootBeanDefinition) public public < throws return public public throws return InjectionMetadata public public throws decl_stmt org.springframework.beans.factory.annotation.InjectionMetadata = try call org.springframework.beans.factory.annotation.InjectionMetadata.inject(Object,String,PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.inject(Object,String,PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.inject(Object,String,PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.inject(Object,String,PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.inject(Object,String,PropertyValues) catch throw new return public public throws return public public throws return EntityManager public public throws decl_stmt EntityManager = public public return String InjectionMetadata private private final final final < decl_stmt java.lang.String = : decl_stmt org.springframework.beans.factory.annotation.InjectionMetadata = if synchronized = if if != call org.springframework.beans.factory.annotation.InjectionMetadata.clear(PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.clear(PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.clear(PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.clear(PropertyValues) call org.springframework.beans.factory.annotation.InjectionMetadata.clear(PropertyValues) try = catch throw new + + return decl Class decl LinkedList Method PropertyDescriptor decl LinkedList private private final final final < decl_stmt java.util.LinkedList < = new < decl_stmt java.lang.Class < = do decl_stmt java.util.LinkedList final final final < = new < new public public throws if || if throw new call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() new new public public throws decl_stmt com.sun.jdi.Method = if ! return if call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() || call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() && if throw new if != throw new + decl_stmt java.beans.PropertyDescriptor = call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() new call decl LinkedList.addAll() call decl LinkedList.addAll() call decl LinkedList.addAll() call decl LinkedList.addAll() call decl LinkedList.addAll() = call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() != && != return new public public throws if || if throw new new Method PropertyDescriptor public public throws decl_stmt com.sun.jdi.Method = if ! return if call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() || call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() call Method.isAnnotationPresent() && if throw new if != throw new + decl_stmt java.beans.PropertyDescriptor = new String String protected protected if != decl_stmt java.lang.String = != : if = decl_stmt java.lang.String = if == && && == = if != try return catch throw new + + return decl Map String String protected protected decl_stmt java.util.Map < = : if != decl_stmt java.lang.String = != : if = decl_stmt java.lang.String = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == && && call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() == = call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() if != try return catch throw new + + return String protected protected throws if == throw new decl_stmt java.lang.String = != : if = if ! return else return EntityManagerFactory protected protected throws decl_stmt EntityManagerFactory = if instanceof return EntityManagerFactory decl String String protected protected throws decl_stmt java.lang.String = if == decl_stmt java.lang.String = decl_stmt EntityManagerFactory = if instanceof return else if > throw new else throw new protected < protected < < throws return new JndiLocatorDelegate public < public < < throws decl_stmt org.springframework.jndi.JndiLocatorDelegate = new if instanceof call JndiLocatorDelegate.setJndiTemplate() call JndiLocatorDelegate.setJndiTemplate() call JndiLocatorDelegate.setJndiTemplate() call JndiLocatorDelegate.setJndiTemplate() call JndiLocatorDelegate.setJndiTemplate() else if instanceof call JndiLocatorDelegate.setJndiEnvironment() call JndiLocatorDelegate.setJndiEnvironment() call JndiLocatorDelegate.setJndiEnvironment() call JndiLocatorDelegate.setJndiEnvironment() call JndiLocatorDelegate.setJndiEnvironment() else if != throw new + call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call JndiLocatorDelegate.setResourceRef() call JndiLocatorDelegate.setResourceRef() call JndiLocatorDelegate.setResourceRef() call JndiLocatorDelegate.setResourceRef() call JndiLocatorDelegate.setResourceRef() return call org.springframework.jndi.JndiLocatorDelegate.lookup(String,Class) call org.springframework.jndi.JndiLocatorDelegate.lookup(String,Class) call org.springframework.jndi.JndiLocatorDelegate.lookup(String,Class) call org.springframework.jndi.JndiLocatorDelegate.lookup(String,Class) call org.springframework.jndi.JndiLocatorDelegate.lookup(String,Class) protected protected if != return == : else return EntityManagerFactory private private decl_stmt EntityManagerFactory = if == = return EntityManager EntityManagerFactory private private decl_stmt EntityManager = if == decl_stmt EntityManagerFactory = if == = if instanceof && != = else = return EntityManager EntityManagerFactory private private decl_stmt EntityManager = if == decl_stmt EntityManagerFactory = if == = = if instanceof && != && call ListableBeanFactory.containsBean() call ListableBeanFactory.containsBean() call ListableBeanFactory.containsBean() call ListableBeanFactory.containsBean() call ListableBeanFactory.containsBean() && ! call ListableBeanFactory.isPrototype() call ListableBeanFactory.isPrototype() call ListableBeanFactory.isPrototype() call ListableBeanFactory.isPrototype() call ListableBeanFactory.isPrototype() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return