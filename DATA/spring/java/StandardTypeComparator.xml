org.springframework.expression.spel.support java.math.BigDecimal import java.math.BigInteger import org.springframework.expression.TypeComparator import org.springframework.expression.spel.SpelEvaluationException import org.springframework.expression.spel.SpelMessage import org.springframework.util.NumberUtils import class org.springframework.expression.spel.support.StandardTypeComparator super super implements public public if == || == return if instanceof && instanceof return if instanceof return return BigInteger Number Number BigDecimal BigDecimal BigInteger public public throws if == return == : - else if == return if instanceof && instanceof decl_stmt java.lang.Number = decl_stmt java.lang.Number = if instanceof || instanceof decl_stmt java.math.BigDecimal = decl_stmt java.math.BigDecimal = return call java.math.BigDecimal.compareTo(BigDecimal) call java.math.BigDecimal.compareTo(BigDecimal) call java.math.BigDecimal.compareTo(BigDecimal) call java.math.BigDecimal.compareTo(BigDecimal) call java.math.BigDecimal.compareTo(BigDecimal) else if instanceof || instanceof return call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() else if instanceof || instanceof return call Number.floatValue() call Number.floatValue() call Number.floatValue() call Number.floatValue() call Number.floatValue() call Number.floatValue() call Number.floatValue() call Number.floatValue() call Number.floatValue() call Number.floatValue() else if instanceof || instanceof decl_stmt java.math.BigInteger = decl_stmt java.math.BigInteger = return call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) else if instanceof || instanceof return call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() else if instanceof || instanceof return call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() else if instanceof || instanceof return call Number.shortValue() call Number.shortValue() call Number.shortValue() call Number.shortValue() call Number.shortValue() call Number.shortValue() call Number.shortValue() call Number.shortValue() call Number.shortValue() call Number.shortValue() else if instanceof || instanceof return call java.lang.Number.byteValue() call java.lang.Number.byteValue() call java.lang.Number.byteValue() call java.lang.Number.byteValue() call java.lang.Number.byteValue() call java.lang.Number.byteValue() call java.lang.Number.byteValue() call java.lang.Number.byteValue() call java.lang.Number.byteValue() call java.lang.Number.byteValue() else return call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() try if instanceof return < catch throw new throw new private static private static return < - : > : private static private static return < - : > : private static private static return - private static private static return -