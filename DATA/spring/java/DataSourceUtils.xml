org.springframework.jdbc.datasource java.sql.Connection import java.sql.SQLException import java.sql.Statement import javax.sql.DataSource import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.jdbc.CannotGetJdbcConnectionException import org.springframework.transaction.TransactionDefinition import org.springframework.transaction.support.TransactionSynchronizationAdapter import org.springframework.transaction.support.TransactionSynchronizationManager import org.springframework.util.Assert import class org.springframework.jdbc.datasource.DataSourceUtils Log int public static public static throws try return catch throw new Connection ConnectionHolder ConnectionHolder public static public static throws decl_stmt org.springframework.jdbc.datasource.ConnectionHolder = if != && call ConnectionHolder.hasConnection() call ConnectionHolder.hasConnection() call ConnectionHolder.hasConnection() call ConnectionHolder.hasConnection() call ConnectionHolder.hasConnection() || call ConnectionHolder.isSynchronizedWithTransaction() call ConnectionHolder.isSynchronizedWithTransaction() call ConnectionHolder.isSynchronizedWithTransaction() call ConnectionHolder.isSynchronizedWithTransaction() call ConnectionHolder.isSynchronizedWithTransaction() call ConnectionHolder.requested() call ConnectionHolder.requested() call ConnectionHolder.requested() call ConnectionHolder.requested() call ConnectionHolder.requested() if ! call ConnectionHolder.hasConnection() call ConnectionHolder.hasConnection() call ConnectionHolder.hasConnection() call ConnectionHolder.hasConnection() call ConnectionHolder.hasConnection() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call org.springframework.jdbc.datasource.ConnectionHolder.setConnection(Connection) call org.springframework.jdbc.datasource.ConnectionHolder.setConnection(Connection) call org.springframework.jdbc.datasource.ConnectionHolder.setConnection(Connection) call org.springframework.jdbc.datasource.ConnectionHolder.setConnection(Connection) call org.springframework.jdbc.datasource.ConnectionHolder.setConnection(Connection) return call org.springframework.jdbc.datasource.ConnectionHolder.getConnection() call org.springframework.jdbc.datasource.ConnectionHolder.getConnection() call org.springframework.jdbc.datasource.ConnectionHolder.getConnection() call org.springframework.jdbc.datasource.ConnectionHolder.getConnection() call org.springframework.jdbc.datasource.ConnectionHolder.getConnection() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() decl_stmt sun.rmi.transport.Connection = if call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() decl_stmt org.springframework.jdbc.datasource.ConnectionHolder = if == = new else call org.springframework.jdbc.datasource.ConnectionHolder.setConnection(Connection) call org.springframework.jdbc.datasource.ConnectionHolder.setConnection(Connection) call org.springframework.jdbc.datasource.ConnectionHolder.setConnection(Connection) call org.springframework.jdbc.datasource.ConnectionHolder.setConnection(Connection) call org.springframework.jdbc.datasource.ConnectionHolder.setConnection(Connection) call ConnectionHolder.requested() call ConnectionHolder.requested() call ConnectionHolder.requested() call ConnectionHolder.requested() call ConnectionHolder.requested() new call ConnectionHolder.setSynchronizedWithTransaction() call ConnectionHolder.setSynchronizedWithTransaction() call ConnectionHolder.setSynchronizedWithTransaction() call ConnectionHolder.setSynchronizedWithTransaction() call ConnectionHolder.setSynchronizedWithTransaction() if != return Integer Throwable int public static public static throws if != && try if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + catch decl_stmt java.lang.Throwable = while != if call Throwable.getClass() call Throwable.getClass() call Throwable.getClass() call Throwable.getClass() call Throwable.getClass() throw = call java.lang.Throwable.getCause() call java.lang.Throwable.getCause() call java.lang.Throwable.getCause() call java.lang.Throwable.getCause() call java.lang.Throwable.getCause() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() catch decl_stmt java.lang.Throwable = while != if call Throwable.getClass() call Throwable.getClass() call Throwable.getClass() call Throwable.getClass() call Throwable.getClass() throw = call java.lang.Throwable.getCause() call java.lang.Throwable.getCause() call java.lang.Throwable.getCause() call java.lang.Throwable.getCause() call java.lang.Throwable.getCause() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() decl_stmt java.lang.Integer = if != && != if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + decl_stmt int = if != = return public static public static try if != if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + if if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + catch call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() ConnectionHolder public static public static if == return decl_stmt org.springframework.jdbc.datasource.ConnectionHolder = return != && public static public static throws - ConnectionHolder public static public static throws decl_stmt org.springframework.jdbc.datasource.ConnectionHolder = if != && call ConnectionHolder.hasTimeout() call ConnectionHolder.hasTimeout() call ConnectionHolder.hasTimeout() call ConnectionHolder.hasTimeout() call ConnectionHolder.hasTimeout() call ConnectionHolder.getTimeToLiveInSeconds() call ConnectionHolder.getTimeToLiveInSeconds() call ConnectionHolder.getTimeToLiveInSeconds() call ConnectionHolder.getTimeToLiveInSeconds() call ConnectionHolder.getTimeToLiveInSeconds() else if >= public static public static try catch call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() catch call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() ConnectionHolder public static public static throws if == return if != decl_stmt org.springframework.jdbc.datasource.ConnectionHolder = if != && call org.springframework.jdbc.datasource.ConnectionHolder.released() call org.springframework.jdbc.datasource.ConnectionHolder.released() call org.springframework.jdbc.datasource.ConnectionHolder.released() call org.springframework.jdbc.datasource.ConnectionHolder.released() call org.springframework.jdbc.datasource.ConnectionHolder.released() return call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() public static public static throws if ! instanceof || Connection private static private static if ! return decl_stmt sun.rmi.transport.Connection = return == || call Connection.equals() call Connection.equals() call Connection.equals() call Connection.equals() call Connection.equals() || Connection public static public static decl_stmt sun.rmi.transport.Connection = while instanceof = return DataSource int private static private static decl_stmt int = decl_stmt javax.sql.DataSource = while instanceof -- = return public public return public public if if && ! public public if public public if ! = if public public if = if