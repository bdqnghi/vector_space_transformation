org.springframework.aop.framework java.util.Map import java.util.concurrent.ConcurrentHashMap import org.springframework.aop.Advisor import org.springframework.aop.support.AopUtils import org.springframework.beans.factory.config.BeanPostProcessor import class annotation org.springframework.aop.framework.AbstractAdvisingBeanPostProcessor super super extends super implements decl Map boolean Advisor public public = public public return ProxyFactory Advised public public if instanceof return if instanceof decl_stmt org.springframework.aop.framework.Advised = if ! call org.springframework.aop.framework.Advised.isFrozen() call org.springframework.aop.framework.Advised.isFrozen() call org.springframework.aop.framework.Advised.isFrozen() call org.springframework.aop.framework.Advised.isFrozen() call org.springframework.aop.framework.Advised.isFrozen() && if call org.springframework.aop.framework.Advised.addAdvisor(Advisor) call org.springframework.aop.framework.Advised.addAdvisor(Advisor) call org.springframework.aop.framework.Advised.addAdvisor(Advisor) call org.springframework.aop.framework.Advised.addAdvisor(Advisor) call org.springframework.aop.framework.Advised.addAdvisor(Advisor) else call org.springframework.aop.framework.Advised.addAdvisor(Advisor) call org.springframework.aop.framework.Advised.addAdvisor(Advisor) call org.springframework.aop.framework.Advised.addAdvisor(Advisor) call org.springframework.aop.framework.Advised.addAdvisor(Advisor) call org.springframework.aop.framework.Advised.addAdvisor(Advisor) return if decl_stmt org.springframework.aop.framework.ProxyFactory = if ! call ProxyFactory.isProxyTargetClass() call ProxyFactory.isProxyTargetClass() call ProxyFactory.isProxyTargetClass() call ProxyFactory.isProxyTargetClass() call ProxyFactory.isProxyTargetClass() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() return call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) return protected protected return Boolean protected protected < decl_stmt java.lang.Boolean = if != return = return ProxyFactory protected protected decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.copyFrom() call ProxyFactory.copyFrom() call ProxyFactory.copyFrom() call ProxyFactory.copyFrom() call ProxyFactory.copyFrom() call ProxyFactory.setTarget() call ProxyFactory.setTarget() call ProxyFactory.setTarget() call ProxyFactory.setTarget() call ProxyFactory.setTarget() return protected protected