org.springframework.orm.hibernate3 java.sql.SQLException import org.aopalliance.intercept.MethodInvocation import org.hibernate.FlushMode import org.hibernate.HibernateException import org.hibernate.SessionFactory import org.hibernate.classic.Session import org.hibernate.exception.ConstraintViolationException import org.junit.After import org.junit.Before import org.junit.Test import org.mockito.InOrder import org.mockito.invocation.InvocationOnMock import org.mockito.stubbing.Answer import org.springframework.beans.factory.BeanFactory import org.springframework.dao.DataIntegrityViolationException import org.springframework.transaction.support.TransactionSynchronizationManager import static static org.junit.Assert.* import static static org.mockito.BDDMockito.* import class annotation org.springframework.orm.hibernate3.HibernateInterceptorTests SessionFactory MethodInvocation Session public public throws = = = call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call Session.getSessionFactory() call Session.getSessionFactory() call Session.getSessionFactory() call Session.getSessionFactory() call Session.getSessionFactory() call MethodInvocation.proceed() call MethodInvocation.proceed() call MethodInvocation.proceed() call MethodInvocation.proceed() call MethodInvocation.proceed() new < public public throws if ! throw new return public public throws if ! throw new return public public HibernateInterceptor public public throws decl_stmt org.springframework.orm.hibernate3.HibernateInterceptor = new call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() try call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) catch + HibernateInterceptor public public throws decl_stmt org.springframework.orm.hibernate3.HibernateInterceptor = new call HibernateInterceptor.setFlushModeName() call HibernateInterceptor.setFlushModeName() call HibernateInterceptor.setFlushModeName() call HibernateInterceptor.setFlushModeName() call HibernateInterceptor.setFlushModeName() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() try call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) catch + HibernateInterceptor public public throws decl_stmt org.springframework.orm.hibernate3.HibernateInterceptor = new call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setFilterName() call HibernateInterceptor.setFilterName() call HibernateInterceptor.setFilterName() call HibernateInterceptor.setFilterName() call HibernateInterceptor.setFilterName() try call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) catch + HibernateInterceptor public public call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() new decl_stmt org.springframework.orm.hibernate3.HibernateInterceptor = new call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() try call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) catch + finally HibernateInterceptor public public throws call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() new decl_stmt org.springframework.orm.hibernate3.HibernateInterceptor = new call HibernateInterceptor.setFlushMode() call HibernateInterceptor.setFlushMode() call HibernateInterceptor.setFlushMode() call HibernateInterceptor.setFlushMode() call HibernateInterceptor.setFlushMode() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() try call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) catch + finally HibernateInterceptor InOrder public public throws call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() new decl_stmt org.springframework.orm.hibernate3.HibernateInterceptor = new call HibernateInterceptor.setFlushMode() call HibernateInterceptor.setFlushMode() call HibernateInterceptor.setFlushMode() call HibernateInterceptor.setFlushMode() call HibernateInterceptor.setFlushMode() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() try call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) catch + finally decl_stmt InOrder = call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() HibernateInterceptor InOrder public public call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() new decl_stmt org.springframework.orm.hibernate3.HibernateInterceptor = new call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setFlushMode() call HibernateInterceptor.setFlushMode() call HibernateInterceptor.setFlushMode() call HibernateInterceptor.setFlushMode() call HibernateInterceptor.setFlushMode() try call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) catch + finally decl_stmt InOrder = call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() HibernateInterceptor InOrder public public call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() call Session.getFlushMode() new decl_stmt org.springframework.orm.hibernate3.HibernateInterceptor = new call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setFlushMode() call HibernateInterceptor.setFlushMode() call HibernateInterceptor.setFlushMode() call HibernateInterceptor.setFlushMode() call HibernateInterceptor.setFlushMode() try call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) catch + finally decl_stmt InOrder = call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() HibernateInterceptor InOrder public public call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() new decl_stmt org.springframework.orm.hibernate3.HibernateInterceptor = new call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setFilterName() call HibernateInterceptor.setFilterName() call HibernateInterceptor.setFilterName() call HibernateInterceptor.setFilterName() call HibernateInterceptor.setFilterName() try call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) catch + finally decl_stmt InOrder = call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() HibernateInterceptor InOrder public public call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() call Session.isOpen() new decl_stmt org.springframework.orm.hibernate3.HibernateInterceptor = new call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setFilterNames() call HibernateInterceptor.setFilterNames() call HibernateInterceptor.setFilterNames() call HibernateInterceptor.setFilterNames() call HibernateInterceptor.setFilterNames() new try call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) catch + finally decl_stmt InOrder = call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() call InOrder.verify() HibernateInterceptor ConstraintViolationException SQLException public public throws decl_stmt java.sql.SQLException = new decl_stmt ConstraintViolationException = new decl_stmt org.springframework.orm.hibernate3.HibernateInterceptor = new call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() try call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) catch HibernateInterceptor SessionHolder public public decl_stmt org.springframework.orm.hibernate4.SessionHolder = new call org.springframework.orm.hibernate4.SessionHolder.removeSession(Object) call org.springframework.orm.hibernate4.SessionHolder.removeSession(Object) call org.springframework.orm.hibernate4.SessionHolder.removeSession(Object) call org.springframework.orm.hibernate4.SessionHolder.removeSession(Object) call org.springframework.orm.hibernate4.SessionHolder.removeSession(Object) decl_stmt org.springframework.orm.hibernate3.HibernateInterceptor = new call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() call HibernateInterceptor.setSessionFactory() try call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) call org.springframework.orm.hibernate3.HibernateInterceptor.invoke(MethodInvocation) catch + decl hibernate decl org public public throws decl_stmt Interceptor = call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() decl_stmt org.springframework.orm.hibernate3.HibernateInterceptor = new call decl hibernate.setSessionFactory() call decl hibernate.setSessionFactory() call decl hibernate.setSessionFactory() call decl hibernate.setSessionFactory() call decl hibernate.setSessionFactory() call decl hibernate.setEntityInterceptor() call decl hibernate.setEntityInterceptor() call decl hibernate.setEntityInterceptor() call decl hibernate.setEntityInterceptor() call decl hibernate.setEntityInterceptor() try call decl hibernate.invoke() call decl hibernate.invoke() call decl hibernate.invoke() call decl hibernate.invoke() call decl hibernate.invoke() catch + decl hibernate decl Interceptor decl org decl org public public throws decl_stmt Interceptor = decl_stmt Interceptor = call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() call SessionFactory.openSession() decl_stmt org.springframework.beans.factory.BeanFactory = call decl Interceptor.getBean() call decl Interceptor.getBean() call decl Interceptor.getBean() call decl Interceptor.getBean() call decl Interceptor.getBean() decl_stmt org.springframework.orm.hibernate3.HibernateInterceptor = new call decl org.setSessionFactory() call decl org.setSessionFactory() call decl org.setSessionFactory() call decl org.setSessionFactory() call decl org.setSessionFactory() call decl org.setEntityInterceptorBeanName() call decl org.setEntityInterceptorBeanName() call decl org.setEntityInterceptorBeanName() call decl org.setEntityInterceptorBeanName() call decl org.setEntityInterceptorBeanName() call decl org.setBeanFactory() call decl org.setBeanFactory() call decl org.setBeanFactory() call decl org.setBeanFactory() call decl org.setBeanFactory() for = < ++ try call decl org.invoke() call decl org.invoke() call decl org.invoke() call decl org.invoke() call decl org.invoke() catch +