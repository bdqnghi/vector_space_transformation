org.springframework.web.servlet.mvc.method.annotation java.beans.PropertyEditor import java.util.HashMap import java.util.Map import org.springframework.core.MethodParameter import org.springframework.core.convert.ConversionService import org.springframework.core.convert.TypeDescriptor import org.springframework.core.convert.converter.Converter import org.springframework.util.StringUtils import org.springframework.web.bind.MissingPathVariableException import org.springframework.web.bind.ServletRequestBindingException import org.springframework.web.bind.WebDataBinder import org.springframework.web.bind.annotation.PathVariable import org.springframework.web.bind.annotation.ValueConstants import org.springframework.web.context.request.NativeWebRequest import org.springframework.web.context.request.RequestAttributes import org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver import org.springframework.web.method.support.ModelAndViewContainer import org.springframework.web.method.support.UriComponentsContributor import org.springframework.web.servlet.HandlerMapping import org.springframework.web.servlet.View import org.springframework.web.util.UriComponentsBuilder import class org.springframework.web.servlet.mvc.method.annotation.PathVariableMethodArgumentResolver super super extends super implements TypeDescriptor String public public if ! return if decl_stmt java.lang.String = return return PathVariable protected protected decl_stmt PathVariable = return new decl Map protected protected throws decl_stmt java.util.Map < = < return != call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() : protected protected throws throw new int String decl Map protected protected decl_stmt java.lang.String = decl_stmt int = decl_stmt java.util.Map < = < if == = new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() PathVariable String public public < if return decl_stmt PathVariable = decl_stmt java.lang.String = == || call PathVariable.value() call PathVariable.value() call PathVariable.value() call PathVariable.value() call PathVariable.value() : call PathVariable.value() call PathVariable.value() call PathVariable.value() call PathVariable.value() call PathVariable.value() = new protected protected if == return else if instanceof return else if != return else return