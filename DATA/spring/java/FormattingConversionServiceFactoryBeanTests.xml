org.springframework.format.support java.lang.annotation.ElementType import java.lang.annotation.Retention import java.lang.annotation.RetentionPolicy import java.lang.annotation.Target import java.text.ParseException import java.util.HashSet import java.util.Locale import java.util.Set import org.junit.Test import org.springframework.context.i18n.LocaleContextHolder import org.springframework.core.convert.ConversionFailedException import org.springframework.core.convert.TypeDescriptor import org.springframework.format.AnnotationFormatterFactory import org.springframework.format.Formatter import org.springframework.format.FormatterRegistrar import org.springframework.format.FormatterRegistry import org.springframework.format.Parser import org.springframework.format.Printer import org.springframework.format.annotation.NumberFormat import static static org.junit.Assert.* import class org.springframework.format.support.FormattingConversionServiceFactoryBeanTests TypeDescriptor FormattingConversionService FormattingConversionServiceFactoryBean Object public public throws decl_stmt org.springframework.format.support.FormattingConversionServiceFactoryBean = new call org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet() call org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet() call org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet() call org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet() call org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet() decl_stmt org.springframework.format.support.FormattingConversionService = call org.springframework.format.support.FormattingConversionServiceFactoryBean.getObject() call org.springframework.format.support.FormattingConversionServiceFactoryBean.getObject() call org.springframework.format.support.FormattingConversionServiceFactoryBean.getObject() call org.springframework.format.support.FormattingConversionServiceFactoryBean.getObject() call org.springframework.format.support.FormattingConversionServiceFactoryBean.getObject() decl_stmt org.springframework.core.convert.TypeDescriptor = new try decl_stmt java.lang.Object = call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) = call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) finally TypeDescriptor FormattingConversionService FormattingConversionServiceFactoryBean public public throws decl_stmt org.springframework.format.support.FormattingConversionServiceFactoryBean = new call org.springframework.format.support.FormattingConversionServiceFactoryBean.setRegisterDefaultFormatters(boolean) call org.springframework.format.support.FormattingConversionServiceFactoryBean.setRegisterDefaultFormatters(boolean) call org.springframework.format.support.FormattingConversionServiceFactoryBean.setRegisterDefaultFormatters(boolean) call org.springframework.format.support.FormattingConversionServiceFactoryBean.setRegisterDefaultFormatters(boolean) call org.springframework.format.support.FormattingConversionServiceFactoryBean.setRegisterDefaultFormatters(boolean) call org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet() call org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet() call org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet() call org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet() call org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet() decl_stmt org.springframework.format.support.FormattingConversionService = call org.springframework.format.support.FormattingConversionServiceFactoryBean.getObject() call org.springframework.format.support.FormattingConversionServiceFactoryBean.getObject() call org.springframework.format.support.FormattingConversionServiceFactoryBean.getObject() call org.springframework.format.support.FormattingConversionServiceFactoryBean.getObject() call org.springframework.format.support.FormattingConversionServiceFactoryBean.getObject() decl_stmt org.springframework.core.convert.TypeDescriptor = new try call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) catch instanceof FormattingConversionService FormattingConversionServiceFactoryBean Object decl Set TypeDescriptor TestBean public public throws decl_stmt org.springframework.format.support.FormattingConversionServiceFactoryBean = new decl_stmt java.util.Set < = new < call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() new call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() new call org.springframework.format.support.FormattingConversionServiceFactoryBean.setFormatters(Set) call org.springframework.format.support.FormattingConversionServiceFactoryBean.setFormatters(Set) call org.springframework.format.support.FormattingConversionServiceFactoryBean.setFormatters(Set) call org.springframework.format.support.FormattingConversionServiceFactoryBean.setFormatters(Set) call org.springframework.format.support.FormattingConversionServiceFactoryBean.setFormatters(Set) call org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet() call org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet() call org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet() call org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet() call org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet() decl_stmt org.springframework.format.support.FormattingConversionService = call org.springframework.format.support.FormattingConversionServiceFactoryBean.getObject() call org.springframework.format.support.FormattingConversionServiceFactoryBean.getObject() call org.springframework.format.support.FormattingConversionServiceFactoryBean.getObject() call org.springframework.format.support.FormattingConversionServiceFactoryBean.getObject() call org.springframework.format.support.FormattingConversionServiceFactoryBean.getObject() decl_stmt org.springframework.tests.sample.beans.TestBean = call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call TestBean.getSpecialInt() call TestBean.getSpecialInt() call TestBean.getSpecialInt() call TestBean.getSpecialInt() call TestBean.getSpecialInt() call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) decl_stmt org.springframework.core.convert.TypeDescriptor = new decl_stmt java.lang.Object = call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) = call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) TestBean FormattingConversionService FormattingConversionServiceFactoryBean decl Set public public throws decl_stmt org.springframework.format.support.FormattingConversionServiceFactoryBean = new decl_stmt java.util.Set < = new < call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() new call org.springframework.format.support.FormattingConversionServiceFactoryBean.setFormatterRegistrars(Set) call org.springframework.format.support.FormattingConversionServiceFactoryBean.setFormatterRegistrars(Set) call org.springframework.format.support.FormattingConversionServiceFactoryBean.setFormatterRegistrars(Set) call org.springframework.format.support.FormattingConversionServiceFactoryBean.setFormatterRegistrars(Set) call org.springframework.format.support.FormattingConversionServiceFactoryBean.setFormatterRegistrars(Set) call org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet() call org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet() call org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet() call org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet() call org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet() decl_stmt org.springframework.format.support.FormattingConversionService = call org.springframework.format.support.FormattingConversionServiceFactoryBean.getObject() call org.springframework.format.support.FormattingConversionServiceFactoryBean.getObject() call org.springframework.format.support.FormattingConversionServiceFactoryBean.getObject() call org.springframework.format.support.FormattingConversionServiceFactoryBean.getObject() call org.springframework.format.support.FormattingConversionServiceFactoryBean.getObject() decl_stmt org.springframework.tests.sample.beans.TestBean = call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call TestBean.getSpecialInt() call TestBean.getSpecialInt() call TestBean.getSpecialInt() call TestBean.getSpecialInt() call TestBean.getSpecialInt() call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) call org.springframework.format.support.FormattingConversionService.convert(Object,TypeDescriptor,TypeDescriptor) FormattingConversionServiceFactoryBean decl Set public public throws decl_stmt org.springframework.format.support.FormattingConversionServiceFactoryBean = new decl_stmt java.util.Set < = new < call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() new call org.springframework.format.support.FormattingConversionServiceFactoryBean.setFormatters(Set) call org.springframework.format.support.FormattingConversionServiceFactoryBean.setFormatters(Set) call org.springframework.format.support.FormattingConversionServiceFactoryBean.setFormatters(Set) call org.springframework.format.support.FormattingConversionServiceFactoryBean.setFormatters(Set) call org.springframework.format.support.FormattingConversionServiceFactoryBean.setFormatters(Set) try call org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet() call org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet() call org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet() call org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet() call org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet() catch public public return public public = public public return TestBean public public throws decl_stmt org.springframework.tests.sample.beans.TestBean = new call TestBean.setSpecialInt() call TestBean.setSpecialInt() call TestBean.setSpecialInt() call TestBean.setSpecialInt() call TestBean.setSpecialInt() return public < < public < < return public < public < < return new < public public return + public public return + public < public < < return new < public public throws return public public throws return public public new