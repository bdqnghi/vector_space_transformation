org.springframework.cache.config org.junit.Test import org.springframework.beans.factory.BeanCreationException import org.springframework.cache.CacheManager import org.springframework.cache.CacheTestUtils import org.springframework.cache.annotation.CachingConfigurerSupport import org.springframework.cache.annotation.EnableCaching import org.springframework.cache.interceptor.CacheErrorHandler import org.springframework.cache.interceptor.CacheInterceptor import org.springframework.cache.interceptor.CacheResolver import org.springframework.cache.interceptor.KeyGenerator import org.springframework.cache.interceptor.NamedCacheResolver import org.springframework.cache.interceptor.SimpleCacheErrorHandler import org.springframework.cache.interceptor.SimpleCacheResolver import org.springframework.cache.support.NoOpCacheManager import org.springframework.context.ConfigurableApplicationContext import org.springframework.context.annotation.AnnotationConfigApplicationContext import org.springframework.context.annotation.Bean import org.springframework.context.annotation.Configuration import static static org.junit.Assert.* import class org.springframework.cache.config.EnableCachingTests super super extends protected protected return new CacheInterceptor public public decl_stmt org.springframework.cache.interceptor.CacheInterceptor = call CacheInterceptor.getKeyGenerator() call CacheInterceptor.getKeyGenerator() call CacheInterceptor.getKeyGenerator() call CacheInterceptor.getKeyGenerator() call CacheInterceptor.getKeyGenerator() CacheInterceptor public public decl_stmt org.springframework.cache.interceptor.CacheInterceptor = call CacheInterceptor.getErrorHandler() call CacheInterceptor.getErrorHandler() call CacheInterceptor.getErrorHandler() call CacheInterceptor.getErrorHandler() call CacheInterceptor.getErrorHandler() AnnotationConfigApplicationContext public public throws decl_stmt org.springframework.context.annotation.AnnotationConfigApplicationContext = new call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() Throwable AnnotationConfigApplicationContext = public = public throws decl_stmt org.springframework.context.annotation.AnnotationConfigApplicationContext = new call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) try call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() catch decl_stmt java.lang.Throwable = call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() throw AnnotationConfigApplicationContext public public decl_stmt org.springframework.context.annotation.AnnotationConfigApplicationContext = new call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() Throwable AnnotationConfigApplicationContext = public = public throws decl_stmt org.springframework.context.annotation.AnnotationConfigApplicationContext = new call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) try call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() catch decl_stmt java.lang.Throwable = call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() throw Throwable AnnotationConfigApplicationContext = public = public throws decl_stmt org.springframework.context.annotation.AnnotationConfigApplicationContext = new call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) call org.springframework.context.annotation.AnnotationConfigApplicationContext.register(Class) try call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() call AnnotationConfigApplicationContext.refresh() catch decl_stmt java.lang.Throwable = call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() throw CacheInterceptor ConfigurableApplicationContext public public decl_stmt org.springframework.context.ConfigurableApplicationContext = new decl_stmt org.springframework.cache.interceptor.CacheInterceptor = call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call CacheInterceptor.getCacheResolver() call CacheInterceptor.getCacheResolver() call CacheInterceptor.getCacheResolver() call CacheInterceptor.getCacheResolver() call CacheInterceptor.getCacheResolver() call CacheInterceptor.getCacheResolver() call CacheInterceptor.getCacheResolver() call CacheInterceptor.getCacheResolver() call CacheInterceptor.getCacheResolver() call CacheInterceptor.getCacheResolver() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call CacheInterceptor.getCacheResolver() call CacheInterceptor.getCacheResolver() call CacheInterceptor.getCacheResolver() call CacheInterceptor.getCacheResolver() call CacheInterceptor.getCacheResolver() call org.springframework.context.ConfigurableApplicationContext.close() call org.springframework.context.ConfigurableApplicationContext.close() call org.springframework.context.ConfigurableApplicationContext.close() call org.springframework.context.ConfigurableApplicationContext.close() call org.springframework.context.ConfigurableApplicationContext.close() CacheInterceptor ConfigurableApplicationContext public public decl_stmt org.springframework.context.ConfigurableApplicationContext = new decl_stmt org.springframework.cache.interceptor.CacheInterceptor = call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call CacheInterceptor.getCacheResolver() call CacheInterceptor.getCacheResolver() call CacheInterceptor.getCacheResolver() call CacheInterceptor.getCacheResolver() call CacheInterceptor.getCacheResolver() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call ConfigurableApplicationContext.getBean() call CacheInterceptor.getKeyGenerator() call CacheInterceptor.getKeyGenerator() call CacheInterceptor.getKeyGenerator() call CacheInterceptor.getKeyGenerator() call CacheInterceptor.getKeyGenerator() call org.springframework.context.ConfigurableApplicationContext.close() call org.springframework.context.ConfigurableApplicationContext.close() call org.springframework.context.ConfigurableApplicationContext.close() call org.springframework.context.ConfigurableApplicationContext.close() call org.springframework.context.ConfigurableApplicationContext.close() public public return public < public < return new public < public < return new public public return new public public return new public public return new public public return public public return new public public return new public public return new public public return new public public return new public public return public public return public public return new public public return new public public return new public public return new