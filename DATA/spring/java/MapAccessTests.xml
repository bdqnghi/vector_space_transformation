org.springframework.expression.spel java.util.HashMap import java.util.Map import org.junit.Test import org.springframework.expression.AccessException import org.springframework.expression.EvaluationContext import org.springframework.expression.Expression import org.springframework.expression.ExpressionParser import org.springframework.expression.PropertyAccessor import org.springframework.expression.TypedValue import org.springframework.expression.spel.standard.SpelExpressionParser import org.springframework.expression.spel.support.StandardEvaluationContext import org.springframework.tests.Assume import org.springframework.tests.TestGroup import org.springframework.util.StopWatch import static static org.hamcrest.Matchers.* import static static org.junit.Assert.* import class org.springframework.expression.spel.MapAccessTests super super extends public public public public Expression ExpressionParser StandardEvaluationContext Object public public throws decl_stmt org.springframework.expression.ExpressionParser = new decl_stmt org.springframework.expression.spel.support.StandardEvaluationContext = call org.springframework.expression.spel.support.StandardEvaluationContext.addPropertyAccessor(PropertyAccessor) call org.springframework.expression.spel.support.StandardEvaluationContext.addPropertyAccessor(PropertyAccessor) call org.springframework.expression.spel.support.StandardEvaluationContext.addPropertyAccessor(PropertyAccessor) call org.springframework.expression.spel.support.StandardEvaluationContext.addPropertyAccessor(PropertyAccessor) call org.springframework.expression.spel.support.StandardEvaluationContext.addPropertyAccessor(PropertyAccessor) new decl_stmt org.springframework.expression.Expression = call org.springframework.expression.ExpressionParser.parseExpression(String) call org.springframework.expression.ExpressionParser.parseExpression(String) call org.springframework.expression.ExpressionParser.parseExpression(String) call org.springframework.expression.ExpressionParser.parseExpression(String) call org.springframework.expression.ExpressionParser.parseExpression(String) decl_stmt java.lang.Object = call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() Expression ExpressionParser StandardEvaluationContext Object public public throws decl_stmt org.springframework.expression.ExpressionParser = new decl_stmt org.springframework.expression.spel.support.StandardEvaluationContext = call org.springframework.expression.spel.support.StandardEvaluationContext.setVariable(String,Object) call org.springframework.expression.spel.support.StandardEvaluationContext.setVariable(String,Object) call org.springframework.expression.spel.support.StandardEvaluationContext.setVariable(String,Object) call org.springframework.expression.spel.support.StandardEvaluationContext.setVariable(String,Object) call org.springframework.expression.spel.support.StandardEvaluationContext.setVariable(String,Object) decl_stmt org.springframework.expression.Expression = call org.springframework.expression.ExpressionParser.parseExpression(String) call org.springframework.expression.ExpressionParser.parseExpression(String) call org.springframework.expression.ExpressionParser.parseExpression(String) call org.springframework.expression.ExpressionParser.parseExpression(String) call org.springframework.expression.ExpressionParser.parseExpression(String) decl_stmt java.lang.Object = call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() decl Map Object ExpressionParser Expression public public decl_stmt java.util.Map < = new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt java.lang.Object = new new decl_stmt org.springframework.expression.ExpressionParser = new decl_stmt org.springframework.expression.Expression = call org.springframework.expression.ExpressionParser.parseExpression(String) call org.springframework.expression.ExpressionParser.parseExpression(String) call org.springframework.expression.ExpressionParser.parseExpression(String) call org.springframework.expression.ExpressionParser.parseExpression(String) call org.springframework.expression.ExpressionParser.parseExpression(String) call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() decl Map Expression ExpressionParser public public decl_stmt java.util.Map < = new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.springframework.expression.ExpressionParser = new decl_stmt org.springframework.expression.Expression = call org.springframework.expression.ExpressionParser.parseExpression(String) call org.springframework.expression.ExpressionParser.parseExpression(String) call org.springframework.expression.ExpressionParser.parseExpression(String) call org.springframework.expression.ExpressionParser.parseExpression(String) call org.springframework.expression.ExpressionParser.parseExpression(String) call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() decl Map StopWatch Expression EvaluationContext ExpressionParser public public throws decl_stmt java.util.Map < = new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.springframework.expression.EvaluationContext = new decl_stmt org.springframework.expression.ExpressionParser = new decl_stmt org.springframework.expression.Expression = call org.springframework.expression.ExpressionParser.parseExpression(String) call org.springframework.expression.ExpressionParser.parseExpression(String) call org.springframework.expression.ExpressionParser.parseExpression(String) call org.springframework.expression.ExpressionParser.parseExpression(String) call org.springframework.expression.ExpressionParser.parseExpression(String) decl_stmt org.springframework.util.StopWatch = new call org.springframework.util.StopWatch.start(String) call org.springframework.util.StopWatch.start(String) call org.springframework.util.StopWatch.start(String) call org.springframework.util.StopWatch.start(String) call org.springframework.util.StopWatch.start(String) for = < ++ call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.expression.Expression.getValue() call org.springframework.util.StopWatch.stop() call org.springframework.util.StopWatch.stop() call org.springframework.util.StopWatch.stop() call org.springframework.util.StopWatch.stop() call org.springframework.util.StopWatch.stop() call org.springframework.util.StopWatch.getTotalTimeMillis() call org.springframework.util.StopWatch.getTotalTimeMillis() call org.springframework.util.StopWatch.getTotalTimeMillis() call org.springframework.util.StopWatch.getTotalTimeMillis() call org.springframework.util.StopWatch.getTotalTimeMillis() public public return public public = public public return public public = public public return public public = public public return public public = public < public < return public public < = public public throws return < public public throws return new < public public throws return public public throws < public < public < return new <