org.springframework.jdbc.support.lob java.io.InputStream import java.io.OutputStream import java.io.Reader import java.io.Writer import java.lang.reflect.InvocationTargetException import java.lang.reflect.Method import java.sql.Blob import java.sql.Clob import java.sql.Connection import java.sql.PreparedStatement import java.sql.ResultSet import java.sql.SQLException import java.util.HashMap import java.util.Iterator import java.util.LinkedList import java.util.List import java.util.Map import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.dao.DataAccessResourceFailureException import org.springframework.dao.InvalidDataAccessApiUsageException import org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor import org.springframework.util.FileCopyUtils import class annotation org.springframework.jdbc.support.lob.OracleLobHandler super super extends decl Map Boolean String Boolean String decl Map String NativeJdbcExtractor String String Log decl Class decl Class decl Map public public = public public = public public = protected synchronized protected synchronized if == try = = catch throw new + decl byte Blob public public throws call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() decl_stmt java.sql.Blob = decl_stmt byte = != call java.sql.Blob.getBytes(long,int) call java.sql.Blob.getBytes(long,int) call java.sql.Blob.getBytes(long,int) call java.sql.Blob.getBytes(long,int) call java.sql.Blob.getBytes(long,int) int call Blob.length() call Blob.length() call Blob.length() call Blob.length() call Blob.length() : return InputStream Blob public public throws call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() decl_stmt java.sql.Blob = decl_stmt java.io.InputStream = != call java.sql.Blob.getBinaryStream(long,long) call java.sql.Blob.getBinaryStream(long,long) call java.sql.Blob.getBinaryStream(long,long) call java.sql.Blob.getBinaryStream(long,long) call java.sql.Blob.getBinaryStream(long,long) : return String Clob public public throws call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() decl_stmt java.sql.Clob = decl_stmt java.lang.String = != call Clob.getSubString() call Clob.getSubString() call Clob.getSubString() call Clob.getSubString() call Clob.getSubString() int call java.sql.Clob.length() call java.sql.Clob.length() call java.sql.Clob.length() call java.sql.Clob.length() call java.sql.Clob.length() : return InputStream Clob public public throws call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() decl_stmt java.sql.Clob = decl_stmt java.io.InputStream = != call java.sql.Clob.getAsciiStream() call java.sql.Clob.getAsciiStream() call java.sql.Clob.getAsciiStream() call java.sql.Clob.getAsciiStream() call java.sql.Clob.getAsciiStream() : return Reader Clob public public throws call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() decl_stmt java.sql.Clob = decl_stmt java.io.Reader = != call java.sql.Clob.getCharacterStream(long,long) call java.sql.Clob.getCharacterStream(long,long) call java.sql.Clob.getCharacterStream(long,long) call java.sql.Clob.getCharacterStream(long,long) call java.sql.Clob.getCharacterStream(long,long) : return public public return new Method Boolean Method protected protected if try decl_stmt com.sun.jdi.Method = decl_stmt java.lang.Boolean = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) if ! decl_stmt com.sun.jdi.Method = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) catch call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() catch throw new Boolean Method Method Method Boolean Method protected protected if decl_stmt java.lang.Boolean = try decl_stmt com.sun.jdi.Method = = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) if decl_stmt com.sun.jdi.Method = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) else decl_stmt com.sun.jdi.Method = decl_stmt java.lang.Boolean = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) if decl_stmt com.sun.jdi.Method = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) catch if call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() else call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() catch if throw new else throw new Blob Method OutputStream public public final final final throws if != decl_stmt java.sql.Blob = new public public throws decl_stmt com.sun.jdi.Method = decl_stmt java.io.OutputStream = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + call Blob.length() call Blob.length() call Blob.length() call Blob.length() call Blob.length() else call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() Method OutputStream public public throws decl_stmt com.sun.jdi.Method = decl_stmt java.io.OutputStream = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) Blob Method OutputStream public public final final throws if != decl_stmt java.sql.Blob = new public public throws decl_stmt com.sun.jdi.Method = decl_stmt java.io.OutputStream = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + call Blob.length() call Blob.length() call Blob.length() call Blob.length() call Blob.length() else call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() Method OutputStream public public throws decl_stmt com.sun.jdi.Method = decl_stmt java.io.OutputStream = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) Writer Method Clob public public final final throws if != decl_stmt java.sql.Clob = new public public throws decl_stmt com.sun.jdi.Method = decl_stmt Writer = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + call java.sql.Clob.length() call java.sql.Clob.length() call java.sql.Clob.length() call java.sql.Clob.length() call java.sql.Clob.length() else call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() Writer Method public public throws decl_stmt com.sun.jdi.Method = decl_stmt Writer = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) Method Clob OutputStream public public final final throws if != decl_stmt java.sql.Clob = new public public throws decl_stmt com.sun.jdi.Method = decl_stmt java.io.OutputStream = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + call java.sql.Clob.length() call java.sql.Clob.length() call java.sql.Clob.length() call java.sql.Clob.length() call java.sql.Clob.length() else call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() Method OutputStream public public throws decl_stmt com.sun.jdi.Method = decl_stmt java.io.OutputStream = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) Writer Method Clob public public final final throws if != decl_stmt java.sql.Clob = new public public throws decl_stmt com.sun.jdi.Method = decl_stmt Writer = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + call java.sql.Clob.length() call java.sql.Clob.length() call java.sql.Clob.length() call java.sql.Clob.length() call java.sql.Clob.length() else call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() Writer Method public public throws decl_stmt com.sun.jdi.Method = decl_stmt Writer = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) Object Connection protected protected throws decl_stmt sun.rmi.transport.Connection = try = decl_stmt java.lang.Object = : call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + : return catch throw catch if instanceof throw else if != && instanceof throw new + call Connection.getClass() call Connection.getClass() call Connection.getClass() call Connection.getClass() call Connection.getClass() + else throw new catch throw new protected protected throws return != call org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor.getNativeConnectionFromStatement(Statement) call org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor.getNativeConnectionFromStatement(Statement) call org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor.getNativeConnectionFromStatement(Statement) call org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor.getNativeConnectionFromStatement(Statement) call org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor.getNativeConnectionFromStatement(Statement) : Object Method Method protected protected < throws decl_stmt com.sun.jdi.Method = decl_stmt java.lang.Object = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt com.sun.jdi.Method = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return Object Method public public try for < = decl_stmt java.lang.Object = decl_stmt com.sun.jdi.Method = call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) catch call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() catch throw new