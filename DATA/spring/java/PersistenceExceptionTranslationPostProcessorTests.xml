org.springframework.dao.annotation javax.persistence.PersistenceException import org.aspectj.lang.JoinPoint import org.aspectj.lang.annotation.Aspect import org.aspectj.lang.annotation.Before import org.junit.Test import org.springframework.aop.Advisor import org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator import org.springframework.aop.framework.Advised import org.springframework.aop.support.AopUtils import org.springframework.beans.factory.support.BeanDefinitionBuilder import org.springframework.beans.factory.support.RootBeanDefinition import org.springframework.context.support.GenericApplicationContext import org.springframework.dao.DataAccessException import org.springframework.dao.DataAccessResourceFailureException import org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterface import org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterfaceImpl import org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.StereotypedRepositoryInterfaceImpl import org.springframework.dao.support.PersistenceExceptionTranslator import org.springframework.stereotype.Repository import static static org.junit.Assert.* import class org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessorTests Additional RepositoryInterface RepositoryInterface GenericApplicationContext RepositoryWithoutInterface public public decl_stmt org.springframework.context.support.GenericApplicationContext = new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) call org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(String,BeanDefinition) new call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() call GenericApplicationContext.refresh() decl_stmt org.springframework.dao.annotation.RepositoryInterface = call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() decl_stmt org.springframework.dao.annotation.RepositoryInterface = call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() decl_stmt RepositoryWithoutInterface = call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() decl_stmt org.springframework.dao.annotation.Additional = call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call GenericApplicationContext.getBean() call Additional.additionalMethod() call Additional.additionalMethod() call Additional.additionalMethod() call Additional.additionalMethod() call Additional.additionalMethod() try call Additional.additionalMethod() call Additional.additionalMethod() call Additional.additionalMethod() call Additional.additionalMethod() call Additional.additionalMethod() catch Advised protected protected instanceof decl_stmt org.springframework.aop.framework.Advised = for : call org.springframework.aop.framework.Advised.getAdvisors() call org.springframework.aop.framework.Advised.getAdvisors() call org.springframework.aop.framework.Advised.getAdvisors() call org.springframework.aop.framework.Advised.getAdvisors() call org.springframework.aop.framework.Advised.getAdvisors() if instanceof return public public public public if throw new public public if instanceof return new return public public +