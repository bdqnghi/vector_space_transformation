org.springframework.web.client java.io.IOException import java.lang.reflect.Type import java.net.URI import java.util.ArrayList import java.util.List import java.util.Map import java.util.Set import javax.xml.transform.Source import org.springframework.core.ParameterizedTypeReference import org.springframework.http.HttpEntity import org.springframework.http.HttpHeaders import org.springframework.http.HttpMethod import org.springframework.http.MediaType import org.springframework.http.RequestEntity import org.springframework.http.ResponseEntity import org.springframework.http.client.ClientHttpRequest import org.springframework.http.client.ClientHttpRequestFactory import org.springframework.http.client.ClientHttpResponse import org.springframework.http.client.support.InterceptingHttpAccessor import org.springframework.http.converter.ByteArrayHttpMessageConverter import org.springframework.http.converter.GenericHttpMessageConverter import org.springframework.http.converter.HttpMessageConverter import org.springframework.http.converter.ResourceHttpMessageConverter import org.springframework.http.converter.StringHttpMessageConverter import org.springframework.http.converter.feed.AtomFeedHttpMessageConverter import org.springframework.http.converter.feed.RssChannelHttpMessageConverter import org.springframework.http.converter.json.GsonHttpMessageConverter import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter import org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter import org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter import org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter import org.springframework.http.converter.xml.SourceHttpMessageConverter import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.web.util.DefaultUriTemplateHandler import org.springframework.web.util.UriTemplateHandler import class org.springframework.web.client.RestTemplate super super extends super implements ResponseErrorHandler boolean decl List decl ResponseExtractor boolean UriTemplateHandler boolean boolean boolean public public < < if != public < < public < < return public public = public public return public public = public public return RequestCallback decl HttpMessageConverterExtractor public < public < < throws decl_stmt org.springframework.web.client.RequestCallback = decl_stmt org.springframework.web.client.HttpMessageConverterExtractor < = new < return RequestCallback decl HttpMessageConverterExtractor public < public < < < throws decl_stmt org.springframework.web.client.RequestCallback = decl_stmt org.springframework.web.client.HttpMessageConverterExtractor < = new < return RequestCallback decl HttpMessageConverterExtractor public < public < < throws decl_stmt org.springframework.web.client.RequestCallback = decl_stmt org.springframework.web.client.HttpMessageConverterExtractor < = new < return RequestCallback decl ResponseExtractor public < < public < < < throws decl_stmt org.springframework.web.client.RequestCallback = decl_stmt org.springframework.web.client.ResponseExtractor < < = return RequestCallback decl ResponseExtractor public < < public < < < < throws decl_stmt org.springframework.web.client.RequestCallback = decl_stmt org.springframework.web.client.ResponseExtractor < < = return RequestCallback decl ResponseExtractor public < < public < < < throws decl_stmt org.springframework.web.client.RequestCallback = decl_stmt org.springframework.web.client.ResponseExtractor < < = return public public throws return public public < throws return public public throws return RequestCallback HttpHeaders public public throws decl_stmt org.springframework.web.client.RequestCallback = decl_stmt org.springframework.http.HttpHeaders = return call org.springframework.http.HttpHeaders.getLocation() call org.springframework.http.HttpHeaders.getLocation() call org.springframework.http.HttpHeaders.getLocation() call org.springframework.http.HttpHeaders.getLocation() call org.springframework.http.HttpHeaders.getLocation() RequestCallback HttpHeaders public public < throws decl_stmt org.springframework.web.client.RequestCallback = decl_stmt org.springframework.http.HttpHeaders = return call org.springframework.http.HttpHeaders.getLocation() call org.springframework.http.HttpHeaders.getLocation() call org.springframework.http.HttpHeaders.getLocation() call org.springframework.http.HttpHeaders.getLocation() call org.springframework.http.HttpHeaders.getLocation() RequestCallback HttpHeaders public public throws decl_stmt org.springframework.web.client.RequestCallback = decl_stmt org.springframework.http.HttpHeaders = return call org.springframework.http.HttpHeaders.getLocation() call org.springframework.http.HttpHeaders.getLocation() call org.springframework.http.HttpHeaders.getLocation() call org.springframework.http.HttpHeaders.getLocation() call org.springframework.http.HttpHeaders.getLocation() RequestCallback decl HttpMessageConverterExtractor public < public < < throws decl_stmt org.springframework.web.client.RequestCallback = decl_stmt org.springframework.web.client.HttpMessageConverterExtractor < = new < return RequestCallback decl HttpMessageConverterExtractor public < public < < < throws decl_stmt org.springframework.web.client.RequestCallback = decl_stmt org.springframework.web.client.HttpMessageConverterExtractor < = new < return RequestCallback decl HttpMessageConverterExtractor public < public < < throws decl_stmt org.springframework.web.client.RequestCallback = decl_stmt org.springframework.web.client.HttpMessageConverterExtractor < = new < return RequestCallback decl ResponseExtractor public < < public < < < throws decl_stmt org.springframework.web.client.RequestCallback = decl_stmt org.springframework.web.client.ResponseExtractor < < = return RequestCallback decl ResponseExtractor public < < public < < < < throws decl_stmt org.springframework.web.client.RequestCallback = decl_stmt org.springframework.web.client.ResponseExtractor < < = return RequestCallback decl ResponseExtractor public < < public < < < throws decl_stmt org.springframework.web.client.RequestCallback = decl_stmt org.springframework.web.client.ResponseExtractor < < = return RequestCallback public public throws decl_stmt org.springframework.web.client.RequestCallback = RequestCallback public public < throws decl_stmt org.springframework.web.client.RequestCallback = RequestCallback public public throws decl_stmt org.springframework.web.client.RequestCallback = public public throws public public < throws public public throws HttpHeaders decl ResponseExtractor public < public < throws decl_stmt org.springframework.web.client.ResponseExtractor < = decl_stmt org.springframework.http.HttpHeaders = return call org.springframework.http.HttpHeaders.getAllow() call org.springframework.http.HttpHeaders.getAllow() call org.springframework.http.HttpHeaders.getAllow() call org.springframework.http.HttpHeaders.getAllow() call org.springframework.http.HttpHeaders.getAllow() HttpHeaders decl ResponseExtractor public < public < < throws decl_stmt org.springframework.web.client.ResponseExtractor < = decl_stmt org.springframework.http.HttpHeaders = return call org.springframework.http.HttpHeaders.getAllow() call org.springframework.http.HttpHeaders.getAllow() call org.springframework.http.HttpHeaders.getAllow() call org.springframework.http.HttpHeaders.getAllow() call org.springframework.http.HttpHeaders.getAllow() HttpHeaders decl ResponseExtractor public < public < throws decl_stmt org.springframework.web.client.ResponseExtractor < = decl_stmt org.springframework.http.HttpHeaders = return call org.springframework.http.HttpHeaders.getAllow() call org.springframework.http.HttpHeaders.getAllow() call org.springframework.http.HttpHeaders.getAllow() call org.springframework.http.HttpHeaders.getAllow() call org.springframework.http.HttpHeaders.getAllow() RequestCallback decl ResponseExtractor public < < public < < < < throws decl_stmt org.springframework.web.client.RequestCallback = decl_stmt org.springframework.web.client.ResponseExtractor < < = return RequestCallback decl ResponseExtractor public < < public < < < < < throws decl_stmt org.springframework.web.client.RequestCallback = decl_stmt org.springframework.web.client.ResponseExtractor < < = return RequestCallback decl ResponseExtractor public < < public < < < < throws decl_stmt org.springframework.web.client.RequestCallback = decl_stmt org.springframework.web.client.ResponseExtractor < < = return RequestCallback decl ResponseExtractor Type public < < public < < < < throws decl_stmt org.springframework.asm.Type = decl_stmt org.springframework.web.client.RequestCallback = decl_stmt org.springframework.web.client.ResponseExtractor < < = return RequestCallback decl ResponseExtractor Type public < < public < < < < < throws decl_stmt org.springframework.asm.Type = decl_stmt org.springframework.web.client.RequestCallback = decl_stmt org.springframework.web.client.ResponseExtractor < < = return RequestCallback decl ResponseExtractor Type public < < public < < < < throws decl_stmt org.springframework.asm.Type = decl_stmt org.springframework.web.client.RequestCallback = decl_stmt org.springframework.web.client.ResponseExtractor < < = return RequestCallback decl ResponseExtractor public < < public < < < < throws decl_stmt org.springframework.web.client.RequestCallback = decl_stmt org.springframework.web.client.ResponseExtractor < < = return RequestCallback decl ResponseExtractor Type public < < public < < < < throws decl_stmt org.springframework.asm.Type = decl_stmt org.springframework.web.client.RequestCallback = decl_stmt org.springframework.web.client.ResponseExtractor < < = return URI public < public < < throws decl_stmt java.net.URI = return URI public < public < < < throws decl_stmt java.net.URI = return public < public < < throws return String ClientHttpRequest ClientHttpResponse String protected < protected < < throws decl_stmt org.springframework.http.client.ClientHttpResponse = try decl_stmt org.springframework.http.client.ClientHttpRequest = if != = call ClientHttpRequest.execute() call ClientHttpRequest.execute() call ClientHttpRequest.execute() call ClientHttpRequest.execute() call ClientHttpRequest.execute() if != return else return catch decl_stmt java.lang.String = decl_stmt java.lang.String = = != call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) - : throw new + + + + + finally if != call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() call org.springframework.http.client.ClientHttpResponse.close() boolean ResponseErrorHandler protected protected throws decl_stmt org.springframework.web.client.ResponseErrorHandler = decl_stmt boolean = call org.springframework.web.client.ResponseErrorHandler.hasError(ClientHttpResponse) call org.springframework.web.client.ResponseErrorHandler.hasError(ClientHttpResponse) call org.springframework.web.client.ResponseErrorHandler.hasError(ClientHttpResponse) call org.springframework.web.client.ResponseErrorHandler.hasError(ClientHttpResponse) call org.springframework.web.client.ResponseErrorHandler.hasError(ClientHttpResponse) if try + + + + + + + + : catch if call ResponseErrorHandler.handleError() call ResponseErrorHandler.handleError() call ResponseErrorHandler.handleError() call ResponseErrorHandler.handleError() call ResponseErrorHandler.handleError() protected < protected < < return new protected < protected < return new protected < protected < return new protected < < < protected < < < return new < protected < protected < return decl List decl GenericHttpMessageConverter decl Class public public throws if != decl_stmt java.lang.Class < = if instanceof = < decl_stmt java.util.List < = new < for < : if != if call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() else if instanceof decl_stmt org.springframework.http.converter.GenericHttpMessageConverter < = < if call decl GenericHttpMessageConverter.canRead() call decl GenericHttpMessageConverter.canRead() call decl GenericHttpMessageConverter.canRead() call decl GenericHttpMessageConverter.canRead() call decl GenericHttpMessageConverter.canRead() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() if ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() if + decl List decl List private < private < < decl_stmt java.util.List < = decl_stmt java.util.List < = new < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : if != = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return MediaType HttpHeaders decl GenericHttpMessageConverter Object decl Class String Type HttpHeaders public public throws if ! decl_stmt org.springframework.http.HttpHeaders = decl_stmt org.springframework.http.HttpHeaders = if ! call org.springframework.http.HttpHeaders.isEmpty() call org.springframework.http.HttpHeaders.isEmpty() call org.springframework.http.HttpHeaders.isEmpty() call org.springframework.http.HttpHeaders.isEmpty() call org.springframework.http.HttpHeaders.isEmpty() call org.springframework.http.HttpHeaders.putAll(Map) call org.springframework.http.HttpHeaders.putAll(Map) call org.springframework.http.HttpHeaders.putAll(Map) call org.springframework.http.HttpHeaders.putAll(Map) call org.springframework.http.HttpHeaders.putAll(Map) if call org.springframework.http.HttpHeaders.getContentLength() call org.springframework.http.HttpHeaders.getContentLength() call org.springframework.http.HttpHeaders.getContentLength() call org.springframework.http.HttpHeaders.getContentLength() call org.springframework.http.HttpHeaders.getContentLength() < call org.springframework.http.HttpHeaders.setContentLength(long) call org.springframework.http.HttpHeaders.setContentLength(long) call org.springframework.http.HttpHeaders.setContentLength(long) call org.springframework.http.HttpHeaders.setContentLength(long) call org.springframework.http.HttpHeaders.setContentLength(long) else decl_stmt java.lang.Object = decl_stmt java.lang.Class < = call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() decl_stmt org.springframework.asm.Type = instanceof < : decl_stmt org.springframework.http.HttpHeaders = decl_stmt org.springframework.http.MediaType = call org.springframework.http.HttpHeaders.getContentType() call org.springframework.http.HttpHeaders.getContentType() call org.springframework.http.HttpHeaders.getContentType() call org.springframework.http.HttpHeaders.getContentType() call org.springframework.http.HttpHeaders.getContentType() for < : if instanceof decl_stmt org.springframework.http.converter.GenericHttpMessageConverter < = < if call decl GenericHttpMessageConverter.canWrite() call decl GenericHttpMessageConverter.canWrite() call decl GenericHttpMessageConverter.canWrite() call decl GenericHttpMessageConverter.canWrite() call decl GenericHttpMessageConverter.canWrite() if ! call org.springframework.http.HttpHeaders.isEmpty() call org.springframework.http.HttpHeaders.isEmpty() call org.springframework.http.HttpHeaders.isEmpty() call org.springframework.http.HttpHeaders.isEmpty() call org.springframework.http.HttpHeaders.isEmpty() if if != + + + + + + else + + + + call decl GenericHttpMessageConverter.write() call decl GenericHttpMessageConverter.write() call decl GenericHttpMessageConverter.write() call decl GenericHttpMessageConverter.write() call decl GenericHttpMessageConverter.write() return else if if ! call org.springframework.http.HttpHeaders.isEmpty() call org.springframework.http.HttpHeaders.isEmpty() call org.springframework.http.HttpHeaders.isEmpty() call org.springframework.http.HttpHeaders.isEmpty() call org.springframework.http.HttpHeaders.isEmpty() if if != + + + + + + else + + + + < return decl_stmt java.lang.String = + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() + if != += + + throw new T public < public < throws if != decl_stmt T = return new < else return new < public public throws return