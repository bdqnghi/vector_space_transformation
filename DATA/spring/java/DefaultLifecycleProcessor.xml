org.springframework.context.support java.util.ArrayList import java.util.Collections import java.util.HashMap import java.util.LinkedHashMap import java.util.LinkedHashSet import java.util.List import java.util.Map import java.util.Set import java.util.concurrent.CountDownLatch import java.util.concurrent.TimeUnit import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.factory.BeanFactory import org.springframework.beans.factory.BeanFactoryAware import org.springframework.beans.factory.BeanFactoryUtils import org.springframework.beans.factory.config.ConfigurableListableBeanFactory import org.springframework.context.ApplicationContextException import org.springframework.context.Lifecycle import org.springframework.context.LifecycleProcessor import org.springframework.context.Phased import org.springframework.context.SmartLifecycle import org.springframework.util.Assert import class org.springframework.context.support.DefaultLifecycleProcessor super super implements Log boolean long ConfigurableListableBeanFactory public public = public public = public public = public public = public public = public public = public public return decl Map LifecycleGroup decl List Lifecycle decl Map int private private decl_stmt java.util.Map < = decl_stmt java.util.Map < = new < for < extends extends : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt org.springframework.context.Lifecycle = if ! || instanceof && decl_stmt int = decl_stmt LifecycleGroup = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call LifecycleGroup.add() call LifecycleGroup.add() call LifecycleGroup.add() call LifecycleGroup.add() call LifecycleGroup.add() if call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() > decl_stmt java.util.List < = new < call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() for : call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() Lifecycle decl String private private < extends extends decl_stmt org.springframework.context.Lifecycle = if != && ! decl_stmt java.lang.String = for : if ! call Lifecycle.isRunning() call Lifecycle.isRunning() call Lifecycle.isRunning() call Lifecycle.isRunning() call Lifecycle.isRunning() && ! || ! instanceof || if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + call Lifecycle.getClass() call Lifecycle.getClass() call Lifecycle.getClass() call Lifecycle.getClass() call Lifecycle.getClass() + try call org.springframework.context.Lifecycle.start() call org.springframework.context.Lifecycle.start() call org.springframework.context.Lifecycle.start() call org.springframework.context.Lifecycle.start() call org.springframework.context.Lifecycle.start() catch throw new + + if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + decl Map LifecycleGroup decl List Lifecycle decl Map int private private decl_stmt java.util.Map < = decl_stmt java.util.Map < = new < for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt org.springframework.context.Lifecycle = decl_stmt int = decl_stmt LifecycleGroup = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call LifecycleGroup.add() call LifecycleGroup.add() call LifecycleGroup.add() call LifecycleGroup.add() call LifecycleGroup.add() if call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() > decl_stmt java.util.List < = new < call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() for : call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl String Lifecycle private private < extends extends final final final final final final final < decl_stmt org.springframework.context.Lifecycle = if != decl_stmt java.lang.String = for : try if call Lifecycle.isRunning() call Lifecycle.isRunning() call Lifecycle.isRunning() call Lifecycle.isRunning() call Lifecycle.isRunning() if instanceof if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + call Lifecycle.getClass() call Lifecycle.getClass() call Lifecycle.getClass() call Lifecycle.getClass() call Lifecycle.getClass() + new public public if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + else if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + call Lifecycle.getClass() call Lifecycle.getClass() call Lifecycle.getClass() call Lifecycle.getClass() call Lifecycle.getClass() + call org.springframework.context.Lifecycle.stop() call org.springframework.context.Lifecycle.stop() call org.springframework.context.Lifecycle.stop() call org.springframework.context.Lifecycle.stop() call org.springframework.context.Lifecycle.stop() if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + else if instanceof catch if call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() + + public public if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + boolean String Lifecycle decl String decl Map String protected < protected < decl_stmt java.util.Map < = new < decl_stmt java.lang.String = for : decl_stmt java.lang.String = decl_stmt boolean = decl_stmt java.lang.String = + : if && ! || || decl_stmt org.springframework.context.Lifecycle = if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return protected protected return instanceof : public public if instanceof ++ new public public if return if call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() + for : if CountDownLatch decl Set public public if return if call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() + decl_stmt java.util.concurrent.CountDownLatch = new decl_stmt java.util.Set < = new < for : if else if instanceof call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() try call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) if call java.util.concurrent.CountDownLatch.getCount() call java.util.concurrent.CountDownLatch.getCount() call java.util.concurrent.CountDownLatch.getCount() call java.util.concurrent.CountDownLatch.getCount() call java.util.concurrent.CountDownLatch.getCount() > && ! call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() && call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() + call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() + + call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() > : + + + + + + catch int int public public decl_stmt int = decl_stmt int = return == : < - :