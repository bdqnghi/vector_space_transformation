org.springframework.web.servlet.mvc.method.annotation java.util.ArrayList import java.util.List import java.util.Map import org.springframework.core.MethodParameter import org.springframework.util.CollectionUtils import org.springframework.util.MultiValueMap import org.springframework.util.StringUtils import org.springframework.web.bind.ServletRequestBindingException import org.springframework.web.bind.annotation.MatrixVariable import org.springframework.web.bind.annotation.ValueConstants import org.springframework.web.context.request.NativeWebRequest import org.springframework.web.context.request.RequestAttributes import org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver import org.springframework.web.servlet.HandlerMapping import class org.springframework.web.servlet.mvc.method.annotation.MatrixVariableMethodArgumentResolver super super extends String public public if ! return if decl_stmt java.lang.String = return return MatrixVariable protected protected decl_stmt MatrixVariable = return new String boolean String decl Map decl List protected protected throws decl_stmt java.util.Map < < = < < if return decl_stmt java.lang.String = decl_stmt java.util.List < = if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() else decl_stmt boolean = = new < for < : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() if if decl_stmt java.lang.String = throw new + + + + call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() = if return else if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == return call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() else return protected protected throws throw new + + +