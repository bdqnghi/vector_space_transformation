org.springframework.cache.jcache.interceptor java.lang.annotation.Annotation import java.lang.reflect.Method import java.util.Collection import javax.cache.annotation.CacheInvocationContext import javax.cache.annotation.CacheMethodDetails import javax.cache.annotation.CacheResolver import javax.cache.annotation.CacheResult import org.junit.Rule import org.junit.Test import org.junit.rules.ExpectedException import org.springframework.cache.Cache import org.springframework.cache.jcache.AbstractJCacheTests import org.springframework.util.Assert import org.springframework.util.ReflectionUtils import static static org.junit.Assert.* import static static org.mockito.BDDMockito.* import class org.springframework.cache.jcache.interceptor.CacheResolverAdapterTests super super extends ExpectedException decl DefaultCacheInvocationContext CacheResolverAdapter decl Collection public public decl_stmt org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext < = decl_stmt org.springframework.cache.jcache.interceptor.CacheResolverAdapter = new decl_stmt java.util.Collection < extends extends = call org.springframework.cache.jcache.interceptor.CacheResolverAdapter.resolveCaches(CacheOperationInvocationContext) call org.springframework.cache.jcache.interceptor.CacheResolverAdapter.resolveCaches(CacheOperationInvocationContext) call org.springframework.cache.jcache.interceptor.CacheResolverAdapter.resolveCaches(CacheOperationInvocationContext) call org.springframework.cache.jcache.interceptor.CacheResolverAdapter.resolveCaches(CacheOperationInvocationContext) call org.springframework.cache.jcache.interceptor.CacheResolverAdapter.resolveCaches(CacheOperationInvocationContext) call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.iterator() call decl Collection.iterator() call decl Collection.iterator() call decl Collection.iterator() call decl Collection.iterator() decl DefaultCacheInvocationContext CacheResolverAdapter public public decl_stmt org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext < = decl_stmt org.springframework.cache.jcache.interceptor.CacheResolverAdapter = new call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call org.springframework.cache.jcache.interceptor.CacheResolverAdapter.resolveCaches(CacheOperationInvocationContext) call org.springframework.cache.jcache.interceptor.CacheResolverAdapter.resolveCaches(CacheOperationInvocationContext) call org.springframework.cache.jcache.interceptor.CacheResolverAdapter.resolveCaches(CacheOperationInvocationContext) call org.springframework.cache.jcache.interceptor.CacheResolverAdapter.resolveCaches(CacheOperationInvocationContext) call org.springframework.cache.jcache.interceptor.CacheResolverAdapter.resolveCaches(CacheOperationInvocationContext) decl javax CacheResolver protected protected < extends extends decl_stmt org.springframework.cache.interceptor.CacheResolver = decl_stmt org.springframework.cache.Cache final final final final final final final final final if == = else = call decl javax.getName() call decl javax.getName() call decl javax.getName() call decl javax.getName() call decl javax.getName() call CacheResolver.resolveCache() call CacheResolver.resolveCache() call CacheResolver.resolveCache() call CacheResolver.resolveCache() call CacheResolver.resolveCache() return CacheResultOperation decl CacheMethodDetails Method CacheResult protected < protected < decl_stmt com.sun.jdi.Method = decl_stmt CacheResult = call com.sun.jdi.Method.getAnnotation(Class) call com.sun.jdi.Method.getAnnotation(Class) call com.sun.jdi.Method.getAnnotation(Class) call com.sun.jdi.Method.getAnnotation(Class) call com.sun.jdi.Method.getAnnotation(Class) decl_stmt CacheMethodDetails < = new <> decl_stmt org.springframework.cache.jcache.interceptor.CacheResultOperation = new return new < new new private private return