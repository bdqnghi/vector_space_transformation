org.springframework.test.annotation java.lang.reflect.Method import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.core.annotation.AnnotatedElementUtils import org.springframework.core.annotation.AnnotationUtils import org.springframework.util.Assert import org.springframework.util.ObjectUtils import org.springframework.util.StringUtils import class org.springframework.test.annotation.ProfileValueUtils Log decl Class decl Class ProfileValueSourceConfiguration ProfileValueSource public static public static < decl_stmt java.lang.Class < = decl_stmt ProfileValueSourceConfiguration = if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + + decl_stmt java.lang.Class < extends extends if != = call ProfileValueSourceConfiguration.value() call ProfileValueSourceConfiguration.value() call ProfileValueSourceConfiguration.value() call ProfileValueSourceConfiguration.value() call ProfileValueSourceConfiguration.value() else = < extends extends if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + + decl_stmt org.springframework.test.annotation.ProfileValueSource if == = else try = call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() catch if call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() + + + + = return IfProfileValue public static public static < decl_stmt IfProfileValue = return public static public static < return boolean IfProfileValue public static public static < decl_stmt IfProfileValue = decl_stmt boolean = if = return return decl String String private static private static if == return decl_stmt java.lang.String = decl_stmt java.lang.String = if if > throw new + = new for : if return return