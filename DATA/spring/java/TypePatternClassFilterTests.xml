org.springframework.aop.aspectj org.junit.Test import org.springframework.beans.factory.BeanFactory import org.springframework.beans.factory.support.DefaultListableBeanFactory import org.springframework.tests.sample.beans.CountingTestBean import org.springframework.tests.sample.beans.IOther import org.springframework.tests.sample.beans.ITestBean import org.springframework.tests.sample.beans.TestBean import org.springframework.tests.sample.beans.subpkg.DeepBean import static static org.junit.Assert.* import class org.springframework.aop.aspectj.TypePatternClassFilterTests = public = public new TypePatternClassFilter public public decl_stmt org.springframework.aop.aspectj.TypePatternClassFilter = new call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) TypePatternClassFilter public public decl_stmt org.springframework.aop.aspectj.TypePatternClassFilter = new call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) TypePatternClassFilter public public decl_stmt org.springframework.aop.aspectj.TypePatternClassFilter = new call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) = new call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) = new call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) call org.springframework.aop.aspectj.TypePatternClassFilter.matches(Class) = public = public throws new = public = public throws new