org.springframework.orm.jpa.support java.io.IOException import javax.persistence.EntityManager import javax.persistence.EntityManagerFactory import javax.persistence.PersistenceException import javax.servlet.FilterChain import javax.servlet.ServletException import javax.servlet.http.HttpServletRequest import javax.servlet.http.HttpServletResponse import org.springframework.dao.DataAccessResourceFailureException import org.springframework.orm.jpa.EntityManagerFactoryUtils import org.springframework.orm.jpa.EntityManagerHolder import org.springframework.transaction.support.TransactionSynchronizationManager import org.springframework.util.StringUtils import org.springframework.web.context.WebApplicationContext import org.springframework.web.context.request.async.WebAsyncManager import org.springframework.web.context.request.async.WebAsyncUtils import org.springframework.web.context.support.WebApplicationContextUtils import org.springframework.web.filter.OncePerRequestFilter import class org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter super super extends EntityManagerFactory String String String public public = protected protected return public public = protected protected return protected protected return protected protected return EntityManager EntityManagerFactory boolean WebAsyncManager String boolean AsyncRequestInterceptor EntityManagerHolder protected protected throws decl_stmt EntityManagerFactory = decl_stmt boolean = decl_stmt org.springframework.web.context.request.async.WebAsyncManager = decl_stmt java.lang.String = if = else decl_stmt boolean = ! if || ! try decl_stmt EntityManager = decl_stmt org.springframework.orm.jpa.EntityManagerHolder = new decl_stmt org.springframework.orm.jpa.support.AsyncRequestInterceptor = new call org.springframework.web.context.request.async.WebAsyncManager.registerCallableInterceptor(Object,CallableProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerCallableInterceptor(Object,CallableProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerCallableInterceptor(Object,CallableProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerCallableInterceptor(Object,CallableProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerCallableInterceptor(Object,CallableProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerDeferredResultInterceptor(Object,DeferredResultProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerDeferredResultInterceptor(Object,DeferredResultProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerDeferredResultInterceptor(Object,DeferredResultProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerDeferredResultInterceptor(Object,DeferredResultProcessingInterceptor) call org.springframework.web.context.request.async.WebAsyncManager.registerDeferredResultInterceptor(Object,DeferredResultProcessingInterceptor) catch throw new try finally if ! decl_stmt org.springframework.orm.jpa.EntityManagerHolder = if ! call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() call org.springframework.orm.jpa.EntityManagerHolder.getEntityManager() protected protected if == = return String String WebApplicationContext protected protected decl_stmt org.springframework.web.context.WebApplicationContext = decl_stmt java.lang.String = decl_stmt java.lang.String = if return call WebApplicationContext.getBean() call WebApplicationContext.getBean() call WebApplicationContext.getBean() call WebApplicationContext.getBean() call WebApplicationContext.getBean() else if ! && call WebApplicationContext.containsBean() call WebApplicationContext.containsBean() call WebApplicationContext.containsBean() call WebApplicationContext.containsBean() call WebApplicationContext.containsBean() return call WebApplicationContext.getBean() call WebApplicationContext.getBean() call WebApplicationContext.getBean() call WebApplicationContext.getBean() call WebApplicationContext.getBean() else return protected protected return private private if == return return