org.springframework.jms.support.converter java.io.ByteArrayInputStream import java.lang.reflect.Method import java.util.Collections import java.util.Date import java.util.HashMap import java.util.Map import javax.jms.BytesMessage import javax.jms.JMSException import javax.jms.Session import javax.jms.TextMessage import com.fasterxml.jackson.annotation.JsonView import org.junit.Before import org.junit.Rule import org.junit.Test import org.junit.rules.ExpectedException import org.mockito.invocation.InvocationOnMock import org.mockito.stubbing.Answer import org.springframework.core.MethodParameter import static static org.junit.Assert.* import static static org.mockito.BDDMockito.* import class org.springframework.jms.support.converter.MappingJackson2MessageConverterTests ExpectedException MappingJackson2MessageConverter Session public public throws = = new call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setEncodingPropertyName(String) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setEncodingPropertyName(String) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setEncodingPropertyName(String) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setEncodingPropertyName(String) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setEncodingPropertyName(String) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTypeIdPropertyName(String) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTypeIdPropertyName(String) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTypeIdPropertyName(String) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTypeIdPropertyName(String) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTypeIdPropertyName(String) BytesMessage Date public public throws decl_stmt BytesMessage = decl_stmt java.util.Date = new call Session.createBytesMessage() call Session.createBytesMessage() call Session.createBytesMessage() call Session.createBytesMessage() call Session.createBytesMessage() call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) decl Map decl byte BytesMessage Object ByteArrayInputStream public public throws decl_stmt BytesMessage = decl_stmt java.util.Map < = decl_stmt byte = decl_stmt ByteArrayInputStream final final = new call BytesMessage.getStringProperty() call BytesMessage.getStringProperty() call BytesMessage.getStringProperty() call BytesMessage.getStringProperty() call BytesMessage.getStringProperty() call BytesMessage.propertyExists() call BytesMessage.propertyExists() call BytesMessage.propertyExists() call BytesMessage.propertyExists() call BytesMessage.propertyExists() call BytesMessage.getBodyLength() call BytesMessage.getBodyLength() call BytesMessage.getBodyLength() call BytesMessage.getBodyLength() call BytesMessage.getBodyLength() new call BytesMessage.readBytes() call BytesMessage.readBytes() call BytesMessage.readBytes() call BytesMessage.readBytes() call BytesMessage.readBytes() new < public public throws return call ByteArrayInputStream.read() call ByteArrayInputStream.read() call ByteArrayInputStream.read() call ByteArrayInputStream.read() call ByteArrayInputStream.read() decl_stmt java.lang.Object = call org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(Message) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(Message) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(Message) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(Message) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(Message) public public throws return Date TextMessage public public throws call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTargetType(MessageType) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTargetType(MessageType) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTargetType(MessageType) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTargetType(MessageType) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTargetType(MessageType) decl_stmt org.springframework.web.socket.TextMessage = decl_stmt java.util.Date = new call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) decl Map TextMessage public public throws call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTargetType(MessageType) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTargetType(MessageType) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTargetType(MessageType) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTargetType(MessageType) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTargetType(MessageType) decl_stmt org.springframework.web.socket.TextMessage = decl_stmt java.util.Map < = new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) String MyBean MyBean TextMessage public public throws decl_stmt org.springframework.web.socket.TextMessage = decl_stmt org.springframework.context.annotation.MyBean = new decl_stmt java.lang.String = call TextMessage.getStringProperty() call TextMessage.getStringProperty() call TextMessage.getStringProperty() call TextMessage.getStringProperty() call TextMessage.getStringProperty() call TextMessage.getText() call TextMessage.getText() call TextMessage.getText() call TextMessage.getText() call TextMessage.getText() decl_stmt org.springframework.context.annotation.MyBean = call org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(Message) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(Message) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(Message) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(Message) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(Message) String MyBean MyBean TextMessage public public throws decl_stmt org.springframework.web.socket.TextMessage = decl_stmt org.springframework.context.annotation.MyBean = new decl_stmt java.lang.String = call TextMessage.getStringProperty() call TextMessage.getStringProperty() call TextMessage.getStringProperty() call TextMessage.getStringProperty() call TextMessage.getStringProperty() call TextMessage.getText() call TextMessage.getText() call TextMessage.getText() call TextMessage.getText() call TextMessage.getText() decl_stmt org.springframework.context.annotation.MyBean = call org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(Message) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(Message) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(Message) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(Message) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(Message) String decl Map Object TextMessage public public throws decl_stmt org.springframework.web.socket.TextMessage = decl_stmt java.util.Map < = decl_stmt java.lang.String = call TextMessage.getStringProperty() call TextMessage.getStringProperty() call TextMessage.getStringProperty() call TextMessage.getStringProperty() call TextMessage.getStringProperty() call TextMessage.getText() call TextMessage.getText() call TextMessage.getText() call TextMessage.getText() call TextMessage.getText() decl_stmt java.lang.Object = call org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(Message) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(Message) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(Message) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(Message) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(Message) String decl Map Object TextMessage public public throws decl_stmt org.springframework.web.socket.TextMessage = decl_stmt java.util.Map < = decl_stmt java.lang.String = call TextMessage.getStringProperty() call TextMessage.getStringProperty() call TextMessage.getStringProperty() call TextMessage.getStringProperty() call TextMessage.getStringProperty() call TextMessage.getText() call TextMessage.getText() call TextMessage.getText() call TextMessage.getText() call TextMessage.getText() decl_stmt java.lang.Object = call org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(Message) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(Message) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(Message) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(Message) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(Message) MethodParameter Method public public throws decl_stmt com.sun.jdi.Method = decl_stmt org.springframework.core.MethodParameter = new - public public throws MethodParameter Method public public throws decl_stmt com.sun.jdi.Method = decl_stmt org.springframework.core.MethodParameter = new - MethodParameter Method public public throws decl_stmt com.sun.jdi.Method = decl_stmt org.springframework.core.MethodParameter = new - call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() call ExpectedException.expect() MyAnotherBean TextMessage private private throws call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTargetType(MessageType) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTargetType(MessageType) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTargetType(MessageType) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTargetType(MessageType) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTargetType(MessageType) decl_stmt org.springframework.web.socket.TextMessage = decl_stmt MyAnotherBean = new call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) MyAnotherBean TextMessage public public throws call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTargetType(MessageType) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTargetType(MessageType) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTargetType(MessageType) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTargetType(MessageType) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTargetType(MessageType) decl_stmt org.springframework.web.socket.TextMessage = decl_stmt MyAnotherBean = new call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) MyAnotherBean TextMessage public public throws call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTargetType(MessageType) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTargetType(MessageType) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTargetType(MessageType) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTargetType(MessageType) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTargetType(MessageType) decl_stmt org.springframework.web.socket.TextMessage = decl_stmt MyAnotherBean = new call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) call org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(Object,Session,Object) public public return new public public return new public public return new public public return public public = MyBean public public if == return if == || != return decl_stmt org.springframework.context.annotation.MyBean = if != ! : != return return public public return != : public public return public public = public public return public public =