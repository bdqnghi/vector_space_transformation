org.springframework.test.context.support java.util.ArrayList import java.util.Collections import java.util.LinkedHashSet import java.util.List import java.util.Set import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.BeanUtils import org.springframework.test.context.ActiveProfiles import org.springframework.test.context.ActiveProfilesResolver import org.springframework.test.util.MetaAnnotationUtils import org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor import org.springframework.util.Assert import org.springframework.util.StringUtils import class org.springframework.test.context.support.ActiveProfilesUtils Log decl Class String decl String decl AnnotationDescriptor decl Class ActiveProfilesResolver decl List decl Set decl Class ActiveProfiles decl Class static static < decl_stmt java.util.List final final final < = new < decl_stmt java.lang.Class < = decl_stmt AnnotationDescriptor < = if == && call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() while != decl_stmt java.lang.Class < = call decl AnnotationDescriptor.getRootDeclaringClass() call decl AnnotationDescriptor.getRootDeclaringClass() call decl AnnotationDescriptor.getRootDeclaringClass() call decl AnnotationDescriptor.getRootDeclaringClass() call decl AnnotationDescriptor.getRootDeclaringClass() decl_stmt java.lang.Class < = call decl AnnotationDescriptor.getDeclaringClass() call decl AnnotationDescriptor.getDeclaringClass() call decl AnnotationDescriptor.getDeclaringClass() call decl AnnotationDescriptor.getDeclaringClass() call decl AnnotationDescriptor.getDeclaringClass() decl_stmt ActiveProfiles = call decl AnnotationDescriptor.synthesizeAnnotation() call decl AnnotationDescriptor.synthesizeAnnotation() call decl AnnotationDescriptor.synthesizeAnnotation() call decl AnnotationDescriptor.synthesizeAnnotation() call decl AnnotationDescriptor.synthesizeAnnotation() if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() decl_stmt java.lang.Class < extends extends = call ActiveProfiles.resolver() call ActiveProfiles.resolver() call ActiveProfiles.resolver() call ActiveProfiles.resolver() call ActiveProfiles.resolver() if == = decl_stmt org.springframework.test.context.ActiveProfilesResolver = try = catch decl_stmt java.lang.String = + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() throw new decl_stmt java.lang.String = call ActiveProfilesResolver.resolve() call ActiveProfilesResolver.resolve() call ActiveProfilesResolver.resolve() call ActiveProfilesResolver.resolve() call ActiveProfilesResolver.resolve() if == decl_stmt java.lang.String = call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() throw new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = call ActiveProfiles.inheritProfiles() call ActiveProfiles.inheritProfiles() call ActiveProfiles.inheritProfiles() call ActiveProfiles.inheritProfiles() call ActiveProfiles.inheritProfiles() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() : decl_stmt java.util.Set final final final < = new < for : for : if call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return