org.springframework.test.context.transaction java.lang.annotation.Annotation import java.lang.reflect.InvocationTargetException import java.lang.reflect.Method import java.util.ArrayList import java.util.Collections import java.util.List import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.BeansException import org.springframework.beans.factory.BeanFactory import org.springframework.beans.factory.annotation.BeanFactoryAnnotationUtils import org.springframework.core.annotation.AnnotatedElementUtils import org.springframework.core.annotation.AnnotationUtils import org.springframework.test.annotation.Commit import org.springframework.test.annotation.Rollback import org.springframework.test.context.TestContext import org.springframework.test.context.support.AbstractTestExecutionListener import org.springframework.transaction.PlatformTransactionManager import org.springframework.transaction.TransactionDefinition import org.springframework.transaction.TransactionStatus import org.springframework.transaction.annotation.AnnotationTransactionAttributeSource import org.springframework.transaction.interceptor.TransactionAttribute import org.springframework.transaction.interceptor.TransactionAttributeSource import org.springframework.util.Assert import org.springframework.util.ReflectionUtils import org.springframework.util.StringUtils import class org.springframework.test.context.transaction.TransactionalTestExecutionListener super super extends TransactionAttributeSource Log TransactionConfigurationAttributes TransactionConfigurationAttributes public final public final return TransactionAttribute PlatformTransactionManager TransactionContext Method decl Class public public final final throws decl_stmt com.sun.jdi.Method final final = decl_stmt java.lang.Class final final final < = decl_stmt org.springframework.test.context.transaction.TransactionContext = if != throw new decl_stmt org.springframework.transaction.PlatformTransactionManager = decl_stmt org.springframework.transaction.interceptor.TransactionAttribute = if != = if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + if call TransactionAttribute.getPropagationBehavior() call TransactionAttribute.getPropagationBehavior() call TransactionAttribute.getPropagationBehavior() call TransactionAttribute.getPropagationBehavior() call TransactionAttribute.getPropagationBehavior() == return = call org.springframework.transaction.interceptor.TransactionAttribute.getQualifier() call org.springframework.transaction.interceptor.TransactionAttribute.getQualifier() call org.springframework.transaction.interceptor.TransactionAttribute.getQualifier() call org.springframework.transaction.interceptor.TransactionAttribute.getQualifier() call org.springframework.transaction.interceptor.TransactionAttribute.getQualifier() if == throw new if != = new call TransactionContext.startTransaction() call TransactionContext.startTransaction() call TransactionContext.startTransaction() call TransactionContext.startTransaction() call TransactionContext.startTransaction() TransactionContext Method TransactionStatus public public throws decl_stmt com.sun.jdi.Method = decl_stmt org.springframework.test.context.transaction.TransactionContext = if != decl_stmt org.springframework.transaction.TransactionStatus = call org.springframework.test.context.transaction.TransactionContext.getTransactionStatus() call org.springframework.test.context.transaction.TransactionContext.getTransactionStatus() call org.springframework.test.context.transaction.TransactionContext.getTransactionStatus() call org.springframework.test.context.transaction.TransactionContext.getTransactionStatus() call org.springframework.test.context.transaction.TransactionContext.getTransactionStatus() try if != && ! call org.springframework.transaction.TransactionStatus.isCompleted() call org.springframework.transaction.TransactionStatus.isCompleted() call org.springframework.transaction.TransactionStatus.isCompleted() call org.springframework.transaction.TransactionStatus.isCompleted() call org.springframework.transaction.TransactionStatus.isCompleted() call org.springframework.test.context.transaction.TransactionContext.endTransaction() call org.springframework.test.context.transaction.TransactionContext.endTransaction() call org.springframework.test.context.transaction.TransactionContext.endTransaction() call org.springframework.test.context.transaction.TransactionContext.endTransaction() call org.springframework.test.context.transaction.TransactionContext.endTransaction() finally decl List protected protected throws try decl_stmt java.util.List < = for : if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + catch if call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + + Throwable Throwable decl List protected protected throws decl_stmt java.lang.Throwable = decl_stmt java.util.List < = for : try if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + + catch decl_stmt java.lang.Throwable = if == = call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + + + catch if == = call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + + + if != BeanFactory protected protected if try decl_stmt org.springframework.beans.factory.BeanFactory = return catch if call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() throw return String protected protected decl_stmt java.lang.String = return boolean boolean Rollback decl Class TransactionConfigurationAttributes protected final protected final throws decl_stmt java.lang.Class < = decl_stmt Rollback = decl_stmt boolean = != decl_stmt org.springframework.test.context.transaction.TransactionConfigurationAttributes = if && != throw new + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() if decl_stmt boolean = call Rollback.value() call Rollback.value() call Rollback.value() call Rollback.value() call Rollback.value() if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() return return call org.springframework.test.context.transaction.TransactionConfigurationAttributes.isDefaultRollback() call org.springframework.test.context.transaction.TransactionConfigurationAttributes.isDefaultRollback() call org.springframework.test.context.transaction.TransactionConfigurationAttributes.isDefaultRollback() call org.springframework.test.context.transaction.TransactionConfigurationAttributes.isDefaultRollback() call org.springframework.test.context.transaction.TransactionConfigurationAttributes.isDefaultRollback() Rollback boolean boolean protected final protected final throws decl_stmt boolean = decl_stmt Rollback = if != decl_stmt boolean = call Rollback.value() call Rollback.value() call Rollback.value() call Rollback.value() call Rollback.value() if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() = else if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() return decl Class decl List private < < private < < < decl_stmt java.util.List < < = new < < decl_stmt java.lang.Class < = while != && != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() call decl Class.getSuperclass() return decl List Annotation private < private < < < extends extends decl_stmt java.util.List < = new < for < : for : decl_stmt java.text.Annotation = if != && ! call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return private private < for : if return return private private if ! return if != return for = < ++ if ! return return TransactionConfigurationAttributes TransactionConfiguration decl Class if == decl_stmt java.lang.Class < = decl_stmt TransactionConfiguration = if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() decl_stmt org.springframework.test.context.transaction.TransactionConfigurationAttributes = == : new call TransactionConfiguration.transactionManager() call TransactionConfiguration.transactionManager() call TransactionConfiguration.transactionManager() call TransactionConfiguration.transactionManager() call TransactionConfiguration.transactionManager() call TransactionConfiguration.defaultRollback() call TransactionConfiguration.defaultRollback() call TransactionConfiguration.defaultRollback() call TransactionConfiguration.defaultRollback() call TransactionConfiguration.defaultRollback() if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() = return