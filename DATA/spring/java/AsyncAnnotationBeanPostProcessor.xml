org.springframework.scheduling.annotation java.lang.annotation.Annotation import java.util.concurrent.Executor import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.aop.framework.autoproxy.AbstractBeanFactoryAwareAdvisingPostProcessor import org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler import org.springframework.beans.factory.BeanFactory import org.springframework.core.task.TaskExecutor import org.springframework.util.Assert import class annotation org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor super super extends decl Class String Log AsyncUncaughtExceptionHandler Executor public public < extends extends = public public = public public = AsyncAnnotationAdvisor public public decl_stmt org.springframework.scheduling.annotation.AsyncAnnotationAdvisor = new if != call org.springframework.scheduling.annotation.AsyncAnnotationAdvisor.setAsyncAnnotationType(Class) call org.springframework.scheduling.annotation.AsyncAnnotationAdvisor.setAsyncAnnotationType(Class) call org.springframework.scheduling.annotation.AsyncAnnotationAdvisor.setAsyncAnnotationType(Class) call org.springframework.scheduling.annotation.AsyncAnnotationAdvisor.setAsyncAnnotationType(Class) call org.springframework.scheduling.annotation.AsyncAnnotationAdvisor.setAsyncAnnotationType(Class) call org.springframework.scheduling.annotation.AsyncAnnotationAdvisor.setBeanFactory(BeanFactory) call org.springframework.scheduling.annotation.AsyncAnnotationAdvisor.setBeanFactory(BeanFactory) call org.springframework.scheduling.annotation.AsyncAnnotationAdvisor.setBeanFactory(BeanFactory) call org.springframework.scheduling.annotation.AsyncAnnotationAdvisor.setBeanFactory(BeanFactory) call org.springframework.scheduling.annotation.AsyncAnnotationAdvisor.setBeanFactory(BeanFactory) =