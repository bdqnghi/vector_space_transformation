org.springframework.aop.aspectj.annotation java.io.Serializable import java.lang.annotation.Annotation import java.lang.reflect.Field import java.lang.reflect.Method import java.util.Collections import java.util.Comparator import java.util.LinkedList import java.util.List import org.aopalliance.aop.Advice import org.aspectj.lang.annotation.After import org.aspectj.lang.annotation.AfterReturning import org.aspectj.lang.annotation.AfterThrowing import org.aspectj.lang.annotation.Around import org.aspectj.lang.annotation.Before import org.aspectj.lang.annotation.DeclareParents import org.aspectj.lang.annotation.Pointcut import org.springframework.aop.Advisor import org.springframework.aop.MethodBeforeAdvice import org.springframework.aop.aspectj.AbstractAspectJAdvice import org.springframework.aop.aspectj.AspectJAfterAdvice import org.springframework.aop.aspectj.AspectJAfterReturningAdvice import org.springframework.aop.aspectj.AspectJAfterThrowingAdvice import org.springframework.aop.aspectj.AspectJAroundAdvice import org.springframework.aop.aspectj.AspectJExpressionPointcut import org.springframework.aop.aspectj.AspectJMethodBeforeAdvice import org.springframework.aop.aspectj.DeclareParentsAdvisor import org.springframework.aop.framework.AopConfigException import org.springframework.aop.support.DefaultPointcutAdvisor import org.springframework.core.annotation.AnnotationUtils import org.springframework.core.convert.converter.Converter import org.springframework.core.convert.converter.ConvertingComparator import org.springframework.util.ReflectionUtils import org.springframework.util.StringUtils import org.springframework.util.comparator.CompoundComparator import org.springframework.util.comparator.InstanceComparator import class annotation org.springframework.aop.aspectj.annotation.ReflectiveAspectJAdvisorFactory super super extends super implements decl Comparator decl AspectJAnnotation public public decl_stmt AspectJAnnotation < = return != call decl AspectJAnnotation.getAnnotation() call decl AspectJAnnotation.getAnnotation() call decl AspectJAnnotation.getAnnotation() call decl AspectJAnnotation.getAnnotation() call decl AspectJAnnotation.getAnnotation() : public public return decl Class decl List Advisor Advisor String MetadataAwareAspectInstanceFactory public < public < decl_stmt java.lang.Class < = decl_stmt java.lang.String = decl_stmt org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory = new decl_stmt java.util.List < = new < for : decl_stmt org.springframework.aop.Advisor = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() && call MetadataAwareAspectInstanceFactory.getAspectMetadata() call MetadataAwareAspectInstanceFactory.getAspectMetadata() call MetadataAwareAspectInstanceFactory.getAspectMetadata() call MetadataAwareAspectInstanceFactory.getAspectMetadata() call MetadataAwareAspectInstanceFactory.getAspectMetadata() decl_stmt org.springframework.aop.Advisor = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() for : call decl Class.getDeclaredFields() call decl Class.getDeclaredFields() call decl Class.getDeclaredFields() call decl Class.getDeclaredFields() call decl Class.getDeclaredFields() decl_stmt org.springframework.aop.Advisor = if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return decl List private < private < < decl_stmt java.util.List final final final < = new < new public public throws if == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public throws if == DeclareParents private private decl_stmt DeclareParents = if == return if == call DeclareParents.defaultImpl() call DeclareParents.defaultImpl() call DeclareParents.defaultImpl() call DeclareParents.defaultImpl() call DeclareParents.defaultImpl() throw new return new call DeclareParents.value() call DeclareParents.value() call DeclareParents.value() call DeclareParents.value() call DeclareParents.value() call DeclareParents.defaultImpl() call DeclareParents.defaultImpl() call DeclareParents.defaultImpl() call DeclareParents.defaultImpl() call DeclareParents.defaultImpl() AspectJExpressionPointcut public public decl_stmt org.springframework.aop.aspectj.AspectJExpressionPointcut = if == return return new AspectJExpressionPointcut decl AspectJAnnotation private private < decl_stmt AspectJAnnotation < = if == return decl_stmt org.springframework.aop.aspectj.AspectJExpressionPointcut = new new new < call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call AspectJExpressionPointcut.setExpression() call decl AspectJAnnotation.getPointcutExpression() call decl AspectJAnnotation.getPointcutExpression() call decl AspectJAnnotation.getPointcutExpression() call decl AspectJAnnotation.getPointcutExpression() call decl AspectJAnnotation.getPointcutExpression() return decl AspectJAnnotation AfterThrowing decl String AbstractAspectJAdvice AfterReturning decl Class public public decl_stmt java.lang.Class < = decl_stmt AspectJAnnotation < = if == return if ! throw new + + + + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() + if + decl_stmt org.springframework.aop.aspectj.AbstractAspectJAdvice switch call decl AspectJAnnotation.getAnnotationType() call decl AspectJAnnotation.getAnnotationType() call decl AspectJAnnotation.getAnnotationType() call decl AspectJAnnotation.getAnnotationType() call decl AspectJAnnotation.getAnnotationType() case = new break case = new break case = new decl_stmt AfterReturning = call decl AspectJAnnotation.getAnnotation() call decl AspectJAnnotation.getAnnotation() call decl AspectJAnnotation.getAnnotation() call decl AspectJAnnotation.getAnnotation() call decl AspectJAnnotation.getAnnotation() if call AfterReturning.returning() call AfterReturning.returning() call AfterReturning.returning() call AfterReturning.returning() call AfterReturning.returning() call org.springframework.aop.aspectj.AbstractAspectJAdvice.setReturningName(String) call org.springframework.aop.aspectj.AbstractAspectJAdvice.setReturningName(String) call org.springframework.aop.aspectj.AbstractAspectJAdvice.setReturningName(String) call org.springframework.aop.aspectj.AbstractAspectJAdvice.setReturningName(String) call org.springframework.aop.aspectj.AbstractAspectJAdvice.setReturningName(String) call AfterReturning.returning() call AfterReturning.returning() call AfterReturning.returning() call AfterReturning.returning() call AfterReturning.returning() break case = new decl_stmt AfterThrowing = call decl AspectJAnnotation.getAnnotation() call decl AspectJAnnotation.getAnnotation() call decl AspectJAnnotation.getAnnotation() call decl AspectJAnnotation.getAnnotation() call decl AspectJAnnotation.getAnnotation() if call AfterThrowing.throwing() call AfterThrowing.throwing() call AfterThrowing.throwing() call AfterThrowing.throwing() call AfterThrowing.throwing() call org.springframework.aop.aspectj.AbstractAspectJAdvice.setThrowingName(String) call org.springframework.aop.aspectj.AbstractAspectJAdvice.setThrowingName(String) call org.springframework.aop.aspectj.AbstractAspectJAdvice.setThrowingName(String) call org.springframework.aop.aspectj.AbstractAspectJAdvice.setThrowingName(String) call org.springframework.aop.aspectj.AbstractAspectJAdvice.setThrowingName(String) call AfterThrowing.throwing() call AfterThrowing.throwing() call AfterThrowing.throwing() call AfterThrowing.throwing() call AfterThrowing.throwing() break case = new break case if + + return default: throw new + call org.springframework.aop.aspectj.AbstractAspectJAdvice.setAspectName(String) call org.springframework.aop.aspectj.AbstractAspectJAdvice.setAspectName(String) call org.springframework.aop.aspectj.AbstractAspectJAdvice.setAspectName(String) call org.springframework.aop.aspectj.AbstractAspectJAdvice.setAspectName(String) call org.springframework.aop.aspectj.AbstractAspectJAdvice.setAspectName(String) call org.springframework.aop.aspectj.AbstractAspectJAdvice.setDeclarationOrder(int) call org.springframework.aop.aspectj.AbstractAspectJAdvice.setDeclarationOrder(int) call org.springframework.aop.aspectj.AbstractAspectJAdvice.setDeclarationOrder(int) call org.springframework.aop.aspectj.AbstractAspectJAdvice.setDeclarationOrder(int) call org.springframework.aop.aspectj.AbstractAspectJAdvice.setDeclarationOrder(int) decl_stmt java.lang.String = if != call org.springframework.aop.aspectj.AbstractAspectJAdvice.setArgumentNamesFromStringArray(String) call org.springframework.aop.aspectj.AbstractAspectJAdvice.setArgumentNamesFromStringArray(String) call org.springframework.aop.aspectj.AbstractAspectJAdvice.setArgumentNamesFromStringArray(String) call org.springframework.aop.aspectj.AbstractAspectJAdvice.setArgumentNamesFromStringArray(String) call org.springframework.aop.aspectj.AbstractAspectJAdvice.setArgumentNamesFromStringArray(String) call org.springframework.aop.aspectj.AbstractAspectJAdvice.calculateArgumentBindings() call org.springframework.aop.aspectj.AbstractAspectJAdvice.calculateArgumentBindings() call org.springframework.aop.aspectj.AbstractAspectJAdvice.calculateArgumentBindings() call org.springframework.aop.aspectj.AbstractAspectJAdvice.calculateArgumentBindings() call org.springframework.aop.aspectj.AbstractAspectJAdvice.calculateArgumentBindings() return public public