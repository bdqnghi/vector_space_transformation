org.springframework.jms.connection java.lang.reflect.InvocationHandler import java.lang.reflect.InvocationTargetException import java.lang.reflect.Method import java.lang.reflect.Proxy import java.util.ArrayList import java.util.LinkedHashSet import java.util.List import java.util.Set import javax.jms.Connection import javax.jms.ConnectionFactory import javax.jms.ExceptionListener import javax.jms.JMSException import javax.jms.QueueConnection import javax.jms.QueueConnectionFactory import javax.jms.Session import javax.jms.TopicConnection import javax.jms.TopicConnectionFactory import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.factory.DisposableBean import org.springframework.beans.factory.InitializingBean import org.springframework.util.Assert import class org.springframework.jms.connection.SingleConnectionFactory super super implements AggregatedExceptionListener ExceptionListener boolean ConnectionFactory Object String Connection Boolean int Log public public = public public return public public = protected protected return public public = protected protected return public public = protected protected return public public if == && == throw new public public throws return public public throws throw new Connection public public throws decl_stmt sun.rmi.transport.Connection synchronized = = if ! instanceof throw new + return public public throws throw new Connection public public throws decl_stmt sun.rmi.transport.Connection synchronized = = if ! instanceof throw new + return public public throws throw new protected protected throws synchronized if == return public public throws if == throw new synchronized if != = if > if call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() + public public call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() public public public public synchronized if != = ConnectionFactory protected protected throws decl_stmt ConnectionFactory = if && instanceof return else if && instanceof return else return ExceptionListener protected protected throws if != if != else if != || decl_stmt java.beans.ExceptionListener = if = new if != = protected protected throws return int boolean protected protected throws decl_stmt boolean = == decl_stmt int = : if && instanceof return else if && instanceof return else return protected protected if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + try try if > finally catch call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + catch call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() decl List protected protected decl_stmt java.util.List < < = new < < call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if instanceof call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if instanceof call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() new Session InvocationHandler boolean Integer ExceptionListener Object Integer String String public public throws if decl_stmt java.lang.Object = if == return if == || ! call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() return decl_stmt java.lang.reflect.InvocationHandler = return instanceof && == else if return else if return + else if decl_stmt java.lang.String = if != && call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return else throw new + else if synchronized if != decl_stmt java.beans.ExceptionListener = if != if != call AggregatedExceptionListener.delegates() call AggregatedExceptionListener.delegates() call AggregatedExceptionListener.delegates() call AggregatedExceptionListener.delegates() call AggregatedExceptionListener.delegates() call AggregatedExceptionListener.delegates() call AggregatedExceptionListener.delegates() call AggregatedExceptionListener.delegates() call AggregatedExceptionListener.delegates() if != call AggregatedExceptionListener.delegates() call AggregatedExceptionListener.delegates() call AggregatedExceptionListener.delegates() call AggregatedExceptionListener.delegates() call AggregatedExceptionListener.delegates() call AggregatedExceptionListener.delegates() call AggregatedExceptionListener.delegates() call AggregatedExceptionListener.delegates() call AggregatedExceptionListener.delegates() = return else throw new + + + else if synchronized if != return else return else if return else if return else if synchronized if != if != call AggregatedExceptionListener.delegates() call AggregatedExceptionListener.delegates() call AggregatedExceptionListener.delegates() call AggregatedExceptionListener.delegates() call AggregatedExceptionListener.delegates() call AggregatedExceptionListener.delegates() call AggregatedExceptionListener.delegates() call AggregatedExceptionListener.delegates() call AggregatedExceptionListener.delegates() = return else if || || decl_stmt java.lang.Integer = if != if == = else if == decl_stmt boolean = decl_stmt java.lang.Integer = = : decl_stmt sun.security.pkcs11.Session = if != if ! decl_stmt java.lang.String = + try call sun.security.pkcs11.Session.close() call sun.security.pkcs11.Session.close() call sun.security.pkcs11.Session.close() call sun.security.pkcs11.Session.close() call sun.security.pkcs11.Session.close() catch call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() throw new return try return catch throw private private throws synchronized if ! = if == && != call Connection.start() call Connection.start() call Connection.start() call Connection.start() call Connection.start() ++ private private throws synchronized if = if == && != call Connection.stop() call Connection.stop() call Connection.stop() call Connection.stop() call Connection.stop() if > -- private private return public public synchronized for : new <