org.springframework.web.servlet.resource java.io.IOException import java.net.URLDecoder import java.util.ArrayList import java.util.List import javax.servlet.ServletException import javax.servlet.ServletResponse import javax.servlet.http.HttpServletRequest import javax.servlet.http.HttpServletResponse import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.factory.InitializingBean import org.springframework.core.io.Resource import org.springframework.http.HttpHeaders import org.springframework.http.HttpMethod import org.springframework.http.HttpRange import org.springframework.http.HttpRangeResource import org.springframework.http.MediaType import org.springframework.http.converter.ResourceHttpMessageConverter import org.springframework.http.server.ServletServerHttpRequest import org.springframework.http.server.ServletServerHttpResponse import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.CollectionUtils import org.springframework.util.ObjectUtils import org.springframework.util.ResourceUtils import org.springframework.util.StringUtils import org.springframework.web.HttpMediaTypeNotAcceptableException import org.springframework.web.HttpRequestHandler import org.springframework.web.accept.ContentNegotiationManager import org.springframework.web.accept.ContentNegotiationManagerFactoryBean import org.springframework.web.accept.PathExtensionContentNegotiationStrategy import org.springframework.web.context.request.ServletWebRequest import org.springframework.web.cors.CorsConfiguration import org.springframework.web.cors.CorsConfigurationSource import org.springframework.web.servlet.HandlerMapping import org.springframework.web.servlet.support.WebContentGenerator import class org.springframework.web.servlet.resource.ResourceHttpRequestHandler super super extends super implements decl List decl List CorsConfiguration decl List boolean Log ContentNegotiationManager ResourceHttpMessageConverter public public < public < public < return public public < if != public < public < return public public < if != public < public < return public public = public public return public public = public public return public public = public public return public public throws if call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() call Log.isWarnEnabled() && call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() + if new if == = if == = new PathResourceResolver protected protected if return for = - >= -- if instanceof decl_stmt org.springframework.web.servlet.resource.PathResourceResolver = if call org.springframework.web.servlet.resource.PathResourceResolver.getAllowedLocations() call org.springframework.web.servlet.resource.PathResourceResolver.getAllowedLocations() call org.springframework.web.servlet.resource.PathResourceResolver.getAllowedLocations() call org.springframework.web.servlet.resource.PathResourceResolver.getAllowedLocations() call org.springframework.web.servlet.resource.PathResourceResolver.getAllowedLocations() call org.springframework.web.servlet.resource.PathResourceResolver.setAllowedLocations(Resource) call org.springframework.web.servlet.resource.PathResourceResolver.setAllowedLocations(Resource) call org.springframework.web.servlet.resource.PathResourceResolver.setAllowedLocations(Resource) call org.springframework.web.servlet.resource.PathResourceResolver.setAllowedLocations(Resource) call org.springframework.web.servlet.resource.PathResourceResolver.setAllowedLocations(Resource) new break ContentNegotiationManagerFactoryBean protected protected decl_stmt org.springframework.web.accept.ContentNegotiationManagerFactoryBean = new call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.afterPropertiesSet() call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.afterPropertiesSet() call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.afterPropertiesSet() call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.afterPropertiesSet() call org.springframework.web.accept.ContentNegotiationManagerFactoryBean.afterPropertiesSet() return call ContentNegotiationManagerFactoryBean.getObject() call ContentNegotiationManagerFactoryBean.getObject() call ContentNegotiationManagerFactoryBean.getObject() call ContentNegotiationManagerFactoryBean.getObject() call ContentNegotiationManagerFactoryBean.getObject() Resource ServletServerHttpResponse MediaType HttpRangeResource decl List ServletServerHttpRequest public public throws decl_stmt org.springframework.core.io.Resource = if == call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() return if return if new call org.springframework.core.io.Resource.lastModified() call org.springframework.core.io.Resource.lastModified() call org.springframework.core.io.Resource.lastModified() call org.springframework.core.io.Resource.lastModified() call org.springframework.core.io.Resource.lastModified() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() return decl_stmt org.springframework.http.MediaType = if != if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + + + else if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + + if call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() return decl_stmt org.springframework.http.server.ServletServerHttpResponse = new if == else decl_stmt org.springframework.http.server.ServletServerHttpRequest = new try decl_stmt java.util.List < = call org.springframework.http.server.ServletServerHttpRequest.getHeaders() call org.springframework.http.server.ServletServerHttpRequest.getHeaders() call org.springframework.http.server.ServletServerHttpRequest.getHeaders() call org.springframework.http.server.ServletServerHttpRequest.getHeaders() call org.springframework.http.server.ServletServerHttpRequest.getHeaders() decl_stmt org.springframework.http.HttpRangeResource = new catch + call org.springframework.core.io.Resource.contentLength() call org.springframework.core.io.Resource.contentLength() call org.springframework.core.io.Resource.contentLength() call org.springframework.core.io.Resource.contentLength() call org.springframework.core.io.Resource.contentLength() String ResourceResolverChain Resource ResourceTransformerChain protected protected throws decl_stmt java.lang.String = if == throw new + + = if ! || if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + + return if call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) try if if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + + return catch decl_stmt org.springframework.web.servlet.resource.ResourceResolverChain = new decl_stmt org.springframework.core.io.Resource = call org.springframework.web.servlet.resource.ResourceResolverChain.resolveResource(HttpServletRequest,String,List) call org.springframework.web.servlet.resource.ResourceResolverChain.resolveResource(HttpServletRequest,String,List) call org.springframework.web.servlet.resource.ResourceResolverChain.resolveResource(HttpServletRequest,String,List) call org.springframework.web.servlet.resource.ResourceResolverChain.resolveResource(HttpServletRequest,String,List) call org.springframework.web.servlet.resource.ResourceResolverChain.resolveResource(HttpServletRequest,String,List) if == || return decl_stmt org.springframework.web.servlet.resource.ResourceTransformerChain = new = call org.springframework.web.servlet.resource.ResourceTransformerChain.transform(HttpServletRequest,Resource) call org.springframework.web.servlet.resource.ResourceTransformerChain.transform(HttpServletRequest,Resource) call org.springframework.web.servlet.resource.ResourceTransformerChain.transform(HttpServletRequest,Resource) call org.springframework.web.servlet.resource.ResourceTransformerChain.transform(HttpServletRequest,Resource) call org.springframework.web.servlet.resource.ResourceTransformerChain.transform(HttpServletRequest,Resource) return boolean protected protected decl_stmt boolean = for = < ++ if == = else if > && != if == || == && return = + : if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + return return : String protected protected if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + if || if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() return if decl_stmt java.lang.String = == : if || call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() return if = if if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() return return ServletWebRequest PathExtensionContentNegotiationStrategy decl List MediaType decl Class protected protected decl_stmt org.springframework.http.MediaType = if != return decl_stmt java.lang.Class < = decl_stmt org.springframework.web.accept.PathExtensionContentNegotiationStrategy = if != = call PathExtensionContentNegotiationStrategy.getMediaTypeForResource() call PathExtensionContentNegotiationStrategy.getMediaTypeForResource() call PathExtensionContentNegotiationStrategy.getMediaTypeForResource() call PathExtensionContentNegotiationStrategy.getMediaTypeForResource() call PathExtensionContentNegotiationStrategy.getMediaTypeForResource() if == decl_stmt org.springframework.web.context.request.ServletWebRequest = new try decl_stmt java.util.List < = if ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() catch return protected protected return long protected protected throws decl_stmt long = if > if else else int if != if instanceof if instanceof + + public public return + + + +