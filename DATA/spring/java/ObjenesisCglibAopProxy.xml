org.springframework.aop.framework org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.cglib.proxy.Callback import org.springframework.cglib.proxy.Enhancer import org.springframework.cglib.proxy.Factory import org.springframework.objenesis.SpringObjenesis import class annotation org.springframework.aop.framework.ObjenesisCglibAopProxy super super extends Log SpringObjenesis decl Class Object protected protected decl_stmt java.lang.Class < = decl_stmt java.lang.Object = if call org.springframework.objenesis.SpringObjenesis.isWorthTrying() call org.springframework.objenesis.SpringObjenesis.isWorthTrying() call org.springframework.objenesis.SpringObjenesis.isWorthTrying() call org.springframework.objenesis.SpringObjenesis.isWorthTrying() call org.springframework.objenesis.SpringObjenesis.isWorthTrying() try = call org.springframework.objenesis.SpringObjenesis.newInstance(Class) call org.springframework.objenesis.SpringObjenesis.newInstance(Class) call org.springframework.objenesis.SpringObjenesis.newInstance(Class) call org.springframework.objenesis.SpringObjenesis.newInstance(Class) call org.springframework.objenesis.SpringObjenesis.newInstance(Class) catch call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + if == try = != call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() : call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() catch throw new + return