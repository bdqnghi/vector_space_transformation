org.springframework.http.converter.xml java.nio.charset.Charset import javax.xml.bind.Marshaller import javax.xml.bind.Unmarshaller import javax.xml.bind.annotation.XmlAttribute import javax.xml.bind.annotation.XmlElement import javax.xml.bind.annotation.XmlRootElement import javax.xml.bind.annotation.XmlType import javax.xml.bind.annotation.adapters.XmlAdapter import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter import org.junit.Before import org.junit.Rule import org.junit.Test import org.junit.rules.ExpectedException import org.springframework.aop.framework.AdvisedSupport import org.springframework.aop.framework.AopProxy import org.springframework.aop.framework.DefaultAopProxyFactory import org.springframework.core.io.ClassPathResource import org.springframework.core.io.Resource import org.springframework.http.MediaType import org.springframework.http.MockHttpInputMessage import org.springframework.http.MockHttpOutputMessage import org.springframework.http.converter.HttpMessageNotReadableException import static static org.custommonkey.xmlunit.XMLAssert.* import static static org.junit.Assert.assertEquals import static static org.junit.Assert.assertFalse import static static org.junit.Assert.assertTrue import class org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverterTests ExpectedException RootElement Jaxb2RootElementHttpMessageConverter RootElement AdvisedSupport AopProxy DefaultAopProxyFactory public public = new = new decl_stmt org.springframework.aop.framework.DefaultAopProxyFactory = new decl_stmt org.springframework.aop.framework.AdvisedSupport = new call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call org.springframework.aop.framework.AdvisedSupport.setTarget(Object) call AdvisedSupport.setProxyTargetClass() call AdvisedSupport.setProxyTargetClass() call AdvisedSupport.setProxyTargetClass() call AdvisedSupport.setProxyTargetClass() call AdvisedSupport.setProxyTargetClass() decl_stmt org.springframework.aop.framework.AopProxy = call DefaultAopProxyFactory.createAopProxy() call DefaultAopProxyFactory.createAopProxy() call DefaultAopProxyFactory.createAopProxy() call DefaultAopProxyFactory.createAopProxy() call DefaultAopProxyFactory.createAopProxy() = call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) call org.springframework.aop.framework.AopProxy.getProxy(ClassLoader) public public throws call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canRead(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canRead(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canRead(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canRead(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canRead(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canRead(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canRead(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canRead(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canRead(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canRead(Class,MediaType) public public throws call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canWrite(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canWrite(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canWrite(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canWrite(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canWrite(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canWrite(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canWrite(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canWrite(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canWrite(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canWrite(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canWrite(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canWrite(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canWrite(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canWrite(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canWrite(Class,MediaType) call RootElement.getClass() call RootElement.getClass() call RootElement.getClass() call RootElement.getClass() call RootElement.getClass() call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canWrite(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canWrite(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canWrite(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canWrite(Class,MediaType) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canWrite(Class,MediaType) decl byte MockHttpInputMessage RootElement public public throws decl_stmt byte = decl_stmt org.springframework.http.MockHttpInputMessage = new decl_stmt RootElement = call Jaxb2RootElementHttpMessageConverter.read() call Jaxb2RootElementHttpMessageConverter.read() call Jaxb2RootElementHttpMessageConverter.read() call Jaxb2RootElementHttpMessageConverter.read() call Jaxb2RootElementHttpMessageConverter.read() decl byte MockHttpInputMessage RootElementSubclass public public throws decl_stmt byte = decl_stmt org.springframework.http.MockHttpInputMessage = new decl_stmt RootElementSubclass = call Jaxb2RootElementHttpMessageConverter.read() call Jaxb2RootElementHttpMessageConverter.read() call Jaxb2RootElementHttpMessageConverter.read() call Jaxb2RootElementHttpMessageConverter.read() call Jaxb2RootElementHttpMessageConverter.read() call RootElementSubclass.getType() call RootElementSubclass.getType() call RootElementSubclass.getType() call RootElementSubclass.getType() call RootElementSubclass.getType() decl byte MockHttpInputMessage Type public public throws decl_stmt byte = decl_stmt org.springframework.http.MockHttpInputMessage = new decl_stmt org.springframework.asm.Type = call Jaxb2RootElementHttpMessageConverter.read() call Jaxb2RootElementHttpMessageConverter.read() call Jaxb2RootElementHttpMessageConverter.read() call Jaxb2RootElementHttpMessageConverter.read() call Jaxb2RootElementHttpMessageConverter.read() String RootElement Resource MockHttpInputMessage public public throws decl_stmt org.springframework.core.io.Resource = new decl_stmt java.lang.String = + + + call org.springframework.core.io.Resource.getURI() call org.springframework.core.io.Resource.getURI() call org.springframework.core.io.Resource.getURI() call org.springframework.core.io.Resource.getURI() call org.springframework.core.io.Resource.getURI() + + decl_stmt org.springframework.http.MockHttpInputMessage = new call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.setSupportDtd(boolean) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.setSupportDtd(boolean) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.setSupportDtd(boolean) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.setSupportDtd(boolean) call org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.setSupportDtd(boolean) decl_stmt RootElement = call Jaxb2RootElementHttpMessageConverter.read() call Jaxb2RootElementHttpMessageConverter.read() call Jaxb2RootElementHttpMessageConverter.read() call Jaxb2RootElementHttpMessageConverter.read() call Jaxb2RootElementHttpMessageConverter.read() String RootElement Resource MockHttpInputMessage public public throws decl_stmt org.springframework.core.io.Resource = new decl_stmt java.lang.String = + + + call org.springframework.core.io.Resource.getURI() call org.springframework.core.io.Resource.getURI() call org.springframework.core.io.Resource.getURI() call org.springframework.core.io.Resource.getURI() call org.springframework.core.io.Resource.getURI() + + decl_stmt org.springframework.http.MockHttpInputMessage = new call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) decl_stmt RootElement = call Jaxb2RootElementHttpMessageConverter.read() call Jaxb2RootElementHttpMessageConverter.read() call Jaxb2RootElementHttpMessageConverter.read() call Jaxb2RootElementHttpMessageConverter.read() call Jaxb2RootElementHttpMessageConverter.read() String MockHttpInputMessage public public throws decl_stmt java.lang.String = + + + + + + + + + + + + + + decl_stmt org.springframework.http.MockHttpInputMessage = new call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) MockHttpOutputMessage public public throws decl_stmt org.springframework.http.MockHttpOutputMessage = new call Jaxb2RootElementHttpMessageConverter.write() call Jaxb2RootElementHttpMessageConverter.write() call Jaxb2RootElementHttpMessageConverter.write() call Jaxb2RootElementHttpMessageConverter.write() call Jaxb2RootElementHttpMessageConverter.write() new call org.springframework.http.MockHttpOutputMessage.getHeaders() call org.springframework.http.MockHttpOutputMessage.getHeaders() call org.springframework.http.MockHttpOutputMessage.getHeaders() call org.springframework.http.MockHttpOutputMessage.getHeaders() call org.springframework.http.MockHttpOutputMessage.getHeaders() call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) MockHttpOutputMessage public public throws decl_stmt org.springframework.http.MockHttpOutputMessage = new call Jaxb2RootElementHttpMessageConverter.write() call Jaxb2RootElementHttpMessageConverter.write() call Jaxb2RootElementHttpMessageConverter.write() call Jaxb2RootElementHttpMessageConverter.write() call Jaxb2RootElementHttpMessageConverter.write() new call org.springframework.http.MockHttpOutputMessage.getHeaders() call org.springframework.http.MockHttpOutputMessage.getHeaders() call org.springframework.http.MockHttpOutputMessage.getHeaders() call org.springframework.http.MockHttpOutputMessage.getHeaders() call org.springframework.http.MockHttpOutputMessage.getHeaders() call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) MockHttpOutputMessage MyJaxb2RootElementHttpMessageConverter public public throws decl_stmt org.springframework.http.MockHttpOutputMessage = new decl_stmt MyJaxb2RootElementHttpMessageConverter = new call MyJaxb2RootElementHttpMessageConverter.write() call MyJaxb2RootElementHttpMessageConverter.write() call MyJaxb2RootElementHttpMessageConverter.write() call MyJaxb2RootElementHttpMessageConverter.write() call MyJaxb2RootElementHttpMessageConverter.write() new new call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) call org.springframework.http.MockHttpOutputMessage.getBodyAsString(Charset) decl byte MyRootElement MyJaxb2RootElementHttpMessageConverter MockHttpInputMessage public public throws decl_stmt byte = decl_stmt MyJaxb2RootElementHttpMessageConverter = new decl_stmt org.springframework.http.MockHttpInputMessage = new decl_stmt MyRootElement = call MyJaxb2RootElementHttpMessageConverter.read() call MyJaxb2RootElementHttpMessageConverter.read() call MyJaxb2RootElementHttpMessageConverter.read() call MyJaxb2RootElementHttpMessageConverter.read() call MyJaxb2RootElementHttpMessageConverter.read() call MyRootElement.getElement() call MyRootElement.getElement() call MyRootElement.getElement() call MyRootElement.getElement() call MyRootElement.getElement() call MyRootElement.getElement() call MyRootElement.getElement() call MyRootElement.getElement() call MyRootElement.getElement() call MyRootElement.getElement() public public return public public = protected protected new protected protected new public public return public public = public public return public public = public public return public public = public public throws return + + decl String public public throws decl_stmt java.lang.String = return new