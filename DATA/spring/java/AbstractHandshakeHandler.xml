org.springframework.web.socket.server.support java.io.IOException import java.nio.charset.Charset import java.security.Principal import java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.List import java.util.Map import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.context.Lifecycle import org.springframework.http.HttpMethod import org.springframework.http.HttpStatus import org.springframework.http.server.ServerHttpRequest import org.springframework.http.server.ServerHttpResponse import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.StringUtils import org.springframework.web.socket.SubProtocolCapable import org.springframework.web.socket.WebSocketExtension import org.springframework.web.socket.WebSocketHandler import org.springframework.web.socket.WebSocketHttpHeaders import org.springframework.web.socket.handler.WebSocketHandlerDecorator import org.springframework.web.socket.server.HandshakeFailureException import org.springframework.web.socket.server.HandshakeHandler import org.springframework.web.socket.server.RequestUpgradeStrategy import class org.springframework.web.socket.server.support.AbstractHandshakeHandler super super implements boolean Charset boolean ClassLoader RequestUpgradeStrategy decl List boolean boolean boolean boolean boolean Log String decl Class private static private static decl_stmt java.lang.String if = else if = else if = else if = else if = else if = else throw new try decl_stmt java.lang.Class < = return call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() catch throw new + public public return public public for : public public return new public public return public public if ! = protected protected if instanceof public public if = protected protected if instanceof decl List String decl List WebSocketHttpHeaders decl List Principal String public final public final < throws decl_stmt org.springframework.web.socket.WebSocketHttpHeaders = new if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + + + try if != if call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + return if ! call WebSocketHttpHeaders.getUpgrade() call WebSocketHttpHeaders.getUpgrade() call WebSocketHttpHeaders.getUpgrade() call WebSocketHttpHeaders.getUpgrade() call WebSocketHttpHeaders.getUpgrade() return if ! call WebSocketHttpHeaders.getConnection() call WebSocketHttpHeaders.getConnection() call WebSocketHttpHeaders.getConnection() call WebSocketHttpHeaders.getConnection() call WebSocketHttpHeaders.getConnection() && ! call WebSocketHttpHeaders.getConnection() call WebSocketHttpHeaders.getConnection() call WebSocketHttpHeaders.getConnection() call WebSocketHttpHeaders.getConnection() call WebSocketHttpHeaders.getConnection() return if ! return if ! return decl_stmt java.lang.String = call org.springframework.web.socket.WebSocketHttpHeaders.getSecWebSocketKey() call org.springframework.web.socket.WebSocketHttpHeaders.getSecWebSocketKey() call org.springframework.web.socket.WebSocketHttpHeaders.getSecWebSocketKey() call org.springframework.web.socket.WebSocketHttpHeaders.getSecWebSocketKey() call org.springframework.web.socket.WebSocketHttpHeaders.getSecWebSocketKey() if == if call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() return catch throw new + decl_stmt java.lang.String = call org.springframework.web.socket.WebSocketHttpHeaders.getSecWebSocketProtocol() call org.springframework.web.socket.WebSocketHttpHeaders.getSecWebSocketProtocol() call org.springframework.web.socket.WebSocketHttpHeaders.getSecWebSocketProtocol() call org.springframework.web.socket.WebSocketHttpHeaders.getSecWebSocketProtocol() call org.springframework.web.socket.WebSocketHttpHeaders.getSecWebSocketProtocol() decl_stmt java.util.List < = call org.springframework.web.socket.WebSocketHttpHeaders.getSecWebSocketExtensions() call org.springframework.web.socket.WebSocketHttpHeaders.getSecWebSocketExtensions() call org.springframework.web.socket.WebSocketHttpHeaders.getSecWebSocketExtensions() call org.springframework.web.socket.WebSocketHttpHeaders.getSecWebSocketExtensions() call org.springframework.web.socket.WebSocketHttpHeaders.getSecWebSocketExtensions() decl_stmt java.util.List < = decl_stmt java.util.List < = decl_stmt java.security.Principal = if call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.isTraceEnabled() call Log.trace() call Log.trace() call Log.trace() call Log.trace() call Log.trace() + + + return protected protected throws if call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + protected protected throws if call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + decl String String protected protected decl_stmt java.lang.String = decl_stmt java.lang.String = for : if return return protected protected return String protected protected if call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() call Log.isErrorEnabled() decl_stmt java.lang.String = call Log.error() call Log.error() call Log.error() call Log.error() call Log.error() + + + protected protected return decl List protected protected < if != decl_stmt java.util.List < = for : if call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() return if return return WebSocketHandler decl List protected final < protected final < decl_stmt org.springframework.web.socket.WebSocketHandler = decl_stmt java.util.List < = if instanceof = return != : > decl List protected < protected < < < decl_stmt java.util.List < = new < for : if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return protected protected < return