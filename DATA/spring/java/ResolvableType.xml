org.springframework.core java.io.Serializable import java.lang.reflect.Array import java.lang.reflect.Constructor import java.lang.reflect.Field import java.lang.reflect.GenericArrayType import java.lang.reflect.Method import java.lang.reflect.ParameterizedType import java.lang.reflect.Type import java.lang.reflect.TypeVariable import java.lang.reflect.WildcardType import java.util.Arrays import java.util.Collection import java.util.IdentityHashMap import java.util.Map import org.springframework.core.SerializableTypeWrapper.FieldTypeProvider import org.springframework.core.SerializableTypeWrapper.MethodParameterTypeProvider import org.springframework.core.SerializableTypeWrapper.TypeProvider import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.ConcurrentReferenceHashMap import org.springframework.util.ObjectUtils import org.springframework.util.StringUtils import class annotation org.springframework.core.ResolvableType super super implements decl Class ResolvableType Integer decl ResolvableType decl ConcurrentReferenceHashMap ResolvableType decl ResolvableType ResolvableType TypeProvider Type decl ResolvableType VariableResolver public public return Type public < public < if == return decl_stmt org.springframework.asm.Type = if instanceof = return instanceof < : Object public public decl_stmt java.lang.Object = != : return != : public public return != && public public < return public public return ResolvableType decl Class WildcardBounds decl Class WildcardBounds boolean decl ResolvableType decl TypeVariable decl ResolvableType boolean private private < if == || == return if return && if != && == return decl_stmt WildcardBounds = decl_stmt WildcardBounds = if != return != && call WildcardBounds.isSameKind() call WildcardBounds.isSameKind() call WildcardBounds.isSameKind() call WildcardBounds.isSameKind() call WildcardBounds.isSameKind() && call WildcardBounds.isAssignableFrom() call WildcardBounds.isAssignableFrom() call WildcardBounds.isAssignableFrom() call WildcardBounds.isAssignableFrom() call WildcardBounds.isAssignableFrom() call WildcardBounds.getBounds() call WildcardBounds.getBounds() call WildcardBounds.getBounds() call WildcardBounds.getBounds() call WildcardBounds.getBounds() if != return call WildcardBounds.isAssignableFrom() call WildcardBounds.isAssignableFrom() call WildcardBounds.isAssignableFrom() call WildcardBounds.isAssignableFrom() call WildcardBounds.isAssignableFrom() decl_stmt boolean = != decl_stmt boolean = decl_stmt java.lang.Class < = if instanceof decl_stmt java.lang.reflect.TypeVariable < = < if != decl_stmt org.springframework.core.ResolvableType = if != = call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() if == if != decl_stmt org.springframework.core.ResolvableType = if != = call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() = if == = if == = decl_stmt java.lang.Class < = if ! call decl Class.equals() call decl Class.equals() call decl Class.equals() call decl Class.equals() call decl Class.equals() : ! return if decl_stmt org.springframework.core.ResolvableType = decl_stmt org.springframework.core.ResolvableType = if != return if == = new < for = < ++ if ! return return public public if == return return instanceof && < || instanceof || decl Class public public if == return if != return if instanceof decl_stmt java.lang.Class < = < return if instanceof return return public public return public public return ResolvableType public public < if == return if return for : decl_stmt org.springframework.core.ResolvableType = if != return return decl Class public public decl_stmt java.lang.Class < = if == || call decl Class.getGenericSuperclass() call decl Class.getGenericSuperclass() call decl Class.getGenericSuperclass() call decl Class.getGenericSuperclass() call decl Class.getGenericSuperclass() == return if == = return decl Class public public decl_stmt java.lang.Class < = if == || call decl Class.getGenericInterfaces() call decl Class.getGenericInterfaces() call decl Class.getGenericInterfaces() call decl Class.getGenericInterfaces() call decl Class.getGenericInterfaces() return if == = return public public return > decl ResolvableType if == return decl_stmt org.springframework.core.ResolvableType = for : if ! && ! return return decl Class decl ResolvableType public public if == return decl_stmt org.springframework.core.ResolvableType = for : if || return decl_stmt java.lang.Class < = if != for : call decl Class.getGenericInterfaces() call decl Class.getGenericInterfaces() call decl Class.getGenericInterfaces() call decl Class.getGenericInterfaces() call decl Class.getGenericInterfaces() if instanceof if < return return return decl TypeVariable ResolvableType private private if instanceof if == return decl_stmt java.lang.reflect.TypeVariable < = < decl_stmt org.springframework.core.ResolvableType = if == || call org.springframework.core.ResolvableType.isUnresolvableTypeVariable() call org.springframework.core.ResolvableType.isUnresolvableTypeVariable() call org.springframework.core.ResolvableType.isUnresolvableTypeVariable() call org.springframework.core.ResolvableType.isUnresolvableTypeVariable() call org.springframework.core.ResolvableType.isUnresolvableTypeVariable() return return WildcardType decl Type private private if instanceof decl_stmt java.lang.reflect.WildcardType = if call java.lang.reflect.WildcardType.getLowerBounds() call java.lang.reflect.WildcardType.getLowerBounds() call java.lang.reflect.WildcardType.getLowerBounds() call java.lang.reflect.WildcardType.getLowerBounds() call java.lang.reflect.WildcardType.getLowerBounds() == decl_stmt org.springframework.asm.Type = call WildcardType.getUpperBounds() call WildcardType.getUpperBounds() call WildcardType.getUpperBounds() call WildcardType.getUpperBounds() call WildcardType.getUpperBounds() if == || == && == return return public public return Integer ResolvableType public public < decl_stmt org.springframework.core.ResolvableType = for = <= ++ if call org.springframework.core.ResolvableType.isArray() call org.springframework.core.ResolvableType.isArray() call org.springframework.core.ResolvableType.isArray() call org.springframework.core.ResolvableType.isArray() call org.springframework.core.ResolvableType.isArray() = call org.springframework.core.ResolvableType.getComponentType() call org.springframework.core.ResolvableType.getComponentType() call org.springframework.core.ResolvableType.getComponentType() call org.springframework.core.ResolvableType.getComponentType() call org.springframework.core.ResolvableType.getComponentType() else while != && ! call org.springframework.core.ResolvableType.hasGenerics() call org.springframework.core.ResolvableType.hasGenerics() call org.springframework.core.ResolvableType.hasGenerics() call org.springframework.core.ResolvableType.hasGenerics() call org.springframework.core.ResolvableType.hasGenerics() = call org.springframework.core.ResolvableType.getSuperType() call org.springframework.core.ResolvableType.getSuperType() call org.springframework.core.ResolvableType.getSuperType() call org.springframework.core.ResolvableType.getSuperType() call org.springframework.core.ResolvableType.getSuperType() decl_stmt java.lang.Integer = != : = == call org.springframework.core.ResolvableType.getGenerics() call org.springframework.core.ResolvableType.getGenerics() call org.springframework.core.ResolvableType.getGenerics() call org.springframework.core.ResolvableType.getGenerics() call org.springframework.core.ResolvableType.getGenerics() - : = call org.springframework.core.ResolvableType.getGeneric(int) call org.springframework.core.ResolvableType.getGeneric(int) call org.springframework.core.ResolvableType.getGeneric(int) call org.springframework.core.ResolvableType.getGeneric(int) call org.springframework.core.ResolvableType.getGeneric(int) return ResolvableType public public try if == || == return decl_stmt org.springframework.core.ResolvableType = for : = call org.springframework.core.ResolvableType.getGenerics() call org.springframework.core.ResolvableType.getGenerics() call org.springframework.core.ResolvableType.getGenerics() call org.springframework.core.ResolvableType.getGenerics() call org.springframework.core.ResolvableType.getGenerics() return catch return decl Class decl ResolvableType decl Type public public if == return if == if instanceof decl_stmt java.lang.Class < = < = else if instanceof decl_stmt org.springframework.asm.Type = decl_stmt org.springframework.core.ResolvableType = new for = < ++ = = else = return public < public < return decl ResolvableType public < public < < decl_stmt org.springframework.core.ResolvableType = decl_stmt org.springframework.core.ResolvableType = for = < ++ = return public < public < return public < public < return public < public < < return != : decl Class private < private < if instanceof || == return < if instanceof decl_stmt java.lang.Class < = return != : return ResolvableType decl TypeVariable if instanceof return if instanceof decl_stmt org.springframework.asm.Type = if == = return if instanceof decl_stmt java.lang.reflect.TypeVariable < = < if != decl_stmt org.springframework.core.ResolvableType = if != return return call decl TypeVariable.getBounds() call decl TypeVariable.getBounds() call decl TypeVariable.getBounds() call decl TypeVariable.getBounds() call decl TypeVariable.getBounds() return private private if || == return return ParameterizedType Type private private < if instanceof return if instanceof decl_stmt java.lang.reflect.ParameterizedType = decl_stmt java.lang.reflect.ParameterizedType = for = < ++ if decl_stmt org.springframework.asm.Type = call ParameterizedType.getActualTypeArguments() call ParameterizedType.getActualTypeArguments() call ParameterizedType.getActualTypeArguments() call ParameterizedType.getActualTypeArguments() call ParameterizedType.getActualTypeArguments() return if call java.lang.reflect.ParameterizedType.getOwnerType() call java.lang.reflect.ParameterizedType.getOwnerType() call java.lang.reflect.ParameterizedType.getOwnerType() call java.lang.reflect.ParameterizedType.getOwnerType() call java.lang.reflect.ParameterizedType.getOwnerType() != return call java.lang.reflect.ParameterizedType.getOwnerType() call java.lang.reflect.ParameterizedType.getOwnerType() call java.lang.reflect.ParameterizedType.getOwnerType() call java.lang.reflect.ParameterizedType.getOwnerType() call java.lang.reflect.ParameterizedType.getOwnerType() if != return return ResolvableType public public if == return if ! instanceof return decl_stmt org.springframework.core.ResolvableType = if ! return if != && == || == || ! call ResolvableType.typeProvider() call ResolvableType.typeProvider() call ResolvableType.typeProvider() call ResolvableType.typeProvider() call ResolvableType.typeProvider() call ResolvableType.typeProvider() call ResolvableType.typeProvider() call ResolvableType.typeProvider() call ResolvableType.typeProvider() return if != && == || == || ! call ResolvableType.variableResolver() call ResolvableType.variableResolver() call ResolvableType.variableResolver() call ResolvableType.variableResolver() call ResolvableType.variableResolver() call ResolvableType.variableResolver() call ResolvableType.variableResolver() call ResolvableType.variableResolver() call ResolvableType.variableResolver() return if ! return return public public return != : int private private decl_stmt int = if != = * + if != = * + if != = * + return if == return return new private private return == : decl TypeVariable StringBuilder public public if return + if == return if instanceof decl_stmt java.lang.reflect.TypeVariable < = < if == || == return decl_stmt java.lang.StringBuilder = new if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public static public static < return new public static public static < return new public public < return public public < return ResolvableType public static public static < < decl_stmt org.springframework.core.ResolvableType = return == : decl ResolvableType public static public static < < decl_stmt org.springframework.core.ResolvableType = new for = < ++ = return Type decl Type ResolvableType ParameterizedType public static public static < == decl_stmt org.springframework.asm.Type = new for = < ++ decl_stmt org.springframework.core.ResolvableType = decl_stmt org.springframework.asm.Type = != call org.springframework.asm.Type.getType(Constructor) call org.springframework.asm.Type.getType(Constructor) call org.springframework.asm.Type.getType(Constructor) call org.springframework.asm.Type.getType(Constructor) call org.springframework.asm.Type.getType(Constructor) : = != : decl_stmt java.lang.reflect.ParameterizedType = new return new ResolvableType public static public static if instanceof decl_stmt org.springframework.core.ResolvableType = if != return return public static public static return new ResolvableType public static public static < decl_stmt org.springframework.core.ResolvableType = return new call org.springframework.core.ResolvableType.asVariableResolver() call org.springframework.core.ResolvableType.asVariableResolver() call org.springframework.core.ResolvableType.asVariableResolver() call org.springframework.core.ResolvableType.asVariableResolver() call org.springframework.core.ResolvableType.asVariableResolver() ResolvableType public static public static = == : decl_stmt org.springframework.core.ResolvableType = return new call org.springframework.core.ResolvableType.asVariableResolver() call org.springframework.core.ResolvableType.asVariableResolver() call org.springframework.core.ResolvableType.asVariableResolver() call org.springframework.core.ResolvableType.asVariableResolver() call org.springframework.core.ResolvableType.asVariableResolver() public static public static return new ResolvableType public static public static < decl_stmt org.springframework.core.ResolvableType = return new call org.springframework.core.ResolvableType.asVariableResolver() call org.springframework.core.ResolvableType.asVariableResolver() call org.springframework.core.ResolvableType.asVariableResolver() call org.springframework.core.ResolvableType.asVariableResolver() call org.springframework.core.ResolvableType.asVariableResolver() public static public static < return new MethodParameter public static public static < < decl_stmt org.springframework.core.MethodParameter = new call org.springframework.core.MethodParameter.setContainingClass(Class) call org.springframework.core.MethodParameter.setContainingClass(Class) call org.springframework.core.MethodParameter.setContainingClass(Class) call org.springframework.core.MethodParameter.setContainingClass(Class) call org.springframework.core.MethodParameter.setContainingClass(Class) return public static public static return new - MethodParameter public static public static < decl_stmt org.springframework.core.MethodParameter = new - call org.springframework.core.MethodParameter.setContainingClass(Class) call org.springframework.core.MethodParameter.setContainingClass(Class) call org.springframework.core.MethodParameter.setContainingClass(Class) call org.springframework.core.MethodParameter.setContainingClass(Class) call org.springframework.core.MethodParameter.setContainingClass(Class) return public static public static return new MethodParameter public static public static < decl_stmt org.springframework.core.MethodParameter = new call org.springframework.core.MethodParameter.setContainingClass(Class) call org.springframework.core.MethodParameter.setContainingClass(Class) call org.springframework.core.MethodParameter.setContainingClass(Class) call org.springframework.core.MethodParameter.setContainingClass(Class) call org.springframework.core.MethodParameter.setContainingClass(Class) return public static public static return ResolvableType public static public static = != : decl_stmt org.springframework.core.ResolvableType = return new call org.springframework.core.ResolvableType.asVariableResolver() call org.springframework.core.ResolvableType.asVariableResolver() call org.springframework.core.ResolvableType.asVariableResolver() call org.springframework.core.ResolvableType.asVariableResolver() call org.springframework.core.ResolvableType.asVariableResolver() ResolvableType public static public static decl_stmt org.springframework.core.ResolvableType = return new call org.springframework.core.ResolvableType.asVariableResolver() call org.springframework.core.ResolvableType.asVariableResolver() call org.springframework.core.ResolvableType.asVariableResolver() call org.springframework.core.ResolvableType.asVariableResolver() call org.springframework.core.ResolvableType.asVariableResolver() ResolvableType static static decl_stmt org.springframework.core.ResolvableType = new call org.springframework.core.ResolvableType.asVariableResolver() call org.springframework.core.ResolvableType.asVariableResolver() call org.springframework.core.ResolvableType.asVariableResolver() call org.springframework.core.ResolvableType.asVariableResolver() call org.springframework.core.ResolvableType.asVariableResolver() decl Class public static public static decl_stmt java.lang.Class < = call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() call org.springframework.core.ResolvableType.resolve() return new decl ResolvableType private static private static decl_stmt org.springframework.core.ResolvableType = new for = < ++ = return public static public static return VariableResolver public static public static decl_stmt org.springframework.core.VariableResolver = if != = return static static return ResolvableType ResolvableType static static if == && != = if == return if instanceof return new call decl ConcurrentReferenceHashMap.purgeUnreferencedEntries() call decl ConcurrentReferenceHashMap.purgeUnreferencedEntries() call decl ConcurrentReferenceHashMap.purgeUnreferencedEntries() call decl ConcurrentReferenceHashMap.purgeUnreferencedEntries() call decl ConcurrentReferenceHashMap.purgeUnreferencedEntries() decl_stmt org.springframework.core.ResolvableType = new decl_stmt org.springframework.core.ResolvableType = call decl ConcurrentReferenceHashMap.get() call decl ConcurrentReferenceHashMap.get() call decl ConcurrentReferenceHashMap.get() call decl ConcurrentReferenceHashMap.get() call decl ConcurrentReferenceHashMap.get() if == = new call decl ConcurrentReferenceHashMap.put() call decl ConcurrentReferenceHashMap.put() call decl ConcurrentReferenceHashMap.put() call decl ConcurrentReferenceHashMap.put() call decl ConcurrentReferenceHashMap.put() return public static public static call decl ConcurrentReferenceHashMap.clear() call decl ConcurrentReferenceHashMap.clear() call decl ConcurrentReferenceHashMap.clear() call decl ConcurrentReferenceHashMap.clear() call decl ConcurrentReferenceHashMap.clear() public public < return public public return public public < for = < ++ if return return public public return public public return public public return public public return ParameterizedType public public if == return if ! instanceof return decl_stmt java.lang.reflect.ParameterizedType = return call java.lang.reflect.ParameterizedType.getOwnerType() call java.lang.reflect.ParameterizedType.getOwnerType() call java.lang.reflect.ParameterizedType.getOwnerType() call java.lang.reflect.ParameterizedType.getOwnerType() call java.lang.reflect.ParameterizedType.getOwnerType() == && call java.lang.reflect.ParameterizedType.getRawType() call java.lang.reflect.ParameterizedType.getRawType() call java.lang.reflect.ParameterizedType.getRawType() call java.lang.reflect.ParameterizedType.getRawType() call java.lang.reflect.ParameterizedType.getRawType() && call ParameterizedType.getActualTypeArguments() call ParameterizedType.getActualTypeArguments() call ParameterizedType.getActualTypeArguments() call ParameterizedType.getActualTypeArguments() call ParameterizedType.getActualTypeArguments() public public return * + public public return == public public for : for : if ! return return private private return == : public public return Kind WildcardType ResolvableType decl Type decl ResolvableType public static public static decl_stmt org.springframework.core.ResolvableType = while ! call org.springframework.core.ResolvableType.getType() call org.springframework.core.ResolvableType.getType() call org.springframework.core.ResolvableType.getType() call org.springframework.core.ResolvableType.getType() call org.springframework.core.ResolvableType.getType() instanceof if == return = call org.springframework.core.ResolvableType.resolveType() call org.springframework.core.ResolvableType.resolveType() call org.springframework.core.ResolvableType.resolveType() call org.springframework.core.ResolvableType.resolveType() call org.springframework.core.ResolvableType.resolveType() decl_stmt java.lang.reflect.WildcardType = decl_stmt Kind = call java.lang.reflect.WildcardType.getLowerBounds() call java.lang.reflect.WildcardType.getLowerBounds() call java.lang.reflect.WildcardType.getLowerBounds() call java.lang.reflect.WildcardType.getLowerBounds() call java.lang.reflect.WildcardType.getLowerBounds() > : decl_stmt org.springframework.asm.Type = == call WildcardType.getUpperBounds() call WildcardType.getUpperBounds() call WildcardType.getUpperBounds() call WildcardType.getUpperBounds() call WildcardType.getUpperBounds() : call java.lang.reflect.WildcardType.getLowerBounds() call java.lang.reflect.WildcardType.getLowerBounds() call java.lang.reflect.WildcardType.getLowerBounds() call java.lang.reflect.WildcardType.getLowerBounds() call java.lang.reflect.WildcardType.getLowerBounds() decl_stmt org.springframework.core.ResolvableType = new for = < ++ = return new