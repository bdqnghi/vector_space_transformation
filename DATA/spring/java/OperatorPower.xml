org.springframework.expression.spel.ast java.math.BigDecimal import java.math.BigInteger import org.springframework.expression.EvaluationException import org.springframework.expression.Operation import org.springframework.expression.TypedValue import org.springframework.expression.spel.ExpressionState import org.springframework.util.NumberUtils import class org.springframework.expression.spel.ast.OperatorPower super super extends SpelNodeImpl double BigInteger SpelNodeImpl Object Number Number Object BigDecimal public public throws decl_stmt org.springframework.expression.spel.ast.SpelNodeImpl = decl_stmt org.springframework.expression.spel.ast.SpelNodeImpl = decl_stmt java.lang.Object = call SpelNodeImpl.getValueInternal() call SpelNodeImpl.getValueInternal() call SpelNodeImpl.getValueInternal() call SpelNodeImpl.getValueInternal() call SpelNodeImpl.getValueInternal() decl_stmt java.lang.Object = call SpelNodeImpl.getValueInternal() call SpelNodeImpl.getValueInternal() call SpelNodeImpl.getValueInternal() call SpelNodeImpl.getValueInternal() call SpelNodeImpl.getValueInternal() if instanceof && instanceof decl_stmt java.lang.Number = decl_stmt java.lang.Number = if instanceof decl_stmt java.math.BigDecimal = return new call java.math.BigDecimal.pow(int) call java.math.BigDecimal.pow(int) call java.math.BigDecimal.pow(int) call java.math.BigDecimal.pow(int) call java.math.BigDecimal.pow(int) call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() else if instanceof decl_stmt java.math.BigInteger = return new call java.math.BigInteger.pow(int) call java.math.BigInteger.pow(int) call java.math.BigInteger.pow(int) call java.math.BigInteger.pow(int) call java.math.BigInteger.pow(int) call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() else if instanceof || instanceof return new call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() else if instanceof || instanceof return new call Number.floatValue() call Number.floatValue() call Number.floatValue() call Number.floatValue() call Number.floatValue() call Number.floatValue() call Number.floatValue() call Number.floatValue() call Number.floatValue() call Number.floatValue() decl_stmt double = call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() if > || instanceof || instanceof return new long else return new int return