org.springframework.orm.hibernate3 java.io.File import java.lang.reflect.Array import java.sql.Connection import java.sql.SQLException import java.sql.Statement import java.util.Collection import java.util.Enumeration import java.util.Map import java.util.Properties import javax.sql.DataSource import javax.transaction.TransactionManager import org.hibernate.HibernateException import org.hibernate.Interceptor import org.hibernate.Session import org.hibernate.SessionFactory import org.hibernate.cache.RegionFactory import org.hibernate.cfg.Configuration import org.hibernate.cfg.Environment import org.hibernate.cfg.Mappings import org.hibernate.cfg.NamingStrategy import org.hibernate.dialect.Dialect import org.hibernate.engine.FilterDefinition import org.hibernate.engine.SessionFactoryImplementor import org.hibernate.event.EventListeners import org.hibernate.tool.hbm2ddl.DatabaseMetadata import org.hibernate.transaction.JTATransactionFactory import org.springframework.beans.BeanUtils import org.springframework.beans.factory.BeanClassLoaderAware import org.springframework.core.io.ClassPathResource import org.springframework.core.io.Resource import org.springframework.dao.DataAccessException import org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy import org.springframework.jdbc.support.JdbcUtils import org.springframework.jdbc.support.lob.LobHandler import org.springframework.util.ClassUtils import org.springframework.util.StringUtils import class annotation org.springframework.orm.hibernate3.LocalSessionFactoryBean super super extends super implements decl Class decl Resource decl ThreadLocal decl Map LobHandler boolean Properties decl Resource RegionFactory TransactionManager decl ThreadLocal decl String decl ThreadLocal decl Resource decl ThreadLocal decl FilterDefinition decl Resource Configuration NamingStrategy Properties decl Resource ClassLoader Properties decl TypeDefinitionBean Interceptor public static public static return call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() public static public static return call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() static static return call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() public static public static return call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() public public < if == || ! throw new = < extends extends public public = new public public = public public = public public = public public = public public = public public = public public = public public if == = new return public public = public public = public public = public public = public public = public public = public public = public public = public public = public public < = public public = public public = String boolean Resource Mappings Thread Object String String decl Class decl Collection DataSource File decl String decl Object Configuration ClassLoader EventListeners protected protected throws decl_stmt Configuration = decl_stmt javax.sql.DataSource = if != call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() if != call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() if != call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() if != call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() decl_stmt java.lang.Thread = decl_stmt java.lang.ClassLoader = call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() decl_stmt boolean = != && ! if call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) try if call Configuration.setProperty() call Configuration.setProperty() call Configuration.setProperty() call Configuration.setProperty() call Configuration.setProperty() if != call Configuration.setProperty() call Configuration.setProperty() call Configuration.setProperty() call Configuration.setProperty() call Configuration.setProperty() call Configuration.setProperty() call Configuration.setProperty() call Configuration.setProperty() call Configuration.setProperty() call Configuration.setProperty() else call Configuration.setProperty() call Configuration.setProperty() call Configuration.setProperty() call Configuration.setProperty() call Configuration.setProperty() if != call Configuration.setInterceptor() call Configuration.setInterceptor() call Configuration.setInterceptor() call Configuration.setInterceptor() call Configuration.setInterceptor() if != call Configuration.setNamingStrategy() call Configuration.setNamingStrategy() call Configuration.setNamingStrategy() call Configuration.setNamingStrategy() call Configuration.setNamingStrategy() if != decl_stmt Mappings = call Configuration.createMappings() call Configuration.createMappings() call Configuration.createMappings() call Configuration.createMappings() call Configuration.createMappings() for : call Mappings.addTypeDef() call Mappings.addTypeDef() call Mappings.addTypeDef() call Mappings.addTypeDef() call Mappings.addTypeDef() if != for : call Configuration.addFilterDefinition() call Configuration.addFilterDefinition() call Configuration.addFilterDefinition() call Configuration.addFilterDefinition() call Configuration.addFilterDefinition() if != for : call Configuration.configure() call Configuration.configure() call Configuration.configure() call Configuration.configure() call Configuration.configure() call Resource.getURL() call Resource.getURL() call Resource.getURL() call Resource.getURL() call Resource.getURL() if != call Configuration.addProperties() call Configuration.addProperties() call Configuration.addProperties() call Configuration.addProperties() call Configuration.addProperties() if != decl_stmt java.lang.Class < = if || instanceof = else if call Configuration.getProperty() call Configuration.getProperty() call Configuration.getProperty() call Configuration.getProperty() call Configuration.getProperty() != = call Configuration.setProperty() call Configuration.setProperty() call Configuration.setProperty() call Configuration.setProperty() call Configuration.setProperty() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() if != call Configuration.setProperty() call Configuration.setProperty() call Configuration.setProperty() call Configuration.setProperty() call Configuration.setProperty() if != for : decl_stmt org.springframework.core.io.Resource = new call Configuration.addInputStream() call Configuration.addInputStream() call Configuration.addInputStream() call Configuration.addInputStream() call Configuration.addInputStream() call Resource.getInputStream() call Resource.getInputStream() call Resource.getInputStream() call Resource.getInputStream() call Resource.getInputStream() if != for : call Configuration.addInputStream() call Configuration.addInputStream() call Configuration.addInputStream() call Configuration.addInputStream() call Configuration.addInputStream() call Resource.getInputStream() call Resource.getInputStream() call Resource.getInputStream() call Resource.getInputStream() call Resource.getInputStream() if != for : call Configuration.addCacheableFile() call Configuration.addCacheableFile() call Configuration.addCacheableFile() call Configuration.addCacheableFile() call Configuration.addCacheableFile() call org.springframework.core.io.Resource.getFile() call org.springframework.core.io.Resource.getFile() call org.springframework.core.io.Resource.getFile() call org.springframework.core.io.Resource.getFile() call org.springframework.core.io.Resource.getFile() if != for : call Configuration.addJar() call Configuration.addJar() call Configuration.addJar() call Configuration.addJar() call Configuration.addJar() call org.springframework.core.io.Resource.getFile() call org.springframework.core.io.Resource.getFile() call org.springframework.core.io.Resource.getFile() call org.springframework.core.io.Resource.getFile() call org.springframework.core.io.Resource.getFile() if != for : decl_stmt File = call org.springframework.core.io.Resource.getFile() call org.springframework.core.io.Resource.getFile() call org.springframework.core.io.Resource.getFile() call org.springframework.core.io.Resource.getFile() call org.springframework.core.io.Resource.getFile() if ! call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() throw new + + call Configuration.addDirectory() call Configuration.addDirectory() call Configuration.addDirectory() call Configuration.addDirectory() call Configuration.addDirectory() call Configuration.buildMappings() call Configuration.buildMappings() call Configuration.buildMappings() call Configuration.buildMappings() call Configuration.buildMappings() if != for < = decl_stmt java.lang.String = decl_stmt java.lang.String = if > call Configuration.setCacheConcurrencyStrategy() call Configuration.setCacheConcurrencyStrategy() call Configuration.setCacheConcurrencyStrategy() call Configuration.setCacheConcurrencyStrategy() call Configuration.setCacheConcurrencyStrategy() else if > call Configuration.setCacheConcurrencyStrategy() call Configuration.setCacheConcurrencyStrategy() call Configuration.setCacheConcurrencyStrategy() call Configuration.setCacheConcurrencyStrategy() call Configuration.setCacheConcurrencyStrategy() if != for < = decl_stmt java.lang.String = decl_stmt java.lang.String = if > call Configuration.setCollectionCacheConcurrencyStrategy() call Configuration.setCollectionCacheConcurrencyStrategy() call Configuration.setCollectionCacheConcurrencyStrategy() call Configuration.setCollectionCacheConcurrencyStrategy() call Configuration.setCollectionCacheConcurrencyStrategy() else if > call Configuration.setCollectionCacheConcurrencyStrategy() call Configuration.setCollectionCacheConcurrencyStrategy() call Configuration.setCollectionCacheConcurrencyStrategy() call Configuration.setCollectionCacheConcurrencyStrategy() call Configuration.setCollectionCacheConcurrencyStrategy() if != for < : decl_stmt java.lang.String = decl_stmt java.lang.Object = if instanceof decl_stmt java.util.Collection < = < decl_stmt EventListeners = call Configuration.getEventListeners() call Configuration.getEventListeners() call Configuration.getEventListeners() call Configuration.getEventListeners() call Configuration.getEventListeners() decl_stmt java.lang.Object = call EventListeners.getListenerClassFor() call EventListeners.getListenerClassFor() call EventListeners.getListenerClassFor() call EventListeners.getListenerClassFor() call EventListeners.getListenerClassFor() call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() = call decl Collection.toArray() call decl Collection.toArray() call decl Collection.toArray() call decl Collection.toArray() call decl Collection.toArray() call Configuration.setListeners() call Configuration.setListeners() call Configuration.setListeners() call Configuration.setListeners() call Configuration.setListeners() else call Configuration.setListener() call Configuration.setListener() call Configuration.setListener() call Configuration.setListener() call Configuration.setListener() = return finally if != call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() if != call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() if != call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() if != call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() if call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) protected protected throws return protected protected throws protected protected throws protected protected throws return public final public final if == throw new return protected protected throws if DataSource public public throws decl_stmt javax.sql.DataSource = if != call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() try finally if != call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() Dialect SessionFactory HibernateTemplate DataSource decl String Connection DatabaseMetadata public public throws decl_stmt javax.sql.DataSource = if != call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() try decl_stmt SessionFactory = decl_stmt Dialect final final = decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) new < public public throws decl_stmt sun.rmi.transport.Connection = decl_stmt DatabaseMetadata = new decl_stmt java.lang.String = return finally if != call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() DatabaseMetadata decl String Connection public public throws decl_stmt sun.rmi.transport.Connection = decl_stmt DatabaseMetadata = new decl_stmt java.lang.String = return Dialect SessionFactory HibernateTemplate DataSource Connection DatabaseMetadata public public throws decl_stmt javax.sql.DataSource = if != call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() try decl_stmt SessionFactory = decl_stmt Dialect final final = decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call HibernateTemplate.setFlushMode() call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) new < public public throws decl_stmt sun.rmi.transport.Connection = decl_stmt DatabaseMetadata = new return finally if != call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() DatabaseMetadata Connection public public throws decl_stmt sun.rmi.transport.Connection = decl_stmt DatabaseMetadata = new return SessionFactory Dialect Connection decl String HibernateTemplate public public throws decl_stmt SessionFactory = decl_stmt Dialect final final = decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) new < public public throws decl_stmt sun.rmi.transport.Connection = decl_stmt java.lang.String = return decl String Connection public public throws decl_stmt sun.rmi.transport.Connection = decl_stmt java.lang.String = return Dialect SessionFactory HibernateTemplate DataSource decl String Connection public public throws decl_stmt javax.sql.DataSource = if != call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() try decl_stmt SessionFactory = decl_stmt Dialect final final = decl_stmt org.springframework.orm.hibernate4.HibernateTemplate = new call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) call org.springframework.orm.hibernate4.HibernateTemplate.execute(HibernateCallback) new < public public throws decl_stmt sun.rmi.transport.Connection = decl_stmt java.lang.String = return finally if != call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() decl String Connection public public throws decl_stmt sun.rmi.transport.Connection = decl_stmt java.lang.String = return boolean Statement protected protected throws if != && > decl_stmt boolean = if ! try decl_stmt sun.tools.tree.Statement = try for : finally finally if ! protected protected throws if + try catch if +