org.springframework.messaging.support java.util.ArrayList import java.util.List import java.util.concurrent.atomic.AtomicBoolean import java.util.concurrent.atomic.AtomicInteger import org.junit.Before import org.junit.Test import org.springframework.messaging.Message import org.springframework.messaging.MessageChannel import org.springframework.messaging.MessageHandler import org.springframework.messaging.MessagingException import static static org.junit.Assert.* import static static org.mockito.Mockito.* import class org.springframework.messaging.support.ChannelInterceptorTests TestMessageHandler ExecutorSubscribableChannel public public = new = new decl Message PreSendInterceptor decl Message public public decl_stmt org.springframework.messaging.Message < = decl_stmt PreSendInterceptor = new call PreSendInterceptor.setMessageToReturn() call PreSendInterceptor.setMessageToReturn() call PreSendInterceptor.setMessageToReturn() call PreSendInterceptor.setMessageToReturn() call PreSendInterceptor.setMessageToReturn() decl_stmt org.springframework.messaging.Message < = call PreSendInterceptor.wasAfterCompletionInvoked() call PreSendInterceptor.wasAfterCompletionInvoked() call PreSendInterceptor.wasAfterCompletionInvoked() call PreSendInterceptor.wasAfterCompletionInvoked() call PreSendInterceptor.wasAfterCompletionInvoked() decl Message NullReturningPreSendInterceptor PreSendInterceptor public public decl_stmt PreSendInterceptor = new decl_stmt NullReturningPreSendInterceptor = new decl_stmt org.springframework.messaging.Message < = call PreSendInterceptor.getCounter() call PreSendInterceptor.getCounter() call PreSendInterceptor.getCounter() call PreSendInterceptor.getCounter() call PreSendInterceptor.getCounter() call NullReturningPreSendInterceptor.getCounter() call NullReturningPreSendInterceptor.getCounter() call NullReturningPreSendInterceptor.getCounter() call NullReturningPreSendInterceptor.getCounter() call NullReturningPreSendInterceptor.getCounter() call PreSendInterceptor.wasAfterCompletionInvoked() call PreSendInterceptor.wasAfterCompletionInvoked() call PreSendInterceptor.wasAfterCompletionInvoked() call PreSendInterceptor.wasAfterCompletionInvoked() call PreSendInterceptor.wasAfterCompletionInvoked() call NullReturningPreSendInterceptor.wasAfterCompletionInvoked() call NullReturningPreSendInterceptor.wasAfterCompletionInvoked() call NullReturningPreSendInterceptor.wasAfterCompletionInvoked() call NullReturningPreSendInterceptor.wasAfterCompletionInvoked() call NullReturningPreSendInterceptor.wasAfterCompletionInvoked() AtomicBoolean AtomicBoolean public public decl_stmt java.util.concurrent.atomic.AtomicBoolean final final = new decl_stmt java.util.concurrent.atomic.AtomicBoolean final final = new new public public < call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) public public < call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) private private < call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() public public < public public < private private < AtomicBoolean AtomicBoolean AbstractMessageChannel public public decl_stmt org.springframework.messaging.support.AbstractMessageChannel final final = new protected protected < return decl_stmt java.util.concurrent.atomic.AtomicBoolean final final = new decl_stmt java.util.concurrent.atomic.AtomicBoolean final final = new call org.springframework.messaging.support.AbstractMessageChannel.addInterceptor(int,ChannelInterceptor) call org.springframework.messaging.support.AbstractMessageChannel.addInterceptor(int,ChannelInterceptor) call org.springframework.messaging.support.AbstractMessageChannel.addInterceptor(int,ChannelInterceptor) call org.springframework.messaging.support.AbstractMessageChannel.addInterceptor(int,ChannelInterceptor) call org.springframework.messaging.support.AbstractMessageChannel.addInterceptor(int,ChannelInterceptor) new public public < call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) public public < call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) private private < call org.springframework.messaging.support.AbstractMessageChannel.send(Message) call org.springframework.messaging.support.AbstractMessageChannel.send(Message) call org.springframework.messaging.support.AbstractMessageChannel.send(Message) call org.springframework.messaging.support.AbstractMessageChannel.send(Message) call org.springframework.messaging.support.AbstractMessageChannel.send(Message) call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() protected protected < return public public < public public < private private < PreSendInterceptor AbstractMessageChannel PreSendInterceptor public public decl_stmt org.springframework.messaging.support.AbstractMessageChannel final final = new protected protected < throw new decl_stmt PreSendInterceptor = new decl_stmt PreSendInterceptor = new call org.springframework.messaging.support.AbstractMessageChannel.addInterceptor(int,ChannelInterceptor) call org.springframework.messaging.support.AbstractMessageChannel.addInterceptor(int,ChannelInterceptor) call org.springframework.messaging.support.AbstractMessageChannel.addInterceptor(int,ChannelInterceptor) call org.springframework.messaging.support.AbstractMessageChannel.addInterceptor(int,ChannelInterceptor) call org.springframework.messaging.support.AbstractMessageChannel.addInterceptor(int,ChannelInterceptor) call org.springframework.messaging.support.AbstractMessageChannel.addInterceptor(int,ChannelInterceptor) call org.springframework.messaging.support.AbstractMessageChannel.addInterceptor(int,ChannelInterceptor) call org.springframework.messaging.support.AbstractMessageChannel.addInterceptor(int,ChannelInterceptor) call org.springframework.messaging.support.AbstractMessageChannel.addInterceptor(int,ChannelInterceptor) call org.springframework.messaging.support.AbstractMessageChannel.addInterceptor(int,ChannelInterceptor) try call org.springframework.messaging.support.AbstractMessageChannel.send(Message) call org.springframework.messaging.support.AbstractMessageChannel.send(Message) call org.springframework.messaging.support.AbstractMessageChannel.send(Message) call org.springframework.messaging.support.AbstractMessageChannel.send(Message) call org.springframework.messaging.support.AbstractMessageChannel.send(Message) catch call PreSendInterceptor.wasAfterCompletionInvoked() call PreSendInterceptor.wasAfterCompletionInvoked() call PreSendInterceptor.wasAfterCompletionInvoked() call PreSendInterceptor.wasAfterCompletionInvoked() call PreSendInterceptor.wasAfterCompletionInvoked() call PreSendInterceptor.wasAfterCompletionInvoked() call PreSendInterceptor.wasAfterCompletionInvoked() call PreSendInterceptor.wasAfterCompletionInvoked() call PreSendInterceptor.wasAfterCompletionInvoked() call PreSendInterceptor.wasAfterCompletionInvoked() protected protected < throw new PreSendInterceptor PreSendInterceptor public public decl_stmt PreSendInterceptor = new decl_stmt PreSendInterceptor = new call PreSendInterceptor.setExceptionToRaise() call PreSendInterceptor.setExceptionToRaise() call PreSendInterceptor.setExceptionToRaise() call PreSendInterceptor.setExceptionToRaise() call PreSendInterceptor.setExceptionToRaise() new try catch call PreSendInterceptor.wasAfterCompletionInvoked() call PreSendInterceptor.wasAfterCompletionInvoked() call PreSendInterceptor.wasAfterCompletionInvoked() call PreSendInterceptor.wasAfterCompletionInvoked() call PreSendInterceptor.wasAfterCompletionInvoked() call PreSendInterceptor.wasAfterCompletionInvoked() call PreSendInterceptor.wasAfterCompletionInvoked() call PreSendInterceptor.wasAfterCompletionInvoked() call PreSendInterceptor.wasAfterCompletionInvoked() call PreSendInterceptor.wasAfterCompletionInvoked() public < < public < < return public public < throws public public return public public return public < public < < return public public < = public public < = public public = public < public < < if != throw return != : public < public < < return