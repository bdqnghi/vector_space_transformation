org.springframework.context.annotation java.lang.reflect.Method import java.util.ArrayList import java.util.Arrays import java.util.HashMap import java.util.List import java.util.Map import java.util.Set import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.factory.BeanDefinitionStoreException import org.springframework.beans.factory.annotation.AnnotatedBeanDefinition import org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition import org.springframework.beans.factory.annotation.Autowire import org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor import org.springframework.beans.factory.config.BeanDefinition import org.springframework.beans.factory.config.BeanDefinitionHolder import org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader import org.springframework.beans.factory.parsing.SourceExtractor import org.springframework.beans.factory.support.AbstractBeanDefinitionReader import org.springframework.beans.factory.support.BeanDefinitionReader import org.springframework.beans.factory.support.BeanDefinitionRegistry import org.springframework.beans.factory.support.BeanNameGenerator import org.springframework.beans.factory.support.DefaultListableBeanFactory import org.springframework.beans.factory.support.RootBeanDefinition import org.springframework.beans.factory.xml.XmlBeanDefinitionReader import org.springframework.context.annotation.ConfigurationCondition.ConfigurationPhase import org.springframework.core.annotation.AnnotationAttributes import org.springframework.core.env.Environment import org.springframework.core.io.Resource import org.springframework.core.io.ResourceLoader import org.springframework.core.type.AnnotationMetadata import org.springframework.core.type.MethodMetadata import org.springframework.util.StringUtils import class org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader ImportRegistry ResourceLoader ConditionEvaluator Environment BeanDefinitionRegistry ScopeMetadataResolver Log BeanNameGenerator SourceExtractor TrackedConditionEvaluator public public < decl_stmt TrackedConditionEvaluator = new for : String private private if decl_stmt java.lang.String = if && return if for : AnnotatedGenericBeanDefinition BeanDefinitionHolder String ScopeMetadata AnnotationMetadata private private decl_stmt org.springframework.core.type.AnnotationMetadata = decl_stmt org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition = new decl_stmt org.springframework.context.annotation.ScopeMetadata = call ScopeMetadataResolver.resolveScopeMetadata() call ScopeMetadataResolver.resolveScopeMetadata() call ScopeMetadataResolver.resolveScopeMetadata() call ScopeMetadataResolver.resolveScopeMetadata() call ScopeMetadataResolver.resolveScopeMetadata() call AnnotatedGenericBeanDefinition.setScope() call AnnotatedGenericBeanDefinition.setScope() call AnnotatedGenericBeanDefinition.setScope() call AnnotatedGenericBeanDefinition.setScope() call AnnotatedGenericBeanDefinition.setScope() call ScopeMetadata.getScopeName() call ScopeMetadata.getScopeName() call ScopeMetadata.getScopeName() call ScopeMetadata.getScopeName() call ScopeMetadata.getScopeName() decl_stmt java.lang.String = decl_stmt org.springframework.beans.factory.config.BeanDefinitionHolder = new = call org.springframework.beans.factory.config.BeanDefinitionHolder.getBeanName() call org.springframework.beans.factory.config.BeanDefinitionHolder.getBeanName() call org.springframework.beans.factory.config.BeanDefinitionHolder.getBeanName() call org.springframework.beans.factory.config.BeanDefinitionHolder.getBeanName() call org.springframework.beans.factory.config.BeanDefinitionHolder.getBeanName() call org.springframework.beans.factory.config.BeanDefinitionHolder.getBeanDefinition() call org.springframework.beans.factory.config.BeanDefinitionHolder.getBeanDefinition() call org.springframework.beans.factory.config.BeanDefinitionHolder.getBeanDefinition() call org.springframework.beans.factory.config.BeanDefinitionHolder.getBeanDefinition() call org.springframework.beans.factory.config.BeanDefinitionHolder.getBeanDefinition() if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() + + ConfigurationClass String BeanDefinitionHolder Autowire ScopedProxyMode String String String AnnotationAttributes decl List AnnotationAttributes ConfigurationClassBeanDefinition BeanDefinition MethodMetadata private private decl_stmt org.springframework.context.annotation.ConfigurationClass = decl_stmt org.springframework.core.type.MethodMetadata = decl_stmt java.lang.String = call org.springframework.core.type.MethodMetadata.getMethodName() call org.springframework.core.type.MethodMetadata.getMethodName() call org.springframework.core.type.MethodMetadata.getMethodName() call org.springframework.core.type.MethodMetadata.getMethodName() call org.springframework.core.type.MethodMetadata.getMethodName() if call ConfigurationClass.skippedBeanMethods() call ConfigurationClass.skippedBeanMethods() call ConfigurationClass.skippedBeanMethods() call ConfigurationClass.skippedBeanMethods() call ConfigurationClass.skippedBeanMethods() call ConfigurationClass.skippedBeanMethods() call ConfigurationClass.skippedBeanMethods() call ConfigurationClass.skippedBeanMethods() call ConfigurationClass.skippedBeanMethods() return if call ConfigurationClass.skippedBeanMethods() call ConfigurationClass.skippedBeanMethods() call ConfigurationClass.skippedBeanMethods() call ConfigurationClass.skippedBeanMethods() call ConfigurationClass.skippedBeanMethods() call ConfigurationClass.skippedBeanMethods() call ConfigurationClass.skippedBeanMethods() call ConfigurationClass.skippedBeanMethods() call ConfigurationClass.skippedBeanMethods() return decl_stmt org.springframework.core.annotation.AnnotationAttributes = decl_stmt java.util.List < = new < call org.springframework.core.annotation.AnnotationAttributes.getStringArray(String) call org.springframework.core.annotation.AnnotationAttributes.getStringArray(String) call org.springframework.core.annotation.AnnotationAttributes.getStringArray(String) call org.springframework.core.annotation.AnnotationAttributes.getStringArray(String) call org.springframework.core.annotation.AnnotationAttributes.getStringArray(String) decl_stmt java.lang.String = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() : for : if return decl_stmt ConfigurationClassBeanDefinition = new call ConfigurationClassBeanDefinition.setResource() call ConfigurationClassBeanDefinition.setResource() call ConfigurationClassBeanDefinition.setResource() call ConfigurationClassBeanDefinition.setResource() call ConfigurationClassBeanDefinition.setResource() call org.springframework.context.annotation.ConfigurationClass.getResource() call org.springframework.context.annotation.ConfigurationClass.getResource() call org.springframework.context.annotation.ConfigurationClass.getResource() call org.springframework.context.annotation.ConfigurationClass.getResource() call org.springframework.context.annotation.ConfigurationClass.getResource() call ConfigurationClassBeanDefinition.setSource() call ConfigurationClassBeanDefinition.setSource() call ConfigurationClassBeanDefinition.setSource() call ConfigurationClassBeanDefinition.setSource() call ConfigurationClassBeanDefinition.setSource() call org.springframework.context.annotation.ConfigurationClass.getResource() call org.springframework.context.annotation.ConfigurationClass.getResource() call org.springframework.context.annotation.ConfigurationClass.getResource() call org.springframework.context.annotation.ConfigurationClass.getResource() call org.springframework.context.annotation.ConfigurationClass.getResource() if call org.springframework.core.type.MethodMetadata.isStatic() call org.springframework.core.type.MethodMetadata.isStatic() call org.springframework.core.type.MethodMetadata.isStatic() call org.springframework.core.type.MethodMetadata.isStatic() call org.springframework.core.type.MethodMetadata.isStatic() call ConfigurationClassBeanDefinition.setBeanClassName() call ConfigurationClassBeanDefinition.setBeanClassName() call ConfigurationClassBeanDefinition.setBeanClassName() call ConfigurationClassBeanDefinition.setBeanClassName() call ConfigurationClassBeanDefinition.setBeanClassName() call org.springframework.context.annotation.ConfigurationClass.getMetadata() call org.springframework.context.annotation.ConfigurationClass.getMetadata() call org.springframework.context.annotation.ConfigurationClass.getMetadata() call org.springframework.context.annotation.ConfigurationClass.getMetadata() call org.springframework.context.annotation.ConfigurationClass.getMetadata() call ConfigurationClassBeanDefinition.setFactoryMethodName() call ConfigurationClassBeanDefinition.setFactoryMethodName() call ConfigurationClassBeanDefinition.setFactoryMethodName() call ConfigurationClassBeanDefinition.setFactoryMethodName() call ConfigurationClassBeanDefinition.setFactoryMethodName() else call ConfigurationClassBeanDefinition.setFactoryBeanName() call ConfigurationClassBeanDefinition.setFactoryBeanName() call ConfigurationClassBeanDefinition.setFactoryBeanName() call ConfigurationClassBeanDefinition.setFactoryBeanName() call ConfigurationClassBeanDefinition.setFactoryBeanName() call org.springframework.context.annotation.ConfigurationClass.getBeanName() call org.springframework.context.annotation.ConfigurationClass.getBeanName() call org.springframework.context.annotation.ConfigurationClass.getBeanName() call org.springframework.context.annotation.ConfigurationClass.getBeanName() call org.springframework.context.annotation.ConfigurationClass.getBeanName() call ConfigurationClassBeanDefinition.setUniqueFactoryMethodName() call ConfigurationClassBeanDefinition.setUniqueFactoryMethodName() call ConfigurationClassBeanDefinition.setUniqueFactoryMethodName() call ConfigurationClassBeanDefinition.setUniqueFactoryMethodName() call ConfigurationClassBeanDefinition.setUniqueFactoryMethodName() call ConfigurationClassBeanDefinition.setAutowireMode() call ConfigurationClassBeanDefinition.setAutowireMode() call ConfigurationClassBeanDefinition.setAutowireMode() call ConfigurationClassBeanDefinition.setAutowireMode() call ConfigurationClassBeanDefinition.setAutowireMode() call ConfigurationClassBeanDefinition.setAttribute() call ConfigurationClassBeanDefinition.setAttribute() call ConfigurationClassBeanDefinition.setAttribute() call ConfigurationClassBeanDefinition.setAttribute() call ConfigurationClassBeanDefinition.setAttribute() decl_stmt Autowire = call org.springframework.core.annotation.AnnotationAttributes.getEnum(String) call org.springframework.core.annotation.AnnotationAttributes.getEnum(String) call org.springframework.core.annotation.AnnotationAttributes.getEnum(String) call org.springframework.core.annotation.AnnotationAttributes.getEnum(String) call org.springframework.core.annotation.AnnotationAttributes.getEnum(String) if call Autowire.isAutowire() call Autowire.isAutowire() call Autowire.isAutowire() call Autowire.isAutowire() call Autowire.isAutowire() call ConfigurationClassBeanDefinition.setAutowireMode() call ConfigurationClassBeanDefinition.setAutowireMode() call ConfigurationClassBeanDefinition.setAutowireMode() call ConfigurationClassBeanDefinition.setAutowireMode() call ConfigurationClassBeanDefinition.setAutowireMode() call Autowire.value() call Autowire.value() call Autowire.value() call Autowire.value() call Autowire.value() decl_stmt java.lang.String = call org.springframework.core.annotation.AnnotationAttributes.getString(String) call org.springframework.core.annotation.AnnotationAttributes.getString(String) call org.springframework.core.annotation.AnnotationAttributes.getString(String) call org.springframework.core.annotation.AnnotationAttributes.getString(String) call org.springframework.core.annotation.AnnotationAttributes.getString(String) if call ConfigurationClassBeanDefinition.setInitMethodName() call ConfigurationClassBeanDefinition.setInitMethodName() call ConfigurationClassBeanDefinition.setInitMethodName() call ConfigurationClassBeanDefinition.setInitMethodName() call ConfigurationClassBeanDefinition.setInitMethodName() decl_stmt java.lang.String = call org.springframework.core.annotation.AnnotationAttributes.getString(String) call org.springframework.core.annotation.AnnotationAttributes.getString(String) call org.springframework.core.annotation.AnnotationAttributes.getString(String) call org.springframework.core.annotation.AnnotationAttributes.getString(String) call org.springframework.core.annotation.AnnotationAttributes.getString(String) if != call ConfigurationClassBeanDefinition.setDestroyMethodName() call ConfigurationClassBeanDefinition.setDestroyMethodName() call ConfigurationClassBeanDefinition.setDestroyMethodName() call ConfigurationClassBeanDefinition.setDestroyMethodName() call ConfigurationClassBeanDefinition.setDestroyMethodName() decl_stmt ScopedProxyMode = decl_stmt org.springframework.core.annotation.AnnotationAttributes = if != call ConfigurationClassBeanDefinition.setScope() call ConfigurationClassBeanDefinition.setScope() call ConfigurationClassBeanDefinition.setScope() call ConfigurationClassBeanDefinition.setScope() call ConfigurationClassBeanDefinition.setScope() call org.springframework.core.annotation.AnnotationAttributes.getAliasedString(String,Class,Object) call org.springframework.core.annotation.AnnotationAttributes.getAliasedString(String,Class,Object) call org.springframework.core.annotation.AnnotationAttributes.getAliasedString(String,Class,Object) call org.springframework.core.annotation.AnnotationAttributes.getAliasedString(String,Class,Object) call org.springframework.core.annotation.AnnotationAttributes.getAliasedString(String,Class,Object) call org.springframework.context.annotation.ConfigurationClass.getResource() call org.springframework.context.annotation.ConfigurationClass.getResource() call org.springframework.context.annotation.ConfigurationClass.getResource() call org.springframework.context.annotation.ConfigurationClass.getResource() call org.springframework.context.annotation.ConfigurationClass.getResource() = call org.springframework.core.annotation.AnnotationAttributes.getEnum(String) call org.springframework.core.annotation.AnnotationAttributes.getEnum(String) call org.springframework.core.annotation.AnnotationAttributes.getEnum(String) call org.springframework.core.annotation.AnnotationAttributes.getEnum(String) call org.springframework.core.annotation.AnnotationAttributes.getEnum(String) if == = decl_stmt org.springframework.beans.factory.config.BeanDefinition = if != decl_stmt org.springframework.beans.factory.config.BeanDefinitionHolder = new == = new call org.springframework.beans.factory.config.BeanDefinitionHolder.getBeanDefinition() call org.springframework.beans.factory.config.BeanDefinitionHolder.getBeanDefinition() call org.springframework.beans.factory.config.BeanDefinitionHolder.getBeanDefinition() call org.springframework.beans.factory.config.BeanDefinitionHolder.getBeanDefinition() call org.springframework.beans.factory.config.BeanDefinitionHolder.getBeanDefinition() if call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.isDebugEnabled() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call Log.debug() call org.springframework.context.annotation.ConfigurationClass.getMetadata() call org.springframework.context.annotation.ConfigurationClass.getMetadata() call org.springframework.context.annotation.ConfigurationClass.getMetadata() call org.springframework.context.annotation.ConfigurationClass.getMetadata() call org.springframework.context.annotation.ConfigurationClass.getMetadata() ConfigurationClassBeanDefinition BeanDefinition protected protected if ! return decl_stmt org.springframework.beans.factory.config.BeanDefinition = if instanceof decl_stmt ConfigurationClassBeanDefinition = return call ConfigurationClassBeanDefinition.getMetadata() call ConfigurationClassBeanDefinition.getMetadata() call ConfigurationClassBeanDefinition.getMetadata() call ConfigurationClassBeanDefinition.getMetadata() call ConfigurationClassBeanDefinition.getMetadata() if instanceof return if call org.springframework.beans.factory.config.BeanDefinition.getRole() call org.springframework.beans.factory.config.BeanDefinition.getRole() call org.springframework.beans.factory.config.BeanDefinition.getRole() call org.springframework.beans.factory.config.BeanDefinition.getRole() call org.springframework.beans.factory.config.BeanDefinition.getRole() > return if instanceof && ! throw new + if call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.isInfoEnabled() call Log.info() call Log.info() call Log.info() call Log.info() call Log.info() + return decl Class AbstractBeanDefinitionReader String decl Map BeanDefinitionReader private private < < extends extends decl_stmt java.util.Map < < = new < < for < < extends extends : decl_stmt java.lang.String = decl_stmt java.lang.Class < extends extends = if == if = else = decl_stmt org.springframework.beans.factory.support.BeanDefinitionReader = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == try = call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() if instanceof decl_stmt org.springframework.beans.factory.support.AbstractBeanDefinitionReader = call org.springframework.beans.factory.support.AbstractBeanDefinitionReader.setResourceLoader(ResourceLoader) call org.springframework.beans.factory.support.AbstractBeanDefinitionReader.setResourceLoader(ResourceLoader) call org.springframework.beans.factory.support.AbstractBeanDefinitionReader.setResourceLoader(ResourceLoader) call org.springframework.beans.factory.support.AbstractBeanDefinitionReader.setResourceLoader(ResourceLoader) call org.springframework.beans.factory.support.AbstractBeanDefinitionReader.setResourceLoader(ResourceLoader) call org.springframework.beans.factory.support.AbstractBeanDefinitionReader.setEnvironment(Environment) call org.springframework.beans.factory.support.AbstractBeanDefinitionReader.setEnvironment(Environment) call org.springframework.beans.factory.support.AbstractBeanDefinitionReader.setEnvironment(Environment) call org.springframework.beans.factory.support.AbstractBeanDefinitionReader.setEnvironment(Environment) call org.springframework.beans.factory.support.AbstractBeanDefinitionReader.setEnvironment(Environment) call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() catch throw new + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() + call org.springframework.beans.factory.support.BeanDefinitionReader.loadBeanDefinitions(String) call org.springframework.beans.factory.support.BeanDefinitionReader.loadBeanDefinitions(String) call org.springframework.beans.factory.support.BeanDefinitionReader.loadBeanDefinitions(String) call org.springframework.beans.factory.support.BeanDefinitionReader.loadBeanDefinitions(String) call org.springframework.beans.factory.support.BeanDefinitionReader.loadBeanDefinitions(String) private private < for < : public public return public public return public public return && public public return new Boolean boolean public public decl_stmt java.lang.Boolean = if == if decl_stmt boolean = for : if ! = break if = if == = call org.springframework.context.annotation.ConditionEvaluator.shouldSkip(AnnotatedTypeMetadata,ConfigurationPhase) call org.springframework.context.annotation.ConditionEvaluator.shouldSkip(AnnotatedTypeMetadata,ConfigurationPhase) call org.springframework.context.annotation.ConditionEvaluator.shouldSkip(AnnotatedTypeMetadata,ConfigurationPhase) call org.springframework.context.annotation.ConditionEvaluator.shouldSkip(AnnotatedTypeMetadata,ConfigurationPhase) call org.springframework.context.annotation.ConditionEvaluator.shouldSkip(AnnotatedTypeMetadata,ConfigurationPhase) return