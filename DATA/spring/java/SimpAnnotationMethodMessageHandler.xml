org.springframework.messaging.simp.annotation.support java.lang.reflect.Method import java.util.ArrayList import java.util.Collection import java.util.Comparator import java.util.LinkedHashSet import java.util.List import java.util.Map import java.util.Set import org.springframework.beans.factory.config.ConfigurableBeanFactory import org.springframework.context.ConfigurableApplicationContext import org.springframework.context.EmbeddedValueResolverAware import org.springframework.context.SmartLifecycle import org.springframework.core.annotation.AnnotatedElementUtils import org.springframework.core.convert.ConversionService import org.springframework.format.support.DefaultFormattingConversionService import org.springframework.messaging.Message import org.springframework.messaging.MessageChannel import org.springframework.messaging.SubscribableChannel import org.springframework.messaging.converter.ByteArrayMessageConverter import org.springframework.messaging.converter.CompositeMessageConverter import org.springframework.messaging.converter.MessageConverter import org.springframework.messaging.converter.StringMessageConverter import org.springframework.messaging.core.AbstractMessageSendingTemplate import org.springframework.messaging.handler.DestinationPatternsMessageCondition import org.springframework.messaging.handler.HandlerMethod import org.springframework.messaging.handler.annotation.MessageMapping import org.springframework.messaging.handler.annotation.support.AnnotationExceptionHandlerMethodResolver import org.springframework.messaging.handler.annotation.support.DestinationVariableMethodArgumentResolver import org.springframework.messaging.handler.annotation.support.HeaderMethodArgumentResolver import org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolver import org.springframework.messaging.handler.annotation.support.MessageMethodArgumentResolver import org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver import org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver import org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler import org.springframework.messaging.handler.invocation.CompletableFutureReturnValueHandler import org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver import org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler import org.springframework.messaging.handler.invocation.ListenableFutureReturnValueHandler import org.springframework.messaging.simp.SimpAttributesContextHolder import org.springframework.messaging.simp.SimpMessageHeaderAccessor import org.springframework.messaging.simp.SimpMessageMappingInfo import org.springframework.messaging.simp.SimpMessageSendingOperations import org.springframework.messaging.simp.SimpMessageTypeMessageCondition import org.springframework.messaging.simp.SimpMessagingTemplate import org.springframework.messaging.simp.annotation.SubscribeMapping import org.springframework.messaging.support.MessageHeaderAccessor import org.springframework.messaging.support.MessageHeaderInitializer import org.springframework.stereotype.Controller import org.springframework.util.AntPathMatcher import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.CollectionUtils import org.springframework.util.PathMatcher import org.springframework.util.StringValueResolver import org.springframework.validation.Validator import class org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler super super extends super implements StringValueResolver SimpMessageSendingOperations boolean PathMatcher MessageConverter Object boolean MessageHeaderInitializer boolean SimpMessageSendingOperations ConversionService SubscribableChannel Validator public public < decl Collection private static < private static < < if return decl_stmt java.util.Collection < = new < for : if ! = + call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() return public public = if != < public public return public public = public public return public public = = public public return public public return public public = public public = public public = public public return public public return public public return public final public final synchronized return public final public final synchronized = public final public final synchronized = public final public final synchronized decl List ConfigurableBeanFactory protected < protected < decl_stmt org.springframework.beans.factory.config.ConfigurableBeanFactory = instanceof : decl_stmt java.util.List < = new < call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new return SendToMethodReturnValueHandler SubscriptionMethodReturnValueHandler decl List protected < extends extends protected < extends extends decl_stmt java.util.List < = new < call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new decl_stmt org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler = new call org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler.setHeaderInitializer(MessageHeaderInitializer) call org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler.setHeaderInitializer(MessageHeaderInitializer) call org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler.setHeaderInitializer(MessageHeaderInitializer) call org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler.setHeaderInitializer(MessageHeaderInitializer) call org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler.setHeaderInitializer(MessageHeaderInitializer) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler = new call org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler.setHeaderInitializer(MessageHeaderInitializer) call org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler.setHeaderInitializer(MessageHeaderInitializer) call org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler.setHeaderInitializer(MessageHeaderInitializer) call org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler.setHeaderInitializer(MessageHeaderInitializer) call org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler.setHeaderInitializer(MessageHeaderInitializer) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() = new call org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler.setHeaderInitializer(MessageHeaderInitializer) call org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler.setHeaderInitializer(MessageHeaderInitializer) call org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler.setHeaderInitializer(MessageHeaderInitializer) call org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler.setHeaderInitializer(MessageHeaderInitializer) call org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler.setHeaderInitializer(MessageHeaderInitializer) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return protected protected < return MessageMapping SimpMessageMappingInfo MessageMapping SubscribeMapping protected protected < decl_stmt MessageMapping = if != decl_stmt MessageMapping = if call MessageMapping.value() call MessageMapping.value() call MessageMapping.value() call MessageMapping.value() call MessageMapping.value() > || != && call MessageMapping.value() call MessageMapping.value() call MessageMapping.value() call MessageMapping.value() call MessageMapping.value() > decl_stmt org.springframework.messaging.simp.SimpMessageMappingInfo = call MessageMapping.value() call MessageMapping.value() call MessageMapping.value() call MessageMapping.value() call MessageMapping.value() if != = call MessageMapping.value() call MessageMapping.value() call MessageMapping.value() call MessageMapping.value() call MessageMapping.value() return decl_stmt SubscribeMapping = if != decl_stmt MessageMapping = if call SubscribeMapping.value() call SubscribeMapping.value() call SubscribeMapping.value() call SubscribeMapping.value() call SubscribeMapping.value() > || != && call MessageMapping.value() call MessageMapping.value() call MessageMapping.value() call MessageMapping.value() call MessageMapping.value() > decl_stmt org.springframework.messaging.simp.SimpMessageMappingInfo = call SubscribeMapping.value() call SubscribeMapping.value() call SubscribeMapping.value() call SubscribeMapping.value() call SubscribeMapping.value() if != = call MessageMapping.value() call MessageMapping.value() call MessageMapping.value() call MessageMapping.value() call MessageMapping.value() return return decl String private private decl_stmt java.lang.String = return new new decl String private private decl_stmt java.lang.String = return new new decl String protected protected if == return decl_stmt java.lang.String = new for = < ++ = return decl Set protected < protected < decl_stmt java.util.Set < = new < for : if ! call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return protected protected < return protected protected if == return if return for : if if return - else return return protected protected < return protected < protected < final final final < return new < public public return public public return decl Set MessageHeaderAccessor decl Map String protected protected < decl_stmt java.util.Set < = if ! decl_stmt java.lang.String = call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() decl_stmt java.util.Map < = if ! decl_stmt org.springframework.messaging.support.MessageHeaderAccessor = != && call org.springframework.messaging.support.MessageHeaderAccessor.isMutable() call org.springframework.messaging.support.MessageHeaderAccessor.isMutable() call org.springframework.messaging.support.MessageHeaderAccessor.isMutable() call org.springframework.messaging.support.MessageHeaderAccessor.isMutable() call org.springframework.messaging.support.MessageHeaderAccessor.isMutable() call org.springframework.messaging.support.MessageHeaderAccessor.setHeader(String,Object) call org.springframework.messaging.support.MessageHeaderAccessor.setHeader(String,Object) call org.springframework.messaging.support.MessageHeaderAccessor.setHeader(String,Object) call org.springframework.messaging.support.MessageHeaderAccessor.setHeader(String,Object) call org.springframework.messaging.support.MessageHeaderAccessor.setHeader(String,Object) try finally protected protected < return new