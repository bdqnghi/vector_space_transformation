org.springframework.context.annotation java.io.FileNotFoundException import java.io.IOException import java.util.ArrayDeque import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.Comparator import java.util.Deque import java.util.HashMap import java.util.Iterator import java.util.LinkedHashMap import java.util.LinkedHashSet import java.util.LinkedList import java.util.List import java.util.Map import java.util.Set import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.springframework.beans.BeanUtils import org.springframework.beans.factory.Aware import org.springframework.beans.factory.BeanClassLoaderAware import org.springframework.beans.factory.BeanDefinitionStoreException import org.springframework.beans.factory.BeanFactory import org.springframework.beans.factory.BeanFactoryAware import org.springframework.beans.factory.annotation.AnnotatedBeanDefinition import org.springframework.beans.factory.config.BeanDefinition import org.springframework.beans.factory.config.BeanDefinitionHolder import org.springframework.beans.factory.config.ConfigurableBeanFactory import org.springframework.beans.factory.parsing.Location import org.springframework.beans.factory.parsing.Problem import org.springframework.beans.factory.parsing.ProblemReporter import org.springframework.beans.factory.support.AbstractBeanDefinition import org.springframework.beans.factory.support.BeanDefinitionReader import org.springframework.beans.factory.support.BeanDefinitionRegistry import org.springframework.beans.factory.support.BeanNameGenerator import org.springframework.context.EnvironmentAware import org.springframework.context.ResourceLoaderAware import org.springframework.context.annotation.ConfigurationCondition.ConfigurationPhase import org.springframework.core.NestedIOException import org.springframework.core.annotation.AnnotationAttributes import org.springframework.core.annotation.AnnotationAwareOrderComparator import org.springframework.core.env.CompositePropertySource import org.springframework.core.env.ConfigurableEnvironment import org.springframework.core.env.Environment import org.springframework.core.env.MutablePropertySources import org.springframework.core.env.PropertySource import org.springframework.core.io.Resource import org.springframework.core.io.ResourceLoader import org.springframework.core.io.support.DefaultPropertySourceFactory import org.springframework.core.io.support.EncodedResource import org.springframework.core.io.support.PropertySourceFactory import org.springframework.core.io.support.ResourcePropertySource import org.springframework.core.type.AnnotationMetadata import org.springframework.core.type.MethodMetadata import org.springframework.core.type.StandardAnnotationMetadata import org.springframework.core.type.classreading.MetadataReader import org.springframework.core.type.classreading.MetadataReaderFactory import org.springframework.core.type.filter.AssignableTypeFilter import org.springframework.util.Assert import org.springframework.util.CollectionUtils import org.springframework.util.LinkedMultiValueMap import org.springframework.util.MultiValueMap import org.springframework.util.StringUtils import class org.springframework.context.annotation.ConfigurationClassParser ComponentScanAnnotationParser ResourceLoader ConditionEvaluator MetadataReaderFactory decl Map Environment decl Map decl List decl Comparator BeanDefinitionRegistry ImportStack ProblemReporter Log PropertySourceFactory decl List public public return BeanDefinition public public < = new < for : decl_stmt org.springframework.beans.factory.config.BeanDefinition = try if instanceof else if instanceof && else call org.springframework.beans.factory.config.BeanDefinition.getBeanClassName() call org.springframework.beans.factory.config.BeanDefinition.getBeanClassName() call org.springframework.beans.factory.config.BeanDefinition.getBeanClassName() call org.springframework.beans.factory.config.BeanDefinition.getBeanClassName() call org.springframework.beans.factory.config.BeanDefinition.getBeanClassName() catch throw catch throw new + call org.springframework.beans.factory.config.BeanDefinition.getBeanClassName() call org.springframework.beans.factory.config.BeanDefinition.getBeanClassName() call org.springframework.beans.factory.config.BeanDefinition.getBeanClassName() call org.springframework.beans.factory.config.BeanDefinition.getBeanClassName() call org.springframework.beans.factory.config.BeanDefinition.getBeanClassName() + MetadataReader protected final protected final throws decl_stmt org.springframework.core.type.classreading.MetadataReader = new protected final protected final < throws new protected final protected final throws new ConfigurationClass SourceClass protected protected throws if return decl_stmt org.springframework.context.annotation.ConfigurationClass = if != if if call org.springframework.context.annotation.ConfigurationClass.isImported() call org.springframework.context.annotation.ConfigurationClass.isImported() call org.springframework.context.annotation.ConfigurationClass.isImported() call org.springframework.context.annotation.ConfigurationClass.isImported() call org.springframework.context.annotation.ConfigurationClass.isImported() call org.springframework.context.annotation.ConfigurationClass.mergeImportedBy(ConfigurationClass) call org.springframework.context.annotation.ConfigurationClass.mergeImportedBy(ConfigurationClass) call org.springframework.context.annotation.ConfigurationClass.mergeImportedBy(ConfigurationClass) call org.springframework.context.annotation.ConfigurationClass.mergeImportedBy(ConfigurationClass) call org.springframework.context.annotation.ConfigurationClass.mergeImportedBy(ConfigurationClass) return else for < = if decl_stmt sun.tools.javac.SourceClass = do = != AnnotationAttributes decl Set String String decl Set decl Set decl Class decl String protected final protected final throws for : if instanceof else call Log.warn() call Log.warn() call Log.warn() call Log.warn() call Log.warn() + + decl_stmt java.util.Set < = if ! call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() && ! for : decl_stmt java.util.Set < = for : if if decl_stmt org.springframework.core.annotation.AnnotationAttributes = decl_stmt java.lang.String = call org.springframework.core.annotation.AnnotationAttributes.getAliasedStringArray(String,Class,Object) call org.springframework.core.annotation.AnnotationAttributes.getAliasedStringArray(String,Class,Object) call org.springframework.core.annotation.AnnotationAttributes.getAliasedStringArray(String,Class,Object) call org.springframework.core.annotation.AnnotationAttributes.getAliasedStringArray(String,Class,Object) call org.springframework.core.annotation.AnnotationAttributes.getAliasedStringArray(String,Class,Object) decl_stmt java.lang.Class < extends extends = call org.springframework.core.annotation.AnnotationAttributes.getClass(String) call org.springframework.core.annotation.AnnotationAttributes.getClass(String) call org.springframework.core.annotation.AnnotationAttributes.getClass(String) call org.springframework.core.annotation.AnnotationAttributes.getClass(String) call org.springframework.core.annotation.AnnotationAttributes.getClass(String) for : decl_stmt java.lang.String = decl_stmt java.util.Set < = for : new for : = for : if ! new if decl_stmt java.lang.String = if ! call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) && ! return return private private throws for : if && ! if new else try finally Resource String String decl String PropertySourceFactory String decl Class boolean private private throws decl_stmt java.lang.String = if ! = decl_stmt java.lang.String = if ! = decl_stmt java.lang.String = > decl_stmt boolean = decl_stmt java.lang.Class < extends extends = decl_stmt org.springframework.core.io.support.PropertySourceFactory = == : for : try decl_stmt java.lang.String = decl_stmt org.springframework.core.io.Resource = call PropertySourceFactory.createPropertySource() call PropertySourceFactory.createPropertySource() call PropertySourceFactory.createPropertySource() call PropertySourceFactory.createPropertySource() call PropertySourceFactory.createPropertySource() new catch if ! throw catch if ! throw CompositePropertySource String decl PropertySource decl PropertySource String MutablePropertySources private private < decl_stmt java.lang.String = decl_stmt org.springframework.core.env.MutablePropertySources = if call org.springframework.core.env.MutablePropertySources.contains(String) call org.springframework.core.env.MutablePropertySources.contains(String) call org.springframework.core.env.MutablePropertySources.contains(String) call org.springframework.core.env.MutablePropertySources.contains(String) call org.springframework.core.env.MutablePropertySources.contains(String) && decl_stmt org.springframework.core.env.PropertySource < = call org.springframework.core.env.MutablePropertySources.get(String) call org.springframework.core.env.MutablePropertySources.get(String) call org.springframework.core.env.MutablePropertySources.get(String) call org.springframework.core.env.MutablePropertySources.get(String) call org.springframework.core.env.MutablePropertySources.get(String) decl_stmt org.springframework.core.env.PropertySource < = instanceof : if instanceof else if instanceof = decl_stmt org.springframework.core.env.CompositePropertySource = new call org.springframework.core.env.CompositePropertySource.addPropertySource(PropertySource) call org.springframework.core.env.CompositePropertySource.addPropertySource(PropertySource) call org.springframework.core.env.CompositePropertySource.addPropertySource(PropertySource) call org.springframework.core.env.CompositePropertySource.addPropertySource(PropertySource) call org.springframework.core.env.CompositePropertySource.addPropertySource(PropertySource) call org.springframework.core.env.CompositePropertySource.addPropertySource(PropertySource) call org.springframework.core.env.CompositePropertySource.addPropertySource(PropertySource) call org.springframework.core.env.CompositePropertySource.addPropertySource(PropertySource) call org.springframework.core.env.CompositePropertySource.addPropertySource(PropertySource) call org.springframework.core.env.CompositePropertySource.addPropertySource(PropertySource) call org.springframework.core.env.MutablePropertySources.replace(String,PropertySource) call org.springframework.core.env.MutablePropertySources.replace(String,PropertySource) call org.springframework.core.env.MutablePropertySources.replace(String,PropertySource) call org.springframework.core.env.MutablePropertySources.replace(String,PropertySource) call org.springframework.core.env.MutablePropertySources.replace(String,PropertySource) else if call org.springframework.core.env.MutablePropertySources.addLast(PropertySource) call org.springframework.core.env.MutablePropertySources.addLast(PropertySource) call org.springframework.core.env.MutablePropertySources.addLast(PropertySource) call org.springframework.core.env.MutablePropertySources.addLast(PropertySource) call org.springframework.core.env.MutablePropertySources.addLast(PropertySource) else decl_stmt java.lang.String = - call MutablePropertySources.addBefore() call MutablePropertySources.addBefore() call MutablePropertySources.addBefore() call MutablePropertySources.addBefore() call MutablePropertySources.addBefore() decl Set decl Set private < private < throws decl_stmt java.util.Set < = new < decl_stmt java.util.Set < = new < return String private private < < throws if for : decl_stmt java.lang.String = if ! call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) && ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) ConfigurationClass decl List decl String private private decl_stmt java.util.List < = = for : decl_stmt org.springframework.context.annotation.ConfigurationClass = try decl_stmt java.lang.String = call org.springframework.context.annotation.ConfigurationClass.getMetadata() call org.springframework.context.annotation.ConfigurationClass.getMetadata() call org.springframework.context.annotation.ConfigurationClass.getMetadata() call org.springframework.context.annotation.ConfigurationClass.getMetadata() call org.springframework.context.annotation.ConfigurationClass.getMetadata() catch throw catch throw new + call org.springframework.context.annotation.ConfigurationClass.getMetadata() call org.springframework.context.annotation.ConfigurationClass.getMetadata() call org.springframework.context.annotation.ConfigurationClass.getMetadata() call org.springframework.context.annotation.ConfigurationClass.getMetadata() call org.springframework.context.annotation.ConfigurationClass.getMetadata() + ImportBeanDefinitionRegistrar decl Class decl String decl Collection ImportSelector private private < throws if return if && new else try for : if decl_stmt java.lang.Class < = decl_stmt org.springframework.context.annotation.ImportSelector = if != && instanceof new else decl_stmt java.lang.String = call ImportSelector.selectImports() call ImportSelector.selectImports() call ImportSelector.selectImports() call ImportSelector.selectImports() call ImportSelector.selectImports() decl_stmt java.util.Collection < = else if decl_stmt java.lang.Class < = decl_stmt org.springframework.context.annotation.ImportBeanDefinitionRegistrar = else catch throw catch throw new + + finally ClassLoader private private if instanceof if instanceof if instanceof if instanceof decl_stmt java.lang.ClassLoader = instanceof : if instanceof && instanceof public public for : public < public < return return AnnotationMetadata public public throws decl_stmt org.springframework.core.type.AnnotationMetadata = if instanceof return return public public < throws try return new catch return decl List public < public < throws decl_stmt java.util.List < = new < for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public throws if try return new catch throw new + + return new public public public public for < : for < = if decl List public public decl_stmt java.util.List < = return ! call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - : StringBuilder decl Iterator public public decl_stmt java.lang.StringBuilder = new decl_stmt java.util.Iterator < = while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) public public return public public return public final public final return String public < public < throws if instanceof < return < decl_stmt java.lang.String = return call org.springframework.core.io.ResourceLoader.getClassLoader() call org.springframework.core.io.ResourceLoader.getClassLoader() call org.springframework.core.io.ResourceLoader.getClassLoader() call org.springframework.core.io.ResourceLoader.getClassLoader() call org.springframework.core.io.ResourceLoader.getClassLoader() public public < throws if instanceof return < return new public public throws if instanceof < return new < return new Object decl List decl Class public < public < throws decl_stmt java.lang.Object = if instanceof < decl_stmt java.lang.Class < = < try decl_stmt java.util.List < = new < for < : return catch = call org.springframework.core.type.classreading.MetadataReaderFactory.getMetadataReader(Resource) call org.springframework.core.type.classreading.MetadataReaderFactory.getMetadataReader(Resource) call org.springframework.core.type.classreading.MetadataReaderFactory.getMetadataReader(Resource) call org.springframework.core.type.classreading.MetadataReaderFactory.getMetadataReader(Resource) call org.springframework.core.type.classreading.MetadataReaderFactory.getMetadataReader(Resource) call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() public public throws if instanceof < return < return decl Set decl Class public < public < throws decl_stmt java.util.Set < = new < if instanceof < decl_stmt java.lang.Class < = < for < : call decl Class.getInterfaces() call decl Class.getInterfaces() call decl Class.getInterfaces() call decl Class.getInterfaces() call decl Class.getInterfaces() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add()