org.springframework.util.xml java.util.Iterator import javax.xml.namespace.QName import javax.xml.stream.Location import javax.xml.stream.XMLEventReader import javax.xml.stream.XMLStreamConstants import javax.xml.stream.XMLStreamException import javax.xml.stream.events.Attribute import javax.xml.stream.events.Characters import javax.xml.stream.events.Comment import javax.xml.stream.events.DTD import javax.xml.stream.events.EndElement import javax.xml.stream.events.EntityDeclaration import javax.xml.stream.events.EntityReference import javax.xml.stream.events.Namespace import javax.xml.stream.events.NotationDeclaration import javax.xml.stream.events.ProcessingInstruction import javax.xml.stream.events.StartDocument import javax.xml.stream.events.StartElement import javax.xml.stream.events.XMLEvent import org.xml.sax.Attributes import org.xml.sax.SAXException import org.xml.sax.ext.Locator2 import org.xml.sax.helpers.AttributesImpl import org.springframework.util.Assert import org.springframework.util.StringUtils import class annotation org.springframework.util.xml.StaxEventXMLReader super super extends String String String XMLEventReader boolean boolean int XMLEvent protected protected throws decl_stmt boolean = decl_stmt boolean = decl_stmt int = while && >= decl_stmt XMLEvent = if ! call XMLEvent.isStartDocument() call XMLEvent.isStartDocument() call XMLEvent.isStartDocument() call XMLEvent.isStartDocument() call XMLEvent.isStartDocument() && ! call XMLEvent.isEndDocument() call XMLEvent.isEndDocument() call XMLEvent.isEndDocument() call XMLEvent.isEndDocument() call XMLEvent.isEndDocument() && ! = switch call XMLEvent.getEventType() call XMLEvent.getEventType() call XMLEvent.getEventType() call XMLEvent.getEventType() call XMLEvent.getEventType() case = break case ++ call XMLEvent.asStartElement() call XMLEvent.asStartElement() call XMLEvent.asStartElement() call XMLEvent.asStartElement() call XMLEvent.asStartElement() break case -- if >= call XMLEvent.asEndElement() call XMLEvent.asEndElement() call XMLEvent.asEndElement() call XMLEvent.asEndElement() call XMLEvent.asEndElement() break case break case case case call XMLEvent.asCharacters() call XMLEvent.asCharacters() call XMLEvent.asCharacters() call XMLEvent.asCharacters() call XMLEvent.asCharacters() break case = break case break case break case break case break case break if && ! StartDocument String Location private private final final throws if decl_stmt StartDocument = decl_stmt java.lang.String = call StartDocument.getVersion() call StartDocument.getVersion() call StartDocument.getVersion() call StartDocument.getVersion() call StartDocument.getVersion() if = if call StartDocument.encodingSet() call StartDocument.encodingSet() call StartDocument.encodingSet() call StartDocument.encodingSet() call StartDocument.encodingSet() = call StartDocument.getCharacterEncodingScheme() call StartDocument.getCharacterEncodingScheme() call StartDocument.getCharacterEncodingScheme() call StartDocument.getCharacterEncodingScheme() call StartDocument.getCharacterEncodingScheme() if != decl_stmt org.springframework.beans.factory.parsing.Location final final = new public public return != call Location.getColumnNumber() call Location.getColumnNumber() call Location.getColumnNumber() call Location.getColumnNumber() call Location.getColumnNumber() : - public public return != call Location.getLineNumber() call Location.getLineNumber() call Location.getLineNumber() call Location.getLineNumber() call Location.getLineNumber() : - public public return != call Location.getPublicId() call Location.getPublicId() call Location.getPublicId() call Location.getPublicId() call Location.getPublicId() : public public return != call Location.getSystemId() call Location.getSystemId() call Location.getSystemId() call Location.getSystemId() call Location.getSystemId() : public public return public public return public public return != : - public public return != : - public public return != : public public return != : public public return public public return QName Attribute Namespace QName private private throws if != decl_stmt QName = if for = decl_stmt Namespace = call Namespace.getPrefix() call Namespace.getPrefix() call Namespace.getPrefix() call Namespace.getPrefix() call Namespace.getPrefix() call Namespace.getNamespaceURI() call Namespace.getNamespaceURI() call Namespace.getNamespaceURI() call Namespace.getNamespaceURI() call Namespace.getNamespaceURI() for = decl_stmt org.springframework.asm.Attribute = decl_stmt QName = call javax.management.Attribute.getName() call javax.management.Attribute.getName() call javax.management.Attribute.getName() call javax.management.Attribute.getName() call javax.management.Attribute.getName() call QName.getPrefix() call QName.getPrefix() call QName.getPrefix() call QName.getPrefix() call QName.getPrefix() call QName.getNamespaceURI() call QName.getNamespaceURI() call QName.getNamespaceURI() call QName.getNamespaceURI() call QName.getNamespaceURI() call QName.getNamespaceURI() call QName.getNamespaceURI() call QName.getNamespaceURI() call QName.getNamespaceURI() call QName.getNamespaceURI() call QName.getLocalPart() call QName.getLocalPart() call QName.getLocalPart() call QName.getLocalPart() call QName.getLocalPart() else decl char private private throws decl_stmt char = if != && return if && != if != if && != Namespace QName private private throws if != decl_stmt QName = if call QName.getNamespaceURI() call QName.getNamespaceURI() call QName.getNamespaceURI() call QName.getNamespaceURI() call QName.getNamespaceURI() call QName.getLocalPart() call QName.getLocalPart() call QName.getLocalPart() call QName.getLocalPart() call QName.getLocalPart() for = decl_stmt Namespace = call Namespace.getPrefix() call Namespace.getPrefix() call Namespace.getPrefix() call Namespace.getPrefix() call Namespace.getPrefix() else private private throws if != private private throws if != private private throws if != private private throws if != decl char private private throws if != decl_stmt char = decl javax private private throws if != decl_stmt org.springframework.beans.factory.parsing.Location = call decl javax.getPublicId() call decl javax.getPublicId() call decl javax.getPublicId() call decl javax.getPublicId() call decl javax.getPublicId() call decl javax.getSystemId() call decl javax.getSystemId() call decl javax.getSystemId() call decl javax.getSystemId() call decl javax.getSystemId() if != private private throws if != if != Attribute Namespace String String String AttributesImpl String private private decl_stmt AttributesImpl = new for = decl_stmt org.springframework.asm.Attribute = decl_stmt QName = call javax.management.Attribute.getName() call javax.management.Attribute.getName() call javax.management.Attribute.getName() call javax.management.Attribute.getName() call javax.management.Attribute.getName() decl_stmt java.lang.String = call String.getNamespaceURI() call String.getNamespaceURI() call String.getNamespaceURI() call String.getNamespaceURI() call String.getNamespaceURI() if == || ! = decl_stmt java.lang.String = call Attribute.getDTDType() call Attribute.getDTDType() call Attribute.getDTDType() call Attribute.getDTDType() call Attribute.getDTDType() if == = call AttributesImpl.addAttribute() call AttributesImpl.addAttribute() call AttributesImpl.addAttribute() call AttributesImpl.addAttribute() call AttributesImpl.addAttribute() call String.getLocalPart() call String.getLocalPart() call String.getLocalPart() call String.getLocalPart() call String.getLocalPart() call javax.management.Attribute.getValue() call javax.management.Attribute.getValue() call javax.management.Attribute.getValue() call javax.management.Attribute.getValue() call javax.management.Attribute.getValue() if for = decl_stmt Namespace = decl_stmt java.lang.String = call Namespace.getPrefix() call Namespace.getPrefix() call Namespace.getPrefix() call Namespace.getPrefix() call Namespace.getPrefix() decl_stmt java.lang.String = call Namespace.getNamespaceURI() call Namespace.getNamespaceURI() call Namespace.getNamespaceURI() call Namespace.getNamespaceURI() call Namespace.getNamespaceURI() decl_stmt java.lang.String if = + else = call AttributesImpl.addAttribute() call AttributesImpl.addAttribute() call AttributesImpl.addAttribute() call AttributesImpl.addAttribute() call AttributesImpl.addAttribute() return