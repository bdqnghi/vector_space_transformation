org.springframework.web.servlet.mvc.method.annotation java.util.concurrent.CompletionStage import java.util.function.Consumer import java.util.function.Function import org.springframework.core.MethodParameter import org.springframework.lang.UsesJava8 import org.springframework.web.context.request.NativeWebRequest import org.springframework.web.context.request.async.DeferredResult import org.springframework.web.context.request.async.WebAsyncUtils import org.springframework.web.method.support.AsyncHandlerMethodReturnValueHandler import org.springframework.web.method.support.ModelAndViewContainer import class annotation annotation org.springframework.web.servlet.mvc.method.annotation.CompletionStageReturnValueHandler super super implements public public return public public return != && instanceof decl DeferredResult decl CompletionStage public public throws if == return decl_stmt org.springframework.web.context.request.async.DeferredResult final final final < = new < decl_stmt CompletionStage < = < call decl CompletionStage.thenAccept() call decl CompletionStage.thenAccept() call decl CompletionStage.thenAccept() call decl CompletionStage.thenAccept() call decl CompletionStage.thenAccept() new < public public call decl DeferredResult.setResult() call decl DeferredResult.setResult() call decl DeferredResult.setResult() call decl DeferredResult.setResult() call decl DeferredResult.setResult() call decl CompletionStage.exceptionally() call decl CompletionStage.exceptionally() call decl CompletionStage.exceptionally() call decl CompletionStage.exceptionally() call decl CompletionStage.exceptionally() new < public public call decl DeferredResult.setErrorResult() call decl DeferredResult.setErrorResult() call decl DeferredResult.setErrorResult() call decl DeferredResult.setErrorResult() call decl DeferredResult.setErrorResult() return public public public public return