org.springframework.aop.aspectj.annotation java.lang.annotation.Annotation import java.lang.reflect.Constructor import java.lang.reflect.Field import java.lang.reflect.Method import java.lang.reflect.Modifier import java.util.HashMap import java.util.Map import java.util.StringTokenizer import org.apache.commons.logging.Log import org.apache.commons.logging.LogFactory import org.aspectj.lang.annotation.After import org.aspectj.lang.annotation.AfterReturning import org.aspectj.lang.annotation.AfterThrowing import org.aspectj.lang.annotation.Around import org.aspectj.lang.annotation.Aspect import org.aspectj.lang.annotation.Before import org.aspectj.lang.annotation.Pointcut import org.aspectj.lang.reflect.AjType import org.aspectj.lang.reflect.AjTypeSystem import org.aspectj.lang.reflect.PerClauseKind import org.springframework.aop.aspectj.AspectJExpressionPointcut import org.springframework.aop.framework.AopConfigException import org.springframework.core.ParameterNameDiscoverer import org.springframework.core.annotation.AnnotationUtils import org.springframework.util.StringUtils import class org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory super super implements Log String ParameterNameDiscoverer public public < return && ! private private < return != private private < for : if return return decl AjType public public < throws if != && ! throw new + + + + decl_stmt AjType < = if ! call decl AjType.isAspect() call decl AjType.isAspect() call decl AjType.isAspect() call decl AjType.isAspect() call decl AjType.isAspect() throw new if call decl AjType.getPerClause() call decl AjType.getPerClause() call decl AjType.getPerClause() call decl AjType.getPerClause() call decl AjType.getPerClause() == throw new + + if call decl AjType.getPerClause() call decl AjType.getPerClause() call decl AjType.getPerClause() call decl AjType.getPerClause() call decl AjType.getPerClause() == throw new + + AspectJExpressionPointcut protected protected < if != = decl_stmt org.springframework.aop.aspectj.AspectJExpressionPointcut = new return int private < private < if > throw new + + + decl_stmt int = - for = < ++ = + return decl AspectJAnnotation protected static < protected static < for < : decl_stmt AspectJAnnotation < = < if != return return A private static < extends extends < private static < extends extends < < decl_stmt org.springframework.expression.spel.spr10210.A = if != return new < else return private private for < : if return throw new + String Method String private private throws decl_stmt java.lang.String = for : decl_stmt com.sun.jdi.Method try = catch = if != decl_stmt java.lang.String = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) if = return public public return public public return public public return public public return public public return decl String decl AspectJAnnotation StringTokenizer public public if == return new decl_stmt AspectJAnnotation < = if == return decl_stmt java.util.StringTokenizer = new call decl AspectJAnnotation.getArgumentNames() call decl AspectJAnnotation.getArgumentNames() call decl AspectJAnnotation.getArgumentNames() call decl AspectJAnnotation.getArgumentNames() call decl AspectJAnnotation.getArgumentNames() if call java.util.StringTokenizer.countTokens() call java.util.StringTokenizer.countTokens() call java.util.StringTokenizer.countTokens() call java.util.StringTokenizer.countTokens() call java.util.StringTokenizer.countTokens() > decl_stmt java.lang.String = new call java.util.StringTokenizer.countTokens() call java.util.StringTokenizer.countTokens() call java.util.StringTokenizer.countTokens() call java.util.StringTokenizer.countTokens() call java.util.StringTokenizer.countTokens() for = < ++ = call java.util.StringTokenizer.nextToken(String) call java.util.StringTokenizer.nextToken(String) call java.util.StringTokenizer.nextToken(String) call java.util.StringTokenizer.nextToken(String) call java.util.StringTokenizer.nextToken(String) return else return public public < throw new