org.springframework.remoting.support org.springframework.aop.framework.ProxyFactory import org.springframework.aop.framework.adapter.AdvisorAdapterRegistry import org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry import org.springframework.util.ClassUtils import class org.springframework.remoting.support.RemoteExporter super super extends decl Object decl Class Object Boolean public public = public public return public public < if != && ! call decl Class.isInterface() call decl Class.isInterface() call decl Class.isInterface() call decl Class.isInterface() call decl Class.isInterface() throw new = public < public < return public public = public public = protected protected throws if == throw new Object decl Class protected protected throws decl_stmt java.lang.Class < = decl_stmt java.lang.Object = if == throw new if instanceof throw new + + + + if ! call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() throw new + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() + + + + call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() + ProxyFactory AdvisorAdapterRegistry protected protected decl_stmt org.springframework.aop.framework.ProxyFactory = new call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() call ProxyFactory.addInterface() if != : == call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() call ProxyFactory.addAdvice() new if != decl_stmt org.springframework.aop.framework.adapter.AdvisorAdapterRegistry = for = < ++ call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call ProxyFactory.addAdvisor() call org.springframework.aop.framework.adapter.AdvisorAdapterRegistry.wrap(Object) call org.springframework.aop.framework.adapter.AdvisorAdapterRegistry.wrap(Object) call org.springframework.aop.framework.adapter.AdvisorAdapterRegistry.wrap(Object) call org.springframework.aop.framework.adapter.AdvisorAdapterRegistry.wrap(Object) call org.springframework.aop.framework.adapter.AdvisorAdapterRegistry.wrap(Object) call ProxyFactory.setTarget() call ProxyFactory.setTarget() call ProxyFactory.setTarget() call ProxyFactory.setTarget() call ProxyFactory.setTarget() call ProxyFactory.setOpaque() call ProxyFactory.setOpaque() call ProxyFactory.setOpaque() call ProxyFactory.setOpaque() call ProxyFactory.setOpaque() return call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) call org.springframework.aop.framework.ProxyFactory.getProxy(TargetSource) protected protected return