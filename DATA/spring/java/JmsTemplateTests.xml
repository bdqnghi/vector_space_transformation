org.springframework.jms.core java.io.PrintWriter import java.io.StringWriter import java.util.List import javax.jms.Connection import javax.jms.ConnectionFactory import javax.jms.DeliveryMode import javax.jms.Destination import javax.jms.JMSException import javax.jms.Message import javax.jms.MessageConsumer import javax.jms.MessageProducer import javax.jms.Queue import javax.jms.Session import javax.jms.TemporaryQueue import javax.jms.TextMessage import javax.naming.Context import org.junit.Before import org.junit.Test import org.springframework.jms.InvalidClientIDException import org.springframework.jms.InvalidDestinationException import org.springframework.jms.InvalidSelectorException import org.springframework.jms.JmsException import org.springframework.jms.JmsSecurityException import org.springframework.jms.MessageEOFException import org.springframework.jms.MessageFormatException import org.springframework.jms.MessageNotReadableException import org.springframework.jms.MessageNotWriteableException import org.springframework.jms.ResourceAllocationException import org.springframework.jms.TransactionInProgressException import org.springframework.jms.TransactionRolledBackException import org.springframework.jms.UncategorizedJmsException import org.springframework.jms.connection.ConnectionFactoryUtils import org.springframework.jms.connection.SingleConnectionFactory import org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy import org.springframework.jms.support.JmsUtils import org.springframework.jms.support.converter.SimpleMessageConverter import org.springframework.jms.support.destination.JndiDestinationResolver import org.springframework.jndi.JndiTemplate import org.springframework.transaction.support.TransactionSynchronization import org.springframework.transaction.support.TransactionSynchronizationManager import static static org.junit.Assert.* import static static org.mockito.BDDMockito.* import class org.springframework.jms.core.JmsTemplateTests int ConnectionFactory int Destination Connection Session int Context public public throws = = = = = call ConnectionFactory.createConnection() call ConnectionFactory.createConnection() call ConnectionFactory.createConnection() call ConnectionFactory.createConnection() call ConnectionFactory.createConnection() call Connection.createSession() call Connection.createSession() call Connection.createSession() call Connection.createSession() call Connection.createSession() call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() call sun.tools.tree.Context.lookup(Name) call sun.tools.tree.Context.lookup(Name) call sun.tools.tree.Context.lookup(Name) call sun.tools.tree.Context.lookup(Name) call sun.tools.tree.Context.lookup(Name) JmsTemplate JndiDestinationResolver private private decl_stmt org.springframework.jms.core.JmsTemplate = new decl_stmt org.springframework.jms.support.destination.JndiDestinationResolver = new call JndiDestinationResolver.setJndiTemplate() call JndiDestinationResolver.setJndiTemplate() call JndiDestinationResolver.setJndiTemplate() call JndiDestinationResolver.setJndiTemplate() call JndiDestinationResolver.setJndiTemplate() new protected protected return call JmsTemplate.setDestinationResolver() call JmsTemplate.setDestinationResolver() call JmsTemplate.setDestinationResolver() call JmsTemplate.setDestinationResolver() call JmsTemplate.setDestinationResolver() call JmsTemplate.setSessionTransacted() call JmsTemplate.setSessionTransacted() call JmsTemplate.setSessionTransacted() call JmsTemplate.setSessionTransacted() call JmsTemplate.setSessionTransacted() return protected protected return protected protected return protected protected return protected protected return Exception String JMSException StringWriter JmsException PrintWriter public public decl_stmt JMSException = new decl_stmt Exception = new call JMSException.setLinkedException() call JMSException.setLinkedException() call JMSException.setLinkedException() call JMSException.setLinkedException() call JMSException.setLinkedException() decl_stmt org.springframework.jms.JmsException = decl_stmt StringWriter = new decl_stmt PrintWriter = new call JmsException.printStackTrace() call JmsException.printStackTrace() call JmsException.printStackTrace() call JmsException.printStackTrace() call JmsException.printStackTrace() decl_stmt java.lang.String = call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) > MessageProducer JmsTemplate public public throws decl_stmt org.springframework.jms.core.JmsTemplate = call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() decl_stmt MessageProducer = call Session.createProducer() call Session.createProducer() call Session.createProducer() call Session.createProducer() call Session.createProducer() call MessageProducer.getPriority() call MessageProducer.getPriority() call MessageProducer.getPriority() call MessageProducer.getPriority() call MessageProducer.getPriority() call org.springframework.jms.core.JmsTemplate.execute(SessionCallback,boolean) call org.springframework.jms.core.JmsTemplate.execute(SessionCallback,boolean) call org.springframework.jms.core.JmsTemplate.execute(SessionCallback,boolean) call org.springframework.jms.core.JmsTemplate.execute(SessionCallback,boolean) call org.springframework.jms.core.JmsTemplate.execute(SessionCallback,boolean) new < public public throws call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() return public public throws call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() return MessageProducer JmsTemplate public public throws decl_stmt org.springframework.jms.core.JmsTemplate = call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call org.springframework.jms.core.JmsTemplate.setMessageIdEnabled(boolean) call org.springframework.jms.core.JmsTemplate.setMessageIdEnabled(boolean) call org.springframework.jms.core.JmsTemplate.setMessageIdEnabled(boolean) call org.springframework.jms.core.JmsTemplate.setMessageIdEnabled(boolean) call org.springframework.jms.core.JmsTemplate.setMessageIdEnabled(boolean) call org.springframework.jms.core.JmsTemplate.setMessageTimestampEnabled(boolean) call org.springframework.jms.core.JmsTemplate.setMessageTimestampEnabled(boolean) call org.springframework.jms.core.JmsTemplate.setMessageTimestampEnabled(boolean) call org.springframework.jms.core.JmsTemplate.setMessageTimestampEnabled(boolean) call org.springframework.jms.core.JmsTemplate.setMessageTimestampEnabled(boolean) decl_stmt MessageProducer = call Session.createProducer() call Session.createProducer() call Session.createProducer() call Session.createProducer() call Session.createProducer() call MessageProducer.getPriority() call MessageProducer.getPriority() call MessageProducer.getPriority() call MessageProducer.getPriority() call MessageProducer.getPriority() call org.springframework.jms.core.JmsTemplate.execute(SessionCallback,boolean) call org.springframework.jms.core.JmsTemplate.execute(SessionCallback,boolean) call org.springframework.jms.core.JmsTemplate.execute(SessionCallback,boolean) call org.springframework.jms.core.JmsTemplate.execute(SessionCallback,boolean) call org.springframework.jms.core.JmsTemplate.execute(SessionCallback,boolean) new < public public throws call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() return public public throws call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() return JmsTemplate public public throws decl_stmt org.springframework.jms.core.JmsTemplate = call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call org.springframework.jms.core.JmsTemplate.execute(SessionCallback,boolean) call org.springframework.jms.core.JmsTemplate.execute(SessionCallback,boolean) call org.springframework.jms.core.JmsTemplate.execute(SessionCallback,boolean) call org.springframework.jms.core.JmsTemplate.execute(SessionCallback,boolean) call org.springframework.jms.core.JmsTemplate.execute(SessionCallback,boolean) new < public public throws call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() return public public throws call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() return TransactionSynchronization Session SingleConnectionFactory decl List JmsTemplate Connection TransactionAwareConnectionFactoryProxy public public throws decl_stmt org.springframework.jca.cci.connection.SingleConnectionFactory = new decl_stmt org.springframework.jms.core.JmsTemplate = call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() try call org.springframework.jms.core.JmsTemplate.execute(SessionCallback,boolean) call org.springframework.jms.core.JmsTemplate.execute(SessionCallback,boolean) call org.springframework.jms.core.JmsTemplate.execute(SessionCallback,boolean) call org.springframework.jms.core.JmsTemplate.execute(SessionCallback,boolean) call org.springframework.jms.core.JmsTemplate.execute(SessionCallback,boolean) new < public public throws call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() return call org.springframework.jms.core.JmsTemplate.execute(SessionCallback,boolean) call org.springframework.jms.core.JmsTemplate.execute(SessionCallback,boolean) call org.springframework.jms.core.JmsTemplate.execute(SessionCallback,boolean) call org.springframework.jms.core.JmsTemplate.execute(SessionCallback,boolean) call org.springframework.jms.core.JmsTemplate.execute(SessionCallback,boolean) new < public public throws call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() return call org.springframework.jca.cci.connection.SingleConnectionFactory.createConnection(String,String) call org.springframework.jca.cci.connection.SingleConnectionFactory.createConnection(String,String) call org.springframework.jca.cci.connection.SingleConnectionFactory.createConnection(String,String) call org.springframework.jca.cci.connection.SingleConnectionFactory.createConnection(String,String) call org.springframework.jca.cci.connection.SingleConnectionFactory.createConnection(String,String) decl_stmt org.springframework.jca.cci.connection.TransactionAwareConnectionFactoryProxy = new decl_stmt sun.rmi.transport.Connection = call org.springframework.jca.cci.connection.TransactionAwareConnectionFactoryProxy.createConnection() call org.springframework.jca.cci.connection.TransactionAwareConnectionFactoryProxy.createConnection() call org.springframework.jca.cci.connection.TransactionAwareConnectionFactoryProxy.createConnection() call org.springframework.jca.cci.connection.TransactionAwareConnectionFactoryProxy.createConnection() call org.springframework.jca.cci.connection.TransactionAwareConnectionFactoryProxy.createConnection() decl_stmt sun.security.pkcs11.Session = call Connection.createSession() call Connection.createSession() call Connection.createSession() call Connection.createSession() call Connection.createSession() call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() call sun.security.pkcs11.Session.close() call sun.security.pkcs11.Session.close() call sun.security.pkcs11.Session.close() call sun.security.pkcs11.Session.close() call sun.security.pkcs11.Session.close() call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() decl_stmt java.util.List < = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt org.springframework.transaction.support.TransactionSynchronization = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.springframework.transaction.support.TransactionSynchronization.beforeCommit(boolean) call org.springframework.transaction.support.TransactionSynchronization.beforeCommit(boolean) call org.springframework.transaction.support.TransactionSynchronization.beforeCommit(boolean) call org.springframework.transaction.support.TransactionSynchronization.beforeCommit(boolean) call org.springframework.transaction.support.TransactionSynchronization.beforeCommit(boolean) call org.springframework.transaction.support.TransactionSynchronization.beforeCompletion() call org.springframework.transaction.support.TransactionSynchronization.beforeCompletion() call org.springframework.transaction.support.TransactionSynchronization.beforeCompletion() call org.springframework.transaction.support.TransactionSynchronization.beforeCompletion() call org.springframework.transaction.support.TransactionSynchronization.beforeCompletion() call org.springframework.transaction.support.TransactionSynchronization.afterCommit() call org.springframework.transaction.support.TransactionSynchronization.afterCommit() call org.springframework.transaction.support.TransactionSynchronization.afterCommit() call org.springframework.transaction.support.TransactionSynchronization.afterCommit() call org.springframework.transaction.support.TransactionSynchronization.afterCommit() call TransactionSynchronization.afterCompletion() call TransactionSynchronization.afterCompletion() call TransactionSynchronization.afterCompletion() call TransactionSynchronization.afterCompletion() call TransactionSynchronization.afterCompletion() finally call org.springframework.jca.cci.connection.SingleConnectionFactory.destroy() call org.springframework.jca.cci.connection.SingleConnectionFactory.destroy() call org.springframework.jca.cci.connection.SingleConnectionFactory.destroy() call org.springframework.jca.cci.connection.SingleConnectionFactory.destroy() call org.springframework.jca.cci.connection.SingleConnectionFactory.destroy() if public public throws call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() return public public throws call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() call Session.getTransacted() return public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws TextMessage MessageProducer String JmsTemplate private private throws decl_stmt org.springframework.jms.core.JmsTemplate = call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() decl_stmt java.lang.String = if if call org.springframework.jms.core.JmsTemplate.setDefaultDestination(Destination) call org.springframework.jms.core.JmsTemplate.setDefaultDestination(Destination) call org.springframework.jms.core.JmsTemplate.setDefaultDestination(Destination) call org.springframework.jms.core.JmsTemplate.setDefaultDestination(Destination) call org.springframework.jms.core.JmsTemplate.setDefaultDestination(Destination) else call org.springframework.jms.core.JmsTemplate.setDefaultDestinationName(String) call org.springframework.jms.core.JmsTemplate.setDefaultDestinationName(String) call org.springframework.jms.core.JmsTemplate.setDefaultDestinationName(String) call org.springframework.jms.core.JmsTemplate.setDefaultDestinationName(String) call org.springframework.jms.core.JmsTemplate.setDefaultDestinationName(String) if call org.springframework.jms.core.JmsTemplate.setMessageIdEnabled(boolean) call org.springframework.jms.core.JmsTemplate.setMessageIdEnabled(boolean) call org.springframework.jms.core.JmsTemplate.setMessageIdEnabled(boolean) call org.springframework.jms.core.JmsTemplate.setMessageIdEnabled(boolean) call org.springframework.jms.core.JmsTemplate.setMessageIdEnabled(boolean) call org.springframework.jms.core.JmsTemplate.setMessageTimestampEnabled(boolean) call org.springframework.jms.core.JmsTemplate.setMessageTimestampEnabled(boolean) call org.springframework.jms.core.JmsTemplate.setMessageTimestampEnabled(boolean) call org.springframework.jms.core.JmsTemplate.setMessageTimestampEnabled(boolean) call org.springframework.jms.core.JmsTemplate.setMessageTimestampEnabled(boolean) decl_stmt MessageProducer = decl_stmt org.springframework.web.socket.TextMessage = call Session.createProducer() call Session.createProducer() call Session.createProducer() call Session.createProducer() call Session.createProducer() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() if ! call org.springframework.jms.core.JmsTemplate.setExplicitQosEnabled(boolean) call org.springframework.jms.core.JmsTemplate.setExplicitQosEnabled(boolean) call org.springframework.jms.core.JmsTemplate.setExplicitQosEnabled(boolean) call org.springframework.jms.core.JmsTemplate.setExplicitQosEnabled(boolean) call org.springframework.jms.core.JmsTemplate.setExplicitQosEnabled(boolean) call org.springframework.jms.core.JmsTemplate.setDeliveryMode(int) call org.springframework.jms.core.JmsTemplate.setDeliveryMode(int) call org.springframework.jms.core.JmsTemplate.setDeliveryMode(int) call org.springframework.jms.core.JmsTemplate.setDeliveryMode(int) call org.springframework.jms.core.JmsTemplate.setDeliveryMode(int) call org.springframework.jms.core.JmsTemplate.setPriority(int) call org.springframework.jms.core.JmsTemplate.setPriority(int) call org.springframework.jms.core.JmsTemplate.setPriority(int) call org.springframework.jms.core.JmsTemplate.setPriority(int) call org.springframework.jms.core.JmsTemplate.setPriority(int) call org.springframework.jms.core.JmsTemplate.setTimeToLive(long) call org.springframework.jms.core.JmsTemplate.setTimeToLive(long) call org.springframework.jms.core.JmsTemplate.setTimeToLive(long) call org.springframework.jms.core.JmsTemplate.setTimeToLive(long) call org.springframework.jms.core.JmsTemplate.setTimeToLive(long) if call org.springframework.jms.core.JmsTemplate.send(String,MessageCreator) call org.springframework.jms.core.JmsTemplate.send(String,MessageCreator) call org.springframework.jms.core.JmsTemplate.send(String,MessageCreator) call org.springframework.jms.core.JmsTemplate.send(String,MessageCreator) call org.springframework.jms.core.JmsTemplate.send(String,MessageCreator) new public public throws return call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() else if call org.springframework.jms.core.JmsTemplate.send(String,MessageCreator) call org.springframework.jms.core.JmsTemplate.send(String,MessageCreator) call org.springframework.jms.core.JmsTemplate.send(String,MessageCreator) call org.springframework.jms.core.JmsTemplate.send(String,MessageCreator) call org.springframework.jms.core.JmsTemplate.send(String,MessageCreator) new public public throws return call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() else call org.springframework.jms.core.JmsTemplate.send(String,MessageCreator) call org.springframework.jms.core.JmsTemplate.send(String,MessageCreator) call org.springframework.jms.core.JmsTemplate.send(String,MessageCreator) call org.springframework.jms.core.JmsTemplate.send(String,MessageCreator) call org.springframework.jms.core.JmsTemplate.send(String,MessageCreator) new public public throws return call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() if if if else public public throws return call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() public public throws return call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() public public throws return call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() TextMessage String MessageProducer JmsTemplate public public throws decl_stmt org.springframework.jms.core.JmsTemplate = call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call org.springframework.jms.core.JmsTemplate.setMessageConverter(MessageConverter) call org.springframework.jms.core.JmsTemplate.setMessageConverter(MessageConverter) call org.springframework.jms.core.JmsTemplate.setMessageConverter(MessageConverter) call org.springframework.jms.core.JmsTemplate.setMessageConverter(MessageConverter) call org.springframework.jms.core.JmsTemplate.setMessageConverter(MessageConverter) new decl_stmt java.lang.String = decl_stmt MessageProducer = decl_stmt org.springframework.web.socket.TextMessage = call Session.createProducer() call Session.createProducer() call Session.createProducer() call Session.createProducer() call Session.createProducer() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call org.springframework.jms.core.JmsTemplate.convertAndSend(String,Object) call org.springframework.jms.core.JmsTemplate.convertAndSend(String,Object) call org.springframework.jms.core.JmsTemplate.convertAndSend(String,Object) call org.springframework.jms.core.JmsTemplate.convertAndSend(String,Object) call org.springframework.jms.core.JmsTemplate.convertAndSend(String,Object) if public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws JmsTemplate MessageConsumer String String String TextMessage Message private private throws decl_stmt org.springframework.jms.core.JmsTemplate = call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() decl_stmt java.lang.String = if if call org.springframework.jms.core.JmsTemplate.setDefaultDestination(Destination) call org.springframework.jms.core.JmsTemplate.setDefaultDestination(Destination) call org.springframework.jms.core.JmsTemplate.setDefaultDestination(Destination) call org.springframework.jms.core.JmsTemplate.setDefaultDestination(Destination) call org.springframework.jms.core.JmsTemplate.setDefaultDestination(Destination) else call org.springframework.jms.core.JmsTemplate.setDefaultDestinationName(String) call org.springframework.jms.core.JmsTemplate.setDefaultDestinationName(String) call org.springframework.jms.core.JmsTemplate.setDefaultDestinationName(String) call org.springframework.jms.core.JmsTemplate.setDefaultDestinationName(String) call org.springframework.jms.core.JmsTemplate.setDefaultDestinationName(String) if call org.springframework.jms.core.JmsTemplate.setPubSubNoLocal(boolean) call org.springframework.jms.core.JmsTemplate.setPubSubNoLocal(boolean) call org.springframework.jms.core.JmsTemplate.setPubSubNoLocal(boolean) call org.springframework.jms.core.JmsTemplate.setPubSubNoLocal(boolean) call org.springframework.jms.core.JmsTemplate.setPubSubNoLocal(boolean) call org.springframework.jms.core.JmsTemplate.setReceiveTimeout(long) call org.springframework.jms.core.JmsTemplate.setReceiveTimeout(long) call org.springframework.jms.core.JmsTemplate.setReceiveTimeout(long) call org.springframework.jms.core.JmsTemplate.setReceiveTimeout(long) call org.springframework.jms.core.JmsTemplate.setReceiveTimeout(long) decl_stmt MessageConsumer = decl_stmt java.lang.String = call Session.createConsumer() call Session.createConsumer() call Session.createConsumer() call Session.createConsumer() call Session.createConsumer() : if ! && ! call Session.getAcknowledgeMode() call Session.getAcknowledgeMode() call Session.getAcknowledgeMode() call Session.getAcknowledgeMode() call Session.getAcknowledgeMode() : decl_stmt org.springframework.web.socket.TextMessage = if call TextMessage.getText() call TextMessage.getText() call TextMessage.getText() call TextMessage.getText() call TextMessage.getText() if == call MessageConsumer.receiveNoWait() call MessageConsumer.receiveNoWait() call MessageConsumer.receiveNoWait() call MessageConsumer.receiveNoWait() call MessageConsumer.receiveNoWait() else if == call MessageConsumer.receive() call MessageConsumer.receive() call MessageConsumer.receive() call MessageConsumer.receive() call MessageConsumer.receive() else call MessageConsumer.receive() call MessageConsumer.receive() call MessageConsumer.receive() call MessageConsumer.receive() call MessageConsumer.receive() decl_stmt org.springframework.messaging.Message = decl_stmt java.lang.String = if if = call org.springframework.jms.core.JmsTemplate.receiveSelectedAndConvert(String) call org.springframework.jms.core.JmsTemplate.receiveSelectedAndConvert(String) call org.springframework.jms.core.JmsTemplate.receiveSelectedAndConvert(String) call org.springframework.jms.core.JmsTemplate.receiveSelectedAndConvert(String) call org.springframework.jms.core.JmsTemplate.receiveSelectedAndConvert(String) : call org.springframework.jms.core.JmsTemplate.receiveAndConvert(String) call org.springframework.jms.core.JmsTemplate.receiveAndConvert(String) call org.springframework.jms.core.JmsTemplate.receiveAndConvert(String) call org.springframework.jms.core.JmsTemplate.receiveAndConvert(String) call org.springframework.jms.core.JmsTemplate.receiveAndConvert(String) else = call org.springframework.jms.core.JmsTemplate.receiveSelected(String) call org.springframework.jms.core.JmsTemplate.receiveSelected(String) call org.springframework.jms.core.JmsTemplate.receiveSelected(String) call org.springframework.jms.core.JmsTemplate.receiveSelected(String) call org.springframework.jms.core.JmsTemplate.receiveSelected(String) : call org.springframework.jms.core.JmsTemplate.receive(String) call org.springframework.jms.core.JmsTemplate.receive(String) call org.springframework.jms.core.JmsTemplate.receive(String) call org.springframework.jms.core.JmsTemplate.receive(String) call org.springframework.jms.core.JmsTemplate.receive(String) else if if = call org.springframework.jms.core.JmsTemplate.receiveSelectedAndConvert(String) call org.springframework.jms.core.JmsTemplate.receiveSelectedAndConvert(String) call org.springframework.jms.core.JmsTemplate.receiveSelectedAndConvert(String) call org.springframework.jms.core.JmsTemplate.receiveSelectedAndConvert(String) call org.springframework.jms.core.JmsTemplate.receiveSelectedAndConvert(String) : call org.springframework.jms.core.JmsTemplate.receiveAndConvert(String) call org.springframework.jms.core.JmsTemplate.receiveAndConvert(String) call org.springframework.jms.core.JmsTemplate.receiveAndConvert(String) call org.springframework.jms.core.JmsTemplate.receiveAndConvert(String) call org.springframework.jms.core.JmsTemplate.receiveAndConvert(String) else = call org.springframework.jms.core.JmsTemplate.receiveSelected(String) call org.springframework.jms.core.JmsTemplate.receiveSelected(String) call org.springframework.jms.core.JmsTemplate.receiveSelected(String) call org.springframework.jms.core.JmsTemplate.receiveSelected(String) call org.springframework.jms.core.JmsTemplate.receiveSelected(String) : call org.springframework.jms.core.JmsTemplate.receive(String) call org.springframework.jms.core.JmsTemplate.receive(String) call org.springframework.jms.core.JmsTemplate.receive(String) call org.springframework.jms.core.JmsTemplate.receive(String) call org.springframework.jms.core.JmsTemplate.receive(String) else if = call org.springframework.jms.core.JmsTemplate.receiveSelectedAndConvert(String) call org.springframework.jms.core.JmsTemplate.receiveSelectedAndConvert(String) call org.springframework.jms.core.JmsTemplate.receiveSelectedAndConvert(String) call org.springframework.jms.core.JmsTemplate.receiveSelectedAndConvert(String) call org.springframework.jms.core.JmsTemplate.receiveSelectedAndConvert(String) : call org.springframework.jms.core.JmsTemplate.receiveAndConvert(String) call org.springframework.jms.core.JmsTemplate.receiveAndConvert(String) call org.springframework.jms.core.JmsTemplate.receiveAndConvert(String) call org.springframework.jms.core.JmsTemplate.receiveAndConvert(String) call org.springframework.jms.core.JmsTemplate.receiveAndConvert(String) else = call org.springframework.jms.core.JmsTemplate.receiveSelected(String) call org.springframework.jms.core.JmsTemplate.receiveSelected(String) call org.springframework.jms.core.JmsTemplate.receiveSelected(String) call org.springframework.jms.core.JmsTemplate.receiveSelected(String) call org.springframework.jms.core.JmsTemplate.receiveSelected(String) : call org.springframework.jms.core.JmsTemplate.receive(String) call org.springframework.jms.core.JmsTemplate.receive(String) call org.springframework.jms.core.JmsTemplate.receive(String) call org.springframework.jms.core.JmsTemplate.receive(String) call org.springframework.jms.core.JmsTemplate.receive(String) if else if if ! && public public throws public public throws public public throws public public throws MessageCreator MessageConsumer Session TextMessage String MessageProducer JmsTemplate TextMessage Message TemporaryQueue private private throws decl_stmt org.springframework.jms.core.JmsTemplate = call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() decl_stmt java.lang.String = if if call org.springframework.jms.core.JmsTemplate.setDefaultDestination(Destination) call org.springframework.jms.core.JmsTemplate.setDefaultDestination(Destination) call org.springframework.jms.core.JmsTemplate.setDefaultDestination(Destination) call org.springframework.jms.core.JmsTemplate.setDefaultDestination(Destination) call org.springframework.jms.core.JmsTemplate.setDefaultDestination(Destination) else call org.springframework.jms.core.JmsTemplate.setDefaultDestinationName(String) call org.springframework.jms.core.JmsTemplate.setDefaultDestinationName(String) call org.springframework.jms.core.JmsTemplate.setDefaultDestinationName(String) call org.springframework.jms.core.JmsTemplate.setDefaultDestinationName(String) call org.springframework.jms.core.JmsTemplate.setDefaultDestinationName(String) call org.springframework.jms.core.JmsTemplate.setReceiveTimeout(long) call org.springframework.jms.core.JmsTemplate.setReceiveTimeout(long) call org.springframework.jms.core.JmsTemplate.setReceiveTimeout(long) call org.springframework.jms.core.JmsTemplate.setReceiveTimeout(long) call org.springframework.jms.core.JmsTemplate.setReceiveTimeout(long) decl_stmt sun.security.pkcs11.Session = decl_stmt TemporaryQueue = decl_stmt MessageProducer = call Session.createProducer() call Session.createProducer() call Session.createProducer() call Session.createProducer() call Session.createProducer() call Session.createTemporaryQueue() call Session.createTemporaryQueue() call Session.createTemporaryQueue() call Session.createTemporaryQueue() call Session.createTemporaryQueue() decl_stmt MessageConsumer = call Session.createConsumer() call Session.createConsumer() call Session.createConsumer() call Session.createConsumer() call Session.createConsumer() decl_stmt org.springframework.web.socket.TextMessage = decl_stmt org.springframework.jms.core.MessageCreator = call MessageCreator.createMessage() call MessageCreator.createMessage() call MessageCreator.createMessage() call MessageCreator.createMessage() call MessageCreator.createMessage() decl_stmt org.springframework.web.socket.TextMessage = if == call MessageConsumer.receiveNoWait() call MessageConsumer.receiveNoWait() call MessageConsumer.receiveNoWait() call MessageConsumer.receiveNoWait() call MessageConsumer.receiveNoWait() else if == call MessageConsumer.receive() call MessageConsumer.receive() call MessageConsumer.receive() call MessageConsumer.receive() call MessageConsumer.receive() else call MessageConsumer.receive() call MessageConsumer.receive() call MessageConsumer.receive() call MessageConsumer.receive() call MessageConsumer.receive() decl_stmt org.springframework.messaging.Message = if = call org.springframework.jms.core.JmsTemplate.sendAndReceive(Destination,MessageCreator) call org.springframework.jms.core.JmsTemplate.sendAndReceive(Destination,MessageCreator) call org.springframework.jms.core.JmsTemplate.sendAndReceive(Destination,MessageCreator) call org.springframework.jms.core.JmsTemplate.sendAndReceive(Destination,MessageCreator) call org.springframework.jms.core.JmsTemplate.sendAndReceive(Destination,MessageCreator) else if = call org.springframework.jms.core.JmsTemplate.sendAndReceive(Destination,MessageCreator) call org.springframework.jms.core.JmsTemplate.sendAndReceive(Destination,MessageCreator) call org.springframework.jms.core.JmsTemplate.sendAndReceive(Destination,MessageCreator) call org.springframework.jms.core.JmsTemplate.sendAndReceive(Destination,MessageCreator) call org.springframework.jms.core.JmsTemplate.sendAndReceive(Destination,MessageCreator) else = call org.springframework.jms.core.JmsTemplate.sendAndReceive(Destination,MessageCreator) call org.springframework.jms.core.JmsTemplate.sendAndReceive(Destination,MessageCreator) call org.springframework.jms.core.JmsTemplate.sendAndReceive(Destination,MessageCreator) call org.springframework.jms.core.JmsTemplate.sendAndReceive(Destination,MessageCreator) call org.springframework.jms.core.JmsTemplate.sendAndReceive(Destination,MessageCreator) public public throws new public public throws new public public throws new public public throws new public public throws new public public throws new public public throws new public public throws new public public throws new public public throws new public public throws new public public throws new public public throws new TextMessage String MessageProducer JmsTemplate protected protected < extends extends throws decl_stmt org.springframework.jms.core.JmsTemplate = call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call JmsTemplate.setConnectionFactory() call org.springframework.jms.core.JmsTemplate.setMessageConverter(MessageConverter) call org.springframework.jms.core.JmsTemplate.setMessageConverter(MessageConverter) call org.springframework.jms.core.JmsTemplate.setMessageConverter(MessageConverter) call org.springframework.jms.core.JmsTemplate.setMessageConverter(MessageConverter) call org.springframework.jms.core.JmsTemplate.setMessageConverter(MessageConverter) new decl_stmt java.lang.String = decl_stmt MessageProducer = decl_stmt org.springframework.web.socket.TextMessage = call Session.createProducer() call Session.createProducer() call Session.createProducer() call Session.createProducer() call Session.createProducer() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() call Session.createTextMessage() try call org.springframework.jms.core.JmsTemplate.convertAndSend(String,Object) call org.springframework.jms.core.JmsTemplate.convertAndSend(String,Object) call org.springframework.jms.core.JmsTemplate.convertAndSend(String,Object) call org.springframework.jms.core.JmsTemplate.convertAndSend(String,Object) call org.springframework.jms.core.JmsTemplate.convertAndSend(String,Object) catch