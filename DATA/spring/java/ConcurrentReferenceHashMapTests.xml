org.springframework.util java.lang.ref.WeakReference import java.util.ArrayList import java.util.Collections import java.util.Comparator import java.util.HashMap import java.util.HashSet import java.util.Iterator import java.util.LinkedList import java.util.List import java.util.Map import java.util.Set import java.util.WeakHashMap import org.junit.Ignore import org.junit.Rule import org.junit.Test import org.junit.rules.ExpectedException import org.springframework.util.ConcurrentReferenceHashMap.Entry import org.springframework.util.ConcurrentReferenceHashMap.Reference import org.springframework.util.ConcurrentReferenceHashMap.Restructure import org.springframework.util.comparator.ComparableComparator import org.springframework.util.comparator.NullSafeComparator import static static org.hamcrest.Matchers.* import static static org.junit.Assert.* import class org.springframework.util.ConcurrentReferenceHashMapTests ExpectedException decl TestWeakConcurrentCache decl Comparator decl ConcurrentReferenceHashMap public public throws decl_stmt org.springframework.util.ConcurrentReferenceHashMap < = new < call decl ConcurrentReferenceHashMap.getSegmentsSize() call decl ConcurrentReferenceHashMap.getSegmentsSize() call decl ConcurrentReferenceHashMap.getSegmentsSize() call decl ConcurrentReferenceHashMap.getSegmentsSize() call decl ConcurrentReferenceHashMap.getSegmentsSize() call decl ConcurrentReferenceHashMap.getSegment() call decl ConcurrentReferenceHashMap.getSegment() call decl ConcurrentReferenceHashMap.getSegment() call decl ConcurrentReferenceHashMap.getSegment() call decl ConcurrentReferenceHashMap.getSegment() call decl ConcurrentReferenceHashMap.getLoadFactor() call decl ConcurrentReferenceHashMap.getLoadFactor() call decl ConcurrentReferenceHashMap.getLoadFactor() call decl ConcurrentReferenceHashMap.getLoadFactor() call decl ConcurrentReferenceHashMap.getLoadFactor() decl ConcurrentReferenceHashMap public public throws decl_stmt org.springframework.util.ConcurrentReferenceHashMap < = new < call decl ConcurrentReferenceHashMap.getSegmentsSize() call decl ConcurrentReferenceHashMap.getSegmentsSize() call decl ConcurrentReferenceHashMap.getSegmentsSize() call decl ConcurrentReferenceHashMap.getSegmentsSize() call decl ConcurrentReferenceHashMap.getSegmentsSize() call decl ConcurrentReferenceHashMap.getSegment() call decl ConcurrentReferenceHashMap.getSegment() call decl ConcurrentReferenceHashMap.getSegment() call decl ConcurrentReferenceHashMap.getSegment() call decl ConcurrentReferenceHashMap.getSegment() call decl ConcurrentReferenceHashMap.getLoadFactor() call decl ConcurrentReferenceHashMap.getLoadFactor() call decl ConcurrentReferenceHashMap.getLoadFactor() call decl ConcurrentReferenceHashMap.getLoadFactor() call decl ConcurrentReferenceHashMap.getLoadFactor() decl ConcurrentReferenceHashMap public public throws decl_stmt org.springframework.util.ConcurrentReferenceHashMap < = new < call decl ConcurrentReferenceHashMap.getSegmentsSize() call decl ConcurrentReferenceHashMap.getSegmentsSize() call decl ConcurrentReferenceHashMap.getSegmentsSize() call decl ConcurrentReferenceHashMap.getSegmentsSize() call decl ConcurrentReferenceHashMap.getSegmentsSize() call decl ConcurrentReferenceHashMap.getSegment() call decl ConcurrentReferenceHashMap.getSegment() call decl ConcurrentReferenceHashMap.getSegment() call decl ConcurrentReferenceHashMap.getSegment() call decl ConcurrentReferenceHashMap.getSegment() call decl ConcurrentReferenceHashMap.getLoadFactor() call decl ConcurrentReferenceHashMap.getLoadFactor() call decl ConcurrentReferenceHashMap.getLoadFactor() call decl ConcurrentReferenceHashMap.getLoadFactor() call decl ConcurrentReferenceHashMap.getLoadFactor() decl ConcurrentReferenceHashMap public public throws decl_stmt org.springframework.util.ConcurrentReferenceHashMap < = new < call decl ConcurrentReferenceHashMap.getSegmentsSize() call decl ConcurrentReferenceHashMap.getSegmentsSize() call decl ConcurrentReferenceHashMap.getSegmentsSize() call decl ConcurrentReferenceHashMap.getSegmentsSize() call decl ConcurrentReferenceHashMap.getSegmentsSize() call decl ConcurrentReferenceHashMap.getSegment() call decl ConcurrentReferenceHashMap.getSegment() call decl ConcurrentReferenceHashMap.getSegment() call decl ConcurrentReferenceHashMap.getSegment() call decl ConcurrentReferenceHashMap.getSegment() call decl ConcurrentReferenceHashMap.getLoadFactor() call decl ConcurrentReferenceHashMap.getLoadFactor() call decl ConcurrentReferenceHashMap.getLoadFactor() call decl ConcurrentReferenceHashMap.getLoadFactor() call decl ConcurrentReferenceHashMap.getLoadFactor() decl ConcurrentReferenceHashMap public public throws decl_stmt org.springframework.util.ConcurrentReferenceHashMap < = new < call decl ConcurrentReferenceHashMap.getSegmentsSize() call decl ConcurrentReferenceHashMap.getSegmentsSize() call decl ConcurrentReferenceHashMap.getSegmentsSize() call decl ConcurrentReferenceHashMap.getSegmentsSize() call decl ConcurrentReferenceHashMap.getSegmentsSize() call decl ConcurrentReferenceHashMap.getSegment() call decl ConcurrentReferenceHashMap.getSegment() call decl ConcurrentReferenceHashMap.getSegment() call decl ConcurrentReferenceHashMap.getSegment() call decl ConcurrentReferenceHashMap.getSegment() call decl ConcurrentReferenceHashMap.getLoadFactor() call decl ConcurrentReferenceHashMap.getLoadFactor() call decl ConcurrentReferenceHashMap.getLoadFactor() call decl ConcurrentReferenceHashMap.getLoadFactor() call decl ConcurrentReferenceHashMap.getLoadFactor() public public throws new < new < - public public throws new < new < public public throws new < new < public public throws public public throws public public throws public public throws public public throws Integer public public throws decl_stmt java.lang.Integer = call java.lang.Integer.hashCode() call java.lang.Integer.hashCode() call java.lang.Integer.hashCode() call java.lang.Integer.hashCode() call java.lang.Integer.hashCode() >> & public public throws = new < public public throws = new < for = <= ++ public public throws = new < for = <= ++ public public throws = new < for = <= ++ public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws decl Map public public throws decl_stmt java.util.Map < = new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() public public throws decl Set public public throws decl_stmt java.util.Set < = new < call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl List decl List public public throws decl_stmt java.util.List < = new < decl_stmt java.util.List < = new < call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl HashMap public public throws decl_stmt HashMap < = new < call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.entrySet() call decl HashMap.entrySet() call decl HashMap.entrySet() call decl HashMap.entrySet() call decl HashMap.entrySet() decl HashMap public public throws = new < decl_stmt HashMap < = new < call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.entrySet() call decl HashMap.entrySet() call decl HashMap.entrySet() call decl HashMap.entrySet() call decl HashMap.entrySet() decl Iterator public public throws decl_stmt java.util.Iterator < < = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl Iterator public public throws decl_stmt java.util.Iterator < < = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() StopWatch StopWatch decl Map public public throws decl_stmt java.util.Map < < = new < < decl_stmt org.springframework.util.StopWatch = new < < public < public < return new < call org.springframework.util.StopWatch.prettyPrint() call org.springframework.util.StopWatch.prettyPrint() call org.springframework.util.StopWatch.prettyPrint() call org.springframework.util.StopWatch.prettyPrint() call org.springframework.util.StopWatch.prettyPrint() decl_stmt org.springframework.util.StopWatch = new < public public return call org.springframework.util.StopWatch.prettyPrint() call org.springframework.util.StopWatch.prettyPrint() call org.springframework.util.StopWatch.prettyPrint() call org.springframework.util.StopWatch.prettyPrint() call org.springframework.util.StopWatch.prettyPrint() call org.springframework.util.StopWatch.getTotalTimeSeconds() call org.springframework.util.StopWatch.getTotalTimeSeconds() call org.springframework.util.StopWatch.getTotalTimeSeconds() call org.springframework.util.StopWatch.getTotalTimeSeconds() call org.springframework.util.StopWatch.getTotalTimeSeconds() call org.springframework.util.StopWatch.getTotalTimeSeconds() call org.springframework.util.StopWatch.getTotalTimeSeconds() call org.springframework.util.StopWatch.getTotalTimeSeconds() call org.springframework.util.StopWatch.getTotalTimeSeconds() call org.springframework.util.StopWatch.getTotalTimeSeconds() / public < public < return new < public public return public public throws call decl TestWeakConcurrentCache.createReferenceManager() call decl TestWeakConcurrentCache.createReferenceManager() call decl TestWeakConcurrentCache.createReferenceManager() call decl TestWeakConcurrentCache.createReferenceManager() call decl TestWeakConcurrentCache.createReferenceManager() StopWatch decl Thread private < private < final final final < < throws decl_stmt org.springframework.util.StopWatch = new for = < ++ call decl TestWeakConcurrentCache.put() call decl TestWeakConcurrentCache.put() call decl TestWeakConcurrentCache.put() call decl TestWeakConcurrentCache.put() call decl TestWeakConcurrentCache.put() decl_stmt java.lang.Thread = new call org.springframework.util.StopWatch.start(String) call org.springframework.util.StopWatch.start(String) call org.springframework.util.StopWatch.start(String) call org.springframework.util.StopWatch.start(String) call org.springframework.util.StopWatch.start(String) for = < ++ = new + public public for = < ++ for = < ++ call decl TestWeakConcurrentCache.get() call decl TestWeakConcurrentCache.get() call decl TestWeakConcurrentCache.get() call decl TestWeakConcurrentCache.get() call decl TestWeakConcurrentCache.get() for : for : if call org.springframework.util.StopWatch.stop() call org.springframework.util.StopWatch.stop() call org.springframework.util.StopWatch.stop() call org.springframework.util.StopWatch.stop() call org.springframework.util.StopWatch.stop() return public public for = < ++ for = < ++ call decl TestWeakConcurrentCache.get() call decl TestWeakConcurrentCache.get() call decl TestWeakConcurrentCache.get() call decl TestWeakConcurrentCache.get() call decl TestWeakConcurrentCache.get() public public = protected protected if return = return == : public public return protected protected return new public < public < < < if return return new < public < public < if return return : public < public < < < if return return new < public < public < if return return : public < public < return < public < public < return public public return public < public < return public public = public public