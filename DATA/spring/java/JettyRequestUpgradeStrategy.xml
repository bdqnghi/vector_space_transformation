org.springframework.web.socket.server.jetty java.io.IOException import java.lang.reflect.Method import java.security.Principal import java.util.ArrayList import java.util.List import java.util.Map import javax.servlet.ServletContext import javax.servlet.http.HttpServletRequest import javax.servlet.http.HttpServletResponse import org.eclipse.jetty.websocket.api.UpgradeRequest import org.eclipse.jetty.websocket.api.UpgradeResponse import org.eclipse.jetty.websocket.api.WebSocketPolicy import org.eclipse.jetty.websocket.api.extensions.ExtensionConfig import org.eclipse.jetty.websocket.server.HandshakeRFC6455 import org.eclipse.jetty.websocket.server.WebSocketServerFactory import org.eclipse.jetty.websocket.servlet.ServletUpgradeRequest import org.eclipse.jetty.websocket.servlet.ServletUpgradeResponse import org.eclipse.jetty.websocket.servlet.WebSocketCreator import org.springframework.context.Lifecycle import org.springframework.core.NamedThreadLocal import org.springframework.http.server.ServerHttpRequest import org.springframework.http.server.ServerHttpResponse import org.springframework.http.server.ServletServerHttpRequest import org.springframework.http.server.ServletServerHttpResponse import org.springframework.util.Assert import org.springframework.util.ClassUtils import org.springframework.util.CollectionUtils import org.springframework.web.context.ServletContextAware import org.springframework.web.socket.WebSocketExtension import org.springframework.web.socket.WebSocketHandler import org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter import org.springframework.web.socket.adapter.jetty.JettyWebSocketSession import org.springframework.web.socket.adapter.jetty.WebSocketToJettyExtensionConfigAdapter import org.springframework.web.socket.server.HandshakeFailureException import org.springframework.web.socket.server.RequestUpgradeStrategy import class org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy super super implements Method decl ThreadLocal WebSocketServerFactory decl List boolean ServletContext public public return WebSocketHandlerContainer public public decl_stmt WebSocketHandlerContainer = call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() != call WebSocketHandlerContainer.getSelectedProtocol() call WebSocketHandlerContainer.getSelectedProtocol() call WebSocketHandlerContainer.getSelectedProtocol() call WebSocketHandlerContainer.getSelectedProtocol() call WebSocketHandlerContainer.getSelectedProtocol() call WebSocketHandlerContainer.getExtensionConfigs() call WebSocketHandlerContainer.getExtensionConfigs() call WebSocketHandlerContainer.getExtensionConfigs() call WebSocketHandlerContainer.getExtensionConfigs() call WebSocketHandlerContainer.getExtensionConfigs() return call WebSocketHandlerContainer.getHandler() call WebSocketHandlerContainer.getHandler() call WebSocketHandlerContainer.getHandler() call WebSocketHandlerContainer.getHandler() call WebSocketHandlerContainer.getHandler() public public return new public < public < if == = return decl List private < private < decl_stmt java.util.List < = new < for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new return public public = public public return public public if ! = try if != call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) else catch throw new public public if = HttpServletResponse WebSocketHandlerContainer JettyWebSocketSession HttpServletRequest JettyWebSocketHandlerAdapter public public < < throws decl_stmt HttpServletRequest = decl_stmt HttpServletResponse = decl_stmt org.springframework.web.socket.adapter.jetty.JettyWebSocketSession = new decl_stmt org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter = new decl_stmt WebSocketHandlerContainer = new try call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() catch throw new + finally call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() public public return public public return public < public < return