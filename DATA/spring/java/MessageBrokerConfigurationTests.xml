org.springframework.messaging.simp.config static static org.junit.Assert.* import static static org.mockito.Mockito.* import java.util.ArrayList import java.util.Iterator import java.util.List import java.util.Set import java.util.concurrent.ConcurrentHashMap import org.hamcrest.Matchers import org.junit.Test import org.springframework.beans.DirectFieldAccessor import org.springframework.context.ApplicationContext import org.springframework.context.annotation.AnnotationConfigApplicationContext import org.springframework.context.annotation.Bean import org.springframework.context.annotation.Configuration import org.springframework.context.support.StaticApplicationContext import org.springframework.messaging.Message import org.springframework.messaging.MessageHandler import org.springframework.messaging.converter.ByteArrayMessageConverter import org.springframework.messaging.converter.CompositeMessageConverter import org.springframework.messaging.converter.ContentTypeResolver import org.springframework.messaging.converter.DefaultContentTypeResolver import org.springframework.messaging.converter.MappingJackson2MessageConverter import org.springframework.messaging.converter.MessageConverter import org.springframework.messaging.converter.StringMessageConverter import org.springframework.messaging.handler.annotation.MessageMapping import org.springframework.messaging.handler.annotation.SendTo import org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver import org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler import org.springframework.messaging.simp.SimpMessageType import org.springframework.messaging.simp.annotation.SubscribeMapping import org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler import org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry import org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler import org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler import org.springframework.messaging.simp.stomp.StompCommand import org.springframework.messaging.simp.stomp.StompHeaderAccessor import org.springframework.messaging.simp.user.DefaultUserDestinationResolver import org.springframework.messaging.simp.user.MultiServerUserRegistry import org.springframework.messaging.simp.user.SimpUserRegistry import org.springframework.messaging.simp.user.UserDestinationMessageHandler import org.springframework.messaging.simp.user.UserDestinationResolver import org.springframework.messaging.simp.user.UserRegistryMessageHandler import org.springframework.messaging.support.AbstractSubscribableChannel import org.springframework.messaging.support.ChannelInterceptor import org.springframework.messaging.support.ChannelInterceptorAdapter import org.springframework.messaging.support.ExecutorSubscribableChannel import org.springframework.messaging.support.MessageBuilder import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor import org.springframework.stereotype.Controller import org.springframework.util.AntPathMatcher import org.springframework.util.MimeTypeUtils import org.springframework.validation.Errors import org.springframework.validation.Validator import org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean import class org.springframework.messaging.simp.config.MessageBrokerConfigurationTests ApplicationContext ApplicationContext ApplicationContext ApplicationContext TestChannel decl Set public public decl_stmt TestChannel = decl_stmt java.util.Set < = call TestChannel.getSubscribers() call TestChannel.getSubscribers() call TestChannel.getSubscribers() call TestChannel.getSubscribers() call TestChannel.getSubscribers() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() TestChannel decl Set public public decl_stmt TestChannel = decl_stmt java.util.Set < = call TestChannel.getSubscribers() call TestChannel.getSubscribers() call TestChannel.getSubscribers() call TestChannel.getSubscribers() call TestChannel.getSubscribers() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() CustomThreadPoolTaskExecutor AbstractSubscribableChannel public public decl_stmt org.springframework.messaging.support.AbstractSubscribableChannel = call AbstractSubscribableChannel.getInterceptors() call AbstractSubscribableChannel.getInterceptors() call AbstractSubscribableChannel.getInterceptors() call AbstractSubscribableChannel.getInterceptors() call AbstractSubscribableChannel.getInterceptors() decl_stmt CustomThreadPoolTaskExecutor = call CustomThreadPoolTaskExecutor.getCorePoolSize() call CustomThreadPoolTaskExecutor.getCorePoolSize() call CustomThreadPoolTaskExecutor.getCorePoolSize() call CustomThreadPoolTaskExecutor.getCorePoolSize() call CustomThreadPoolTaskExecutor.getCorePoolSize() call CustomThreadPoolTaskExecutor.getMaxPoolSize() call CustomThreadPoolTaskExecutor.getMaxPoolSize() call CustomThreadPoolTaskExecutor.getMaxPoolSize() call CustomThreadPoolTaskExecutor.getMaxPoolSize() call CustomThreadPoolTaskExecutor.getMaxPoolSize() call CustomThreadPoolTaskExecutor.getKeepAliveSeconds() call CustomThreadPoolTaskExecutor.getKeepAliveSeconds() call CustomThreadPoolTaskExecutor.getKeepAliveSeconds() call CustomThreadPoolTaskExecutor.getKeepAliveSeconds() call CustomThreadPoolTaskExecutor.getKeepAliveSeconds() StompHeaderAccessor decl Message SimpAnnotationMethodMessageHandler TestChannel public public decl_stmt TestChannel = decl_stmt org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler = decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionAttributes() call StompHeaderAccessor.setSessionAttributes() call StompHeaderAccessor.setSessionAttributes() call StompHeaderAccessor.setSessionAttributes() call StompHeaderAccessor.setSessionAttributes() new <> call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) decl_stmt org.springframework.messaging.Message < = new call SimpAnnotationMethodMessageHandler.handleMessage() call SimpAnnotationMethodMessageHandler.handleMessage() call SimpAnnotationMethodMessageHandler.handleMessage() call SimpAnnotationMethodMessageHandler.handleMessage() call SimpAnnotationMethodMessageHandler.handleMessage() = call TestChannel.messages() call TestChannel.messages() call TestChannel.messages() call TestChannel.messages() call TestChannel.messages() call TestChannel.messages() call TestChannel.messages() call TestChannel.messages() call TestChannel.messages() = call StompHeaderAccessor.getMessageType() call StompHeaderAccessor.getMessageType() call StompHeaderAccessor.getMessageType() call StompHeaderAccessor.getMessageType() call StompHeaderAccessor.getMessageType() call StompHeaderAccessor.getDestination() call StompHeaderAccessor.getDestination() call StompHeaderAccessor.getDestination() call StompHeaderAccessor.getDestination() call StompHeaderAccessor.getDestination() new call decl Message.getPayload() call decl Message.getPayload() call decl Message.getPayload() call decl Message.getPayload() call decl Message.getPayload() StompHeaderAccessor decl Message SimpleBrokerMessageHandler TestChannel public public decl_stmt TestChannel = decl_stmt org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler = decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setSubscriptionId(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) decl_stmt org.springframework.messaging.Message < = new call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call SimpleBrokerMessageHandler.handleMessage() call SimpleBrokerMessageHandler.handleMessage() call SimpleBrokerMessageHandler.handleMessage() call SimpleBrokerMessageHandler.handleMessage() call SimpleBrokerMessageHandler.handleMessage() = call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) = call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call SimpleBrokerMessageHandler.handleMessage() call SimpleBrokerMessageHandler.handleMessage() call SimpleBrokerMessageHandler.handleMessage() call SimpleBrokerMessageHandler.handleMessage() call SimpleBrokerMessageHandler.handleMessage() = call TestChannel.messages() call TestChannel.messages() call TestChannel.messages() call TestChannel.messages() call TestChannel.messages() call TestChannel.messages() call TestChannel.messages() call TestChannel.messages() call TestChannel.messages() = call StompHeaderAccessor.getMessageType() call StompHeaderAccessor.getMessageType() call StompHeaderAccessor.getMessageType() call StompHeaderAccessor.getMessageType() call StompHeaderAccessor.getMessageType() call StompHeaderAccessor.getDestination() call StompHeaderAccessor.getDestination() call StompHeaderAccessor.getDestination() call StompHeaderAccessor.getDestination() call StompHeaderAccessor.getDestination() new call decl Message.getPayload() call decl Message.getPayload() call decl Message.getPayload() call decl Message.getPayload() call decl Message.getPayload() ThreadPoolTaskExecutor AbstractSubscribableChannel public public decl_stmt org.springframework.messaging.support.AbstractSubscribableChannel = call AbstractSubscribableChannel.getInterceptors() call AbstractSubscribableChannel.getInterceptors() call AbstractSubscribableChannel.getInterceptors() call AbstractSubscribableChannel.getInterceptors() call AbstractSubscribableChannel.getInterceptors() decl_stmt org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor = call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getCorePoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getCorePoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getCorePoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getCorePoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getCorePoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getMaxPoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getMaxPoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getMaxPoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getMaxPoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getMaxPoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getKeepAliveSeconds() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getKeepAliveSeconds() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getKeepAliveSeconds() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getKeepAliveSeconds() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getKeepAliveSeconds() TestChannel decl Set public public decl_stmt TestChannel = decl_stmt java.util.Set < = call TestChannel.getSubscribers() call TestChannel.getSubscribers() call TestChannel.getSubscribers() call TestChannel.getSubscribers() call TestChannel.getSubscribers() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call TestChannel.getExecutor() call TestChannel.getExecutor() call TestChannel.getExecutor() call TestChannel.getExecutor() call TestChannel.getExecutor() TestChannel decl Set public public decl_stmt TestChannel = decl_stmt java.util.Set < = call TestChannel.getSubscribers() call TestChannel.getSubscribers() call TestChannel.getSubscribers() call TestChannel.getSubscribers() call TestChannel.getSubscribers() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() call ApplicationContext.getBean() StompHeaderAccessor decl Message SimpAnnotationMethodMessageHandler TestChannel public public decl_stmt TestChannel = decl_stmt org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler = decl_stmt org.springframework.messaging.simp.stomp.StompHeaderAccessor = call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionId() call StompHeaderAccessor.setSessionAttributes() call StompHeaderAccessor.setSessionAttributes() call StompHeaderAccessor.setSessionAttributes() call StompHeaderAccessor.setSessionAttributes() call StompHeaderAccessor.setSessionAttributes() new <> call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) call org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(String) decl_stmt org.springframework.messaging.Message < = new call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call StompHeaderAccessor.getMessageHeaders() call SimpAnnotationMethodMessageHandler.handleMessage() call SimpAnnotationMethodMessageHandler.handleMessage() call SimpAnnotationMethodMessageHandler.handleMessage() call SimpAnnotationMethodMessageHandler.handleMessage() call SimpAnnotationMethodMessageHandler.handleMessage() = call TestChannel.messages() call TestChannel.messages() call TestChannel.messages() call TestChannel.messages() call TestChannel.messages() call TestChannel.messages() call TestChannel.messages() call TestChannel.messages() call TestChannel.messages() = call StompHeaderAccessor.getMessageType() call StompHeaderAccessor.getMessageType() call StompHeaderAccessor.getMessageType() call StompHeaderAccessor.getMessageType() call StompHeaderAccessor.getMessageType() call StompHeaderAccessor.getDestination() call StompHeaderAccessor.getDestination() call StompHeaderAccessor.getDestination() call StompHeaderAccessor.getDestination() call StompHeaderAccessor.getDestination() new call decl Message.getPayload() call decl Message.getPayload() call decl Message.getPayload() call decl Message.getPayload() call decl Message.getPayload() ThreadPoolTaskExecutor AbstractSubscribableChannel public public decl_stmt org.springframework.messaging.support.AbstractSubscribableChannel = call AbstractSubscribableChannel.getInterceptors() call AbstractSubscribableChannel.getInterceptors() call AbstractSubscribableChannel.getInterceptors() call AbstractSubscribableChannel.getInterceptors() call AbstractSubscribableChannel.getInterceptors() decl_stmt org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor = call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getCorePoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getCorePoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getCorePoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getCorePoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getCorePoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getMaxPoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getMaxPoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getMaxPoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getMaxPoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getMaxPoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getKeepAliveSeconds() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getKeepAliveSeconds() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getKeepAliveSeconds() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getKeepAliveSeconds() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getKeepAliveSeconds() CompositeMessageConverter AbstractMessageBrokerConfiguration decl List ContentTypeResolver public public decl_stmt org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration = new decl_stmt org.springframework.messaging.converter.CompositeMessageConverter = call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.brokerMessageConverter() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.brokerMessageConverter() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.brokerMessageConverter() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.brokerMessageConverter() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.brokerMessageConverter() decl_stmt java.util.List < = call org.springframework.messaging.converter.CompositeMessageConverter.getConverters() call org.springframework.messaging.converter.CompositeMessageConverter.getConverters() call org.springframework.messaging.converter.CompositeMessageConverter.getConverters() call org.springframework.messaging.converter.CompositeMessageConverter.getConverters() call org.springframework.messaging.converter.CompositeMessageConverter.getConverters() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.springframework.messaging.converter.ContentTypeResolver = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() String ThreadPoolTaskExecutor public public decl_stmt java.lang.String = decl_stmt org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor = * call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getCorePoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getCorePoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getCorePoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getCorePoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getCorePoolSize() = = * call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getCorePoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getCorePoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getCorePoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getCorePoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getCorePoolSize() = = call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getCorePoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getCorePoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getCorePoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getCorePoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getCorePoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getMaxPoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getMaxPoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getMaxPoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getMaxPoolSize() call org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getMaxPoolSize() CompositeMessageConverter AbstractMessageBrokerConfiguration MessageConverter decl Iterator public public decl_stmt org.springframework.jms.support.converter.MessageConverter final final = decl_stmt org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration = new protected protected < return decl_stmt org.springframework.messaging.converter.CompositeMessageConverter = call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.brokerMessageConverter() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.brokerMessageConverter() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.brokerMessageConverter() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.brokerMessageConverter() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.brokerMessageConverter() call org.springframework.messaging.converter.CompositeMessageConverter.getConverters() call org.springframework.messaging.converter.CompositeMessageConverter.getConverters() call org.springframework.messaging.converter.CompositeMessageConverter.getConverters() call org.springframework.messaging.converter.CompositeMessageConverter.getConverters() call org.springframework.messaging.converter.CompositeMessageConverter.getConverters() decl_stmt java.util.Iterator < = call org.springframework.messaging.converter.CompositeMessageConverter.getConverters() call org.springframework.messaging.converter.CompositeMessageConverter.getConverters() call org.springframework.messaging.converter.CompositeMessageConverter.getConverters() call org.springframework.messaging.converter.CompositeMessageConverter.getConverters() call org.springframework.messaging.converter.CompositeMessageConverter.getConverters() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() protected protected < return CompositeMessageConverter AbstractMessageBrokerConfiguration MessageConverter decl Iterator public public decl_stmt org.springframework.jms.support.converter.MessageConverter final final = decl_stmt org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration = new protected protected < return decl_stmt org.springframework.messaging.converter.CompositeMessageConverter = call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.brokerMessageConverter() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.brokerMessageConverter() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.brokerMessageConverter() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.brokerMessageConverter() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.brokerMessageConverter() call org.springframework.messaging.converter.CompositeMessageConverter.getConverters() call org.springframework.messaging.converter.CompositeMessageConverter.getConverters() call org.springframework.messaging.converter.CompositeMessageConverter.getConverters() call org.springframework.messaging.converter.CompositeMessageConverter.getConverters() call org.springframework.messaging.converter.CompositeMessageConverter.getConverters() decl_stmt java.util.Iterator < = call org.springframework.messaging.converter.CompositeMessageConverter.getConverters() call org.springframework.messaging.converter.CompositeMessageConverter.getConverters() call org.springframework.messaging.converter.CompositeMessageConverter.getConverters() call org.springframework.messaging.converter.CompositeMessageConverter.getConverters() call org.springframework.messaging.converter.CompositeMessageConverter.getConverters() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() protected protected < return decl List decl List SimpAnnotationMethodMessageHandler public public throws decl_stmt org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler = decl_stmt java.util.List < = call SimpAnnotationMethodMessageHandler.getCustomArgumentResolvers() call SimpAnnotationMethodMessageHandler.getCustomArgumentResolvers() call SimpAnnotationMethodMessageHandler.getCustomArgumentResolvers() call SimpAnnotationMethodMessageHandler.getCustomArgumentResolvers() call SimpAnnotationMethodMessageHandler.getCustomArgumentResolvers() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call SimpAnnotationMethodMessageHandler.getArgumentResolvers() call SimpAnnotationMethodMessageHandler.getArgumentResolvers() call SimpAnnotationMethodMessageHandler.getArgumentResolvers() call SimpAnnotationMethodMessageHandler.getArgumentResolvers() call SimpAnnotationMethodMessageHandler.getArgumentResolvers() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt java.util.List < = call SimpAnnotationMethodMessageHandler.getCustomReturnValueHandlers() call SimpAnnotationMethodMessageHandler.getCustomReturnValueHandlers() call SimpAnnotationMethodMessageHandler.getCustomReturnValueHandlers() call SimpAnnotationMethodMessageHandler.getCustomReturnValueHandlers() call SimpAnnotationMethodMessageHandler.getCustomReturnValueHandlers() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call SimpAnnotationMethodMessageHandler.getReturnValueHandlers() call SimpAnnotationMethodMessageHandler.getReturnValueHandlers() call SimpAnnotationMethodMessageHandler.getReturnValueHandlers() call SimpAnnotationMethodMessageHandler.getReturnValueHandlers() call SimpAnnotationMethodMessageHandler.getReturnValueHandlers() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() AbstractMessageBrokerConfiguration public public decl_stmt org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration = new call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.setApplicationContext(ApplicationContext) call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.setApplicationContext(ApplicationContext) call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.setApplicationContext(ApplicationContext) call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.setApplicationContext(ApplicationContext) call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.setApplicationContext(ApplicationContext) new call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpValidator() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpValidator() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpValidator() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpValidator() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpValidator() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpValidator() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpValidator() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpValidator() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpValidator() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpValidator() Validator AbstractMessageBrokerConfiguration public public decl_stmt org.springframework.validation.Validator final final = decl_stmt org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration = new public public return call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpValidator() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpValidator() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpValidator() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpValidator() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpValidator() public public return StaticApplicationContext AbstractMessageBrokerConfiguration public public decl_stmt org.springframework.context.support.StaticApplicationContext = new call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) call org.springframework.context.support.StaticApplicationContext.registerSingleton(String,Class,MutablePropertyValues) decl_stmt org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration = new call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.setApplicationContext(ApplicationContext) call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.setApplicationContext(ApplicationContext) call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.setApplicationContext(ApplicationContext) call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.setApplicationContext(ApplicationContext) call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.setApplicationContext(ApplicationContext) call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpValidator() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpValidator() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpValidator() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpValidator() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpValidator() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpValidator() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpValidator() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpValidator() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpValidator() call org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpValidator() SimpAnnotationMethodMessageHandler public public decl_stmt org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler = call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.getValidator() call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.getValidator() call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.getValidator() call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.getValidator() call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.getValidator() SimpAnnotationMethodMessageHandler SimpleBrokerMessageHandler DefaultUserDestinationResolver DefaultSubscriptionRegistry public public decl_stmt org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler = decl_stmt org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry = call org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.getSubscriptionRegistry() call org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.getSubscriptionRegistry() call org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.getSubscriptionRegistry() call org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.getSubscriptionRegistry() call org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.getSubscriptionRegistry() call org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.getPathMatcher() call org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.getPathMatcher() call org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.getPathMatcher() call org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.getPathMatcher() call org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.getPathMatcher() decl_stmt org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler = call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.getPathMatcher() call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.getPathMatcher() call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.getPathMatcher() call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.getPathMatcher() call org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.getPathMatcher() decl_stmt org.springframework.messaging.simp.user.DefaultUserDestinationResolver = new SimpUserRegistry StompBrokerRelayMessageHandler UserDestinationMessageHandler UserRegistryMessageHandler public public throws decl_stmt org.springframework.messaging.simp.user.SimpUserRegistry = call SimpUserRegistry.getClass() call SimpUserRegistry.getClass() call SimpUserRegistry.getClass() call SimpUserRegistry.getClass() call SimpUserRegistry.getClass() decl_stmt org.springframework.messaging.simp.user.UserDestinationMessageHandler = call org.springframework.messaging.simp.user.UserDestinationMessageHandler.getBroadcastDestination() call org.springframework.messaging.simp.user.UserDestinationMessageHandler.getBroadcastDestination() call org.springframework.messaging.simp.user.UserDestinationMessageHandler.getBroadcastDestination() call org.springframework.messaging.simp.user.UserDestinationMessageHandler.getBroadcastDestination() call org.springframework.messaging.simp.user.UserDestinationMessageHandler.getBroadcastDestination() decl_stmt org.springframework.messaging.simp.user.UserRegistryMessageHandler = call org.springframework.messaging.simp.user.UserRegistryMessageHandler.getBroadcastDestination() call org.springframework.messaging.simp.user.UserRegistryMessageHandler.getBroadcastDestination() call org.springframework.messaging.simp.user.UserRegistryMessageHandler.getBroadcastDestination() call org.springframework.messaging.simp.user.UserRegistryMessageHandler.getBroadcastDestination() call org.springframework.messaging.simp.user.UserRegistryMessageHandler.getBroadcastDestination() decl_stmt org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler = call org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getSystemSubscriptions() call org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getSystemSubscriptions() call org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getSystemSubscriptions() call org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getSystemSubscriptions() call org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getSystemSubscriptions() call org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getSystemSubscriptions() call org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getSystemSubscriptions() call org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getSystemSubscriptions() call org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getSystemSubscriptions() call org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getSystemSubscriptions() call org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getSystemSubscriptions() call org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getSystemSubscriptions() call org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getSystemSubscriptions() call org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getSystemSubscriptions() call org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getSystemSubscriptions() call org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getSystemSubscriptions() call org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getSystemSubscriptions() call org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getSystemSubscriptions() call org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getSystemSubscriptions() call org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getSystemSubscriptions() UserDestinationMessageHandler MessageHandler SimpUserRegistry String public public throws decl_stmt org.springframework.messaging.simp.user.SimpUserRegistry = call SimpUserRegistry.getClass() call SimpUserRegistry.getClass() call SimpUserRegistry.getClass() call SimpUserRegistry.getClass() call SimpUserRegistry.getClass() decl_stmt org.springframework.messaging.simp.user.UserDestinationMessageHandler = call org.springframework.messaging.simp.user.UserDestinationMessageHandler.getBroadcastDestination() call org.springframework.messaging.simp.user.UserDestinationMessageHandler.getBroadcastDestination() call org.springframework.messaging.simp.user.UserDestinationMessageHandler.getBroadcastDestination() call org.springframework.messaging.simp.user.UserDestinationMessageHandler.getBroadcastDestination() call org.springframework.messaging.simp.user.UserDestinationMessageHandler.getBroadcastDestination() decl_stmt java.lang.String = decl_stmt org.springframework.messaging.MessageHandler = call MessageHandler.getClass() call MessageHandler.getClass() call MessageHandler.getClass() call MessageHandler.getClass() call MessageHandler.getClass() public public return public public return protected protected return public public return new public public return new public public return new public public return new public public protected protected new protected protected protected protected < protected protected < protected protected new public public < return public public < return public public