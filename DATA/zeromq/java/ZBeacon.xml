org.zeromq java.io.IOException import java.net.DatagramSocket import java.net.InetAddress import java.net.InetSocketAddress import java.net.SocketAddress import java.net.UnknownHostException import java.nio.ByteBuffer import java.nio.channels.ClosedChannelException import java.nio.channels.DatagramChannel import java.util.Arrays import class org.zeromq.ZBeacon String BroadcastServer InetAddress long decl byte Listener decl byte long BroadcastClient int public public call BroadcastClient.setUncaughtExceptionHandler() call BroadcastClient.setUncaughtExceptionHandler() call BroadcastClient.setUncaughtExceptionHandler() call BroadcastClient.setUncaughtExceptionHandler() call BroadcastClient.setUncaughtExceptionHandler() call BroadcastServer.setUncaughtExceptionHandler() call BroadcastServer.setUncaughtExceptionHandler() call BroadcastServer.setUncaughtExceptionHandler() call BroadcastServer.setUncaughtExceptionHandler() call BroadcastServer.setUncaughtExceptionHandler() public public if != call BroadcastServer.start() call BroadcastServer.start() call BroadcastServer.start() call BroadcastServer.start() call BroadcastServer.start() call BroadcastClient.start() call BroadcastClient.start() call BroadcastClient.start() call BroadcastClient.start() call BroadcastClient.start() public public throws if != call BroadcastClient.interrupt() call BroadcastClient.interrupt() call BroadcastClient.interrupt() call BroadcastClient.interrupt() call BroadcastClient.interrupt() call BroadcastClient.join() call BroadcastClient.join() call BroadcastClient.join() call BroadcastClient.join() call BroadcastClient.join() if != call BroadcastServer.interrupt() call BroadcastServer.interrupt() call BroadcastServer.interrupt() call BroadcastServer.interrupt() call BroadcastServer.interrupt() call BroadcastServer.join() call BroadcastServer.join() call BroadcastServer.join() call BroadcastServer.join() call BroadcastServer.join() public public = public public return public public = public public return public public try = while ! try catch break catch throw new catch throw new finally try catch throw new ByteBuffer int SocketAddress InetAddress int public public decl_stmt ByteBuffer = decl_stmt SocketAddress decl_stmt int while ! call ByteBuffer.clear() call ByteBuffer.clear() call ByteBuffer.clear() call ByteBuffer.clear() call ByteBuffer.clear() try decl_stmt int = call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() = if == continue decl_stmt java.net.InetAddress = if && call java.net.InetAddress.getHostAddress() call java.net.InetAddress.getHostAddress() call java.net.InetAddress.getHostAddress() call java.net.InetAddress.getHostAddress() call java.net.InetAddress.getHostAddress() || call java.net.InetAddress.isAnyLocalAddress() call java.net.InetAddress.isAnyLocalAddress() call java.net.InetAddress.isAnyLocalAddress() call java.net.InetAddress.isAnyLocalAddress() call java.net.InetAddress.isAnyLocalAddress() || call java.net.InetAddress.isLoopbackAddress() call java.net.InetAddress.isLoopbackAddress() call java.net.InetAddress.isLoopbackAddress() call java.net.InetAddress.isLoopbackAddress() call java.net.InetAddress.isLoopbackAddress() continue = - call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() catch break catch throw new decl byte private private if < return decl_stmt byte = for = < ++ if != return call Listener.onBeacon() call Listener.onBeacon() call Listener.onBeacon() call Listener.onBeacon() call Listener.onBeacon() public public return public public =