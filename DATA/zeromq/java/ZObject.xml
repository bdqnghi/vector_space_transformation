zmq class zmq.ZObject int Ctx protected protected return protected protected return protected protected switch case break case break case break case break case break case break case break case break case break case break case break case break case break case break case break default: throw new protected protected return call zmq.Ctx.registerEndpoint(String,Endpoint) call zmq.Ctx.registerEndpoint(String,Endpoint) call zmq.Ctx.registerEndpoint(String,Endpoint) call zmq.Ctx.registerEndpoint(String,Endpoint) call zmq.Ctx.registerEndpoint(String,Endpoint) protected protected call zmq.Ctx.unregisterEndpoints(SocketBase) call zmq.Ctx.unregisterEndpoints(SocketBase) call zmq.Ctx.unregisterEndpoints(SocketBase) call zmq.Ctx.unregisterEndpoints(SocketBase) call zmq.Ctx.unregisterEndpoints(SocketBase) protected protected return call zmq.Ctx.findEndpoint(String) call zmq.Ctx.findEndpoint(String) call zmq.Ctx.findEndpoint(String) call zmq.Ctx.findEndpoint(String) call zmq.Ctx.findEndpoint(String) protected protected call zmq.Ctx.destroySocket(SocketBase) call zmq.Ctx.destroySocket(SocketBase) call zmq.Ctx.destroySocket(SocketBase) call zmq.Ctx.destroySocket(SocketBase) call zmq.Ctx.destroySocket(SocketBase) protected protected return call zmq.Ctx.chooseIoThread(long) call zmq.Ctx.chooseIoThread(long) call zmq.Ctx.chooseIoThread(long) call zmq.Ctx.chooseIoThread(long) call zmq.Ctx.chooseIoThread(long) Command protected protected decl_stmt zmq.Command = new call zmq.Ctx.sendCommand(int,Command) call zmq.Ctx.sendCommand(int,Command) call zmq.Ctx.sendCommand(int,Command) call zmq.Ctx.sendCommand(int,Command) call zmq.Ctx.sendCommand(int,Command) protected protected Command protected protected if decl_stmt zmq.Command = new Command protected protected decl_stmt zmq.Command = new protected protected Command protected protected if decl_stmt zmq.Command = new protected protected Command protected protected if decl_stmt zmq.Command = new Command protected protected decl_stmt zmq.Command = new Command protected protected decl_stmt zmq.Command = new Command protected protected decl_stmt zmq.Command = new Command protected protected decl_stmt zmq.Command = new Command protected protected decl_stmt zmq.Command = new Command protected protected decl_stmt zmq.Command = new Command protected protected decl_stmt zmq.Command = new Command protected protected decl_stmt zmq.Command = new Command protected protected decl_stmt zmq.Command = new call Ctx.getReaper() call Ctx.getReaper() call Ctx.getReaper() call Ctx.getReaper() call Ctx.getReaper() Command protected protected decl_stmt zmq.Command = new call Ctx.getReaper() call Ctx.getReaper() call Ctx.getReaper() call Ctx.getReaper() call Ctx.getReaper() Command protected protected decl_stmt zmq.Command = new call zmq.Ctx.sendCommand(int,Command) call zmq.Ctx.sendCommand(int,Command) call zmq.Ctx.sendCommand(int,Command) call zmq.Ctx.sendCommand(int,Command) call zmq.Ctx.sendCommand(int,Command) protected protected throw new protected protected throw new protected protected throw new protected protected throw new protected protected throw new protected protected throw new protected protected throw new protected protected throw new protected protected throw new protected protected throw new protected protected throw new protected protected throw new protected protected throw new protected protected throw new protected protected throw new protected protected throw new private private call zmq.Ctx.sendCommand(int,Command) call zmq.Ctx.sendCommand(int,Command) call zmq.Ctx.sendCommand(int,Command) call zmq.Ctx.sendCommand(int,Command) call zmq.Ctx.sendCommand(int,Command)