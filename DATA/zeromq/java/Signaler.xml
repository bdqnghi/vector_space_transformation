zmq java.io.Closeable import java.io.IOException import java.nio.ByteBuffer import java.nio.channels.Pipe import java.nio.channels.SelectableChannel import java.nio.channels.SelectionKey import java.nio.channels.Selector import java.util.concurrent.atomic.AtomicInteger import class zmq.Signaler super super implements decl SourceChannel decl SinkChannel Selector decl Pipe decl Pipe IOException public public throws decl_stmt IOException = try call decl SinkChannel.close() call decl SinkChannel.close() call decl SinkChannel.close() call decl SinkChannel.close() call decl SinkChannel.close() catch = try call decl Pipe.close() call decl Pipe.close() call decl Pipe.close() call decl Pipe.close() call decl Pipe.close() catch = try call decl Pipe.close() call decl Pipe.close() call decl Pipe.close() call decl Pipe.close() call decl Pipe.close() catch = if != throw public public return ByteBuffer int public public decl_stmt int = decl_stmt ByteBuffer = while try = call decl Pipe.write() call decl Pipe.write() call decl Pipe.write() call decl Pipe.write() call decl Pipe.write() catch throw new if == continue assert == call decl SourceChannel.incrementAndGet() call decl SourceChannel.incrementAndGet() call decl SourceChannel.incrementAndGet() call decl SourceChannel.incrementAndGet() call decl SourceChannel.incrementAndGet() break int public public decl_stmt int = try if == return < call decl SourceChannel.get() call decl SourceChannel.get() call decl SourceChannel.get() call decl SourceChannel.get() call decl SourceChannel.get() else if < = call decl Pipe.select() call decl Pipe.select() call decl Pipe.select() call decl Pipe.select() call decl Pipe.select() else = call decl Pipe.select() call decl Pipe.select() call decl Pipe.select() call decl Pipe.select() call decl Pipe.select() catch throw new if == return call decl Pipe.selectedKeys() call decl Pipe.selectedKeys() call decl Pipe.selectedKeys() call decl Pipe.selectedKeys() call decl Pipe.selectedKeys() return ByteBuffer int public public decl_stmt int = try decl_stmt ByteBuffer = = call decl SinkChannel.read() call decl SinkChannel.read() call decl SinkChannel.read() call decl SinkChannel.read() call decl SinkChannel.read() assert == catch throw new ++