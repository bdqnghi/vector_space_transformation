zmq java.io.IOException import java.nio.channels.SelectableChannel import java.util.ArrayList import java.util.Iterator import java.util.List import java.util.Map import java.util.Map.Entry import class zmq.SocketBase super super extends super implements SocketBase int SelectableChannel boolean long decl List decl Map int Mailbox boolean int decl ValueReference decl Map Poller boolean public public return == SocketBase public static public static decl_stmt zmq.SocketBase = switch case = new break case = new break case = new break case = new break case = new break case = new break case = new break case = new break case = new break case = new break case = new break default: throw new + return public public try call zmq.Mailbox.close() call zmq.Mailbox.close() call zmq.Mailbox.close() call zmq.Mailbox.close() call zmq.Mailbox.close() catch assert public public return public public private private if ! && ! && ! throw new if || && != && != && != && != throw new + + private private private private call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if public public if throw new if return int boolean public public if != && throw new if == return : if == decl_stmt boolean = if ! && call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() == return - assert decl_stmt int = if |= if |= return return int boolean public public if throw new if == return : if == return call zmq.Mailbox.getFd() call zmq.Mailbox.getFd() call zmq.Mailbox.getFd() call zmq.Mailbox.getFd() call zmq.Mailbox.getFd() if == decl_stmt boolean = if ! && call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() == return - assert decl_stmt int = if |= if |= return return decl Ctx String String SimpleURI int boolean IpcListener boolean public public final final if throw new decl_stmt boolean = if ! return decl_stmt SimpleURI = decl_stmt java.lang.String = call SimpleURI.getProtocol() call SimpleURI.getProtocol() call SimpleURI.getProtocol() call SimpleURI.getProtocol() call SimpleURI.getProtocol() decl_stmt java.lang.String = call SimpleURI.getAddress() call SimpleURI.getAddress() call SimpleURI.getAddress() call SimpleURI.getAddress() call SimpleURI.getAddress() if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) decl_stmt sun.rmi.transport.Endpoint = new decl_stmt boolean = if = else call decl ValueReference.set() call decl ValueReference.set() call decl ValueReference.set() call decl ValueReference.set() call decl ValueReference.set() return if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return decl_stmt zmq.IOThread = if == throw new if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) decl_stmt zmq.TcpListener = new decl_stmt int = call int.setAddress() call int.setAddress() call int.setAddress() call int.setAddress() call int.setAddress() if != call int.destroy() call int.destroy() call int.destroy() call int.destroy() call int.destroy() call decl ValueReference.set() call decl ValueReference.set() call decl ValueReference.set() call decl ValueReference.set() call decl ValueReference.set() return = call int.getAddress() call int.getAddress() call int.getAddress() call int.getAddress() call int.getAddress() return if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) decl_stmt zmq.IpcListener = new decl_stmt int = call int.setAddress() call int.setAddress() call int.setAddress() call int.setAddress() call int.setAddress() if != call int.destroy() call int.destroy() call int.destroy() call int.destroy() call int.destroy() call decl ValueReference.set() call decl ValueReference.set() call decl ValueReference.set() call decl ValueReference.set() call decl ValueReference.set() return = call int.getAddress() call int.getAddress() call int.getAddress() call int.getAddress() call int.getAddress() return throw new IOThread int String decl Endpoint decl ZObject decl Pipe SimpleURI SessionBase boolean Msg Address boolean String decl Ctx boolean boolean boolean decl int public public if throw new decl_stmt boolean = if ! return decl_stmt SimpleURI = decl_stmt java.lang.String = call SimpleURI.getProtocol() call SimpleURI.getProtocol() call SimpleURI.getProtocol() call SimpleURI.getProtocol() call SimpleURI.getProtocol() decl_stmt java.lang.String = call SimpleURI.getAddress() call SimpleURI.getAddress() call SimpleURI.getAddress() call SimpleURI.getAddress() call SimpleURI.getAddress() if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) decl_stmt sun.rmi.transport.Endpoint = if == return decl_stmt int = if != && != = + decl_stmt int = if != && != = + decl_stmt zmq.ZObject = decl_stmt zmq.Pipe = decl_stmt int = decl_stmt boolean = if decl_stmt zmq.Msg = new call boolean.put() call boolean.put() call boolean.put() call boolean.put() call boolean.put() call boolean.setFlags() call boolean.setFlags() call boolean.setFlags() call boolean.setFlags() call boolean.setFlags() decl_stmt boolean = assert if decl_stmt zmq.Msg = new call boolean.put() call boolean.put() call boolean.put() call boolean.put() call boolean.put() call boolean.setFlags() call boolean.setFlags() call boolean.setFlags() call boolean.setFlags() call boolean.setFlags() decl_stmt boolean = assert = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return decl_stmt zmq.IOThread = if == throw new decl_stmt boolean = != decl_stmt zmq.Address = new call boolean.resolve() call boolean.resolve() call boolean.resolve() call boolean.resolve() call boolean.resolve() decl_stmt zmq.SessionBase = assert != decl_stmt boolean = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) = if != || decl_stmt zmq.ZObject = decl_stmt zmq.Pipe = decl_stmt int = decl_stmt boolean = call Address.attachPipe() call Address.attachPipe() call Address.attachPipe() call Address.attachPipe() call Address.attachPipe() = call boolean.toString() call boolean.toString() call boolean.toString() call boolean.toString() call boolean.toString() return private private call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl Iterator decl Entry String SimpleURI boolean public public if throw new if == throw new decl_stmt boolean = if ! return decl_stmt SimpleURI = decl_stmt java.lang.String = call SimpleURI.getProtocol() call SimpleURI.getProtocol() call SimpleURI.getProtocol() call SimpleURI.getProtocol() call SimpleURI.getProtocol() if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() return decl_stmt java.util.Iterator < < = call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() return if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() return decl_stmt java.util.Iterator < < = call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt Entry < = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if ! call decl Entry.getKey() call decl Entry.getKey() call decl Entry.getKey() call decl Entry.getKey() call decl Entry.getKey() continue call decl Entry.getValue() call decl Entry.getValue() call decl Entry.getValue() call decl Entry.getValue() call decl Entry.getValue() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() return long boolean int boolean public public if call decl ValueReference.set() call decl ValueReference.set() call decl ValueReference.set() call decl ValueReference.set() call decl ValueReference.set() return if == throw new decl_stmt boolean = if ! return if & > decl_stmt boolean = if return if call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() != return if & > || == return decl_stmt int = decl_stmt long = < : + while if ! return = if break if call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() != return if > = - if <= call decl ValueReference.set() call decl ValueReference.set() call decl ValueReference.set() call decl ValueReference.set() call decl ValueReference.set() return return Msg long boolean int public public if call decl ValueReference.set() call decl ValueReference.set() call decl ValueReference.set() call decl ValueReference.set() call decl ValueReference.set() return if ++ == if ! return = decl_stmt zmq.Msg = if == && call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() != return if != return if & > || == if ! return = = if == return return decl_stmt int = decl_stmt long = < : + decl_stmt boolean = != while if ! : return = if != = break if call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() != return = if > = - if <= call decl ValueReference.set() call decl ValueReference.set() call decl ValueReference.set() call decl ValueReference.set() call decl ValueReference.set() return return public public = return return public public = = call zmq.Mailbox.getFd() call zmq.Mailbox.getFd() call zmq.Mailbox.getFd() call zmq.Mailbox.getFd() call zmq.Mailbox.getFd() Command long private private decl_stmt zmq.Command if != = call zmq.Mailbox.recv(long) call zmq.Mailbox.recv(long) call zmq.Mailbox.recv(long) call zmq.Mailbox.recv(long) call zmq.Mailbox.recv(long) else decl_stmt long = if != && if >= && - <= return = = call zmq.Mailbox.recv(long) call zmq.Mailbox.recv(long) call zmq.Mailbox.recv(long) call zmq.Mailbox.recv(long) call zmq.Mailbox.recv(long) while if == break call Command.destination() call Command.destination() call Command.destination() call Command.destination() call Command.destination() = call zmq.Mailbox.recv(long) call zmq.Mailbox.recv(long) call zmq.Mailbox.recv(long) call zmq.Mailbox.recv(long) call zmq.Mailbox.recv(long) if call decl ValueReference.set() call decl ValueReference.set() call decl ValueReference.set() call decl ValueReference.set() call decl ValueReference.set() return return protected protected = protected protected protected protected for = != call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() protected protected = protected protected return protected protected return protected protected throw new protected protected return protected protected throw new protected protected throw new protected protected throw new protected protected throw new public public try catch public public throw new public public throw new public public throw new public public throw new private private if call zmq.Poller.removeHandle(SelectableChannel) call zmq.Poller.removeHandle(SelectableChannel) call zmq.Poller.removeHandle(SelectableChannel) call zmq.Poller.removeHandle(SelectableChannel) call zmq.Poller.removeHandle(SelectableChannel) public public public public public public if == else decl Iterator public public decl_stmt java.util.Iterator < < = call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() if call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() == call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() break call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() if private private if & > assert = int String SimpleURI boolean public public final final decl_stmt boolean if throw new if == return decl_stmt SimpleURI = decl_stmt java.lang.String = call SimpleURI.getProtocol() call SimpleURI.getProtocol() call SimpleURI.getProtocol() call SimpleURI.getProtocol() call SimpleURI.getProtocol() if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) throw new = = if == return decl_stmt int = try call zmq.SocketBase.setSocketOpt(int,Object) call zmq.SocketBase.setSocketOpt(int,Object) call zmq.SocketBase.setSocketOpt(int,Object) call zmq.SocketBase.setSocketOpt(int,Object) call zmq.SocketBase.setSocketOpt(int,Object) catch throw = call zmq.SocketBase.bind(String) call zmq.SocketBase.bind(String) call zmq.SocketBase.bind(String) call zmq.SocketBase.bind(String) call zmq.SocketBase.bind(String) if ! return public public if & == return new public public if & == return new public public if & == return new public public if & == return new public public if & == return new public public if & == return new public public if & == return new public public if & == return new public public if & == return new public public if & == return new protected protected if == return protected protected if != if & != new call zmq.SocketBase.close() call zmq.SocketBase.close() call zmq.SocketBase.close() call zmq.SocketBase.close() call zmq.SocketBase.close() = = public public return + + + public public return call zmq.Mailbox.getFd() call zmq.Mailbox.getFd() call zmq.Mailbox.getFd() call zmq.Mailbox.getFd() call zmq.Mailbox.getFd() public public switch case return case return case return case return case return case return case return case return case return default: return public public return call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() String int String public static public static decl_stmt int = if < throw new + decl_stmt java.lang.String = decl_stmt java.lang.String = + if call java.lang.String.isEmpty() call java.lang.String.isEmpty() call java.lang.String.isEmpty() call java.lang.String.isEmpty() call java.lang.String.isEmpty() || call java.lang.String.isEmpty() call java.lang.String.isEmpty() call java.lang.String.isEmpty() call java.lang.String.isEmpty() call java.lang.String.isEmpty() throw new + return new public public return public public return