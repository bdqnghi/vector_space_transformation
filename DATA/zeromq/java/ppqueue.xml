guide java.util.ArrayList import java.util.Iterator import org.zeromq.ZContext import org.zeromq.ZFrame import org.zeromq.ZMQ import org.zeromq.ZMQ.PollItem import org.zeromq.ZMQ.Socket import org.zeromq.ZMsg import class guide.ppqueue String int int String Worker decl Iterator protected protected < decl_stmt java.util.Iterator < = while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt sun.tools.jconsole.Worker = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() break ZFrame Worker protected static protected static < decl_stmt sun.tools.jconsole.Worker = assert != decl_stmt org.zeromq.ZFrame = return Worker decl Iterator protected static protected static < decl_stmt java.util.Iterator < = while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt sun.tools.jconsole.Worker = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if < break call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() Socket Worker decl ArrayList ZFrame ZContext String PollItem int ZMsg long ZFrame Socket public static public static decl_stmt org.zeromq.ZContext = new decl_stmt java.net.Socket = call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) decl_stmt java.net.Socket = call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) decl_stmt java.util.ArrayList < = new < decl_stmt long = + while decl_stmt zmq.PollItem = new new decl_stmt int = call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() > : if == - break if decl_stmt org.zeromq.ZMsg = if == break decl_stmt org.zeromq.ZFrame = call org.zeromq.ZMsg.unwrap() call org.zeromq.ZMsg.unwrap() call org.zeromq.ZMsg.unwrap() call org.zeromq.ZMsg.unwrap() call org.zeromq.ZMsg.unwrap() decl_stmt sun.tools.jconsole.Worker = new call Worker.ready() call Worker.ready() call Worker.ready() call Worker.ready() call Worker.ready() if call org.zeromq.ZMsg.size() call org.zeromq.ZMsg.size() call org.zeromq.ZMsg.size() call org.zeromq.ZMsg.size() call org.zeromq.ZMsg.size() == decl_stmt org.zeromq.ZFrame = call org.zeromq.ZMsg.getFirst() call org.zeromq.ZMsg.getFirst() call org.zeromq.ZMsg.getFirst() call org.zeromq.ZMsg.getFirst() call org.zeromq.ZMsg.getFirst() decl_stmt java.lang.String = new call org.zeromq.ZFrame.getData() call org.zeromq.ZFrame.getData() call org.zeromq.ZFrame.getData() call org.zeromq.ZFrame.getData() call org.zeromq.ZFrame.getData() if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) && ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call org.zeromq.ZMsg.dump(Appendable) call org.zeromq.ZMsg.dump(Appendable) call org.zeromq.ZMsg.dump(Appendable) call org.zeromq.ZMsg.dump(Appendable) call org.zeromq.ZMsg.dump(Appendable) call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() else call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) if decl_stmt org.zeromq.ZMsg = if == break call org.zeromq.ZMsg.push(ZFrame) call org.zeromq.ZMsg.push(ZFrame) call org.zeromq.ZMsg.push(ZFrame) call org.zeromq.ZMsg.push(ZFrame) call org.zeromq.ZMsg.push(ZFrame) call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) if >= for : call Worker.address() call Worker.address() call Worker.address() call Worker.address() call Worker.address() call Worker.address() call Worker.address() call Worker.address() call Worker.address() + decl_stmt org.zeromq.ZFrame = new call org.zeromq.ZFrame.send(Socket,int) call org.zeromq.ZFrame.send(Socket,int) call org.zeromq.ZFrame.send(Socket,int) call org.zeromq.ZFrame.send(Socket,int) call org.zeromq.ZFrame.send(Socket,int) = + while call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() > decl_stmt sun.tools.jconsole.Worker = call decl ArrayList.remove() call decl ArrayList.remove() call decl ArrayList.remove() call decl ArrayList.remove() call decl ArrayList.remove() call decl ArrayList.clear() call decl ArrayList.clear() call decl ArrayList.clear() call decl ArrayList.clear() call decl ArrayList.clear() call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy()