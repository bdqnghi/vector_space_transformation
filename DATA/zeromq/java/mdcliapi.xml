guide java.util.Formatter import org.zeromq.ZContext import org.zeromq.ZFrame import org.zeromq.ZMQ import org.zeromq.ZMsg import class guide.mdcliapi long int ZContext String decl ZMQ decl Socket boolean public public return public public = public public return public public = if != call org.zeromq.ZContext.destroySocket(Socket) call org.zeromq.ZContext.destroySocket(Socket) call org.zeromq.ZContext.destroySocket(Socket) call org.zeromq.ZContext.destroySocket(Socket) call org.zeromq.ZContext.destroySocket(Socket) = call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call decl ZMQ.connect() call decl ZMQ.connect() call decl ZMQ.connect() call decl ZMQ.connect() call decl ZMQ.connect() if call boolean.format() call boolean.format() call boolean.format() call boolean.format() call boolean.format() ZFrame decl ZMQ int ZMsg decl Poller ZMsg public public new if call boolean.format() call boolean.format() call boolean.format() call boolean.format() call boolean.format() call boolean.out() call boolean.out() call boolean.out() call boolean.out() call boolean.out() decl_stmt org.zeromq.ZMsg = decl_stmt int = while > && ! decl_stmt zmq.Poller = new call decl ZMQ.register() call decl ZMQ.register() call decl ZMQ.register() call decl ZMQ.register() call decl ZMQ.register() if call decl ZMQ.poll() call decl ZMQ.poll() call decl ZMQ.poll() call decl ZMQ.poll() call decl ZMQ.poll() == - break if call decl ZMQ.pollin() call decl ZMQ.pollin() call decl ZMQ.pollin() call decl ZMQ.pollin() call decl ZMQ.pollin() decl_stmt org.zeromq.ZMsg = if call boolean.format() call boolean.format() call boolean.format() call boolean.format() call boolean.format() call decl Poller.dump() call decl Poller.dump() call decl Poller.dump() call decl Poller.dump() call decl Poller.dump() call boolean.out() call boolean.out() call boolean.out() call boolean.out() call boolean.out() assert call decl Poller.size() call decl Poller.size() call decl Poller.size() call decl Poller.size() call decl Poller.size() >= decl_stmt org.zeromq.ZFrame = call decl Poller.pop() call decl Poller.pop() call decl Poller.pop() call decl Poller.pop() call decl Poller.pop() assert call org.zeromq.ZMsg.toString() call org.zeromq.ZMsg.toString() call org.zeromq.ZMsg.toString() call org.zeromq.ZMsg.toString() call org.zeromq.ZMsg.toString() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() decl_stmt org.zeromq.ZFrame = call decl Poller.pop() call decl Poller.pop() call decl Poller.pop() call decl Poller.pop() call decl Poller.pop() assert call org.zeromq.ZFrame.toString() call org.zeromq.ZFrame.toString() call org.zeromq.ZFrame.toString() call org.zeromq.ZFrame.toString() call org.zeromq.ZFrame.toString() call org.zeromq.ZFrame.destroy() call org.zeromq.ZFrame.destroy() call org.zeromq.ZFrame.destroy() call org.zeromq.ZFrame.destroy() call org.zeromq.ZFrame.destroy() = break else call decl ZMQ.unregister() call decl ZMQ.unregister() call decl ZMQ.unregister() call decl ZMQ.unregister() call decl ZMQ.unregister() if -- == call boolean.format() call boolean.format() call boolean.format() call boolean.format() call boolean.format() break call boolean.format() call boolean.format() call boolean.format() call boolean.format() call boolean.format() return public public call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy()