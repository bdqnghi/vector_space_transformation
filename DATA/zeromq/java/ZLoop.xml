org.zeromq java.util.ArrayList import java.util.Iterator import java.util.List import org.zeromq.ZMQ.PollItem import org.zeromq.ZMQ.Poller import class org.zeromq.ZLoop boolean decl List int boolean decl SPoller decl List decl List Poller decl List public public int private private = = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() = new = new decl_stmt int = for : call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) = ++ = long long private private decl_stmt long = + * for : if == - = + if > = decl_stmt long = - if < = if return SPoller public public if == && == return - decl_stmt SPoller = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = if != : return SPoller decl Iterator public public decl_stmt java.util.Iterator < = call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt SPoller = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() = if != : STimer public public decl_stmt STimer = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if return public public assert != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if return public public = long SPoller decl Iterator STimer int public public decl_stmt int = call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() for : = + while ! if decl_stmt long = = call Poller.poll() call Poller.poll() call Poller.poll() call Poller.poll() call Poller.poll() if == - if = break decl_stmt java.util.Iterator < = call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt STimer = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if >= && != - if = call STimer.handler() call STimer.handler() call STimer.handler() call STimer.handler() call STimer.handler() call STimer.handler() call STimer.handler() call STimer.handler() call STimer.handler() if == - break if != && -- == call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() else = + if == - break for = < ++ decl_stmt SPoller = if call Poller.getItem() call Poller.getItem() call Poller.getItem() call Poller.getItem() call Poller.getItem() if call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() != call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() : call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() if ++ > else = if call Poller.getItem() call Poller.getItem() call Poller.getItem() call Poller.getItem() call Poller.getItem() > if call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() != call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() : call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() call SPoller.item() = call SPoller.handler() call SPoller.handler() call SPoller.handler() call SPoller.handler() call SPoller.handler() call SPoller.handler() call SPoller.handler() call SPoller.handler() call SPoller.handler() if == - break for : = call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt STimer = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if == call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() if == - break return