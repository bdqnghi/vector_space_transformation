org.zeromq java.io.IOException import java.nio.channels.SelectableChannel import org.junit.Assert import org.junit.Test import org.zeromq.ZMQ.Socket import org.zeromq.ZPoller.EventsHandler import class org.zeromq.TestZPoller Socket EventsHandler ZContext EventsHandler boolean ZPoller int SelectableChannel public public throws decl_stmt org.zeromq.ZContext = decl_stmt org.zeromq.ZPoller = new new decl_stmt java.nio.channels.SelectableChannel = decl_stmt java.net.Socket = decl_stmt boolean = = call org.zeromq.ZPoller.register(Socket,int) call org.zeromq.ZPoller.register(Socket,int) call org.zeromq.ZPoller.register(Socket,int) call org.zeromq.ZPoller.register(Socket,int) call org.zeromq.ZPoller.register(Socket,int) = call org.zeromq.ZPoller.register(Socket,int) call org.zeromq.ZPoller.register(Socket,int) call org.zeromq.ZPoller.register(Socket,int) call org.zeromq.ZPoller.register(Socket,int) call org.zeromq.ZPoller.register(Socket,int) decl_stmt int = call org.zeromq.ZPoller.poll(long) call org.zeromq.ZPoller.poll(long) call org.zeromq.ZPoller.poll(long) call org.zeromq.ZPoller.poll(long) call org.zeromq.ZPoller.poll(long) = call org.zeromq.ZPoller.isReadable(Socket) call org.zeromq.ZPoller.isReadable(Socket) call org.zeromq.ZPoller.isReadable(Socket) call org.zeromq.ZPoller.isReadable(Socket) call org.zeromq.ZPoller.isReadable(Socket) = call org.zeromq.ZPoller.writable(Socket) call org.zeromq.ZPoller.writable(Socket) call org.zeromq.ZPoller.writable(Socket) call org.zeromq.ZPoller.writable(Socket) call org.zeromq.ZPoller.writable(Socket) = call org.zeromq.ZPoller.readable(Socket) call org.zeromq.ZPoller.readable(Socket) call org.zeromq.ZPoller.readable(Socket) call org.zeromq.ZPoller.readable(Socket) call org.zeromq.ZPoller.readable(Socket) = call org.zeromq.ZPoller.isWritable(Socket) call org.zeromq.ZPoller.isWritable(Socket) call org.zeromq.ZPoller.isWritable(Socket) call org.zeromq.ZPoller.isWritable(Socket) call org.zeromq.ZPoller.isWritable(Socket) decl_stmt org.zeromq.EventsHandler = call org.zeromq.ZPoller.setGlobalHandler(EventsHandler) call org.zeromq.ZPoller.setGlobalHandler(EventsHandler) call org.zeromq.ZPoller.setGlobalHandler(EventsHandler) call org.zeromq.ZPoller.setGlobalHandler(EventsHandler) call org.zeromq.ZPoller.setGlobalHandler(EventsHandler) decl_stmt org.zeromq.EventsHandler = = call org.zeromq.ZPoller.register(Socket,int) call org.zeromq.ZPoller.register(Socket,int) call org.zeromq.ZPoller.register(Socket,int) call org.zeromq.ZPoller.register(Socket,int) call org.zeromq.ZPoller.register(Socket,int) = call org.zeromq.ZPoller.register(Socket,int) call org.zeromq.ZPoller.register(Socket,int) call org.zeromq.ZPoller.register(Socket,int) call org.zeromq.ZPoller.register(Socket,int) call org.zeromq.ZPoller.register(Socket,int) = call org.zeromq.ZPoller.poll(long) call org.zeromq.ZPoller.poll(long) call org.zeromq.ZPoller.poll(long) call org.zeromq.ZPoller.poll(long) call org.zeromq.ZPoller.poll(long) call org.zeromq.ZPoller.close() call org.zeromq.ZPoller.close() call org.zeromq.ZPoller.close() call org.zeromq.ZPoller.close() call org.zeromq.ZPoller.close()