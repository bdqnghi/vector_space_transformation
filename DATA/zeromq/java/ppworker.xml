guide java.util.Random import org.zeromq.ZContext import org.zeromq.ZFrame import org.zeromq.ZMQ import org.zeromq.ZMQ.PollItem import org.zeromq.ZMQ.Socket import org.zeromq.ZMsg import class guide.ppworker String int String int int int ZFrame Socket private static private static decl_stmt java.net.Socket = call java.net.Socket.connect(SocketAddress,int) call java.net.Socket.connect(SocketAddress,int) call java.net.Socket.connect(SocketAddress,int) call java.net.Socket.connect(SocketAddress,int) call java.net.Socket.connect(SocketAddress,int) decl_stmt org.zeromq.ZFrame = new call org.zeromq.ZFrame.send(Socket,int) call org.zeromq.ZFrame.send(Socket,int) call org.zeromq.ZFrame.send(Socket,int) call org.zeromq.ZFrame.send(Socket,int) call org.zeromq.ZFrame.send(Socket,int) return Random int ZContext ZFrame int Socket PollItem int ZMsg int long public static public static decl_stmt org.zeromq.ZContext = new decl_stmt java.net.Socket = decl_stmt int = decl_stmt int = decl_stmt long = + decl_stmt java.util.Random = new decl_stmt int = while decl_stmt zmq.PollItem = new decl_stmt int = if == - break if decl_stmt org.zeromq.ZMsg = if == break if call org.zeromq.ZMsg.size() call org.zeromq.ZMsg.size() call org.zeromq.ZMsg.size() call org.zeromq.ZMsg.size() call org.zeromq.ZMsg.size() == ++ if > && call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() = break else if > && call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == try catch break call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) = try catch break else if call org.zeromq.ZMsg.size() call org.zeromq.ZMsg.size() call org.zeromq.ZMsg.size() call org.zeromq.ZMsg.size() call org.zeromq.ZMsg.size() == decl_stmt org.zeromq.ZFrame = call org.zeromq.ZMsg.getFirst() call org.zeromq.ZMsg.getFirst() call org.zeromq.ZMsg.getFirst() call org.zeromq.ZMsg.getFirst() call org.zeromq.ZMsg.getFirst() if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) new call org.zeromq.ZFrame.getData() call org.zeromq.ZFrame.getData() call org.zeromq.ZFrame.getData() call org.zeromq.ZFrame.getData() call org.zeromq.ZFrame.getData() = else call org.zeromq.ZMsg.dump(Appendable) call org.zeromq.ZMsg.dump(Appendable) call org.zeromq.ZMsg.dump(Appendable) call org.zeromq.ZMsg.dump(Appendable) call org.zeromq.ZMsg.dump(Appendable) call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() else call org.zeromq.ZMsg.dump(Appendable) call org.zeromq.ZMsg.dump(Appendable) call org.zeromq.ZMsg.dump(Appendable) call org.zeromq.ZMsg.dump(Appendable) call org.zeromq.ZMsg.dump(Appendable) = else if -- == try catch if < *= call org.zeromq.ZContext.destroySocket(Socket) call org.zeromq.ZContext.destroySocket(Socket) call org.zeromq.ZContext.destroySocket(Socket) call org.zeromq.ZContext.destroySocket(Socket) call org.zeromq.ZContext.destroySocket(Socket) = = if > = + decl_stmt org.zeromq.ZFrame = new call org.zeromq.ZFrame.send(Socket,int) call org.zeromq.ZFrame.send(Socket,int) call org.zeromq.ZFrame.send(Socket,int) call org.zeromq.ZFrame.send(Socket,int) call org.zeromq.ZFrame.send(Socket,int) call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy()