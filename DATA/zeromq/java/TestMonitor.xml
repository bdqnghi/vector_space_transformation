zmq org.junit.Test import static static org.junit.Assert.assertTrue import static static org.junit.Assert.assertThat import static static org.hamcrest.CoreMatchers.is import static static org.hamcrest.CoreMatchers.notNullValue import class zmq.TestMonitor SocketBase decl ZMQ boolean public public decl_stmt zmq.SocketBase = decl_stmt boolean = call zmq.SocketBase.connect(String) call zmq.SocketBase.connect(String) call zmq.SocketBase.connect(String) call zmq.SocketBase.connect(String) call zmq.SocketBase.connect(String) while decl_stmt com.sun.jdi.event.Event = if == && call zmq.SocketBase.errno() call zmq.SocketBase.errno() call zmq.SocketBase.errno() call zmq.SocketBase.errno() call zmq.SocketBase.errno() == break switch case |= break case |= break case |= break case |= break case |= break case |= break case |= break default: + call zmq.SocketBase.close() call zmq.SocketBase.close() call zmq.SocketBase.close() call zmq.SocketBase.close() call zmq.SocketBase.close() String SocketBase SocketBase Ctx SocketBase decl SocketMonitor boolean public public throws decl_stmt java.lang.String = decl_stmt SocketMonitor = new decl_stmt zmq.Ctx = decl_stmt zmq.SocketBase = try catch decl_stmt boolean = = new = decl_stmt zmq.SocketBase = = = new = decl_stmt zmq.SocketBase = = = new = & > & > & > & > & > & > & > & ==