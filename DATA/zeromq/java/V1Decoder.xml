zmq java.nio.ByteBuffer import class zmq.V1Decoder super super extends int ByteBuffer IMsgSink int int int long int decl byte Msg public public = protected protected switch case return case return case return case return default: return int private private decl_stmt int = if < = & if >= if > return = call zmq.Msg.setFlags(int) call zmq.Msg.setFlags(int) call zmq.Msg.setFlags(int) call zmq.Msg.setFlags(int) call zmq.Msg.setFlags(int) return long private private call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() decl_stmt long final final = call ByteBuffer.getLong() call ByteBuffer.getLong() call ByteBuffer.getLong() call ByteBuffer.getLong() call ByteBuffer.getLong() if >= if > return if > return = int call zmq.Msg.setFlags(int) call zmq.Msg.setFlags(int) call zmq.Msg.setFlags(int) call zmq.Msg.setFlags(int) call zmq.Msg.setFlags(int) return int private private = decl_stmt int = if & > |= call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() if & > call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() else call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() return int private private if == return decl_stmt int = call IMsgSink.pushMsg() call IMsgSink.pushMsg() call IMsgSink.pushMsg() call IMsgSink.pushMsg() call IMsgSink.pushMsg() if != if != return call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() return