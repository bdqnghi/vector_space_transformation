zmq java.util.HashSet import java.util.Set import class zmq.SessionBase super super extends super implements IEngine IOObject SocketBase boolean int Pipe boolean IOThread boolean decl Set boolean boolean boolean Address SessionBase public static public static decl_stmt zmq.SessionBase = switch case = new break case = new break case = new break case = new break case = new break case = new break case = new break case = new break case = new break case = new break case = new break default: throw new + return public public assert == if call zmq.IOObject.cancelTimer(int) call zmq.IOObject.cancelTimer(int) call zmq.IOObject.cancelTimer(int) call zmq.IOObject.cancelTimer(int) call zmq.IOObject.cancelTimer(int) = if != call IEngine.terminate() call IEngine.terminate() call IEngine.terminate() call IEngine.terminate() call IEngine.terminate() public public assert ! assert == assert != = Msg public public if ! decl_stmt zmq.Msg = new call zmq.Msg.put(ByteBuffer) call zmq.Msg.put(ByteBuffer) call zmq.Msg.put(ByteBuffer) call zmq.Msg.put(ByteBuffer) call zmq.Msg.put(ByteBuffer) = = return if == return decl_stmt zmq.Msg = call zmq.Pipe.read() call zmq.Pipe.read() call zmq.Pipe.read() call zmq.Pipe.read() call zmq.Pipe.read() if == return = call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() return public public if ! = if ! return if != && call zmq.Pipe.write(Msg) call zmq.Pipe.write(Msg) call zmq.Pipe.write(Msg) call zmq.Pipe.write(Msg) call zmq.Pipe.write(Msg) return return protected protected = = public public if != call zmq.Pipe.flush() call zmq.Pipe.flush() call zmq.Pipe.flush() call zmq.Pipe.flush() call zmq.Pipe.flush() Msg private private if != call zmq.Pipe.rollback() call zmq.Pipe.rollback() call zmq.Pipe.rollback() call zmq.Pipe.rollback() call zmq.Pipe.rollback() call zmq.Pipe.flush() call zmq.Pipe.flush() call zmq.Pipe.flush() call zmq.Pipe.flush() call zmq.Pipe.flush() while decl_stmt zmq.Msg = if == assert ! break public public assert == || call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() if == = if call zmq.IOObject.cancelTimer(int) call zmq.IOObject.cancelTimer(int) call zmq.IOObject.cancelTimer(int) call zmq.IOObject.cancelTimer(int) call zmq.IOObject.cancelTimer(int) = else call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() if && == && call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() = public public if != assert call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() return if != call zmq.IEngine.activateOut() call zmq.IEngine.activateOut() call zmq.IEngine.activateOut() call zmq.IEngine.activateOut() call zmq.IEngine.activateOut() else public public if != assert call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() return if != call zmq.IEngine.activateIn() call zmq.IEngine.activateIn() call zmq.IEngine.activateIn() call zmq.IEngine.activateIn() call zmq.IEngine.activateIn() public public throw new public public return protected protected call zmq.IOObject.setHandler(IPollEvents) call zmq.IOObject.setHandler(IPollEvents) call zmq.IOObject.setHandler(IPollEvents) call zmq.IOObject.setHandler(IPollEvents) call zmq.IOObject.setHandler(IPollEvents) if decl Pipe decl ZObject decl boolean decl int protected protected assert != if == && ! decl_stmt zmq.ZObject = decl_stmt zmq.Pipe = decl_stmt int = decl_stmt boolean = assert == = assert == = public public = if != call Pipe.checkRead() call Pipe.checkRead() call Pipe.checkRead() call Pipe.checkRead() call Pipe.checkRead() protected protected assert ! if == && call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() return = if > assert ! call zmq.IOObject.addTimer(long,int) call zmq.IOObject.addTimer(long,int) call zmq.IOObject.addTimer(long,int) call zmq.IOObject.addTimer(long,int) call zmq.IOObject.addTimer(long,int) = if != call zmq.Pipe.terminate(boolean) call zmq.Pipe.terminate(boolean) call zmq.Pipe.terminate(boolean) call zmq.Pipe.terminate(boolean) call zmq.Pipe.terminate(boolean) != call Pipe.checkRead() call Pipe.checkRead() call Pipe.checkRead() call Pipe.checkRead() call Pipe.checkRead() public public assert == = assert != call zmq.Pipe.terminate(boolean) call zmq.Pipe.terminate(boolean) call zmq.Pipe.terminate(boolean) call zmq.Pipe.terminate(boolean) call zmq.Pipe.terminate(boolean) private private if ! return if != && == && ! call zmq.Address.protocol() call zmq.Address.protocol() call zmq.Address.protocol() call zmq.Address.protocol() call zmq.Address.protocol() && ! call zmq.Address.protocol() call zmq.Address.protocol() call zmq.Address.protocol() call zmq.Address.protocol() call zmq.Address.protocol() call zmq.Pipe.hiccup() call zmq.Pipe.hiccup() call zmq.Pipe.hiccup() call zmq.Pipe.hiccup() call zmq.Pipe.hiccup() call zmq.Pipe.terminate(boolean) call zmq.Pipe.terminate(boolean) call zmq.Pipe.terminate(boolean) call zmq.Pipe.terminate(boolean) call zmq.Pipe.terminate(boolean) call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() = if != - if != && == || == call zmq.Pipe.hiccup() call zmq.Pipe.hiccup() call zmq.Pipe.hiccup() call zmq.Pipe.hiccup() call zmq.Pipe.hiccup() IpcConnecter IOThread private private assert decl_stmt zmq.IOThread = assert != if call zmq.Address.protocol() call zmq.Address.protocol() call zmq.Address.protocol() call zmq.Address.protocol() call zmq.Address.protocol() decl_stmt zmq.TcpConnecter = new return if call zmq.Address.protocol() call zmq.Address.protocol() call zmq.Address.protocol() call zmq.Address.protocol() call zmq.Address.protocol() decl_stmt IpcConnecter = new return assert public public return + + + public public throw new public public throw new public public throw new public public throw new