zmq java.nio.ByteBuffer import java.util.HashSet import java.util.Set import class zmq.Mtrie int decl Set decl Mtrie int int public public return public public return Mtrie byte int boolean private private if == || == decl_stmt boolean = == if == = new < call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return decl_stmt byte = if < || >= + if == = = = else if == decl_stmt int = decl_stmt zmq.Mtrie = = < - : - + = new = - = else if < = - + = else = + - = = if == if == = new = new ++ return + else if - == - = new ++ return - + private private return public public return new int Mtrie decl Mtrie int private private if != && call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() if ! || call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() if call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() = if >= = + = if == return if == = byte ++ if = = -- assert == return decl_stmt int = + - decl_stmt int = for = != ++ = + if != + if = assert > -- else if + < = + if + > = + assert > if == = = else if == assert == assert >= && < + decl_stmt zmq.Mtrie = - assert != = = new = = else if > || < + - assert - + > decl_stmt zmq.Mtrie = assert > || < + - assert >= assert <= + - assert - + < = - + = new - = return public public return boolean byte Mtrie int Mtrie boolean private private if == || == if != decl_stmt boolean = call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() assert if call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() = return == decl_stmt byte = if == || < || >= + return decl_stmt zmq.Mtrie = == : - if == return decl_stmt boolean = call zmq.Mtrie.rmHelper(Pipe,byte,int,int,IMtrieHandler,Object,boolean) call zmq.Mtrie.rmHelper(Pipe,byte,int,int,IMtrieHandler,Object,boolean) call zmq.Mtrie.rmHelper(Pipe,byte,int,int,IMtrieHandler,Object,boolean) call zmq.Mtrie.rmHelper(Pipe,byte,int,int,IMtrieHandler,Object,boolean) call zmq.Mtrie.rmHelper(Pipe,byte,int,int,IMtrieHandler,Object,boolean) + if call zmq.Mtrie.isRedundant() call zmq.Mtrie.isRedundant() call zmq.Mtrie.isRedundant() call zmq.Mtrie.isRedundant() call zmq.Mtrie.isRedundant() assert > if == = = -- assert == else - = assert > -- if == decl_stmt int for = < ++ if != break assert < += = decl_stmt zmq.Mtrie = = new else if == decl_stmt int for = < ++ if != break assert < += -= = else if == + - decl_stmt int for = < ++ if - - != break assert < -= = return Mtrie byte int public public decl_stmt zmq.Mtrie = decl_stmt int = while if != for : if == break if == break decl_stmt byte = if == if != break = ++ -- continue if < || >= + break if - == break = - ++ -- private private return == && ==