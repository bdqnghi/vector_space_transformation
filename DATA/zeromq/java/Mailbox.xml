zmq java.io.Closeable import java.io.IOException import java.nio.channels.SelectableChannel import java.util.concurrent.locks.Lock import java.util.concurrent.locks.ReentrantLock import class zmq.Mailbox super super implements boolean Signaler decl YPipe Lock String public public return call zmq.Signaler.getFd() call zmq.Signaler.getFd() call zmq.Signaler.getFd() call zmq.Signaler.getFd() call zmq.Signaler.getFd() boolean public public final final decl_stmt boolean = call Lock.lock() call Lock.lock() call Lock.lock() call Lock.lock() call Lock.lock() try call decl YPipe.write() call decl YPipe.write() call decl YPipe.write() call decl YPipe.write() call decl YPipe.write() = call decl YPipe.flush() call decl YPipe.flush() call decl YPipe.flush() call decl YPipe.flush() call decl YPipe.flush() finally call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() if ! call zmq.Signaler.send() call zmq.Signaler.send() call zmq.Signaler.send() call zmq.Signaler.send() call zmq.Signaler.send() Command boolean public public decl_stmt zmq.Command = if = call decl YPipe.read() call decl YPipe.read() call decl YPipe.read() call decl YPipe.read() call decl YPipe.read() if != return = call Signaler.recv() call Signaler.recv() call Signaler.recv() call Signaler.recv() call Signaler.recv() decl_stmt boolean = call zmq.Signaler.waitEvent(long) call zmq.Signaler.waitEvent(long) call zmq.Signaler.waitEvent(long) call zmq.Signaler.waitEvent(long) call zmq.Signaler.waitEvent(long) if ! return = = call decl YPipe.read() call decl YPipe.read() call decl YPipe.read() call decl YPipe.read() call decl YPipe.read() assert != return public public throws call Lock.lock() call Lock.lock() call Lock.lock() call Lock.lock() call Lock.lock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call zmq.Signaler.close() call zmq.Signaler.close() call zmq.Signaler.close() call zmq.Signaler.close() call zmq.Signaler.close() public public return + + +