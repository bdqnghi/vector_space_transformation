zmq java.util.ArrayDeque import java.util.Deque import class zmq.XPub super super extends Dist Mtrie decl Deque boolean boolean boolean decl IMtrieHandler decl Mtrie decl Deque boolean XPub public public decl_stmt zmq.XPub = call XPub.dist() call XPub.dist() call XPub.dist() call XPub.dist() call XPub.dist() call XPub.dist() call XPub.dist() call XPub.dist() call XPub.dist() decl byte XPub public public decl_stmt zmq.XPub = if != decl_stmt byte = new + = call XPub.pendingData() call XPub.pendingData() call XPub.pendingData() call XPub.pendingData() call XPub.pendingData() call XPub.pendingData() call XPub.pendingData() call XPub.pendingData() call XPub.pendingData() call XPub.pendingFlags() call XPub.pendingFlags() call XPub.pendingFlags() call XPub.pendingFlags() call XPub.pendingFlags() call XPub.pendingFlags() call XPub.pendingFlags() call XPub.pendingFlags() call XPub.pendingFlags() protected protected assert != call zmq.Dist.attach(Pipe) call zmq.Dist.attach(Pipe) call zmq.Dist.attach(Pipe) call zmq.Dist.attach(Pipe) call zmq.Dist.attach(Pipe) if call zmq.Mtrie.add(byte,int,Pipe) call zmq.Mtrie.add(byte,int,Pipe) call zmq.Mtrie.add(byte,int,Pipe) call zmq.Mtrie.add(byte,int,Pipe) call zmq.Mtrie.add(byte,int,Pipe) boolean decl byte Msg int protected protected decl_stmt zmq.Msg = while = != decl_stmt byte = call zmq.Msg.data() call zmq.Msg.data() call zmq.Msg.data() call zmq.Msg.data() call zmq.Msg.data() decl_stmt int = call zmq.Msg.size() call zmq.Msg.size() call zmq.Msg.size() call zmq.Msg.size() call zmq.Msg.size() if > && == || == decl_stmt boolean if == = call zmq.Mtrie.rm(byte,int,Pipe) call zmq.Mtrie.rm(byte,int,Pipe) call zmq.Mtrie.rm(byte,int,Pipe) call zmq.Mtrie.rm(byte,int,Pipe) call zmq.Mtrie.rm(byte,int,Pipe) else = call zmq.Mtrie.add(byte,int,Pipe) call zmq.Mtrie.add(byte,int,Pipe) call zmq.Mtrie.add(byte,int,Pipe) call zmq.Mtrie.add(byte,int,Pipe) call zmq.Mtrie.add(byte,int,Pipe) if == && || == && || == && call decl Deque.add() call decl Deque.add() call decl Deque.add() call decl Deque.add() call decl Deque.add() call decl Deque.add() call decl Deque.add() call decl Deque.add() call decl Deque.add() call decl Deque.add() else call decl Deque.add() call decl Deque.add() call decl Deque.add() call decl Deque.add() call decl Deque.add() call decl Deque.add() call decl Deque.add() call decl Deque.add() call decl Deque.add() call decl Deque.add() call Msg.flags() call Msg.flags() call Msg.flags() call Msg.flags() call Msg.flags() protected protected call zmq.Dist.activated(Pipe) call zmq.Dist.activated(Pipe) call zmq.Dist.activated(Pipe) call zmq.Dist.activated(Pipe) call zmq.Dist.activated(Pipe) public public if == = == else if == = == else if == = == else return return protected protected call zmq.Mtrie.rm(byte,int,Pipe) call zmq.Mtrie.rm(byte,int,Pipe) call zmq.Mtrie.rm(byte,int,Pipe) call zmq.Mtrie.rm(byte,int,Pipe) call zmq.Mtrie.rm(byte,int,Pipe) ! call zmq.Dist.terminated(Pipe) call zmq.Dist.terminated(Pipe) call zmq.Dist.terminated(Pipe) call zmq.Dist.terminated(Pipe) call zmq.Dist.terminated(Pipe) boolean protected protected decl_stmt boolean = if ! call Mtrie.match() call Mtrie.match() call Mtrie.match() call Mtrie.match() call Mtrie.match() if || call zmq.Dist.checkHwm() call zmq.Dist.checkHwm() call zmq.Dist.checkHwm() call zmq.Dist.checkHwm() call zmq.Dist.checkHwm() if call zmq.Dist.sendToMatching(Msg) call zmq.Dist.sendToMatching(Msg) call zmq.Dist.sendToMatching(Msg) call zmq.Dist.sendToMatching(Msg) call zmq.Dist.sendToMatching(Msg) if ! call zmq.Dist.unmatch() call zmq.Dist.unmatch() call zmq.Dist.unmatch() call zmq.Dist.unmatch() call zmq.Dist.unmatch() = return else return protected protected return call zmq.Dist.hasOut() call zmq.Dist.hasOut() call zmq.Dist.hasOut() call zmq.Dist.hasOut() call zmq.Dist.hasOut() Msg int Blob protected protected if call decl Deque.isEmpty() call decl Deque.isEmpty() call decl Deque.isEmpty() call decl Deque.isEmpty() call decl Deque.isEmpty() return decl_stmt zmq.Blob = call decl Deque.pollFirst() call decl Deque.pollFirst() call decl Deque.pollFirst() call decl Deque.pollFirst() call decl Deque.pollFirst() decl_stmt zmq.Msg = new call zmq.Blob.data() call zmq.Blob.data() call zmq.Blob.data() call zmq.Blob.data() call zmq.Blob.data() decl_stmt int = call decl Deque.pollFirst() call decl Deque.pollFirst() call decl Deque.pollFirst() call decl Deque.pollFirst() call decl Deque.pollFirst() call zmq.Msg.setFlags(int) call zmq.Msg.setFlags(int) call zmq.Msg.setFlags(int) call zmq.Msg.setFlags(int) call zmq.Msg.setFlags(int) return protected protected return ! call decl Deque.isEmpty() call decl Deque.isEmpty() call decl Deque.isEmpty() call decl Deque.isEmpty() call decl Deque.isEmpty()