guide org.zeromq.ZMQ import org.zeromq.ZMQ.Context import org.zeromq.ZMQ.Poller import org.zeromq.ZMQ.Socket import class guide.rrbroker Socket Poller Context decl byte Socket boolean public static public static decl_stmt sun.tools.tree.Context = decl_stmt java.net.Socket = call Context.socket() call Context.socket() call Context.socket() call Context.socket() call Context.socket() decl_stmt java.net.Socket = call Context.socket() call Context.socket() call Context.socket() call Context.socket() call Context.socket() call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) decl_stmt zmq.Poller = new call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) decl_stmt boolean = decl_stmt byte while ! call Poller.poll() call Poller.poll() call Poller.poll() call Poller.poll() call Poller.poll() if call Poller.pollin() call Poller.pollin() call Poller.pollin() call Poller.pollin() call Poller.pollin() while = call Socket.recv() call Socket.recv() call Socket.recv() call Socket.recv() call Socket.recv() = call Socket.hasReceiveMore() call Socket.hasReceiveMore() call Socket.hasReceiveMore() call Socket.hasReceiveMore() call Socket.hasReceiveMore() call Socket.send() call Socket.send() call Socket.send() call Socket.send() call Socket.send() : if ! break if call Poller.pollin() call Poller.pollin() call Poller.pollin() call Poller.pollin() call Poller.pollin() while = call Socket.recv() call Socket.recv() call Socket.recv() call Socket.recv() call Socket.recv() = call Socket.hasReceiveMore() call Socket.hasReceiveMore() call Socket.hasReceiveMore() call Socket.hasReceiveMore() call Socket.hasReceiveMore() call Socket.send() call Socket.send() call Socket.send() call Socket.send() call Socket.send() : if ! break call Socket.close() call Socket.close() call Socket.close() call Socket.close() call Socket.close() call Socket.close() call Socket.close() call Socket.close() call Socket.close() call Socket.close() call Context.term() call Context.term() call Context.term() call Context.term() call Context.term()