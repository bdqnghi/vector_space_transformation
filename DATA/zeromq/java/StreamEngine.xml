zmq java.io.IOException import java.lang.reflect.Constructor import java.lang.reflect.InvocationTargetException import java.nio.ByteBuffer import java.nio.ByteOrder import java.nio.channels.SocketChannel import class zmq.StreamEngine super super implements IOObject String SocketChannel int boolean int ByteBuffer EncoderBase ByteBuffer SessionBase int SocketBase DecoderBase Transfer boolean Options boolean ByteBuffer decl Constructor DecoderBase private private decl_stmt zmq.DecoderBase if == if == = new else = new else try decl_stmt java.lang.reflect.Constructor < extends extends if == = call Options.decoder() call Options.decoder() call Options.decoder() call Options.decoder() call Options.decoder() call Options.decoder() call Options.decoder() call Options.decoder() call Options.decoder() = call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() else = call Options.decoder() call Options.decoder() call Options.decoder() call Options.decoder() call Options.decoder() call Options.decoder() call Options.decoder() call Options.decoder() call Options.decoder() = call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() catch throw new catch throw new catch throw new catch throw new catch throw new if != call zmq.DecoderBase.setMsgAllocator(MsgAllocator) call zmq.DecoderBase.setMsgAllocator(MsgAllocator) call zmq.DecoderBase.setMsgAllocator(MsgAllocator) call zmq.DecoderBase.setMsgAllocator(MsgAllocator) call zmq.DecoderBase.setMsgAllocator(MsgAllocator) return decl Constructor private private if == if == return new return new try decl_stmt java.lang.reflect.Constructor < extends extends if == = call Options.encoder() call Options.encoder() call Options.encoder() call Options.encoder() call Options.encoder() call Options.encoder() call Options.encoder() call Options.encoder() call Options.encoder() return call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() else = call Options.encoder() call Options.encoder() call Options.encoder() call Options.encoder() call Options.encoder() call Options.encoder() call Options.encoder() call Options.encoder() call Options.encoder() return call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() catch throw new catch throw new catch throw new catch throw new catch throw new public public assert ! if != try call SocketChannel.close() call SocketChannel.close() call SocketChannel.close() call SocketChannel.close() call SocketChannel.close() catch = boolean public public assert ! = assert == assert != = = = new call zmq.IOObject.setHandler(IPollEvents) call zmq.IOObject.setHandler(IPollEvents) call zmq.IOObject.setHandler(IPollEvents) call zmq.IOObject.setHandler(IPollEvents) call zmq.IOObject.setHandler(IPollEvents) call zmq.IOObject.plug(IOThread) call zmq.IOObject.plug(IOThread) call zmq.IOObject.plug(IOThread) call zmq.IOObject.plug(IOThread) call zmq.IOObject.plug(IOThread) call zmq.IOObject.addHandle(SelectableChannel) call zmq.IOObject.addHandle(SelectableChannel) call zmq.IOObject.addHandle(SelectableChannel) call zmq.IOObject.addHandle(SelectableChannel) call zmq.IOObject.addHandle(SelectableChannel) = call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() byte call ByteBuffer.putLong() call ByteBuffer.putLong() call ByteBuffer.putLong() call ByteBuffer.putLong() call ByteBuffer.putLong() + call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() byte call zmq.IOObject.setPollIn(SelectableChannel) call zmq.IOObject.setPollIn(SelectableChannel) call zmq.IOObject.setPollIn(SelectableChannel) call zmq.IOObject.setPollIn(SelectableChannel) call zmq.IOObject.setPollIn(SelectableChannel) decl_stmt boolean = try = != && call Options.encoder() call Options.encoder() call Options.encoder() call Options.encoder() call Options.encoder() call Options.encoder() call Options.encoder() call Options.encoder() call Options.encoder() != catch catch if ! = call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() = new call zmq.IOObject.setPollOut(SelectableChannel) call zmq.IOObject.setPollOut(SelectableChannel) call zmq.IOObject.setPollOut(SelectableChannel) call zmq.IOObject.setPollOut(SelectableChannel) call zmq.IOObject.setPollOut(SelectableChannel) private private assert = if call zmq.IOObject.removeHandle(SelectableChannel) call zmq.IOObject.removeHandle(SelectableChannel) call zmq.IOObject.removeHandle(SelectableChannel) call zmq.IOObject.removeHandle(SelectableChannel) call zmq.IOObject.removeHandle(SelectableChannel) = call zmq.IOObject.unplug() call zmq.IOObject.unplug() call zmq.IOObject.unplug() call zmq.IOObject.unplug() call zmq.IOObject.unplug() if != call EncoderBase.setMsgSource() call EncoderBase.setMsgSource() call EncoderBase.setMsgSource() call EncoderBase.setMsgSource() call EncoderBase.setMsgSource() if != call DecoderBase.setMsgSink() call DecoderBase.setMsgSink() call DecoderBase.setMsgSink() call DecoderBase.setMsgSink() call DecoderBase.setMsgSink() = public public boolean int public public if if ! return assert != decl_stmt boolean = if == = call zmq.DecoderBase.getBuffer() call zmq.DecoderBase.getBuffer() call zmq.DecoderBase.getBuffer() call zmq.DecoderBase.getBuffer() call zmq.DecoderBase.getBuffer() = call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() if == - = = decl_stmt int = call zmq.DecoderBase.processBuffer(ByteBuffer,int) call zmq.DecoderBase.processBuffer(ByteBuffer,int) call zmq.DecoderBase.processBuffer(ByteBuffer,int) call zmq.DecoderBase.processBuffer(ByteBuffer,int) call zmq.DecoderBase.processBuffer(ByteBuffer,int) if == - = else if < call zmq.IOObject.resetPollIn(SelectableChannel) call zmq.IOObject.resetPollIn(SelectableChannel) call zmq.IOObject.resetPollIn(SelectableChannel) call zmq.IOObject.resetPollIn(SelectableChannel) call zmq.IOObject.resetPollIn(SelectableChannel) -= call zmq.SessionBase.flush() call zmq.SessionBase.flush() call zmq.SessionBase.flush() call zmq.SessionBase.flush() call zmq.SessionBase.flush() if if call DecoderBase.stalled() call DecoderBase.stalled() call DecoderBase.stalled() call DecoderBase.stalled() call DecoderBase.stalled() call zmq.IOObject.removeHandle(SelectableChannel) call zmq.IOObject.removeHandle(SelectableChannel) call zmq.IOObject.removeHandle(SelectableChannel) call zmq.IOObject.removeHandle(SelectableChannel) call zmq.IOObject.removeHandle(SelectableChannel) = else int public public if == if == assert return = call zmq.EncoderBase.getData(ByteBuffer) call zmq.EncoderBase.getData(ByteBuffer) call zmq.EncoderBase.getData(ByteBuffer) call zmq.EncoderBase.getData(ByteBuffer) call zmq.EncoderBase.getData(ByteBuffer) = call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() if call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() == call zmq.IOObject.resetPollOut(SelectableChannel) call zmq.IOObject.resetPollOut(SelectableChannel) call zmq.IOObject.resetPollOut(SelectableChannel) call zmq.IOObject.resetPollOut(SelectableChannel) call zmq.IOObject.resetPollOut(SelectableChannel) if call zmq.EncoderBase.isError() call zmq.EncoderBase.isError() call zmq.EncoderBase.isError() call zmq.EncoderBase.isError() call zmq.EncoderBase.isError() return decl_stmt int = if == - call zmq.IOObject.resetPollOut(SelectableChannel) call zmq.IOObject.resetPollOut(SelectableChannel) call zmq.IOObject.resetPollOut(SelectableChannel) call zmq.IOObject.resetPollOut(SelectableChannel) call zmq.IOObject.resetPollOut(SelectableChannel) return -= if if == call zmq.IOObject.resetPollOut(SelectableChannel) call zmq.IOObject.resetPollOut(SelectableChannel) call zmq.IOObject.resetPollOut(SelectableChannel) call zmq.IOObject.resetPollOut(SelectableChannel) call zmq.IOObject.resetPollOut(SelectableChannel) if == if != && call zmq.EncoderBase.isError() call zmq.EncoderBase.isError() call zmq.EncoderBase.isError() call zmq.EncoderBase.isError() call zmq.EncoderBase.isError() public public throw new public public throw new public public throw new public public call zmq.IOObject.setPollOut(SelectableChannel) call zmq.IOObject.setPollOut(SelectableChannel) call zmq.IOObject.setPollOut(SelectableChannel) call zmq.IOObject.setPollOut(SelectableChannel) call zmq.IOObject.setPollOut(SelectableChannel) public public if ! call zmq.DecoderBase.processBuffer(ByteBuffer,int) call zmq.DecoderBase.processBuffer(ByteBuffer,int) call zmq.DecoderBase.processBuffer(ByteBuffer,int) call zmq.DecoderBase.processBuffer(ByteBuffer,int) call zmq.DecoderBase.processBuffer(ByteBuffer,int) assert ! call DecoderBase.stalled() call DecoderBase.stalled() call DecoderBase.stalled() call DecoderBase.stalled() call DecoderBase.stalled() call zmq.SessionBase.flush() call zmq.SessionBase.flush() call zmq.SessionBase.flush() call zmq.SessionBase.flush() call zmq.SessionBase.flush() return call zmq.IOObject.setPollIn(SelectableChannel) call zmq.IOObject.setPollIn(SelectableChannel) call zmq.IOObject.setPollIn(SelectableChannel) call zmq.IOObject.setPollIn(SelectableChannel) call zmq.IOObject.setPollIn(SelectableChannel) call zmq.IOObject.inEvent() call zmq.IOObject.inEvent() call zmq.IOObject.inEvent() call zmq.IOObject.inEvent() call zmq.IOObject.inEvent() int ByteBuffer int int int private private assert while call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() < decl_stmt int final final = if == - return if == return if call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() & != break if call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() < continue if call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() & == break if call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() < if == call zmq.IOObject.setPollOut(SelectableChannel) call zmq.IOObject.setPollOut(SelectableChannel) call zmq.IOObject.setPollOut(SelectableChannel) call zmq.IOObject.setPollOut(SelectableChannel) call zmq.IOObject.setPollOut(SelectableChannel) decl_stmt int = call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() byte call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() byte call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() += decl_stmt int final final = if call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() & != || call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() & == = call EncoderBase.setMsgSource() call EncoderBase.setMsgSource() call EncoderBase.setMsgSource() call EncoderBase.setMsgSource() call EncoderBase.setMsgSource() = call DecoderBase.setMsgSink() call DecoderBase.setMsgSink() call DecoderBase.setMsgSink() call DecoderBase.setMsgSink() call DecoderBase.setMsgSink() decl_stmt int final final = + >= : decl_stmt ByteBuffer = call zmq.EncoderBase.getData(ByteBuffer) call zmq.EncoderBase.getData(ByteBuffer) call zmq.EncoderBase.getData(ByteBuffer) call zmq.EncoderBase.getData(ByteBuffer) call zmq.EncoderBase.getData(ByteBuffer) if call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() != return = call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() = call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() if == || == call DecoderBase.setMsgSink() call DecoderBase.setMsgSink() call DecoderBase.setMsgSink() call DecoderBase.setMsgSink() call DecoderBase.setMsgSink() else if call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() == = call EncoderBase.setMsgSource() call EncoderBase.setMsgSource() call EncoderBase.setMsgSource() call EncoderBase.setMsgSource() call EncoderBase.setMsgSource() = call DecoderBase.setMsgSink() call DecoderBase.setMsgSink() call DecoderBase.setMsgSink() call DecoderBase.setMsgSink() call DecoderBase.setMsgSink() else = = if == call zmq.IOObject.setPollOut(SelectableChannel) call zmq.IOObject.setPollOut(SelectableChannel) call zmq.IOObject.setPollOut(SelectableChannel) call zmq.IOObject.setPollOut(SelectableChannel) call zmq.IOObject.setPollOut(SelectableChannel) = return int public public assert == || == decl_stmt int = call zmq.SessionBase.pushMsg(Msg) call zmq.SessionBase.pushMsg(Msg) call zmq.SessionBase.pushMsg(Msg) call zmq.SessionBase.pushMsg(Msg) call zmq.SessionBase.pushMsg(Msg) assert == = new new = call zmq.SessionBase.pushMsg(Msg) call zmq.SessionBase.pushMsg(Msg) call zmq.SessionBase.pushMsg(Msg) call zmq.SessionBase.pushMsg(Msg) call zmq.SessionBase.pushMsg(Msg) call zmq.SessionBase.flush() call zmq.SessionBase.flush() call zmq.SessionBase.flush() call zmq.SessionBase.flush() call zmq.SessionBase.flush() assert != call DecoderBase.setMsgSink() call DecoderBase.setMsgSink() call DecoderBase.setMsgSink() call DecoderBase.setMsgSink() call DecoderBase.setMsgSink() return private private assert != call zmq.SocketBase.eventDisconnected(String,SelectableChannel) call zmq.SocketBase.eventDisconnected(String,SelectableChannel) call zmq.SocketBase.eventDisconnected(String,SelectableChannel) call zmq.SocketBase.eventDisconnected(String,SelectableChannel) call zmq.SocketBase.eventDisconnected(String,SelectableChannel) call zmq.SessionBase.detach() call zmq.SessionBase.detach() call zmq.SessionBase.detach() call zmq.SessionBase.detach() call zmq.SessionBase.detach() int private private decl_stmt int try = catch return - return int private private decl_stmt int try = call java.nio.channels.SocketChannel.read(ByteBuffer) call java.nio.channels.SocketChannel.read(ByteBuffer) call java.nio.channels.SocketChannel.read(ByteBuffer) call java.nio.channels.SocketChannel.read(ByteBuffer) call java.nio.channels.SocketChannel.read(ByteBuffer) catch return - return