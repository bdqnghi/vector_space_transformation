org.zeromq zmq.Msg import zmq.SocketBase import zmq.ZError import zmq.ZMQ import java.nio.charset.Charset import java.util.concurrent.atomic.AtomicBoolean import class org.zeromq.ZSocket super super implements AtomicBoolean Charset SocketBase public public return int boolean public public final final decl_stmt boolean final final = call zmq.SocketBase.bind(String) call zmq.SocketBase.bind(String) call zmq.SocketBase.bind(String) call zmq.SocketBase.bind(String) call zmq.SocketBase.bind(String) return boolean public public final final decl_stmt boolean final final = call zmq.SocketBase.bind(String) call zmq.SocketBase.bind(String) call zmq.SocketBase.bind(String) call zmq.SocketBase.bind(String) call zmq.SocketBase.bind(String) return boolean public public final final decl_stmt boolean final final = call zmq.SocketBase.connect(String) call zmq.SocketBase.connect(String) call zmq.SocketBase.connect(String) call zmq.SocketBase.connect(String) call zmq.SocketBase.connect(String) return boolean public public final final decl_stmt boolean final final = call zmq.SocketBase.termEndpoint(String) call zmq.SocketBase.termEndpoint(String) call zmq.SocketBase.termEndpoint(String) call zmq.SocketBase.termEndpoint(String) call zmq.SocketBase.termEndpoint(String) return public final public final return int == public public public public public public public public public public return Msg public public decl_stmt zmq.Msg final final = new if call zmq.SocketBase.send(Msg,int) call zmq.SocketBase.send(Msg,int) call zmq.SocketBase.send(Msg,int) call zmq.SocketBase.send(Msg,int) call zmq.SocketBase.send(Msg,int) return call zmq.Msg.size() call zmq.Msg.size() call zmq.Msg.size() call zmq.Msg.size() call zmq.Msg.size() return - Msg decl byte public public decl_stmt byte final final final = decl_stmt zmq.Msg final final = new if call zmq.SocketBase.send(Msg,int) call zmq.SocketBase.send(Msg,int) call zmq.SocketBase.send(Msg,int) call zmq.SocketBase.send(Msg,int) call zmq.SocketBase.send(Msg,int) return return ZFrame boolean public public decl_stmt org.zeromq.ZFrame = decl_stmt boolean = while != = ! : if ! break = return public public return decl byte public public decl_stmt byte final final final = return public public return Msg public public decl_stmt zmq.Msg final final = call zmq.SocketBase.recv(int) call zmq.SocketBase.recv(int) call zmq.SocketBase.recv(int) call zmq.SocketBase.recv(int) call zmq.SocketBase.recv(int) return call zmq.Msg.data() call zmq.Msg.data() call zmq.Msg.data() call zmq.Msg.data() call zmq.Msg.data() public public return decl byte public public decl_stmt byte final final final = return new int private private decl_stmt int final final = call zmq.SocketBase.errno() call zmq.SocketBase.errno() call zmq.SocketBase.errno() call zmq.SocketBase.errno() call zmq.SocketBase.errno() if != && != throw new private private try call zmq.SocketBase.setSocketOpt(int,Object) call zmq.SocketBase.setSocketOpt(int,Object) call zmq.SocketBase.setSocketOpt(int,Object) call zmq.SocketBase.setSocketOpt(int,Object) call zmq.SocketBase.setSocketOpt(int,Object) catch private private return call zmq.SocketBase.getsockoptx(int) call zmq.SocketBase.getsockoptx(int) call zmq.SocketBase.getsockoptx(int) call zmq.SocketBase.getsockoptx(int) call zmq.SocketBase.getsockoptx(int) public public if call java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean,boolean) call java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean,boolean) call java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean,boolean) call java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean,boolean) call java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean,boolean)