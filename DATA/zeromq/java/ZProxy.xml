org.zeromq java.util.Arrays import java.util.List import java.util.concurrent.atomic.AtomicInteger import org.zeromq.ZActor.Actor import org.zeromq.ZAgent.SelectorCreator import org.zeromq.ZMQ.Socket import org.zeromq.ZStar.Exit import zmq.Msg import zmq.SocketBase import class org.zeromq.ZProxy String String String AtomicInteger String String String String Exit String ZAgent String String String String public public return public public return public public return public static public static return new new public static public static return new new public static public static return new new public static public static return new new public public return public public return public public return String public public assert ! assert ! if return if return decl_stmt java.lang.String = if call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) if = return public public return String public public if == return if == decl_stmt java.lang.String = = new return return ZMsg public public if call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) decl_stmt org.zeromq.ZMsg = call org.zeromq.ZAgent.recv(boolean) call org.zeromq.ZAgent.recv(boolean) call org.zeromq.ZAgent.recv(boolean) call org.zeromq.ZAgent.recv(boolean) call org.zeromq.ZAgent.recv(boolean) assert != call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) return return ZMsg String ZFrame public public decl_stmt org.zeromq.ZMsg = new call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) if == call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) else call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) for = < ++ decl_stmt org.zeromq.ZFrame = call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) decl_stmt java.lang.String = if call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) = return public public return public public call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) try call Exit.await() call Exit.await() call Exit.await() call Exit.await() call Exit.await() catch return public public return String public public if call Exit.isExited() call Exit.isExited() call Exit.isExited() call Exit.isExited() call Exit.isExited() return try decl_stmt java.lang.String = if call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) && = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || ! call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) return return catch return ZMsg String private private if ! call org.zeromq.ZAgent.sign() call org.zeromq.ZAgent.sign() call org.zeromq.ZAgent.sign() call org.zeromq.ZAgent.sign() call org.zeromq.ZAgent.sign() return decl_stmt org.zeromq.ZMsg final final = call org.zeromq.ZAgent.recv(boolean) call org.zeromq.ZAgent.recv(boolean) call org.zeromq.ZAgent.recv(boolean) call org.zeromq.ZAgent.recv(boolean) call org.zeromq.ZAgent.recv(boolean) if == return decl_stmt java.lang.String = call org.zeromq.ZMsg.popString() call org.zeromq.ZMsg.popString() call org.zeromq.ZMsg.popString() call org.zeromq.ZMsg.popString() call org.zeromq.ZMsg.popString() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() return public public return String public public decl_stmt java.lang.String = return call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) ZMsg public public decl_stmt org.zeromq.ZMsg = new call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) return public < public < = = new - = = = assert != assert != return public public < = = ZMsg boolean String String boolean public public assert == decl_stmt java.lang.String = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) decl_stmt java.lang.String = decl_stmt boolean = return else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) decl_stmt org.zeromq.ZMsg = decl_stmt boolean = call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() return else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) = else return return ZMsg private private decl_stmt org.zeromq.ZMsg = new if ! call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) else if call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) else if call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) else call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) return private private if ! = return private private = if else return private private = = = return private private = if assert != = return else return public public = return public public if == return if == return return ZMsg ZMsg boolean public public if if == return else decl_stmt org.zeromq.ZMsg = = decl_stmt boolean = decl_stmt org.zeromq.ZMsg = call org.zeromq.ZMsg.duplicate() call org.zeromq.ZMsg.duplicate() call org.zeromq.ZMsg.duplicate() call org.zeromq.ZMsg.duplicate() call org.zeromq.ZMsg.duplicate() = call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() = call org.zeromq.ZMsg.duplicate() call org.zeromq.ZMsg.duplicate() call org.zeromq.ZMsg.duplicate() call org.zeromq.ZMsg.duplicate() call org.zeromq.ZMsg.duplicate() |= call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() = call org.zeromq.ZMsg.duplicate() call org.zeromq.ZMsg.duplicate() call org.zeromq.ZMsg.duplicate() call org.zeromq.ZMsg.duplicate() call org.zeromq.ZMsg.duplicate() |= call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() return ! return public public if != = if ! return public public return ZMsg boolean ZMsg ZMsg boolean public public decl_stmt boolean = decl_stmt org.zeromq.ZMsg = if == return if != decl_stmt org.zeromq.ZMsg = decl_stmt boolean = != = call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) if ! decl_stmt org.zeromq.ZMsg = = call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() return SocketBase Msg SocketBase boolean Msg SocketBase long public public decl_stmt boolean decl_stmt zmq.SocketBase = decl_stmt zmq.SocketBase = decl_stmt zmq.SocketBase = == : while decl_stmt zmq.Msg = call zmq.SocketBase.recv(int) call zmq.SocketBase.recv(int) call zmq.SocketBase.recv(int) call zmq.SocketBase.recv(int) call zmq.SocketBase.recv(int) if == return decl_stmt long = call zmq.SocketBase.getSocketOpt(int) call zmq.SocketBase.getSocketOpt(int) call zmq.SocketBase.getSocketOpt(int) call zmq.SocketBase.getSocketOpt(int) call zmq.SocketBase.getSocketOpt(int) if < return if != decl_stmt zmq.Msg = new = call zmq.SocketBase.send(Msg,int) call zmq.SocketBase.send(Msg,int) call zmq.SocketBase.send(Msg,int) call zmq.SocketBase.send(Msg,int) call zmq.SocketBase.send(Msg,int) > : if ! = call zmq.SocketBase.send(Msg,int) call zmq.SocketBase.send(Msg,int) call zmq.SocketBase.send(Msg,int) call zmq.SocketBase.send(Msg,int) call zmq.SocketBase.send(Msg,int) > : if ! return if == break return