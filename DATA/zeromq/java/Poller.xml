zmq java.io.IOException import java.nio.channels.CancelledKeyException import java.nio.channels.ClosedChannelException import java.nio.channels.SelectableChannel import java.nio.channels.SelectionKey import java.nio.channels.Selector import java.util.HashMap import java.util.Iterator import java.util.Map import java.util.concurrent.atomic.AtomicBoolean import class zmq.Poller super super extends super implements AtomicBoolean decl Map Thread Selector boolean boolean String public public if ! try call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) catch try call Selector.close() call Selector.close() call Selector.close() call Selector.close() call Selector.close() catch public final public final call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new public final public final call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() = call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) - public final public final public final public final public final public final public final public final public final public final public final public final PollSet private final private final decl_stmt PollSet = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if = & ~ else = | if != call PollSet.key() call PollSet.key() call PollSet.key() call PollSet.key() call PollSet.key() call PollSet.key() call PollSet.key() call PollSet.key() call PollSet.key() else call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) public public = new call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() public public = call Selector.wakeup() call Selector.wakeup() call Selector.wakeup() call Selector.wakeup() call Selector.wakeup() SelectableChannel SelectionKey int decl Iterator long long int decl Map IPollEvents PollSet public public decl_stmt int = while ! decl_stmt long = while call java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean,boolean) call java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean,boolean) call java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean,boolean) call java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean,boolean) call java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean,boolean) decl_stmt java.util.Iterator < < = call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt java.util.Map < = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt java.nio.channels.SelectableChannel = call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() decl_stmt PollSet = call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() if == try = call SelectableChannel.register() call SelectableChannel.register() call SelectableChannel.register() call SelectableChannel.register() call SelectableChannel.register() catch if || ! call SelectableChannel.isOpen() call SelectableChannel.isOpen() call SelectableChannel.isOpen() call SelectableChannel.isOpen() call SelectableChannel.isOpen() if != call PollSet.key() call PollSet.key() call PollSet.key() call PollSet.key() call PollSet.key() call PollSet.key() call PollSet.key() call PollSet.key() call PollSet.key() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() decl_stmt int decl_stmt long = try = call Selector.select() call Selector.select() call Selector.select() call Selector.select() call Selector.select() catch throw new if == if == || - < / ++ else = if > = continue decl_stmt java.util.Iterator < = call Selector.selectedKeys() call Selector.selectedKeys() call Selector.selectedKeys() call Selector.selectedKeys() call Selector.selectedKeys() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt java.nio.channels.SelectionKey = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt zmq.IPollEvents = call java.nio.channels.SelectionKey.attachment() call java.nio.channels.SelectionKey.attachment() call java.nio.channels.SelectionKey.attachment() call java.nio.channels.SelectionKey.attachment() call java.nio.channels.SelectionKey.attachment() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() try if call java.nio.channels.SelectionKey.isReadable() call java.nio.channels.SelectionKey.isReadable() call java.nio.channels.SelectionKey.isReadable() call java.nio.channels.SelectionKey.isReadable() call java.nio.channels.SelectionKey.isReadable() call zmq.IPollEvents.inEvent() call zmq.IPollEvents.inEvent() call zmq.IPollEvents.inEvent() call zmq.IPollEvents.inEvent() call zmq.IPollEvents.inEvent() else if call java.nio.channels.SelectionKey.isAcceptable() call java.nio.channels.SelectionKey.isAcceptable() call java.nio.channels.SelectionKey.isAcceptable() call java.nio.channels.SelectionKey.isAcceptable() call java.nio.channels.SelectionKey.isAcceptable() call IPollEvents.acceptEvent() call IPollEvents.acceptEvent() call IPollEvents.acceptEvent() call IPollEvents.acceptEvent() call IPollEvents.acceptEvent() else if call java.nio.channels.SelectionKey.isConnectable() call java.nio.channels.SelectionKey.isConnectable() call java.nio.channels.SelectionKey.isConnectable() call java.nio.channels.SelectionKey.isConnectable() call java.nio.channels.SelectionKey.isConnectable() call zmq.IPollEvents.connectEvent() call zmq.IPollEvents.connectEvent() call zmq.IPollEvents.connectEvent() call zmq.IPollEvents.connectEvent() call zmq.IPollEvents.connectEvent() if call java.nio.channels.SelectionKey.isWritable() call java.nio.channels.SelectionKey.isWritable() call java.nio.channels.SelectionKey.isWritable() call java.nio.channels.SelectionKey.isWritable() call java.nio.channels.SelectionKey.isWritable() call zmq.IPollEvents.outEvent() call zmq.IPollEvents.outEvent() call zmq.IPollEvents.outEvent() call zmq.IPollEvents.outEvent() call zmq.IPollEvents.outEvent() catch = Selector private private decl_stmt java.nio.channels.Selector try = catch throw new try call Selector.close() call Selector.close() call Selector.close() call Selector.close() call Selector.close() catch = for : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() = call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean)