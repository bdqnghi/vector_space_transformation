zmq java.nio.ByteBuffer import class zmq.Decoder super super extends ByteBuffer IMsgSink int int int long int decl byte Msg public public = protected protected switch case return case return case return case return default: return int byte private private call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() decl_stmt byte = if == - call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() else if == return decl_stmt int = int if < = & if >= && - > return else = - call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() return long int private private call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() decl_stmt long final final = call ByteBuffer.getLong() call ByteBuffer.getLong() call ByteBuffer.getLong() call ByteBuffer.getLong() call ByteBuffer.getLong() if <= return if >= && - > return if - > return decl_stmt int final final = - = call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() return int private private decl_stmt int = call zmq.Msg.setFlags(int) call zmq.Msg.setFlags(int) call zmq.Msg.setFlags(int) call zmq.Msg.setFlags(int) call zmq.Msg.setFlags(int) & return int private private if == return decl_stmt int = call IMsgSink.pushMsg() call IMsgSink.pushMsg() call IMsgSink.pushMsg() call IMsgSink.pushMsg() call IMsgSink.pushMsg() if != return call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() return