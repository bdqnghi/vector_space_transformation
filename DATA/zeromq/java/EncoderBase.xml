zmq java.nio.ByteBuffer import java.nio.channels.FileChannel import class zmq.EncoderBase super super implements int ByteBuffer int ByteBuffer FileChannel boolean int boolean int Transfer int public public if == = call ByteBuffer.clear() call ByteBuffer.clear() call ByteBuffer.clear() call ByteBuffer.clear() call ByteBuffer.clear() while call ByteBuffer.hasRemaining() call ByteBuffer.hasRemaining() call ByteBuffer.hasRemaining() call ByteBuffer.hasRemaining() call ByteBuffer.hasRemaining() if == if ! break if != call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() decl_stmt zmq.Transfer = new long long = = return if == && >= decl_stmt zmq.Transfer = new = = return decl_stmt int = call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() if <= call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() = = else call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() + call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() += -= call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() + call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() return new public public return > protected protected return protected protected = protected protected = public final public final return protected protected if == else protected protected if != = call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() else = = = = = = protected protected = = = = = = protected protected = = = int = int = =