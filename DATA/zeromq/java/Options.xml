zmq java.util.ArrayList import java.util.Arrays import java.util.List import zmq.TcpAddress.TcpAddressMask import class zmq.Options int long int int int int boolean MsgAllocator int int int int int long byte int int decl List int boolean int int int int decl Class boolean String int boolean decl Class int int decl byte int TcpAddressMask decl Class String decl byte public public switch case = if < throw new + return case = if < throw new + return case = return case decl_stmt byte if instanceof = else if instanceof = else throw new + if == || > throw new + = = byte return case = return case = return case = return case = return case = return case = if < - throw new + return case = if < throw new + return case = return case = return case = return case = return case = return case = if != && != throw new + return case = if != - && != && != throw new + return case = if != && != throw new + return case case case return case decl_stmt java.lang.String = if == call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() else if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() == || call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > throw new + else decl_stmt TcpAddressMask = new call TcpAddressMask.resolve() call TcpAddressMask.resolve() call TcpAddressMask.resolve() call TcpAddressMask.resolve() call TcpAddressMask.resolve() == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return case if instanceof try = catch throw new else if instanceof = < extends extends else throw new + return case if instanceof try = catch throw new else if instanceof = < extends extends else throw new + return case if instanceof try decl_stmt java.lang.Class < extends extends = = call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() catch throw new catch throw new catch throw new else if instanceof try decl_stmt java.lang.Class < extends extends = < extends extends = call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() catch throw new catch throw new else if instanceof = else throw new + return default: throw new + public public switch case return case return case return case return case return case return case return case return case return case return case return case return case return case return case return case return case return case return case return case return case case case return case return default: throw new +