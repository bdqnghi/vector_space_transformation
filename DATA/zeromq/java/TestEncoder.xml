zmq java.io.IOException import java.nio.ByteBuffer import org.junit.Before import org.junit.Test import zmq.Helper.DummySession import zmq.Helper.DummySocketChannel import static static org.junit.Assert.assertThat import static static org.hamcrest.CoreMatchers.is import class zmq.TestEncoder decl Helper decl DummySession EncoderBase public public = new = new call EncoderBase.setMsgSource() call EncoderBase.setMsgSource() call EncoderBase.setMsgSource() call EncoderBase.setMsgSource() call EncoderBase.setMsgSource() = new Msg private private decl_stmt zmq.Msg = new return Msg private private decl_stmt zmq.Msg = new for = < ++ call zmq.Msg.put(ByteBuffer) call zmq.Msg.put(ByteBuffer) call zmq.Msg.put(ByteBuffer) call zmq.Msg.put(ByteBuffer) call zmq.Msg.put(ByteBuffer) return Msg int int int Transfer public public decl_stmt zmq.Msg = call decl Helper.pushMsg() call decl Helper.pushMsg() call decl Helper.pushMsg() call decl Helper.pushMsg() call decl Helper.pushMsg() decl_stmt zmq.Transfer = call zmq.EncoderBase.getData(ByteBuffer) call zmq.EncoderBase.getData(ByteBuffer) call zmq.EncoderBase.getData(ByteBuffer) call zmq.EncoderBase.getData(ByteBuffer) call zmq.EncoderBase.getData(ByteBuffer) decl_stmt int = call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() decl_stmt int = decl_stmt int = call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() private private try return catch return - Msg int int int Transfer public public decl_stmt zmq.Msg = call decl Helper.pushMsg() call decl Helper.pushMsg() call decl Helper.pushMsg() call decl Helper.pushMsg() call decl Helper.pushMsg() decl_stmt zmq.Transfer = call zmq.EncoderBase.getData(ByteBuffer) call zmq.EncoderBase.getData(ByteBuffer) call zmq.EncoderBase.getData(ByteBuffer) call zmq.EncoderBase.getData(ByteBuffer) call zmq.EncoderBase.getData(ByteBuffer) decl_stmt int = call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() decl_stmt int = = call zmq.EncoderBase.getData(ByteBuffer) call zmq.EncoderBase.getData(ByteBuffer) call zmq.EncoderBase.getData(ByteBuffer) call zmq.EncoderBase.getData(ByteBuffer) call zmq.EncoderBase.getData(ByteBuffer) decl_stmt int = call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() = = call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() = = call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() = = call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() call Transfer.remaining() protected protected switch case return case return return private private ! return private private = if == return ! return public public = Msg CustomEncoder decl byte Transfer public public decl_stmt CustomEncoder = new call CustomEncoder.setMsgSource() call CustomEncoder.setMsgSource() call CustomEncoder.setMsgSource() call CustomEncoder.setMsgSource() call CustomEncoder.setMsgSource() decl_stmt zmq.Msg = new call decl Helper.pushMsg() call decl Helper.pushMsg() call decl Helper.pushMsg() call decl Helper.pushMsg() call decl Helper.pushMsg() decl_stmt zmq.Transfer = call CustomEncoder.getData() call CustomEncoder.getData() call CustomEncoder.getData() call CustomEncoder.getData() call CustomEncoder.getData() decl_stmt byte = call decl DummySession.data() call decl DummySession.data() call decl DummySession.data() call decl DummySession.data() call decl DummySession.data() new int new