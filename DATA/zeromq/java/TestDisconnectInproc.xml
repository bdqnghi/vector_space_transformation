zmq org.junit.Test import static static org.junit.Assert.assertEquals import static static org.junit.Assert.assertTrue import class zmq.TestDisconnectInproc SocketBase SocketBase int int decl PollItem int boolean decl byte Ctx Msg Msg Msg int public public throws decl_stmt int = decl_stmt boolean = decl_stmt zmq.Ctx = decl_stmt zmq.SocketBase = decl_stmt zmq.SocketBase = decl_stmt int decl_stmt int = while decl_stmt zmq.PollItem = new new if while decl_stmt zmq.Msg = decl_stmt int = call zmq.Msg.size() call zmq.Msg.size() call zmq.Msg.size() call zmq.Msg.size() call zmq.Msg.size() decl_stmt byte = call zmq.Msg.data() call zmq.Msg.data() call zmq.Msg.data() call zmq.Msg.data() call zmq.Msg.data() if == new - = else assert ! new - = = if == break if while decl_stmt zmq.Msg = decl_stmt int = call zmq.Msg.size() call zmq.Msg.size() call zmq.Msg.size() call zmq.Msg.size() call zmq.Msg.size() decl_stmt byte = call zmq.Msg.data() call zmq.Msg.data() call zmq.Msg.data() call zmq.Msg.data() call zmq.Msg.data() new = if == ++ break if == if == if == break decl_stmt zmq.Msg = new decl_stmt zmq.Msg = new ++ !