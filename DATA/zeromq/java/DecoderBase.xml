zmq java.nio.ByteBuffer import class zmq.DecoderBase super super implements boolean int ByteBuffer MsgAllocator int ByteBuffer public public if call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() >= = return call ByteBuffer.duplicate() call ByteBuffer.duplicate() call ByteBuffer.duplicate() call ByteBuffer.duplicate() call ByteBuffer.duplicate() else = call ByteBuffer.clear() call ByteBuffer.clear() call ByteBuffer.clear() call ByteBuffer.clear() call ByteBuffer.clear() return int int int public public if < return - if call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() + while call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() == if ! if < return - return return decl_stmt int = while while call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() == if ! if < return - return if == return decl_stmt int = call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() - decl_stmt int = call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() + call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() += protected protected protected protected = call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() = protected protected = = protected protected return protected protected = protected protected - public public if ! return while call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() == if ! return return public public return public public =