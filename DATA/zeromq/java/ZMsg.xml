org.zeromq java.io.DataInputStream import java.io.DataOutputStream import java.io.IOException import java.io.PrintWriter import java.io.StringWriter import java.util.ArrayDeque import java.util.Collection import java.util.Deque import java.util.Iterator import java.util.NoSuchElementException import org.zeromq.ZMQ.Socket import class org.zeromq.ZMsg super super implements decl ArrayDeque public public if == return for : call decl ArrayDeque.clear() call decl ArrayDeque.clear() call decl ArrayDeque.clear() call decl ArrayDeque.clear() call decl ArrayDeque.clear() = long public public decl_stmt long = for : += return public public if == = new < call decl ArrayDeque.add() call decl ArrayDeque.add() call decl ArrayDeque.add() call decl ArrayDeque.add() call decl ArrayDeque.add() new ZMsg public public if != decl_stmt org.zeromq.ZMsg = new for : call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) return else return public public if != new ZFrame ZFrame public public if == return decl_stmt org.zeromq.ZFrame = decl_stmt org.zeromq.ZFrame = if call org.zeromq.ZFrame.hasData() call org.zeromq.ZFrame.hasData() call org.zeromq.ZFrame.hasData() call org.zeromq.ZFrame.hasData() call org.zeromq.ZFrame.hasData() && call org.zeromq.ZFrame.size() call org.zeromq.ZFrame.size() call org.zeromq.ZFrame.size() call org.zeromq.ZFrame.size() call org.zeromq.ZFrame.size() == = call org.zeromq.ZFrame.destroy() call org.zeromq.ZFrame.destroy() call org.zeromq.ZFrame.destroy() call org.zeromq.ZFrame.destroy() call org.zeromq.ZFrame.destroy() return public public return decl Iterator boolean ZFrame public public if == throw new if == throw new if call decl ArrayDeque.size() call decl ArrayDeque.size() call decl ArrayDeque.size() call decl ArrayDeque.size() call decl ArrayDeque.size() == return decl_stmt boolean = decl_stmt java.util.Iterator < = call decl ArrayDeque.iterator() call decl ArrayDeque.iterator() call decl ArrayDeque.iterator() call decl ArrayDeque.iterator() call decl ArrayDeque.iterator() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt org.zeromq.ZFrame = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() = call org.zeromq.ZFrame.sendAndKeep(Socket) call org.zeromq.ZFrame.sendAndKeep(Socket) call org.zeromq.ZFrame.sendAndKeep(Socket) call org.zeromq.ZFrame.sendAndKeep(Socket) call org.zeromq.ZFrame.sendAndKeep(Socket) call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() : if ! break if return public static public static return ZMsg ZFrame public static public static if == throw new decl_stmt org.zeromq.ZMsg = new while decl_stmt org.zeromq.ZFrame = if == call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() = break call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) if ! call org.zeromq.ZFrame.hasMore() call org.zeromq.ZFrame.hasMore() call org.zeromq.ZFrame.hasMore() call org.zeromq.ZFrame.hasMore() call org.zeromq.ZFrame.hasMore() break return public static public static if == return try if > for : return catch return int ZMsg decl byte int int public static public static if == return decl_stmt org.zeromq.ZMsg = new try decl_stmt int = if > decl_stmt int = while ++ <= decl_stmt int = decl_stmt byte = new call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) call org.zeromq.ZMsg.add(String) new return catch return ZMsg public static public static decl_stmt org.zeromq.ZMsg = new for : call org.zeromq.ZMsg.addString(String) call org.zeromq.ZMsg.addString(String) call org.zeromq.ZMsg.addString(String) call org.zeromq.ZMsg.addString(String) call org.zeromq.ZMsg.addString(String) return ZFrame decl Iterator ZMsg ZFrame decl Iterator public public if == return if == || != return decl_stmt org.zeromq.ZMsg = if == || == return decl_stmt java.util.Iterator < = call decl ArrayDeque.iterator() call decl ArrayDeque.iterator() call decl ArrayDeque.iterator() call decl ArrayDeque.iterator() call decl ArrayDeque.iterator() decl_stmt java.util.Iterator < = call ZMsg.frames() call ZMsg.frames() call ZMsg.frames() call ZMsg.frames() call ZMsg.frames() call ZMsg.frames() call ZMsg.frames() call ZMsg.frames() call ZMsg.frames() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() && call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt org.zeromq.ZFrame = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt org.zeromq.ZFrame = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if ! == == : call org.zeromq.ZFrame.equals(Object) call org.zeromq.ZFrame.equals(Object) call org.zeromq.ZFrame.equals(Object) call org.zeromq.ZFrame.equals(Object) call org.zeromq.ZFrame.equals(Object) return return ! call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() || call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() int public public if == || call decl ArrayDeque.size() call decl ArrayDeque.size() call decl ArrayDeque.size() call decl ArrayDeque.size() call decl ArrayDeque.size() == return decl_stmt int = for : = * + == : return StringWriter PrintWriter public public if == return try decl_stmt StringWriter = new decl_stmt PrintWriter = new call PrintWriter.printf() call PrintWriter.printf() call PrintWriter.printf() call PrintWriter.printf() call PrintWriter.printf() for : call PrintWriter.printf() call PrintWriter.printf() call PrintWriter.printf() call PrintWriter.printf() call PrintWriter.printf() call StringWriter.getBuffer() call StringWriter.getBuffer() call StringWriter.getBuffer() call StringWriter.getBuffer() call StringWriter.getBuffer() call StringWriter.close() call StringWriter.close() call StringWriter.close() call StringWriter.close() call StringWriter.close() catch throw new + public public public public new public public new public public new public public new public public new public public new public public return new public public return new public < public < return call decl ArrayDeque.iterator() call decl ArrayDeque.iterator() call decl ArrayDeque.iterator() call decl ArrayDeque.iterator() call decl ArrayDeque.iterator() public public < extends extends return call decl ArrayDeque.addAll() call decl ArrayDeque.addAll() call decl ArrayDeque.addAll() call decl ArrayDeque.addAll() call decl ArrayDeque.addAll() public public call decl ArrayDeque.clear() call decl ArrayDeque.clear() call decl ArrayDeque.clear() call decl ArrayDeque.clear() call decl ArrayDeque.clear() public public < return call decl ArrayDeque.containsAll() call decl ArrayDeque.containsAll() call decl ArrayDeque.containsAll() call decl ArrayDeque.containsAll() call decl ArrayDeque.containsAll() public public return call decl ArrayDeque.isEmpty() call decl ArrayDeque.isEmpty() call decl ArrayDeque.isEmpty() call decl ArrayDeque.isEmpty() call decl ArrayDeque.isEmpty() public public < return call decl ArrayDeque.removeAll() call decl ArrayDeque.removeAll() call decl ArrayDeque.removeAll() call decl ArrayDeque.removeAll() call decl ArrayDeque.removeAll() public public < return call decl ArrayDeque.retainAll() call decl ArrayDeque.retainAll() call decl ArrayDeque.retainAll() call decl ArrayDeque.retainAll() call decl ArrayDeque.retainAll() public public return call decl ArrayDeque.toArray() call decl ArrayDeque.toArray() call decl ArrayDeque.toArray() call decl ArrayDeque.toArray() call decl ArrayDeque.toArray() public < public < return call decl ArrayDeque.toArray() call decl ArrayDeque.toArray() call decl ArrayDeque.toArray() call decl ArrayDeque.toArray() call decl ArrayDeque.toArray() public public if == = new < return call decl ArrayDeque.add() call decl ArrayDeque.add() call decl ArrayDeque.add() call decl ArrayDeque.add() call decl ArrayDeque.add() public public if == = new < call decl ArrayDeque.addFirst() call decl ArrayDeque.addFirst() call decl ArrayDeque.addFirst() call decl ArrayDeque.addFirst() call decl ArrayDeque.addFirst() public public if == = new < call decl ArrayDeque.addLast() call decl ArrayDeque.addLast() call decl ArrayDeque.addLast() call decl ArrayDeque.addLast() call decl ArrayDeque.addLast() public public return call decl ArrayDeque.contains() call decl ArrayDeque.contains() call decl ArrayDeque.contains() call decl ArrayDeque.contains() call decl ArrayDeque.contains() public < public < return call decl ArrayDeque.descendingIterator() call decl ArrayDeque.descendingIterator() call decl ArrayDeque.descendingIterator() call decl ArrayDeque.descendingIterator() call decl ArrayDeque.descendingIterator() public public return call decl ArrayDeque.element() call decl ArrayDeque.element() call decl ArrayDeque.element() call decl ArrayDeque.element() call decl ArrayDeque.element() public public try return call decl ArrayDeque.getFirst() call decl ArrayDeque.getFirst() call decl ArrayDeque.getFirst() call decl ArrayDeque.getFirst() call decl ArrayDeque.getFirst() catch return public public try return call decl ArrayDeque.getLast() call decl ArrayDeque.getLast() call decl ArrayDeque.getLast() call decl ArrayDeque.getLast() call decl ArrayDeque.getLast() catch return public public if == = new < return call decl ArrayDeque.offer() call decl ArrayDeque.offer() call decl ArrayDeque.offer() call decl ArrayDeque.offer() call decl ArrayDeque.offer() public public if == = new < return call decl ArrayDeque.offerFirst() call decl ArrayDeque.offerFirst() call decl ArrayDeque.offerFirst() call decl ArrayDeque.offerFirst() call decl ArrayDeque.offerFirst() public public if == = new < return call decl ArrayDeque.offerLast() call decl ArrayDeque.offerLast() call decl ArrayDeque.offerLast() call decl ArrayDeque.offerLast() call decl ArrayDeque.offerLast() public public return call decl ArrayDeque.peek() call decl ArrayDeque.peek() call decl ArrayDeque.peek() call decl ArrayDeque.peek() call decl ArrayDeque.peek() public public try return call decl ArrayDeque.peekFirst() call decl ArrayDeque.peekFirst() call decl ArrayDeque.peekFirst() call decl ArrayDeque.peekFirst() call decl ArrayDeque.peekFirst() catch return public public try return call decl ArrayDeque.peekLast() call decl ArrayDeque.peekLast() call decl ArrayDeque.peekLast() call decl ArrayDeque.peekLast() call decl ArrayDeque.peekLast() catch return public public return call decl ArrayDeque.poll() call decl ArrayDeque.poll() call decl ArrayDeque.poll() call decl ArrayDeque.poll() call decl ArrayDeque.poll() public public return call decl ArrayDeque.pollFirst() call decl ArrayDeque.pollFirst() call decl ArrayDeque.pollFirst() call decl ArrayDeque.pollFirst() call decl ArrayDeque.pollFirst() public public return call decl ArrayDeque.pollLast() call decl ArrayDeque.pollLast() call decl ArrayDeque.pollLast() call decl ArrayDeque.pollLast() call decl ArrayDeque.pollLast() public public if == = new < try return call decl ArrayDeque.pop() call decl ArrayDeque.pop() call decl ArrayDeque.pop() call decl ArrayDeque.pop() call decl ArrayDeque.pop() catch return ZFrame public public decl_stmt org.zeromq.ZFrame = if == return return call org.zeromq.ZFrame.toString() call org.zeromq.ZFrame.toString() call org.zeromq.ZFrame.toString() call org.zeromq.ZFrame.toString() call org.zeromq.ZFrame.toString() public public if == = new < call decl ArrayDeque.push() call decl ArrayDeque.push() call decl ArrayDeque.push() call decl ArrayDeque.push() call decl ArrayDeque.push() public public return call decl ArrayDeque.remove() call decl ArrayDeque.remove() call decl ArrayDeque.remove() call decl ArrayDeque.remove() call decl ArrayDeque.remove() public public return call decl ArrayDeque.remove() call decl ArrayDeque.remove() call decl ArrayDeque.remove() call decl ArrayDeque.remove() call decl ArrayDeque.remove() public public try return call decl ArrayDeque.removeFirst() call decl ArrayDeque.removeFirst() call decl ArrayDeque.removeFirst() call decl ArrayDeque.removeFirst() call decl ArrayDeque.removeFirst() catch return public public return call decl ArrayDeque.removeFirstOccurrence() call decl ArrayDeque.removeFirstOccurrence() call decl ArrayDeque.removeFirstOccurrence() call decl ArrayDeque.removeFirstOccurrence() call decl ArrayDeque.removeFirstOccurrence() public public try return call decl ArrayDeque.removeLast() call decl ArrayDeque.removeLast() call decl ArrayDeque.removeLast() call decl ArrayDeque.removeLast() call decl ArrayDeque.removeLast() catch return public public return call decl ArrayDeque.removeLastOccurrence() call decl ArrayDeque.removeLastOccurrence() call decl ArrayDeque.removeLastOccurrence() call decl ArrayDeque.removeLastOccurrence() call decl ArrayDeque.removeLastOccurrence() public public return call decl ArrayDeque.size() call decl ArrayDeque.size() call decl ArrayDeque.size() call decl ArrayDeque.size() call decl ArrayDeque.size() decl Iterator StringBuilder public public decl_stmt java.lang.StringBuilder = new decl_stmt java.util.Iterator < = call decl ArrayDeque.iterator() call decl ArrayDeque.iterator() call decl ArrayDeque.iterator() call decl ArrayDeque.iterator() call decl ArrayDeque.iterator() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString()