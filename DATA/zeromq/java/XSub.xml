zmq class zmq.XSub super super extends FQ Dist Trie decl Trie boolean Msg boolean Pipe Msg boolean public public decl_stmt zmq.Pipe = decl_stmt zmq.Msg = new + call zmq.Msg.put(ByteBuffer) call zmq.Msg.put(ByteBuffer) call zmq.Msg.put(ByteBuffer) call zmq.Msg.put(ByteBuffer) call zmq.Msg.put(ByteBuffer) byte decl_stmt boolean = call zmq.Pipe.write(Msg) call zmq.Pipe.write(Msg) call zmq.Pipe.write(Msg) call zmq.Pipe.write(Msg) call zmq.Pipe.write(Msg) protected protected assert != call zmq.FQ.attach(Pipe) call zmq.FQ.attach(Pipe) call zmq.FQ.attach(Pipe) call zmq.FQ.attach(Pipe) call zmq.FQ.attach(Pipe) call zmq.Dist.attach(Pipe) call zmq.Dist.attach(Pipe) call zmq.Dist.attach(Pipe) call zmq.Dist.attach(Pipe) call zmq.Dist.attach(Pipe) call zmq.Trie.apply(ITrieHandler,Object) call zmq.Trie.apply(ITrieHandler,Object) call zmq.Trie.apply(ITrieHandler,Object) call zmq.Trie.apply(ITrieHandler,Object) call zmq.Trie.apply(ITrieHandler,Object) protected protected call zmq.FQ.activated(Pipe) call zmq.FQ.activated(Pipe) call zmq.FQ.activated(Pipe) call zmq.FQ.activated(Pipe) call zmq.FQ.activated(Pipe) protected protected call zmq.Dist.activated(Pipe) call zmq.Dist.activated(Pipe) call zmq.Dist.activated(Pipe) call zmq.Dist.activated(Pipe) call zmq.Dist.activated(Pipe) protected protected call FQ.terminated() call FQ.terminated() call FQ.terminated() call FQ.terminated() call FQ.terminated() call zmq.Dist.terminated(Pipe) call zmq.Dist.terminated(Pipe) call zmq.Dist.terminated(Pipe) call zmq.Dist.terminated(Pipe) call zmq.Dist.terminated(Pipe) protected protected call zmq.Trie.apply(ITrieHandler,Object) call zmq.Trie.apply(ITrieHandler,Object) call zmq.Trie.apply(ITrieHandler,Object) call zmq.Trie.apply(ITrieHandler,Object) call zmq.Trie.apply(ITrieHandler,Object) decl byte protected protected decl_stmt byte = if < || != && != throw new if == call zmq.Trie.add(byte) call zmq.Trie.add(byte) call zmq.Trie.add(byte) call zmq.Trie.add(byte) call zmq.Trie.add(byte) return call Dist.sendToAll() call Dist.sendToAll() call Dist.sendToAll() call Dist.sendToAll() call Dist.sendToAll() else if call Trie.rm() call Trie.rm() call Trie.rm() call Trie.rm() call Trie.rm() return call Dist.sendToAll() call Dist.sendToAll() call Dist.sendToAll() call Dist.sendToAll() call Dist.sendToAll() return protected protected return Msg protected protected decl_stmt zmq.Msg = if = = = call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() return while = call zmq.FQ.recv(ValueReference) call zmq.FQ.recv(ValueReference) call zmq.FQ.recv(ValueReference) call zmq.FQ.recv(ValueReference) call zmq.FQ.recv(ValueReference) if == return if || ! || = call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() return while call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() = call zmq.FQ.recv(ValueReference) call zmq.FQ.recv(ValueReference) call zmq.FQ.recv(ValueReference) call zmq.FQ.recv(ValueReference) call zmq.FQ.recv(ValueReference) assert != protected protected if return if return while = call zmq.FQ.recv(ValueReference) call zmq.FQ.recv(ValueReference) call zmq.FQ.recv(ValueReference) call zmq.FQ.recv(ValueReference) call zmq.FQ.recv(ValueReference) if == return if ! || = return while call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() = call zmq.FQ.recv(ValueReference) call zmq.FQ.recv(ValueReference) call zmq.FQ.recv(ValueReference) call zmq.FQ.recv(ValueReference) call zmq.FQ.recv(ValueReference) assert != private private return call zmq.Trie.check(ByteBuffer) call zmq.Trie.check(ByteBuffer) call zmq.Trie.check(ByteBuffer) call zmq.Trie.check(ByteBuffer) call zmq.Trie.check(ByteBuffer)