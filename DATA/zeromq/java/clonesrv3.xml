guide java.util.Iterator import java.util.LinkedHashMap import java.util.Map import java.util.Map.Entry import org.zeromq.ZContext import org.zeromq.ZMQ import org.zeromq.ZMQ.Poller import org.zeromq.ZMQ.Socket import class guide.clonesrv3 decl Map Socket kvsimple long Poller ZContext String decl Iterator Socket kvsimple decl Entry kvsimple Socket decl byte public public decl_stmt org.zeromq.ZContext = new decl_stmt java.net.Socket = call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) decl_stmt java.net.Socket = call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) decl_stmt java.net.Socket = call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) decl_stmt zmq.Poller = new call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) decl_stmt long = while ! if call Poller.poll() call Poller.poll() call Poller.poll() call Poller.poll() call Poller.poll() < break if call Poller.pollin() call Poller.pollin() call Poller.pollin() call Poller.pollin() call Poller.pollin() decl_stmt guide.kvsimple = if == break call guide.kvsimple.setSequence(long) call guide.kvsimple.setSequence(long) call guide.kvsimple.setSequence(long) call guide.kvsimple.setSequence(long) call guide.kvsimple.setSequence(long) ++ call guide.kvsimple.send(Socket) call guide.kvsimple.send(Socket) call guide.kvsimple.send(Socket) call guide.kvsimple.send(Socket) call guide.kvsimple.send(Socket) call guide.kvsimple.getKey() call guide.kvsimple.getKey() call guide.kvsimple.getKey() call guide.kvsimple.getKey() call guide.kvsimple.getKey() if call Poller.pollin() call Poller.pollin() call Poller.pollin() call Poller.pollin() call Poller.pollin() decl_stmt byte = call Socket.recv() call Socket.recv() call Socket.recv() call Socket.recv() call Socket.recv() if == break decl_stmt java.lang.String = call Socket.recvStr() call Socket.recvStr() call Socket.recvStr() call Socket.recvStr() call Socket.recvStr() if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) break decl_stmt java.util.Iterator < < = call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt Entry < = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt guide.kvsimple = call decl Entry.getValue() call decl Entry.getValue() call decl Entry.getValue() call decl Entry.getValue() call decl Entry.getValue() + call decl Entry.getValue() call decl Entry.getValue() call decl Entry.getValue() call decl Entry.getValue() call decl Entry.getValue() + call Socket.send() call Socket.send() call Socket.send() call Socket.send() call Socket.send() decl_stmt guide.kvsimple = new call guide.kvsimple.send(Socket) call guide.kvsimple.send(Socket) call guide.kvsimple.send(Socket) call guide.kvsimple.send(Socket) call guide.kvsimple.send(Socket) call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy() private private public static public static new