org.zeromq java.util.Arrays import java.util.List import java.util.UUID import org.junit.Assert import org.junit.Test import org.zeromq.ZActor.Actor import org.zeromq.ZMQ.Socket import zmq.ZError import class org.zeromq.TestZActor String int ZActor Socket Actor ZContext boolean ZMsg String public public decl_stmt org.zeromq.Actor = new public < public < assert return public public decl_stmt java.lang.String = call Socket.recvStr() call Socket.recvStr() call Socket.recvStr() call Socket.recvStr() call Socket.recvStr() if call Socket.send() call Socket.send() call Socket.send() call Socket.send() call Socket.send() if call Socket.send() call Socket.send() call Socket.send() call Socket.send() call Socket.send() return return decl_stmt org.zeromq.ZContext = new decl_stmt org.zeromq.ZActor = new new decl_stmt java.net.Socket = call ZActor.pipe() call ZActor.pipe() call ZActor.pipe() call ZActor.pipe() call ZActor.pipe() decl_stmt boolean = call Socket.send() call Socket.send() call Socket.send() call Socket.send() call Socket.send() decl_stmt org.zeromq.ZMsg = call ZActor.recv() call ZActor.recv() call ZActor.recv() call ZActor.recv() call ZActor.recv() decl_stmt java.lang.String = call org.zeromq.ZMsg.popString() call org.zeromq.ZMsg.popString() call org.zeromq.ZMsg.popString() call org.zeromq.ZMsg.popString() call org.zeromq.ZMsg.popString() = call Socket.send() call Socket.send() call Socket.send() call Socket.send() call Socket.send() = call ZActor.recv() call ZActor.recv() call ZActor.recv() call ZActor.recv() call ZActor.recv() = call ZActor.recv() call ZActor.recv() call ZActor.recv() call ZActor.recv() call ZActor.recv() = call ZActor.sign() call ZActor.sign() call ZActor.sign() call ZActor.sign() call ZActor.sign() = call ZActor.send() call ZActor.send() call ZActor.send() call ZActor.send() call ZActor.send() try = call Socket.send() call Socket.send() call Socket.send() call Socket.send() call Socket.send() catch decl_stmt int = call org.zeromq.ZContext.close() call org.zeromq.ZContext.close() call org.zeromq.ZContext.close() call org.zeromq.ZContext.close() call org.zeromq.ZContext.close() public < public < assert return String public public decl_stmt java.lang.String = if if return return int String String ZActor ZAgent decl ZActor ZContext String Socket boolean ZMsg public public decl_stmt org.zeromq.Actor = new decl_stmt int private = public < public < ++ assert return public public decl_stmt java.lang.String = call ZAgent.recvStr() call ZAgent.recvStr() call ZAgent.recvStr() call ZAgent.recvStr() call ZAgent.recvStr() if call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) return return public public if == return return decl_stmt org.zeromq.ZContext = new decl_stmt org.zeromq.ZActor = new new decl_stmt org.zeromq.ZAgent = call ZContext.agent() call ZContext.agent() call ZContext.agent() call ZContext.agent() call ZContext.agent() = = call ZContext.agent() call ZContext.agent() call ZContext.agent() call ZContext.agent() call ZContext.agent() decl_stmt java.net.Socket = call ZActor.pipe() call ZActor.pipe() call ZActor.pipe() call ZActor.pipe() call ZActor.pipe() decl_stmt boolean = call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) assert decl_stmt org.zeromq.ZMsg = call ZContext.recv() call ZContext.recv() call ZContext.recv() call ZContext.recv() call ZContext.recv() decl_stmt java.lang.String = call boolean.popString() call boolean.popString() call boolean.popString() call boolean.popString() call boolean.popString() decl_stmt java.lang.String = call boolean.popString() call boolean.popString() call boolean.popString() call boolean.popString() call boolean.popString() assert assert = call ZContext.send() call ZContext.send() call ZContext.send() call ZContext.send() call ZContext.send() assert = call ZActor.recv() call ZActor.recv() call ZActor.recv() call ZActor.recv() call ZActor.recv() = call boolean.popString() call boolean.popString() call boolean.popString() call boolean.popString() call boolean.popString() = call boolean.popString() call boolean.popString() call boolean.popString() call boolean.popString() call boolean.popString() assert != assert assert = call ZActor.recv() call ZActor.recv() call ZActor.recv() call ZActor.recv() call ZActor.recv() = call ZActor.sign() call ZActor.sign() call ZActor.sign() call ZActor.sign() call ZActor.sign() = call ZActor.send() call ZActor.send() call ZActor.send() call ZActor.send() call ZActor.send() try = call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) call org.zeromq.ZAgent.send(String) catch decl_stmt int = call String.close() call String.close() call String.close() call String.close() call String.close() public < public < ++ assert return String public public decl_stmt java.lang.String = if return return public public if == return return