org.zeromq java.io.IOException import java.io.PrintWriter import java.io.StringWriter import java.util.Arrays import org.zeromq.ZMQ.Socket import class org.zeromq.ZFrame boolean decl byte int int int public public if = public public return public public return public public if return else return public public return != public public if == throw new return public public return public public return boolean public public decl_stmt boolean = if return public public return public public return new public public if == return if == return return public public = call decl byte.getBytes() call decl byte.getBytes() call decl byte.getBytes() call decl byte.getBytes() call decl byte.getBytes() public public = String StringBuilder int int public public decl_stmt java.lang.String = decl_stmt java.lang.StringBuilder = new for : decl_stmt int = >>> & decl_stmt int = & call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public public if ! return return new == ZFrame public public if == return if == || != return decl_stmt org.zeromq.ZFrame = return public public return boolean public public if ! return decl_stmt boolean = for : if < = break if return new else return private private if == throw new = = return public static public static return decl byte ZFrame public static public static decl_stmt org.zeromq.ZFrame = new decl_stmt byte = call org.zeromq.ZFrame.recv(Socket,int) call org.zeromq.ZFrame.recv(Socket,int) call org.zeromq.ZFrame.recv(Socket,int) call org.zeromq.ZFrame.recv(Socket,int) call org.zeromq.ZFrame.recv(Socket,int) if == return return PrintWriter int StringWriter int String decl byte boolean int public public decl_stmt StringWriter = new decl_stmt PrintWriter = new if != call PrintWriter.printf() call PrintWriter.printf() call PrintWriter.printf() call PrintWriter.printf() call PrintWriter.printf() decl_stmt byte = decl_stmt int = decl_stmt boolean = decl_stmt int for = < ++ if < || > = call PrintWriter.printf() call PrintWriter.printf() call PrintWriter.printf() call PrintWriter.printf() call PrintWriter.printf() decl_stmt int = : decl_stmt java.lang.String = if > = = for = < ++ if call PrintWriter.printf() call PrintWriter.printf() call PrintWriter.printf() call PrintWriter.printf() call PrintWriter.printf() else call PrintWriter.printf() call PrintWriter.printf() call PrintWriter.printf() call PrintWriter.printf() call PrintWriter.printf() call PrintWriter.printf() call PrintWriter.printf() call PrintWriter.printf() call PrintWriter.printf() call PrintWriter.printf() call PrintWriter.flush() call PrintWriter.flush() call PrintWriter.flush() call PrintWriter.flush() call PrintWriter.flush() call PrintWriter.close() call PrintWriter.close() call PrintWriter.close() call PrintWriter.close() call PrintWriter.close() try call StringWriter.close() call StringWriter.close() call StringWriter.close() call StringWriter.close() call StringWriter.close() catch call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString()