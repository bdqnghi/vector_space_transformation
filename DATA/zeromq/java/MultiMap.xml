zmq java.util.ArrayList import java.util.Collection import java.util.HashMap import java.util.Iterator import java.util.Map import java.util.Set import java.util.TreeMap import class super super implements decl TreeMap decl HashMap long public public return public public return V public public decl_stmt V = = return public public < throw new public public < extends extends extends extends extends extends < throw new public public throw new public public throw new public public < throw new public public throw new public < < public < < = return public public throw new public public < throw new public public < throw new public public throw new public public throw new public < public < throw new decl Map public public if == || ! if ! return decl_stmt java.util.Map < < = = call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() = call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() return public < public < = return new public public if public public call decl TreeMap.clear() call decl TreeMap.clear() call decl TreeMap.clear() call decl TreeMap.clear() call decl TreeMap.clear() call decl HashMap.clear() call decl HashMap.clear() call decl HashMap.clear() call decl HashMap.clear() call decl HashMap.clear() public public return call decl TreeMap.containsKey() call decl TreeMap.containsKey() call decl TreeMap.containsKey() call decl TreeMap.containsKey() call decl TreeMap.containsKey() public public return call decl HashMap.containsValue() call decl HashMap.containsValue() call decl HashMap.containsValue() call decl HashMap.containsValue() call decl HashMap.containsValue() public < < public < < return new decl ArrayList public public decl_stmt java.util.ArrayList < = call decl TreeMap.get() call decl TreeMap.get() call decl TreeMap.get() call decl TreeMap.get() call decl TreeMap.get() if == return return call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() public public return call decl TreeMap.isEmpty() call decl TreeMap.isEmpty() call decl TreeMap.isEmpty() call decl TreeMap.isEmpty() call decl TreeMap.isEmpty() public < public < return call decl TreeMap.keySet() call decl TreeMap.keySet() call decl TreeMap.keySet() call decl TreeMap.keySet() call decl TreeMap.keySet() decl ArrayList public public decl_stmt java.util.ArrayList < = call decl TreeMap.get() call decl TreeMap.get() call decl TreeMap.get() call decl TreeMap.get() call decl TreeMap.get() if == = new < call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl TreeMap.put() call decl TreeMap.put() call decl TreeMap.put() call decl TreeMap.put() call decl TreeMap.put() else call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() ++ return public public < extends extends extends extends for < extends extends extends extends : V decl ArrayList public public decl_stmt java.util.ArrayList < = call decl TreeMap.get() call decl TreeMap.get() call decl TreeMap.get() call decl TreeMap.get() call decl TreeMap.get() if == return decl_stmt V = call decl HashMap.remove() call decl HashMap.remove() call decl HashMap.remove() call decl HashMap.remove() call decl HashMap.remove() call decl ArrayList.remove() call decl ArrayList.remove() call decl ArrayList.remove() call decl ArrayList.remove() call decl ArrayList.remove() if call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() call decl TreeMap.remove() call decl TreeMap.remove() call decl TreeMap.remove() call decl TreeMap.remove() call decl TreeMap.remove() return public public return call decl HashMap.size() call decl HashMap.size() call decl HashMap.size() call decl HashMap.size() call decl HashMap.size() public < public < return call decl HashMap.values() call decl HashMap.values() call decl HashMap.values() call decl HashMap.values() call decl HashMap.values()