zmq java.io.IOException import java.net.Socket import java.nio.ByteBuffer import org.junit.Test import static static org.junit.Assert.assertThat import static static org.hamcrest.CoreMatchers.is import static static org.hamcrest.CoreMatchers.notNullValue import class zmq.TestProxyTcp Socket public public try decl_stmt java.net.Socket = new call Socket.close() call Socket.close() call Socket.close() call Socket.close() call Socket.close() catch int Msg String Msg public public + decl_stmt int = while decl_stmt zmq.Msg = if == throw new + decl_stmt java.lang.String = new call zmq.Msg.data() call zmq.Msg.data() call zmq.Msg.data() call zmq.Msg.data() call zmq.Msg.data() call zmq.Msg.size() call zmq.Msg.size() call zmq.Msg.size() call zmq.Msg.size() call zmq.Msg.size() decl_stmt zmq.Msg = if == = new call zmq.Msg.size() call zmq.Msg.size() call zmq.Msg.size() call zmq.Msg.size() call zmq.Msg.size() + call zmq.Msg.put(ByteBuffer) call zmq.Msg.put(ByteBuffer) call zmq.Msg.put(ByteBuffer) call zmq.Msg.put(ByteBuffer) call zmq.Msg.put(ByteBuffer) call zmq.Msg.data() call zmq.Msg.data() call zmq.Msg.data() call zmq.Msg.data() call zmq.Msg.data() else = new call zmq.Msg.data() call zmq.Msg.data() call zmq.Msg.data() call zmq.Msg.data() call zmq.Msg.data() == : ++ if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) break + protected protected switch case return case return return private private = new + = new return Msg private private if == return + new if ! decl_stmt zmq.Msg = new = return public public return == public public = protected protected switch case return case return return private private ! return private private if == return = if == return if ! = < : return else if ! = = if == return = + return public public = SocketBase SocketBase boolean public public decl_stmt boolean decl_stmt zmq.SocketBase = call zmq.SocketBase.setSocketOpt(int,Object) call zmq.SocketBase.setSocketOpt(int,Object) call zmq.SocketBase.setSocketOpt(int,Object) call zmq.SocketBase.setSocketOpt(int,Object) call zmq.SocketBase.setSocketOpt(int,Object) call zmq.SocketBase.setSocketOpt(int,Object) call zmq.SocketBase.setSocketOpt(int,Object) call zmq.SocketBase.setSocketOpt(int,Object) call zmq.SocketBase.setSocketOpt(int,Object) call zmq.SocketBase.setSocketOpt(int,Object) = decl_stmt zmq.SocketBase = = Main Thread Ctx public public throws decl_stmt zmq.Ctx = decl_stmt sun.tools.javac.Main = new call sun.tools.javac.Main.start(RootDoc) call sun.tools.javac.Main.start(RootDoc) call sun.tools.javac.Main.start(RootDoc) call sun.tools.javac.Main.start(RootDoc) call sun.tools.javac.Main.start(RootDoc) new new decl_stmt java.lang.Thread = new call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int)