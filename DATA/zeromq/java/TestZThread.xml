org.zeromq java.util.concurrent.CountDownLatch import org.junit.Assert import org.junit.Test import org.zeromq.ZMQ.Socket import class org.zeromq.TestZThread ZContext decl IDetachedRunnable decl ZThread CountDownLatch public public decl_stmt java.util.concurrent.CountDownLatch final final = new decl_stmt IDetachedRunnable = new public public decl_stmt org.zeromq.ZContext = new assert != decl_stmt java.net.Socket = call decl IDetachedRunnable.createSocket() call decl IDetachedRunnable.createSocket() call decl IDetachedRunnable.createSocket() call decl IDetachedRunnable.createSocket() call decl IDetachedRunnable.createSocket() assert != call decl IDetachedRunnable.close() call decl IDetachedRunnable.close() call decl IDetachedRunnable.close() call decl IDetachedRunnable.close() call decl IDetachedRunnable.close() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() try call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) catch Socket ZContext public public decl_stmt org.zeromq.ZContext = new assert != decl_stmt java.net.Socket = call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) assert != call org.zeromq.ZContext.close() call org.zeromq.ZContext.close() call org.zeromq.ZContext.close() call org.zeromq.ZContext.close() call org.zeromq.ZContext.close() decl IAttachedRunnable decl ZThread Socket ZContext public public decl_stmt org.zeromq.ZContext = new decl_stmt org.zeromq.IAttachedRunnable = new public public call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call decl IAttachedRunnable.recvStr() call decl IAttachedRunnable.recvStr() call decl IAttachedRunnable.recvStr() call decl IAttachedRunnable.recvStr() call decl IAttachedRunnable.recvStr() call decl IAttachedRunnable.send() call decl IAttachedRunnable.send() call decl IAttachedRunnable.send() call decl IAttachedRunnable.send() call decl IAttachedRunnable.send() decl_stmt java.net.Socket = assert != call decl IAttachedRunnable.send() call decl IAttachedRunnable.send() call decl IAttachedRunnable.send() call decl IAttachedRunnable.send() call decl IAttachedRunnable.send() decl_stmt java.lang.String = call decl IAttachedRunnable.recvStr() call decl IAttachedRunnable.recvStr() call decl IAttachedRunnable.recvStr() call decl IAttachedRunnable.recvStr() call decl IAttachedRunnable.recvStr() call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy() public public