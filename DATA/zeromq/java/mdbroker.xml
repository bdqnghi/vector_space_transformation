guide java.util.ArrayDeque import java.util.Deque import java.util.Formatter import java.util.HashMap import java.util.Map import org.zeromq.ZContext import org.zeromq.ZFrame import org.zeromq.ZMQ import org.zeromq.ZMsg import class guide.mdbroker int decl Map decl ZMQ decl Socket int ZContext decl Map int boolean long String decl Deque mdbroker public static public static decl_stmt guide.mdbroker = new > && call guide.mdbroker.bind(String) call guide.mdbroker.bind(String) call guide.mdbroker.bind(String) call guide.mdbroker.bind(String) call guide.mdbroker.bind(String) call guide.mdbroker.mediate() call guide.mdbroker.mediate() call guide.mdbroker.mediate() call guide.mdbroker.mediate() call guide.mdbroker.mediate() decl Poller decl ZMQ ZMsg ZFrame ZFrame public public while ! decl_stmt zmq.Poller = new call decl ZMQ.register() call decl ZMQ.register() call decl ZMQ.register() call decl ZMQ.register() call decl ZMQ.register() if call decl ZMQ.poll() call decl ZMQ.poll() call decl ZMQ.poll() call decl ZMQ.poll() call decl ZMQ.poll() == - break if call decl ZMQ.pollin() call decl ZMQ.pollin() call decl ZMQ.pollin() call decl ZMQ.pollin() call decl ZMQ.pollin() decl_stmt org.zeromq.ZMsg = if == break if call boolean.format() call boolean.format() call boolean.format() call boolean.format() call boolean.format() call decl Poller.dump() call decl Poller.dump() call decl Poller.dump() call decl Poller.dump() call decl Poller.dump() call boolean.out() call boolean.out() call boolean.out() call boolean.out() call boolean.out() decl_stmt org.zeromq.ZFrame = call decl Poller.pop() call decl Poller.pop() call decl Poller.pop() call decl Poller.pop() call decl Poller.pop() decl_stmt org.zeromq.ZFrame = call decl Poller.pop() call decl Poller.pop() call decl Poller.pop() call decl Poller.pop() call decl Poller.pop() decl_stmt org.zeromq.ZFrame = call decl Poller.pop() call decl Poller.pop() call decl Poller.pop() call decl Poller.pop() call decl Poller.pop() if else if else call boolean.format() call boolean.format() call boolean.format() call boolean.format() call boolean.format() call decl Poller.dump() call decl Poller.dump() call decl Poller.dump() call decl Poller.dump() call decl Poller.dump() call boolean.out() call boolean.out() call boolean.out() call boolean.out() call boolean.out() call decl Poller.destroy() call decl Poller.destroy() call decl Poller.destroy() call decl Poller.destroy() call decl Poller.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call ZMsg.destroy() call org.zeromq.ZFrame.destroy() call org.zeromq.ZFrame.destroy() call org.zeromq.ZFrame.destroy() call org.zeromq.ZFrame.destroy() call org.zeromq.ZFrame.destroy() call org.zeromq.ZFrame.destroy() call org.zeromq.ZFrame.destroy() call org.zeromq.ZFrame.destroy() call org.zeromq.ZFrame.destroy() call org.zeromq.ZFrame.destroy() decl Worker private private decl_stmt sun.tools.jconsole.Worker = call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() new for : call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy() ZFrame private private assert >= decl_stmt org.zeromq.ZFrame = if call org.zeromq.ZFrame.toString() call org.zeromq.ZFrame.toString() call org.zeromq.ZFrame.toString() call org.zeromq.ZFrame.toString() call org.zeromq.ZFrame.toString() else call org.zeromq.ZFrame.destroy() call org.zeromq.ZFrame.destroy() call org.zeromq.ZFrame.destroy() call org.zeromq.ZFrame.destroy() call org.zeromq.ZFrame.destroy() Worker boolean ZFrame ZFrame ZFrame private private assert >= decl_stmt org.zeromq.ZFrame = decl_stmt boolean = call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() decl_stmt sun.tools.jconsole.Worker = if if || else decl_stmt org.zeromq.ZFrame = = call org.zeromq.ZFrame.destroy() call org.zeromq.ZFrame.destroy() call org.zeromq.ZFrame.destroy() call org.zeromq.ZFrame.destroy() call org.zeromq.ZFrame.destroy() else if if decl_stmt org.zeromq.ZFrame = else else if if = + else else if else call boolean.format() call boolean.format() call boolean.format() call boolean.format() call boolean.format() call boolean.out() call boolean.out() call boolean.out() call boolean.out() call boolean.out() private private assert != if if != call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() Worker String private private assert != decl_stmt java.lang.String = decl_stmt sun.tools.jconsole.Worker = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if call boolean.format() call boolean.format() call boolean.format() call boolean.format() call boolean.format() return String Service private private assert != decl_stmt java.lang.String = decl_stmt sun.misc.Service = call long.get() call long.get() call long.get() call long.get() call long.get() if == = new call long.put() call long.put() call long.put() call long.put() call long.put() return private private call decl ZMQ.bind() call decl ZMQ.bind() call decl ZMQ.bind() call decl ZMQ.bind() call decl ZMQ.bind() call boolean.format() call boolean.format() call boolean.format() call boolean.format() call boolean.format() String String ZFrame private private decl_stmt java.lang.String = if decl_stmt java.lang.String = = call long.containsKey() call long.containsKey() call long.containsKey() call long.containsKey() call long.containsKey() : call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) decl_stmt org.zeromq.ZFrame = public synchronized public synchronized if >= for : = + public synchronized public synchronized for = call decl Map.peekFirst() call decl Map.peekFirst() call decl Map.peekFirst() call decl Map.peekFirst() call decl Map.peekFirst() != && < = call decl Map.peekFirst() call decl Map.peekFirst() call decl Map.peekFirst() call decl Map.peekFirst() call decl Map.peekFirst() call boolean.format() call boolean.format() call boolean.format() call boolean.format() call boolean.format() call decl Map.pollFirst() call decl Map.pollFirst() call decl Map.pollFirst() call decl Map.pollFirst() call decl Map.pollFirst() public synchronized public synchronized call decl Map.addLast() call decl Map.addLast() call decl Map.addLast() call decl Map.addLast() call decl Map.addLast() = + Worker private private assert != if != while ! && ! = decl_stmt sun.tools.jconsole.Worker = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() ZMsg public public decl_stmt org.zeromq.ZMsg = == new : if != call org.zeromq.ZMsg.addFirst(ZFrame) call org.zeromq.ZMsg.addFirst(ZFrame) call org.zeromq.ZMsg.addFirst(ZFrame) call org.zeromq.ZMsg.addFirst(ZFrame) call org.zeromq.ZMsg.addFirst(ZFrame) new call org.zeromq.ZMsg.addFirst(ZFrame) call org.zeromq.ZMsg.addFirst(ZFrame) call org.zeromq.ZMsg.addFirst(ZFrame) call org.zeromq.ZMsg.addFirst(ZFrame) call org.zeromq.ZMsg.addFirst(ZFrame) call org.zeromq.ZMsg.addFirst(ZFrame) call org.zeromq.ZMsg.addFirst(ZFrame) call org.zeromq.ZMsg.addFirst(ZFrame) call org.zeromq.ZMsg.addFirst(ZFrame) call org.zeromq.ZMsg.addFirst(ZFrame) call org.zeromq.ZMsg.wrap(ZFrame) call org.zeromq.ZMsg.wrap(ZFrame) call org.zeromq.ZMsg.wrap(ZFrame) call org.zeromq.ZMsg.wrap(ZFrame) call org.zeromq.ZMsg.wrap(ZFrame) if call boolean.format() call boolean.format() call boolean.format() call boolean.format() call boolean.format() call org.zeromq.ZMsg.dump(Appendable) call org.zeromq.ZMsg.dump(Appendable) call org.zeromq.ZMsg.dump(Appendable) call org.zeromq.ZMsg.dump(Appendable) call org.zeromq.ZMsg.dump(Appendable) call boolean.out() call boolean.out() call boolean.out() call boolean.out() call boolean.out() call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean) call org.zeromq.ZMsg.send(Socket,boolean)