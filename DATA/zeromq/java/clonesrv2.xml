guide java.nio.ByteBuffer import java.util.Iterator import java.util.LinkedHashMap import java.util.Map import java.util.Random import java.util.Map.Entry import java.util.concurrent.atomic.AtomicLong import org.zeromq.ZContext import org.zeromq.ZMQ import org.zeromq.ZMQ.Poller import org.zeromq.ZMQ.Socket import org.zeromq.ZThread import org.zeromq.ZThread.IAttachedRunnable import class guide.clonesrv2 int Socket ByteBuffer long long Random ZContext kvsimple Socket int public public decl_stmt org.zeromq.ZContext = new decl_stmt java.net.Socket = call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call org.zeromq.ZContext.createSocket(int) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) decl_stmt java.net.Socket = new decl_stmt java.util.Random = new decl_stmt long = while ! decl_stmt long = ++ decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) decl_stmt ByteBuffer = call ByteBuffer.asIntBuffer() call ByteBuffer.asIntBuffer() call ByteBuffer.asIntBuffer() call ByteBuffer.asIntBuffer() call ByteBuffer.asIntBuffer() decl_stmt guide.kvsimple = new + call ByteBuffer.array() call ByteBuffer.array() call ByteBuffer.array() call ByteBuffer.array() call ByteBuffer.array() call guide.kvsimple.send(Socket) call guide.kvsimple.send(Socket) call guide.kvsimple.send(Socket) call guide.kvsimple.send(Socket) call guide.kvsimple.send(Socket) call guide.kvsimple.send(Socket) call guide.kvsimple.send(Socket) call guide.kvsimple.send(Socket) call guide.kvsimple.send(Socket) call guide.kvsimple.send(Socket) try catch call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy() call org.zeromq.ZContext.destroy() kvsimple long String decl Iterator Socket kvsimple decl Entry kvsimple Poller decl byte public public decl_stmt java.net.Socket = call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) call java.net.Socket.bind(SocketAddress) decl_stmt zmq.Poller = new call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) call zmq.Poller.register(SelectableChannel,int,boolean) decl_stmt long = while ! if call Poller.poll() call Poller.poll() call Poller.poll() call Poller.poll() call Poller.poll() < break if call Poller.pollin() call Poller.pollin() call Poller.pollin() call Poller.pollin() call Poller.pollin() decl_stmt guide.kvsimple = if == break call guide.kvsimple.getKey() call guide.kvsimple.getKey() call guide.kvsimple.getKey() call guide.kvsimple.getKey() call guide.kvsimple.getKey() = call guide.kvsimple.getSequence() call guide.kvsimple.getSequence() call guide.kvsimple.getSequence() call guide.kvsimple.getSequence() call guide.kvsimple.getSequence() if call Poller.pollin() call Poller.pollin() call Poller.pollin() call Poller.pollin() call Poller.pollin() decl_stmt byte = call Socket.recv() call Socket.recv() call Socket.recv() call Socket.recv() call Socket.recv() if == break decl_stmt java.lang.String = new call Socket.recv() call Socket.recv() call Socket.recv() call Socket.recv() call Socket.recv() if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) break decl_stmt java.util.Iterator < < = while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt Entry < = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt guide.kvsimple = call decl Entry.getValue() call decl Entry.getValue() call decl Entry.getValue() call decl Entry.getValue() call decl Entry.getValue() + call decl Entry.getValue() call decl Entry.getValue() call decl Entry.getValue() call decl Entry.getValue() call decl Entry.getValue() + call Socket.send() call Socket.send() call Socket.send() call Socket.send() call Socket.send() decl_stmt guide.kvsimple = new call guide.kvsimple.send(Socket) call guide.kvsimple.send(Socket) call guide.kvsimple.send(Socket) call guide.kvsimple.send(Socket) call guide.kvsimple.send(Socket) private private public static public static new