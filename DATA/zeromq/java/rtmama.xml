guide org.zeromq.ZMQ import class guide.rtmama int decl Socket decl ZMQ decl Context decl ZMQ public public decl_stmt sun.tools.tree.Context = decl_stmt java.net.Socket = call decl ZMQ.socket() call decl ZMQ.socket() call decl ZMQ.socket() call decl ZMQ.socket() call decl ZMQ.socket() call decl Context.connect() call decl Context.connect() call decl Context.connect() call decl Context.connect() call decl Context.connect() decl_stmt int = while call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.send() decl_stmt byte = call decl Context.recv() call decl Context.recv() call decl Context.recv() call decl Context.recv() call decl Context.recv() if new break += call decl Context.close() call decl Context.close() call decl Context.close() call decl Context.close() call decl Context.close() call decl ZMQ.term() call decl ZMQ.term() call decl ZMQ.term() call decl ZMQ.term() call decl ZMQ.term() decl byte decl Context decl byte decl ZMQ decl byte public static public static decl_stmt sun.tools.tree.Context = decl_stmt java.net.Socket = call decl ZMQ.socket() call decl ZMQ.socket() call decl ZMQ.socket() call decl ZMQ.socket() call decl ZMQ.socket() call decl Context.bind() call decl Context.bind() call decl Context.bind() call decl Context.bind() call decl Context.bind() for = != ++ new new for = != ++ decl_stmt byte = call decl Context.recv() call decl Context.recv() call decl Context.recv() call decl Context.recv() call decl Context.recv() decl_stmt byte = call decl Context.recv() call decl Context.recv() call decl Context.recv() call decl Context.recv() call decl Context.recv() decl_stmt byte = call decl Context.recv() call decl Context.recv() call decl Context.recv() call decl Context.recv() call decl Context.recv() call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.send() for = != ++ decl_stmt byte = call decl Context.recv() call decl Context.recv() call decl Context.recv() call decl Context.recv() call decl Context.recv() decl_stmt byte = call decl Context.recv() call decl Context.recv() call decl Context.recv() call decl Context.recv() call decl Context.recv() decl_stmt byte = call decl Context.recv() call decl Context.recv() call decl Context.recv() call decl Context.recv() call decl Context.recv() call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.send() call decl Context.close() call decl Context.close() call decl Context.close() call decl Context.close() call decl Context.close() call decl ZMQ.term() call decl ZMQ.term() call decl ZMQ.term() call decl ZMQ.term() call decl ZMQ.term()