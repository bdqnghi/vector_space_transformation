zmq java.nio.ByteBuffer import java.util.HashMap import java.util.HashSet import java.util.Map import java.util.Set import class zmq.Router super super extends boolean FQ boolean decl Set Msg decl Map Msg boolean boolean int boolean boolean Pipe boolean public public assert != decl_stmt boolean = if call zmq.FQ.attach(Pipe) call zmq.FQ.attach(Pipe) call zmq.FQ.attach(Pipe) call zmq.FQ.attach(Pipe) call zmq.FQ.attach(Pipe) else call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() public public if == = == return if == = == return return Outpipe public public if ! call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() decl_stmt Outpipe = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() assert != call FQ.terminated() call FQ.terminated() call FQ.terminated() call FQ.terminated() call FQ.terminated() if == = boolean public public if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call zmq.FQ.activated(Pipe) call zmq.FQ.activated(Pipe) call zmq.FQ.activated(Pipe) call zmq.FQ.activated(Pipe) call zmq.FQ.activated(Pipe) else decl_stmt boolean = if call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call zmq.FQ.attach(Pipe) call zmq.FQ.attach(Pipe) call zmq.FQ.attach(Pipe) call zmq.FQ.attach(Pipe) call zmq.FQ.attach(Pipe) public public for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() if == assert ! = return assert boolean Blob Outpipe protected protected if ! assert == if = decl_stmt zmq.Blob = decl_stmt Outpipe = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != = if ! call zmq.Pipe.checkWrite() call zmq.Pipe.checkWrite() call zmq.Pipe.checkWrite() call zmq.Pipe.checkWrite() call zmq.Pipe.checkWrite() = = if = return else if = return return = if != decl_stmt boolean = call zmq.Pipe.write(Msg) call zmq.Pipe.write(Msg) call zmq.Pipe.write(Msg) call zmq.Pipe.write(Msg) call zmq.Pipe.write(Msg) if ! = else if ! call zmq.Pipe.flush() call zmq.Pipe.flush() call zmq.Pipe.flush() call zmq.Pipe.flush() call zmq.Pipe.flush() = return Msg decl ValueReference Blob protected protected decl_stmt zmq.Msg = if if ! = = = else = = = = call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() return decl_stmt zmq.ValueReference < = new < = call zmq.FQ.recvPipe(ValueReference,ValueReference) call zmq.FQ.recvPipe(ValueReference,ValueReference) call zmq.FQ.recvPipe(ValueReference,ValueReference) call zmq.FQ.recvPipe(ValueReference,ValueReference) call zmq.FQ.recvPipe(ValueReference,ValueReference) while != && call zmq.Msg.isIdentity() call zmq.Msg.isIdentity() call zmq.Msg.isIdentity() call zmq.Msg.isIdentity() call zmq.Msg.isIdentity() = call zmq.FQ.recvPipe(ValueReference,ValueReference) call zmq.FQ.recvPipe(ValueReference,ValueReference) call zmq.FQ.recvPipe(ValueReference,ValueReference) call zmq.FQ.recvPipe(ValueReference,ValueReference) call zmq.FQ.recvPipe(ValueReference,ValueReference) if == return assert call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() != if = call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() else = = decl_stmt zmq.Blob = call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() = new call zmq.Blob.data() call zmq.Blob.data() call zmq.Blob.data() call zmq.Blob.data() call zmq.Blob.data() call zmq.Msg.setFlags(int) call zmq.Msg.setFlags(int) call zmq.Msg.setFlags(int) call zmq.Msg.setFlags(int) call zmq.Msg.setFlags(int) = return protected protected if != call zmq.Pipe.rollback() call zmq.Pipe.rollback() call zmq.Pipe.rollback() call zmq.Pipe.rollback() call zmq.Pipe.rollback() = = decl ValueReference Blob protected protected if return if return decl_stmt zmq.ValueReference < = new < = call zmq.FQ.recvPipe(ValueReference,ValueReference) call zmq.FQ.recvPipe(ValueReference,ValueReference) call zmq.FQ.recvPipe(ValueReference,ValueReference) call zmq.FQ.recvPipe(ValueReference,ValueReference) call zmq.FQ.recvPipe(ValueReference,ValueReference) while != && call zmq.Msg.isIdentity() call zmq.Msg.isIdentity() call zmq.Msg.isIdentity() call zmq.Msg.isIdentity() call zmq.Msg.isIdentity() = call zmq.FQ.recvPipe(ValueReference,ValueReference) call zmq.FQ.recvPipe(ValueReference,ValueReference) call zmq.FQ.recvPipe(ValueReference,ValueReference) call zmq.FQ.recvPipe(ValueReference,ValueReference) call zmq.FQ.recvPipe(ValueReference,ValueReference) if == return assert call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() != decl_stmt zmq.Blob = call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() call decl ValueReference.get() = new call zmq.Blob.data() call zmq.Blob.data() call zmq.Blob.data() call zmq.Blob.data() call zmq.Blob.data() call zmq.Msg.setFlags(int) call zmq.Msg.setFlags(int) call zmq.Msg.setFlags(int) call zmq.Msg.setFlags(int) call zmq.Msg.setFlags(int) = = return protected protected return Outpipe Blob Msg ByteBuffer Blob Outpipe private private decl_stmt zmq.Blob decl_stmt zmq.Msg = if == return if call zmq.Msg.size() call zmq.Msg.size() call zmq.Msg.size() call zmq.Msg.size() call zmq.Msg.size() == decl_stmt ByteBuffer = call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() byte call ByteBuffer.putInt() call ByteBuffer.putInt() call ByteBuffer.putInt() call ByteBuffer.putInt() call ByteBuffer.putInt() ++ = call ByteBuffer.array() call ByteBuffer.array() call ByteBuffer.array() call ByteBuffer.array() call ByteBuffer.array() else = call zmq.Msg.data() call zmq.Msg.data() call zmq.Msg.data() call zmq.Msg.data() call zmq.Msg.data() if call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() if ! return decl_stmt ByteBuffer = call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() byte call ByteBuffer.putInt() call ByteBuffer.putInt() call ByteBuffer.putInt() call ByteBuffer.putInt() call ByteBuffer.putInt() ++ decl_stmt zmq.Blob = call ByteBuffer.array() call ByteBuffer.array() call ByteBuffer.array() call ByteBuffer.array() call ByteBuffer.array() decl_stmt Outpipe = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call Outpipe.pipe() call Outpipe.pipe() call Outpipe.pipe() call Outpipe.pipe() call Outpipe.pipe() call Outpipe.pipe() call Outpipe.pipe() call Outpipe.pipe() call Outpipe.pipe() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call Outpipe.pipe() call Outpipe.pipe() call Outpipe.pipe() call Outpipe.pipe() call Outpipe.pipe() call Outpipe.pipe() call Outpipe.pipe() call Outpipe.pipe() call Outpipe.pipe() decl_stmt Outpipe = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return