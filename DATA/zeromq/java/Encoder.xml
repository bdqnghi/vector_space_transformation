zmq java.nio.ByteBuffer import class zmq.Encoder super super extends ByteBuffer int IMsgSource int Msg decl byte public public = protected protected switch case return case return default: return private private call zmq.Msg.buf() call zmq.Msg.buf() call zmq.Msg.buf() call zmq.Msg.buf() call zmq.Msg.buf() ! call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() return int private private if == return = call IMsgSource.pullMsg() call IMsgSource.pullMsg() call IMsgSource.pullMsg() call IMsgSource.pullMsg() call IMsgSource.pullMsg() if == return decl_stmt int = call zmq.Msg.size() call zmq.Msg.size() call zmq.Msg.size() call zmq.Msg.size() call zmq.Msg.size() ++ call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() if < call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() = byte = call Msg.flags() call Msg.flags() call Msg.flags() call Msg.flags() call Msg.flags() & else call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() = byte call ByteBuffer.putLong() call ByteBuffer.putLong() call ByteBuffer.putLong() call ByteBuffer.putLong() call ByteBuffer.putLong() = call Msg.flags() call Msg.flags() call Msg.flags() call Msg.flags() call Msg.flags() & return