zmq class zmq.Pipe super super extends long int ZObject boolean boolean State decl YPipe long boolean long IPipeEvents int Pipe Blob decl YPipe decl YPipe decl YPipe public static public static decl_stmt zmq.YPipe < = new < decl_stmt zmq.YPipe < = new < = new = new private private assert != = public public assert == = public public = public public return Msg public public if ! || != && != return if ! call decl YPipe.checkRead() call decl YPipe.checkRead() call decl YPipe.checkRead() call decl YPipe.checkRead() call decl YPipe.checkRead() = return if call decl YPipe.probe() call decl YPipe.probe() call decl YPipe.probe() call decl YPipe.probe() call decl YPipe.probe() decl_stmt zmq.Msg = call decl YPipe.read() call decl YPipe.read() call decl YPipe.read() call decl YPipe.read() call decl YPipe.read() assert != return return Msg public public if ! || != && != return decl_stmt zmq.Msg = call decl YPipe.read() call decl YPipe.read() call decl YPipe.read() call decl YPipe.read() call decl YPipe.read() if == = return if call zmq.Msg.isDelimiter() call zmq.Msg.isDelimiter() call zmq.Msg.isDelimiter() call zmq.Msg.isDelimiter() call zmq.Msg.isDelimiter() return if ! call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() call zmq.Msg.hasMore() ++ if > && == return boolean public public if ! || != return decl_stmt boolean = > && - == if = return return boolean public public if ! return decl_stmt boolean = call decl YPipe.write() call decl YPipe.write() call decl YPipe.write() call decl YPipe.write() call decl YPipe.write() if ! ++ return Msg public public decl_stmt zmq.Msg if != while = call decl YPipe.unwrite() call decl YPipe.unwrite() call decl YPipe.unwrite() call decl YPipe.unwrite() call decl YPipe.unwrite() != assert call Msg.flags() call Msg.flags() call Msg.flags() call Msg.flags() call Msg.flags() & > public public if == return if != && ! call decl YPipe.flush() call decl YPipe.flush() call decl YPipe.flush() call decl YPipe.flush() call decl YPipe.flush() protected protected if ! && == || == = call IPipeEvents.readActivated() call IPipeEvents.readActivated() call IPipeEvents.readActivated() call IPipeEvents.readActivated() call IPipeEvents.readActivated() protected protected = if ! && == = call zmq.IPipeEvents.writeActivated(Pipe) call zmq.IPipeEvents.writeActivated(Pipe) call zmq.IPipeEvents.writeActivated(Pipe) call zmq.IPipeEvents.writeActivated(Pipe) call zmq.IPipeEvents.writeActivated(Pipe) protected protected assert != call decl YPipe.flush() call decl YPipe.flush() call decl YPipe.flush() call decl YPipe.flush() call decl YPipe.flush() while call decl YPipe.read() call decl YPipe.read() call decl YPipe.read() call decl YPipe.read() call decl YPipe.read() != assert != = < = if == call zmq.IPipeEvents.hiccuped(Pipe) call zmq.IPipeEvents.hiccuped(Pipe) call zmq.IPipeEvents.hiccuped(Pipe) call zmq.IPipeEvents.hiccuped(Pipe) call zmq.IPipeEvents.hiccuped(Pipe) protected protected if == if ! = = else = return if == = = return if == = = return assert protected protected assert != call zmq.IPipeEvents.pipeTerminated(Pipe) call zmq.IPipeEvents.pipeTerminated(Pipe) call zmq.IPipeEvents.pipeTerminated(Pipe) call zmq.IPipeEvents.pipeTerminated(Pipe) call zmq.IPipeEvents.pipeTerminated(Pipe) if == = else assert == || == while call decl YPipe.read() call decl YPipe.read() call decl YPipe.read() call decl YPipe.read() call decl YPipe.read() != = Msg public public = if == || == return else if == return else if == = else if == && ! = = else if == else if == = else assert = if != decl_stmt zmq.Msg = new call zmq.Msg.initDelimiter() call zmq.Msg.initDelimiter() call zmq.Msg.initDelimiter() call zmq.Msg.initDelimiter() call zmq.Msg.initDelimiter() call decl YPipe.write() call decl YPipe.write() call decl YPipe.write() call decl YPipe.write() call decl YPipe.write() private static private static return private static private static return > * - : + / private private if == = return if == = = return assert public public if != return = = new < = boolean public public decl_stmt boolean = > && - >= - return ! public public return + + +