zmq java.io.Closeable import java.io.IOException import java.nio.channels.SelectableChannel import java.util.concurrent.atomic.AtomicBoolean import class zmq.Reaper super super extends super implements String Mailbox AtomicBoolean SelectableChannel Poller int public public throws call zmq.Poller.destroy() call zmq.Poller.destroy() call zmq.Poller.destroy() call zmq.Poller.destroy() call zmq.Poller.destroy() call zmq.Mailbox.close() call zmq.Mailbox.close() call zmq.Mailbox.close() call zmq.Mailbox.close() call zmq.Mailbox.close() public public return public public call zmq.Poller.start() call zmq.Poller.start() call zmq.Poller.start() call zmq.Poller.start() call zmq.Poller.start() public public if ! call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() Command public public while decl_stmt zmq.Command = call zmq.Mailbox.recv(long) call zmq.Mailbox.recv(long) call zmq.Mailbox.recv(long) call zmq.Mailbox.recv(long) call zmq.Mailbox.recv(long) if == break call Command.destination() call Command.destination() call Command.destination() call Command.destination() call Command.destination() public public throw new public public throw new public public throw new public public throw new protected protected call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) if == call zmq.Poller.removeHandle(SelectableChannel) call zmq.Poller.removeHandle(SelectableChannel) call zmq.Poller.removeHandle(SelectableChannel) call zmq.Poller.removeHandle(SelectableChannel) call zmq.Poller.removeHandle(SelectableChannel) call Poller.stop() call Poller.stop() call Poller.stop() call Poller.stop() call Poller.stop() protected protected ++ protected protected -- if == && call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call zmq.Poller.removeHandle(SelectableChannel) call zmq.Poller.removeHandle(SelectableChannel) call zmq.Poller.removeHandle(SelectableChannel) call zmq.Poller.removeHandle(SelectableChannel) call zmq.Poller.removeHandle(SelectableChannel) call Poller.stop() call Poller.stop() call Poller.stop() call Poller.stop() call Poller.stop()