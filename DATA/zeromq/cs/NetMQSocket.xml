NetMQ System using System.Linq using JetBrains.Annotations using NetMQ.Core using NetMQ.Core.Utils using class NetMQ.NetMQSocket super super IOutgoingSocket super IReceivingSocket super ISocketPollable super IDisposable NetMQSocketEventArgs bool decl EventHandler decl EventHandler Selector SocketBase += -= += -= var private private decl_stmt var = if != call NetMQSocketEventArgs.Init() call NetMQSocketEventArgs.Init() call NetMQSocketEventArgs.Init() call NetMQSocketEventArgs.Init() call NetMQSocketEventArgs.Init() public public call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.Bind(string) call NetMQ.Core.SocketBase.Bind(string) call NetMQ.Core.SocketBase.Bind(string) call NetMQ.Core.SocketBase.Bind(string) call NetMQ.Core.SocketBase.Bind(string) public public call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() return call NetMQ.Core.SocketBase.BindRandomPort(string) call NetMQ.Core.SocketBase.BindRandomPort(string) call NetMQ.Core.SocketBase.BindRandomPort(string) call NetMQ.Core.SocketBase.BindRandomPort(string) call NetMQ.Core.SocketBase.BindRandomPort(string) public public call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call SocketBase.Connect() call SocketBase.Connect() call SocketBase.Connect() call SocketBase.Connect() call SocketBase.Connect() public public call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.TermEndpoint(string) call NetMQ.Core.SocketBase.TermEndpoint(string) call NetMQ.Core.SocketBase.TermEndpoint(string) call NetMQ.Core.SocketBase.TermEndpoint(string) call NetMQ.Core.SocketBase.TermEndpoint(string) public public call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.TermEndpoint(string) call NetMQ.Core.SocketBase.TermEndpoint(string) call NetMQ.Core.SocketBase.TermEndpoint(string) call NetMQ.Core.SocketBase.TermEndpoint(string) call NetMQ.Core.SocketBase.TermEndpoint(string) public public if return = call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.Close() call NetMQ.Core.SocketBase.Close() call NetMQ.Core.SocketBase.Close() call NetMQ.Core.SocketBase.Close() call NetMQ.Core.SocketBase.Close() public public - PollEvents var public public decl_stmt PollEvents = decl_stmt var = return != decl SelectItem public public decl_stmt SelectItem = new call Selector.Select() call Selector.Select() call Selector.Select() call Selector.Select() call Selector.Select() long return var internal internal decl_stmt var = if != |= if != |= return internal internal if return call NetMQSocketEventArgs.Init() call NetMQSocketEventArgs.Init() call NetMQSocketEventArgs.Init() call NetMQSocketEventArgs.Init() call NetMQSocketEventArgs.Init() if if public virtual public virtual ref ref return call NetMQ.Core.SocketBase.TryRecv(Msg,TimeSpan) call NetMQ.Core.SocketBase.TryRecv(Msg,TimeSpan) call NetMQ.Core.SocketBase.TryRecv(Msg,TimeSpan) call NetMQ.Core.SocketBase.TryRecv(Msg,TimeSpan) call NetMQ.Core.SocketBase.TryRecv(Msg,TimeSpan) ref public virtual public virtual ref ref return call NetMQ.Core.SocketBase.TrySend(Msg,TimeSpan,bool) call NetMQ.Core.SocketBase.TrySend(Msg,TimeSpan,bool) call NetMQ.Core.SocketBase.TrySend(Msg,TimeSpan,bool) call NetMQ.Core.SocketBase.TrySend(Msg,TimeSpan,bool) call NetMQ.Core.SocketBase.TrySend(Msg,TimeSpan,bool) ref public public = if == throw new if throw new call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.Monitor(string,SocketEvents) call NetMQ.Core.SocketBase.Monitor(string,SocketEvents) call NetMQ.Core.SocketBase.Monitor(string,SocketEvents) call NetMQ.Core.SocketBase.Monitor(string,SocketEvents) call NetMQ.Core.SocketBase.Monitor(string,SocketEvents) internal internal call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() return call NetMQ.Core.SocketBase.GetSocketOption(ZmqSocketOption) call NetMQ.Core.SocketBase.GetSocketOption(ZmqSocketOption) call NetMQ.Core.SocketBase.GetSocketOption(ZmqSocketOption) call NetMQ.Core.SocketBase.GetSocketOption(ZmqSocketOption) call NetMQ.Core.SocketBase.GetSocketOption(ZmqSocketOption) internal internal internal < call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() return call NetMQ.Core.SocketBase.GetSocketOptionX(ZmqSocketOption) call NetMQ.Core.SocketBase.GetSocketOptionX(ZmqSocketOption) call NetMQ.Core.SocketBase.GetSocketOptionX(ZmqSocketOption) call NetMQ.Core.SocketBase.GetSocketOptionX(ZmqSocketOption) call NetMQ.Core.SocketBase.GetSocketOptionX(ZmqSocketOption) internal internal return internal internal return < internal internal call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.SetSocketOption(ZmqSocketOption,object) call NetMQ.Core.SocketBase.SetSocketOption(ZmqSocketOption,object) call NetMQ.Core.SocketBase.SetSocketOption(ZmqSocketOption,object) call NetMQ.Core.SocketBase.SetSocketOption(ZmqSocketOption,object) call NetMQ.Core.SocketBase.SetSocketOption(ZmqSocketOption,object) internal internal int internal internal call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.CheckDisposed() call NetMQ.Core.SocketBase.SetSocketOption(ZmqSocketOption,object) call NetMQ.Core.SocketBase.SetSocketOption(ZmqSocketOption,object) call NetMQ.Core.SocketBase.SetSocketOption(ZmqSocketOption,object) call NetMQ.Core.SocketBase.SetSocketOption(ZmqSocketOption,object) call NetMQ.Core.SocketBase.SetSocketOption(ZmqSocketOption,object) public public protected virtual protected virtual if ! return