NetMQ.Monitoring System using System.Threading using System.Threading.Tasks using AsyncIO using JetBrains.Annotations using NetMQ.Core using NetMQ.Sockets using class NetMQ.Monitoring.NetMQMonitor super super IDisposable bool ManualResetEvent NetMQSocket int ISocketPollableCollection var private private decl_stmt var = switch case new break case new break case new int break case new break case new break case new break case new break case new break case new break case new break default: throw new + private private private < < where where private private call ManualResetEvent.Reset() call ManualResetEvent.Reset() call ManualResetEvent.Reset() call ManualResetEvent.Reset() call ManualResetEvent.Reset() = call NetMQ.NetMQSocket.Connect(string) call NetMQ.NetMQSocket.Connect(string) call NetMQ.NetMQSocket.Connect(string) call NetMQ.NetMQSocket.Connect(string) call NetMQ.NetMQSocket.Connect(string) private private try call NetMQ.NetMQSocket.Disconnect(string) call NetMQ.NetMQSocket.Disconnect(string) call NetMQ.NetMQSocket.Disconnect(string) call NetMQ.NetMQSocket.Disconnect(string) call NetMQ.NetMQSocket.Disconnect(string) catch finally = call ManualResetEvent.Set() call ManualResetEvent.Set() call ManualResetEvent.Set() call ManualResetEvent.Set() call ManualResetEvent.Set() public public if == throw new if throw new if ref != throw new public public if == throw new call NetMQ.ISocketPollableCollection.Remove(ISocketPollable) call NetMQ.ISocketPollableCollection.Remove(ISocketPollable) call NetMQ.ISocketPollableCollection.Remove(ISocketPollable) call NetMQ.ISocketPollableCollection.Remove(ISocketPollable) call NetMQ.ISocketPollableCollection.Remove(ISocketPollable) = public public if throw new if != throw new try while == call NetMQ.NetMQSocket.Poll() call NetMQ.NetMQSocket.Poll() call NetMQ.NetMQSocket.Poll() call NetMQ.NetMQSocket.Poll() call NetMQ.NetMQSocket.Poll() finally public public if throw new if != throw new return public public if != throw new ref call ManualResetEvent.WaitOne() call ManualResetEvent.WaitOne() call ManualResetEvent.WaitOne() call ManualResetEvent.WaitOne() call ManualResetEvent.WaitOne() public public protected virtual protected virtual if ! return if != else if ! call ManualResetEvent.WaitOne() call ManualResetEvent.WaitOne() call ManualResetEvent.WaitOne() call ManualResetEvent.WaitOne() call ManualResetEvent.WaitOne() -= if call ManualResetEvent.Close() call ManualResetEvent.Close() call ManualResetEvent.Close() call ManualResetEvent.Close() call ManualResetEvent.Close() else call ManualResetEvent.Dispose() call ManualResetEvent.Dispose() call ManualResetEvent.Dispose() call ManualResetEvent.Dispose() call ManualResetEvent.Dispose() endif if call NetMQ.NetMQSocket.Dispose(bool) call NetMQ.NetMQSocket.Dispose(bool) call NetMQ.NetMQSocket.Dispose(bool) call NetMQ.NetMQSocket.Dispose(bool) call NetMQ.NetMQSocket.Dispose(bool)