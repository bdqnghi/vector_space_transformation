NetMQ.Security.V0_1 System using System.Linq using System.Security.Cryptography using class NetMQ.Security.V0_1.RecordLayer super super IDisposable ulong decl byte SymmetricAlgorithm decl bool SymmetricAlgorithm int ulong HMAC string HMAC ulong decl byte int decl byte int private private out out out out out out out out decl_stmt byte = new * decl_stmt int = + + * if > decl_stmt byte = = new decl_stmt int = = new += = new += = new else = = = = decl byte decl byte decl byte decl byte public public decl_stmt byte decl_stmt byte decl_stmt byte decl_stmt byte out out out out if == = new = = * = * = new = = * = * if == = = else = = else = = if == if == = new = new else = new = new else if == if == = new = new else = new = new else = = int decl byte decl byte ulong decl byte decl byte NetMQMessage var public public if == && == return decl_stmt NetMQMessage = new using = call System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor() call System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor() call System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor() call System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor() call System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor() decl_stmt ulong = decl_stmt byte = decl_stmt var = call NetMQMessage.Append() call NetMQMessage.Append() call NetMQMessage.Append() call NetMQMessage.Append() call NetMQMessage.Append() decl_stmt int = decl_stmt byte = new decl_stmt byte = call NetMQMessage.Append() call NetMQMessage.Append() call NetMQMessage.Append() call NetMQMessage.Append() call NetMQMessage.Append() ++ foreach in decl_stmt byte = call NetMQMessage.Append() call NetMQMessage.Append() call NetMQMessage.Append() call NetMQMessage.Append() call NetMQMessage.Append() ++ return byte decl byte private private decl_stmt byte = new decl_stmt byte = - for = < ++ = return private private return ++ decl byte int decl byte byte decl byte decl byte decl byte decl byte private private decl_stmt byte if != decl_stmt byte = new byte decl_stmt byte = decl_stmt byte = decl_stmt byte = call System.Security.Cryptography.HMAC.Initialize() call System.Security.Cryptography.HMAC.Initialize() call System.Security.Cryptography.HMAC.Initialize() call System.Security.Cryptography.HMAC.Initialize() call System.Security.Cryptography.HMAC.Initialize() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformFinalBlock() call HMAC.TransformFinalBlock() call HMAC.TransformFinalBlock() call HMAC.TransformFinalBlock() call HMAC.TransformFinalBlock() = else = < < decl_stmt int = + decl_stmt byte = if != = - + + += + decl_stmt byte = new if != for = + < ++ = return NetMQFrame decl byte NetMQMessage decl byte decl byte decl byte NetMQFrame ulong int decl byte int public public if == && == return if < throw new decl_stmt NetMQ.NetMQFrame = = call NetMQFrame.ToByteArray() call NetMQFrame.ToByteArray() call NetMQFrame.ToByteArray() call NetMQFrame.ToByteArray() call NetMQFrame.ToByteArray() using = call System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor() call System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor() call System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor() call System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor() call System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor() decl_stmt NetMQMessage = new decl_stmt NetMQ.NetMQFrame = decl_stmt byte decl_stmt byte decl_stmt byte call NetMQFrame.ToByteArray() call NetMQFrame.ToByteArray() call NetMQFrame.ToByteArray() call NetMQFrame.ToByteArray() call NetMQFrame.ToByteArray() out out out decl_stmt ulong = decl_stmt int = decl_stmt int = if throw new if != throw new ++ foreach in decl_stmt byte decl_stmt byte out out out ++ call NetMQMessage.Append() call NetMQMessage.Append() call NetMQMessage.Append() call NetMQMessage.Append() call NetMQMessage.Append() return int decl byte int private private out out out out out out if != throw new decl_stmt byte = new decl_stmt int decl_stmt int if != = - + if > = = - - if < = else = - = = = new = new = new + decl byte decl byte decl byte decl byte public public if != decl_stmt byte = new byte decl_stmt byte = decl_stmt byte = decl_stmt byte = call System.Security.Cryptography.HMAC.Initialize() call System.Security.Cryptography.HMAC.Initialize() call System.Security.Cryptography.HMAC.Initialize() call System.Security.Cryptography.HMAC.Initialize() call System.Security.Cryptography.HMAC.Initialize() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformBlock() call HMAC.TransformFinalBlock() call HMAC.TransformFinalBlock() call HMAC.TransformFinalBlock() call HMAC.TransformFinalBlock() call HMAC.TransformFinalBlock() if ! call HMAC.Hash() call HMAC.Hash() call HMAC.Hash() call HMAC.Hash() call HMAC.Hash() call HMAC.Hash() call HMAC.Hash() call HMAC.Hash() call HMAC.Hash() throw new for = < ++ if != - throw new int ulong private private if < return else if <= decl_stmt int = if ! = return else return else if - > - return decl_stmt ulong = - for = < ++ decl_stmt int = + = = + = return public public if != call System.Security.Cryptography.SymmetricAlgorithm.Dispose() call System.Security.Cryptography.SymmetricAlgorithm.Dispose() call System.Security.Cryptography.SymmetricAlgorithm.Dispose() call System.Security.Cryptography.SymmetricAlgorithm.Dispose() call System.Security.Cryptography.SymmetricAlgorithm.Dispose() = if != call System.Security.Cryptography.SymmetricAlgorithm.Dispose() call System.Security.Cryptography.SymmetricAlgorithm.Dispose() call System.Security.Cryptography.SymmetricAlgorithm.Dispose() call System.Security.Cryptography.SymmetricAlgorithm.Dispose() call System.Security.Cryptography.SymmetricAlgorithm.Dispose() = if != call System.Security.Cryptography.HMAC.Dispose(bool) call System.Security.Cryptography.HMAC.Dispose(bool) call System.Security.Cryptography.HMAC.Dispose(bool) call System.Security.Cryptography.HMAC.Dispose(bool) call System.Security.Cryptography.HMAC.Dispose(bool) = if != call System.Security.Cryptography.HMAC.Dispose(bool) call System.Security.Cryptography.HMAC.Dispose(bool) call System.Security.Cryptography.HMAC.Dispose(bool) call System.Security.Cryptography.HMAC.Dispose(bool) call System.Security.Cryptography.HMAC.Dispose(bool) = if != =