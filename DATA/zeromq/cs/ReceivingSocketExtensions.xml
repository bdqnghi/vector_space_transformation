NetMQ System using System.Collections.Generic using System.Diagnostics using System.Diagnostics.CodeAnalysis using System.Text using JetBrains.Annotations using class attribute attribute attribute NetMQ.ReceivingSocketExtensions var public static public static this this ref ref decl_stmt var = ref bool public static public static decl_stmt bool return out var var public static public static out out decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() ref decl_stmt var = call var.CloneData() call var.CloneData() call var.CloneData() call var.CloneData() call var.CloneData() = call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return bool public static public static out out decl_stmt bool return out out public static public static out out out out return out out bool public static public static out out decl_stmt bool return out out var public static public static out out out out decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() if ! ref call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() = = return = call var.CloneData() call var.CloneData() call var.CloneData() call var.CloneData() call var.CloneData() = call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return var public static < public static < = decl_stmt var = new < ref return var public static public static ref ref ref < = if == = new < else decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() do ref call var.CloneData() call var.CloneData() call var.CloneData() call var.CloneData() call var.CloneData() call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() public static public static ref ref ref < = return ref var public static public static ref ref ref < = decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() if ! ref call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return if == = new < else call var.CloneData() call var.CloneData() call var.CloneData() call var.CloneData() call var.CloneData() while ref call var.CloneData() call var.CloneData() call var.CloneData() call var.CloneData() call var.CloneData() call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return bool public static public static decl_stmt bool return out public static public static out out return out bool public static public static decl_stmt bool return out var var public static public static out out decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() ref = decl_stmt var = > : call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return bool public static public static out out decl_stmt bool return out out public static public static out out out out return out out bool public static public static out out decl_stmt bool return out out public static public static out out out out return out out bool public static public static out out decl_stmt bool return out out public static public static out out out out return out out bool public static public static out out decl_stmt bool return out out var public static public static out out out out decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() if ref = = > : call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return = = call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return public static < public static < = return var var public static < public static < = decl_stmt var = new < decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() do ref call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return public static public static ref ref ref < = return ref public static public static ref ref ref < = return ref public static public static ref ref ref < = return ref var public static public static ref ref ref < = decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() if ! ref call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return if == = new < else while ref call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return var var public static public static = decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() decl_stmt var = new do ref call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.CloneData() call var.CloneData() call var.CloneData() call var.CloneData() call var.CloneData() call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return public static public static ref ref = return ref var public static public static ref ref = decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() if ! ref call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return if == = new else new call var.CloneData() call var.CloneData() call var.CloneData() call var.CloneData() call var.CloneData() while ref new call var.CloneData() call var.CloneData() call var.CloneData() call var.CloneData() call var.CloneData() call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return var var var public static public static decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() while ref decl_stmt var = while ref if || != continue decl_stmt var = if & == call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return & == public static public static out out return out var var var public static public static out out decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() while if ! ref = call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return decl_stmt var = while ref if || != continue decl_stmt var = if & == = & == call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return var public static public static decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() ref call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() var public static public static out out decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() ref = call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() var var public static public static decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() decl_stmt var = ref call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return var var public static public static out out decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() decl_stmt var = ref = call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return var var public static public static decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() decl_stmt var = ref call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return var public static public static out out decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() if ! ref = call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return = call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return var public static public static decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() do ref call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() var var public static public static decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() decl_stmt var = ref call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return var public static public static decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() if ! ref call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return while ref call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return