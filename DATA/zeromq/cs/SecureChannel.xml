NetMQ.Security.V0_1 System using System.Collections.Generic using System.Linq using System.Security.Cryptography.X509Certificates using JetBrains.Annotations using class NetMQ.Security.V0_1.SecureChannel super super ISecureChannel decl byte OutgoingMessageBag HandshakeLayer RecordLayer return = return = public public = NetMQFrame NetMQFrame ContentType decl byte bool public public < decl_stmt System.Net.Mime.ContentType = if != decl_stmt NetMQ.NetMQFrame = decl_stmt byte = call NetMQFrame.ToByteArray() call NetMQFrame.ToByteArray() call NetMQFrame.ToByteArray() call NetMQFrame.ToByteArray() call NetMQFrame.ToByteArray() if != throw new if ! call decl byte.SequenceEqual() call decl byte.SequenceEqual() call decl byte.SequenceEqual() call decl byte.SequenceEqual() call decl byte.SequenceEqual() throw new decl_stmt NetMQ.NetMQFrame = if != throw new = if != && != throw new if = call NetMQ.Security.V0_1.RecordLayer.DecryptMessage(ContentType,NetMQMessage) call NetMQ.Security.V0_1.RecordLayer.DecryptMessage(ContentType,NetMQMessage) call NetMQ.Security.V0_1.RecordLayer.DecryptMessage(ContentType,NetMQMessage) call NetMQ.Security.V0_1.RecordLayer.DecryptMessage(ContentType,NetMQMessage) call NetMQ.Security.V0_1.RecordLayer.DecryptMessage(ContentType,NetMQMessage) decl_stmt bool = if == = call NetMQ.Security.V0_1.HandshakeLayer.ProcessMessages(NetMQMessage,OutgoingMessageBag) call NetMQ.Security.V0_1.HandshakeLayer.ProcessMessages(NetMQMessage,OutgoingMessageBag) call NetMQ.Security.V0_1.HandshakeLayer.ProcessMessages(NetMQMessage,OutgoingMessageBag) call NetMQ.Security.V0_1.HandshakeLayer.ProcessMessages(NetMQMessage,OutgoingMessageBag) call NetMQ.Security.V0_1.HandshakeLayer.ProcessMessages(NetMQMessage,OutgoingMessageBag) foreach in call OutgoingMessageBag.Clear() call OutgoingMessageBag.Clear() call OutgoingMessageBag.Clear() call OutgoingMessageBag.Clear() call OutgoingMessageBag.Clear() else = return = && NetMQMessage private private decl_stmt NetMQMessage = new call NetMQMessage.Append() call NetMQMessage.Append() call NetMQMessage.Append() call NetMQMessage.Append() call NetMQMessage.Append() new call NetMQ.Security.V0_1.OutgoingMessageBag.AddCipherChangeMessage(NetMQMessage) call NetMQ.Security.V0_1.OutgoingMessageBag.AddCipherChangeMessage(NetMQMessage) call NetMQ.Security.V0_1.OutgoingMessageBag.AddCipherChangeMessage(NetMQMessage) call NetMQ.Security.V0_1.OutgoingMessageBag.AddCipherChangeMessage(NetMQMessage) call NetMQ.Security.V0_1.OutgoingMessageBag.AddCipherChangeMessage(NetMQMessage) = call NetMQ.Security.V0_1.RecordLayer.InitalizeCipherSuite() call NetMQ.Security.V0_1.RecordLayer.InitalizeCipherSuite() call NetMQ.Security.V0_1.RecordLayer.InitalizeCipherSuite() call NetMQ.Security.V0_1.RecordLayer.InitalizeCipherSuite() call NetMQ.Security.V0_1.RecordLayer.InitalizeCipherSuite() NetMQMessage internal internal decl_stmt NetMQMessage = call NetMQ.Security.V0_1.RecordLayer.EncryptMessage(ContentType,NetMQMessage) call NetMQ.Security.V0_1.RecordLayer.EncryptMessage(ContentType,NetMQMessage) call NetMQ.Security.V0_1.RecordLayer.EncryptMessage(ContentType,NetMQMessage) call NetMQ.Security.V0_1.RecordLayer.EncryptMessage(ContentType,NetMQMessage) call NetMQ.Security.V0_1.RecordLayer.EncryptMessage(ContentType,NetMQMessage) call NetMQMessage.Push() call NetMQMessage.Push() call NetMQMessage.Push() call NetMQMessage.Push() call NetMQMessage.Push() new byte call NetMQMessage.Push() call NetMQMessage.Push() call NetMQMessage.Push() call NetMQMessage.Push() call NetMQMessage.Push() return public public if ! throw new if == throw new return NetMQFrame NetMQFrame ContentType public public if ! throw new if == throw new if < throw new decl_stmt NetMQ.NetMQFrame = decl_stmt NetMQ.NetMQFrame = if ! call NetMQFrame.ToByteArray() call NetMQFrame.ToByteArray() call NetMQFrame.ToByteArray() call NetMQFrame.ToByteArray() call NetMQFrame.ToByteArray() throw new decl_stmt System.Net.Mime.ContentType = if != throw new return call NetMQ.Security.V0_1.RecordLayer.DecryptMessage(ContentType,NetMQMessage) call NetMQ.Security.V0_1.RecordLayer.DecryptMessage(ContentType,NetMQMessage) call NetMQ.Security.V0_1.RecordLayer.DecryptMessage(ContentType,NetMQMessage) call NetMQ.Security.V0_1.RecordLayer.DecryptMessage(ContentType,NetMQMessage) call NetMQ.Security.V0_1.RecordLayer.DecryptMessage(ContentType,NetMQMessage) public public protected virtual protected virtual if ! return if != call NetMQ.Security.V0_1.HandshakeLayer.Dispose() call NetMQ.Security.V0_1.HandshakeLayer.Dispose() call NetMQ.Security.V0_1.HandshakeLayer.Dispose() call NetMQ.Security.V0_1.HandshakeLayer.Dispose() call NetMQ.Security.V0_1.HandshakeLayer.Dispose() = if != call NetMQ.Security.V0_1.RecordLayer.Dispose() call NetMQ.Security.V0_1.RecordLayer.Dispose() call NetMQ.Security.V0_1.RecordLayer.Dispose() call NetMQ.Security.V0_1.RecordLayer.Dispose() call NetMQ.Security.V0_1.RecordLayer.Dispose() =