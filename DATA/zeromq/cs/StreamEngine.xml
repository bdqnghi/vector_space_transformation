NetMQ.Core.Transports System using System.Collections.Generic using System.Diagnostics using System.Net.Sockets using AsyncIO using JetBrains.Annotations using class NetMQ.Core.Transports.StreamEngine super super IEngine super IProactorEvents super IMsgSink ReceiveState IOObject HandshakeState decl Queue AsyncSocket string Options int int SessionBase ByteArraySegment int int SocketBase decl byte State ByteArraySegment SendState bool DecoderBase int bool EncoderBase ByteArraySegment public public ! if != try call AsyncSocket.Dispose() call AsyncSocket.Dispose() call AsyncSocket.Dispose() call AsyncSocket.Dispose() call AsyncSocket.Dispose() catch = public public ! = == != = = = new call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.Plug(IOThread) call NetMQ.Core.IOObject.Plug(IOThread) call NetMQ.Core.IOObject.Plug(IOThread) call NetMQ.Core.IOObject.Plug(IOThread) call NetMQ.Core.IOObject.Plug(IOThread) call IOObject.AddSocket() call IOObject.AddSocket() call IOObject.AddSocket() call IOObject.AddSocket() call IOObject.AddSocket() = public public private private = if call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) = call NetMQ.Core.IOObject.Unplug() call NetMQ.Core.IOObject.Unplug() call NetMQ.Core.IOObject.Unplug() call NetMQ.Core.IOObject.Unplug() call NetMQ.Core.IOObject.Unplug() = = private private != call NetMQ.Core.SocketBase.EventDisconnected(string,AsyncSocket) call NetMQ.Core.SocketBase.EventDisconnected(string,AsyncSocket) call NetMQ.Core.SocketBase.EventDisconnected(string,AsyncSocket) call NetMQ.Core.SocketBase.EventDisconnected(string,AsyncSocket) call NetMQ.Core.SocketBase.EventDisconnected(string,AsyncSocket) call NetMQ.Core.SessionBase.Detach() call NetMQ.Core.SessionBase.Detach() call NetMQ.Core.SessionBase.Detach() call NetMQ.Core.SessionBase.Detach() call NetMQ.Core.SessionBase.Detach() var private private while > decl_stmt var = call decl Queue.Dequeue() call decl Queue.Dequeue() call decl Queue.Dequeue() call decl Queue.Dequeue() call decl Queue.Dequeue() private private call decl Queue.Enqueue() call decl Queue.Enqueue() call decl Queue.Enqueue() call decl Queue.Enqueue() call decl Queue.Enqueue() new int private private switch case switch case if = new = new else = = break break case break case switch case = break case if == = break case decl_stmt int = if == - = else call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) -= break case if == = break default: break break case switch case call DecoderBase.ProcessBuffer() call DecoderBase.ProcessBuffer() call DecoderBase.ProcessBuffer() call DecoderBase.ProcessBuffer() call DecoderBase.ProcessBuffer() ! call NetMQ.Core.Transports.DecoderBase.Stalled() call NetMQ.Core.Transports.DecoderBase.Stalled() call NetMQ.Core.Transports.DecoderBase.Stalled() call NetMQ.Core.Transports.DecoderBase.Stalled() call NetMQ.Core.Transports.DecoderBase.Stalled() call SessionBase.Flush() call SessionBase.Flush() call SessionBase.Flush() call SessionBase.Flush() call SessionBase.Flush() break case break break private private if == = call NetMQ.Core.Transports.EncoderBase.GetData(ByteArraySegment,int) call NetMQ.Core.Transports.EncoderBase.GetData(ByteArraySegment,int) call NetMQ.Core.Transports.EncoderBase.GetData(ByteArraySegment,int) call NetMQ.Core.Transports.EncoderBase.GetData(ByteArraySegment,int) call NetMQ.Core.Transports.EncoderBase.GetData(ByteArraySegment,int) ref ref if == = else else var int int int var int var private private decl_stmt int decl_stmt int switch case switch case ++ = byte call NetMQ.Core.Transports.ByteArraySegment.PutLong(Endianness,long,int) call NetMQ.Core.Transports.ByteArraySegment.PutLong(Endianness,long,int) call NetMQ.Core.Transports.ByteArraySegment.PutLong(Endianness,long,int) call NetMQ.Core.Transports.ByteArraySegment.PutLong(Endianness,long,int) call NetMQ.Core.Transports.ByteArraySegment.PutLong(Endianness,long,int) long + += ++ = byte = new = break default: break break case switch case = if == - else call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) -= if > else = decl_stmt var = new = break case case break default: break break case switch case = if == - else += if != || == && & == = new call EncoderBase.SetMsgSource() call EncoderBase.SetMsgSource() call EncoderBase.SetMsgSource() call EncoderBase.SetMsgSource() call EncoderBase.SetMsgSource() = new call DecoderBase.SetMsgSink() call DecoderBase.SetMsgSink() call DecoderBase.SetMsgSink() call DecoderBase.SetMsgSink() call DecoderBase.SetMsgSink() decl_stmt int = + >= : decl_stmt var = new decl_stmt var = new decl_stmt int = call NetMQ.Core.Transports.EncoderBase.GetData(ByteArraySegment,int) call NetMQ.Core.Transports.EncoderBase.GetData(ByteArraySegment,int) call NetMQ.Core.Transports.EncoderBase.GetData(ByteArraySegment,int) call NetMQ.Core.Transports.EncoderBase.GetData(ByteArraySegment,int) call NetMQ.Core.Transports.EncoderBase.GetData(ByteArraySegment,int) ref ref == = new = if == || == call DecoderBase.SetMsgSink() call DecoderBase.SetMsgSink() call DecoderBase.SetMsgSink() call DecoderBase.SetMsgSink() call DecoderBase.SetMsgSink() else if < decl_stmt var = new - else ++ = ++ = byte = break case case break default: break break case switch case = if == - else call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) -= if > else decl_stmt var = new = - break case case break default: break break case switch case = if == - else += if < decl_stmt var = new - else if == = new call EncoderBase.SetMsgSource() call EncoderBase.SetMsgSource() call EncoderBase.SetMsgSource() call EncoderBase.SetMsgSource() call EncoderBase.SetMsgSource() = new call DecoderBase.SetMsgSink() call DecoderBase.SetMsgSink() call DecoderBase.SetMsgSink() call DecoderBase.SetMsgSink() call DecoderBase.SetMsgSink() else = new = new break case case break default: break break default: break private private = = = = if == call NetMQ.Core.Transports.DecoderBase.GetBuffer(ByteArraySegment,int) call NetMQ.Core.Transports.DecoderBase.GetBuffer(ByteArraySegment,int) call NetMQ.Core.Transports.DecoderBase.GetBuffer(ByteArraySegment,int) call NetMQ.Core.Transports.DecoderBase.GetBuffer(ByteArraySegment,int) call NetMQ.Core.Transports.DecoderBase.GetBuffer(ByteArraySegment,int) out out else bool int private private decl_stmt bool = decl_stmt int if == - = = if if == || ! call NetMQ.Core.Transports.DecoderBase.MessageReadySize(int) call NetMQ.Core.Transports.DecoderBase.MessageReadySize(int) call NetMQ.Core.Transports.DecoderBase.MessageReadySize(int) call NetMQ.Core.Transports.DecoderBase.MessageReadySize(int) call NetMQ.Core.Transports.DecoderBase.MessageReadySize(int) = else = call DecoderBase.ProcessBuffer() call DecoderBase.ProcessBuffer() call DecoderBase.ProcessBuffer() call DecoderBase.ProcessBuffer() call DecoderBase.ProcessBuffer() else = call DecoderBase.ProcessBuffer() call DecoderBase.ProcessBuffer() call DecoderBase.ProcessBuffer() call DecoderBase.ProcessBuffer() call DecoderBase.ProcessBuffer() if == - = else if < = call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) -= else = = call SessionBase.Flush() call SessionBase.Flush() call SessionBase.Flush() call SessionBase.Flush() call SessionBase.Flush() if if call NetMQ.Core.Transports.DecoderBase.Stalled() call NetMQ.Core.Transports.DecoderBase.Stalled() call NetMQ.Core.Transports.DecoderBase.Stalled() call NetMQ.Core.Transports.DecoderBase.Stalled() call NetMQ.Core.Transports.DecoderBase.Stalled() call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) = = else else if != call NetMQ.Core.Transports.DecoderBase.GetBuffer(ByteArraySegment,int) call NetMQ.Core.Transports.DecoderBase.GetBuffer(ByteArraySegment,int) call NetMQ.Core.Transports.DecoderBase.GetBuffer(ByteArraySegment,int) call NetMQ.Core.Transports.DecoderBase.GetBuffer(ByteArraySegment,int) call NetMQ.Core.Transports.DecoderBase.GetBuffer(ByteArraySegment,int) out out public public public public public public public public bool public public ref ref == || == call NetMQ.Core.SessionBase.PushMsg(Msg) call NetMQ.Core.SessionBase.PushMsg(Msg) call NetMQ.Core.SessionBase.PushMsg(Msg) call NetMQ.Core.SessionBase.PushMsg(Msg) call NetMQ.Core.SessionBase.PushMsg(Msg) ref byte decl_stmt bool = call NetMQ.Core.SessionBase.PushMsg(Msg) call NetMQ.Core.SessionBase.PushMsg(Msg) call NetMQ.Core.SessionBase.PushMsg(Msg) call NetMQ.Core.SessionBase.PushMsg(Msg) call NetMQ.Core.SessionBase.PushMsg(Msg) ref call SessionBase.Flush() call SessionBase.Flush() call SessionBase.Flush() call SessionBase.Flush() call SessionBase.Flush() != call DecoderBase.SetMsgSink() call DecoderBase.SetMsgSink() call DecoderBase.SetMsgSink() call DecoderBase.SetMsgSink() call DecoderBase.SetMsgSink() return private static private static if == && > return if == || == || == || == || == || == || == || == return - throw private private try call AsyncSocket.Send() call AsyncSocket.Send() call AsyncSocket.Send() call AsyncSocket.Send() call AsyncSocket.Send() catch private static private static if == && > return if == || == || == || == || == || == || == || == return - throw private private try call AsyncSocket.Receive() call AsyncSocket.Receive() call AsyncSocket.Receive() call AsyncSocket.Receive() call AsyncSocket.Receive() catch public public throw new