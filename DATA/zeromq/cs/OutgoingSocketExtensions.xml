NetMQ System using System.Collections.Generic using System.Diagnostics using JetBrains.Annotations using class NetMQ.OutgoingSocketExtensions var public static public static this this ref ref decl_stmt var = ref public static public static = var public static public static = decl_stmt var = new call var.InitPool() call var.InitPool() call var.InitPool() call var.InitPool() call var.InitPool() ref call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() public static public static return public static public static return var public static public static = decl_stmt var = new call var.InitPool() call var.InitPool() call var.InitPool() call var.InitPool() call var.InitPool() if ! ref call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return public static public static = return public static public static = return public static public static = return public static public static params params params < var var public static public static < decl_stmt var = try if ! call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() throw new decl_stmt var = while call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() = finally call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() public static public static params params params return < var bool var public static public static < decl_stmt var = try if ! call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() throw new decl_stmt var = if ! call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() return else decl_stmt bool = if ! return = while call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() = return finally call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() public static public static params params params return < public static public static < return var public static public static = decl_stmt var = new call var.InitPool() call var.InitPool() call var.InitPool() call var.InitPool() call var.InitPool() ref call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() public static public static return var public static public static = decl_stmt var = new call var.InitPool() call var.InitPool() call var.InitPool() call var.InitPool() call var.InitPool() if ! ref call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() return public static public static = return public static public static if == throw new for = < - ++ bool public static public static if == throw new else if == return else decl_stmt bool = if ! return for = < - ++ return public static public static return public static public static = < < public static public static < < return public static public static = return < < public static public static = return < < Msg long private static private static decl_stmt long = + decl_stmt Msg = new call Msg.InitPool() call Msg.InitPool() call Msg.InitPool() call Msg.InitPool() call Msg.InitPool() ref call Msg.Close() call Msg.Close() call Msg.Close() call Msg.Close() call Msg.Close() Msg long private static private static decl_stmt long = + decl_stmt Msg = new call Msg.InitPool() call Msg.InitPool() call Msg.InitPool() call Msg.InitPool() call Msg.InitPool() if ! ref call Msg.Close() call Msg.Close() call Msg.Close() call Msg.Close() call Msg.Close() return call Msg.Close() call Msg.Close() call Msg.Close() call Msg.Close() call Msg.Close() return public static public static public static public static return public static public static public static public static return