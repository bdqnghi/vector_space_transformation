NetMQ.Devices System using System.Collections.Generic using System.Linq.Expressions using System.Reflection using JetBrains.Annotations using NetMQ.Sockets using class NetMQ.Devices.DeviceSocketSetup decl List decl List NetMQSocket bool decl List public public if == throw new call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() return public public if == throw new call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() return public public < < return < public public < < return < public public < < return < var string public public return decl_stmt var = as if == decl_stmt string = throw new call var.Subscribe() call var.Subscribe() call var.Subscribe() call var.Subscribe() call var.Subscribe() var string public public return decl_stmt var = as if == decl_stmt string = throw new call var.Subscribe() call var.Subscribe() call var.Subscribe() call var.Subscribe() call var.Subscribe() internal internal < call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() return internal internal if return if == && == throw new foreach in foreach in call NetMQ.NetMQSocket.Bind(string) call NetMQ.NetMQSocket.Bind(string) call NetMQ.NetMQSocket.Bind(string) call NetMQ.NetMQSocket.Bind(string) call NetMQ.NetMQSocket.Bind(string) foreach in call NetMQ.NetMQSocket.Connect(string) call NetMQ.NetMQSocket.Connect(string) call NetMQ.NetMQSocket.Connect(string) call NetMQ.NetMQSocket.Connect(string) call NetMQ.NetMQSocket.Connect(string) = var private private private < < < decl_stmt var = is as : as if == throw new + call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call var.SetValue() call var.SetValue() call var.SetValue() call var.SetValue() call var.SetValue() return