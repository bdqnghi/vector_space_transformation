NetMQ.Tests System using System.Linq using System.Net using System.Net.Sockets using System.Threading using System.Threading.Tasks using NetMQ.Core using NetMQ.Monitoring using NetMQ.Sockets using NUnit.Framework using class attribute NetMQ.Tests.PgmTests bool public public using = new using = new decl_stmt bool out bool public public using = new using = new decl_stmt bool out bool public public using = new using = new decl_stmt bool out string bool var public public if decl_stmt var = else decl_stmt var = endif decl_stmt string = call var.AddressList() call var.AddressList() call var.AddressList() call var.AddressList() call var.AddressList() call var.AddressList() call var.AddressList() call var.AddressList() call var.AddressList() == using = new using = new decl_stmt bool out int int bool public public decl_stmt int const const = decl_stmt int const const = using = new using = new = = * = = * = * decl_stmt bool out * * * bool public public using = new using = new using = new decl_stmt bool out out bool public public using = new using = new using = new decl_stmt bool out out int Task var Task bool public public decl_stmt int = decl_stmt var = new decl_stmt System.Threading.Tasks.Task = using = new call var.Set() call var.Set() call var.Set() call var.Set() call var.Set() while < decl_stmt bool out ++ call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() decl_stmt System.Threading.Tasks.Task = using = new for = < ++ call Task.Wait() call Task.Wait() call Task.Wait() call Task.Wait() call Task.Wait() call Task.Wait() call Task.Wait() call Task.Wait() call Task.Wait() call Task.Wait() decl byte var public public using = new using = new decl_stmt var = new for = < ++ * decl_stmt byte = for = < ++ * var var var var public public for = < ++ using = new using = new decl_stmt var = decl_stmt var = new += call var.Set() call var.Set() call var.Set() call var.Set() call var.Set() decl_stmt var = call var.Wait() call var.Wait() call var.Wait() call var.Wait() call var.Wait() decl_stmt var = - call var.Wait() call var.Wait() call var.Wait() call var.Wait() call var.Wait()