NetMQ.Core.Utils System.Collections.Generic using System.Diagnostics using System.Linq using System.Threading using JetBrains.Annotations using class NetMQ.Core.Utils.PollerBase int decl SortedList if return ref else return endif protected protected ref var long public public decl_stmt long = + decl_stmt var = new if ! call decl SortedList.ContainsKey() call decl SortedList.ContainsKey() call decl SortedList.ContainsKey() call decl SortedList.ContainsKey() call decl SortedList.ContainsKey() call decl SortedList.Add() call decl SortedList.Add() call decl SortedList.Add() call decl SortedList.Add() call decl SortedList.Add() new < var var public public decl_stmt var = new < foreach in decl_stmt var = == && == if == continue if ! call var.ContainsKey() call var.ContainsKey() call var.ContainsKey() call var.ContainsKey() call var.ContainsKey() = break if > foreach in if == call decl SortedList.Remove() call decl SortedList.Remove() call decl SortedList.Remove() call decl SortedList.Remove() call decl SortedList.Remove() else else long var var var protected protected if == return decl_stmt long = decl_stmt var = for = < ++ decl_stmt var = if > return - decl_stmt var = foreach in call var.Clear() call var.Clear() call var.Clear() call var.Clear() call var.Clear() call decl SortedList.Remove() call decl SortedList.Remove() call decl SortedList.Remove() call decl SortedList.Remove() call decl SortedList.Remove() -- return