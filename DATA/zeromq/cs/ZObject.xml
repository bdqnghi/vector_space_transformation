NetMQ.Core System using JetBrains.Annotations using NetMQ.Core.Transports using class NetMQ.Core.ZObject Ctx int protected protected return call NetMQ.Core.Ctx.RegisterEndpoint(string,Endpoint) call NetMQ.Core.Ctx.RegisterEndpoint(string,Endpoint) call NetMQ.Core.Ctx.RegisterEndpoint(string,Endpoint) call NetMQ.Core.Ctx.RegisterEndpoint(string,Endpoint) call NetMQ.Core.Ctx.RegisterEndpoint(string,Endpoint) protected protected return call NetMQ.Core.Ctx.UnregisterEndpoint(string,SocketBase) call NetMQ.Core.Ctx.UnregisterEndpoint(string,SocketBase) call NetMQ.Core.Ctx.UnregisterEndpoint(string,SocketBase) call NetMQ.Core.Ctx.UnregisterEndpoint(string,SocketBase) call NetMQ.Core.Ctx.UnregisterEndpoint(string,SocketBase) protected protected call Ctx.UnregisterEndpoints() call Ctx.UnregisterEndpoints() call Ctx.UnregisterEndpoints() call Ctx.UnregisterEndpoints() call Ctx.UnregisterEndpoints() protected protected return call NetMQ.Core.Ctx.FindEndpoint(string) call NetMQ.Core.Ctx.FindEndpoint(string) call NetMQ.Core.Ctx.FindEndpoint(string) call NetMQ.Core.Ctx.FindEndpoint(string) call NetMQ.Core.Ctx.FindEndpoint(string) protected protected call NetMQ.Core.Ctx.DestroySocket(SocketBase) call NetMQ.Core.Ctx.DestroySocket(SocketBase) call NetMQ.Core.Ctx.DestroySocket(SocketBase) call NetMQ.Core.Ctx.DestroySocket(SocketBase) call NetMQ.Core.Ctx.DestroySocket(SocketBase) protected protected return call NetMQ.Core.Ctx.ChooseIOThread(long) call NetMQ.Core.Ctx.ChooseIOThread(long) call NetMQ.Core.Ctx.ChooseIOThread(long) call NetMQ.Core.Ctx.ChooseIOThread(long) call NetMQ.Core.Ctx.ChooseIOThread(long) protected protected call NetMQ.Core.Ctx.SendCommand(int,Command) call NetMQ.Core.Ctx.SendCommand(int,Command) call NetMQ.Core.Ctx.SendCommand(int,Command) call NetMQ.Core.Ctx.SendCommand(int,Command) call NetMQ.Core.Ctx.SendCommand(int,Command) new protected protected call NetMQ.Core.Ctx.SendCommand(int,Command) call NetMQ.Core.Ctx.SendCommand(int,Command) call NetMQ.Core.Ctx.SendCommand(int,Command) call NetMQ.Core.Ctx.SendCommand(int,Command) call NetMQ.Core.Ctx.SendCommand(int,Command) new protected protected = if new protected protected new protected protected = if new protected protected = if new protected protected new protected protected new protected protected new protected protected new protected protected new protected protected new protected protected new protected protected new protected protected new call NetMQ.Core.Ctx.GetReaper() call NetMQ.Core.Ctx.GetReaper() call NetMQ.Core.Ctx.GetReaper() call NetMQ.Core.Ctx.GetReaper() call NetMQ.Core.Ctx.GetReaper() protected protected new call NetMQ.Core.Ctx.GetReaper() call NetMQ.Core.Ctx.GetReaper() call NetMQ.Core.Ctx.GetReaper() call NetMQ.Core.Ctx.GetReaper() call NetMQ.Core.Ctx.GetReaper() protected protected call NetMQ.Core.Ctx.SendCommand(int,Command) call NetMQ.Core.Ctx.SendCommand(int,Command) call NetMQ.Core.Ctx.SendCommand(int,Command) call NetMQ.Core.Ctx.SendCommand(int,Command) call NetMQ.Core.Ctx.SendCommand(int,Command) new private private call NetMQ.Core.Ctx.SendCommand(int,Command) call NetMQ.Core.Ctx.SendCommand(int,Command) call NetMQ.Core.Ctx.SendCommand(int,Command) call NetMQ.Core.Ctx.SendCommand(int,Command) call NetMQ.Core.Ctx.SendCommand(int,Command) public public switch case break case long break case break case break case break case break case break case break case break case break case break case int break case break case break case break case break default: throw new protected virtual protected virtual throw new protected virtual protected virtual throw new protected virtual protected virtual throw new protected virtual protected virtual throw new protected virtual protected virtual throw new protected virtual protected virtual throw new protected virtual protected virtual throw new protected virtual protected virtual throw new protected virtual protected virtual throw new protected virtual protected virtual throw new protected virtual protected virtual throw new protected virtual protected virtual throw new protected virtual protected virtual throw new protected virtual protected virtual throw new protected virtual protected virtual throw new protected virtual protected virtual throw new protected virtual protected virtual throw new