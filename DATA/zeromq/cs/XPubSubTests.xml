NetMQ.Tests System.Linq using System.Threading using NUnit.Framework using NetMQ.Sockets using class attribute NetMQ.Tests.XPubSubTests var var bool public public using = new using = new decl_stmt var = + new byte decl_stmt var = decl_stmt bool out out var var var public public using = new using = new decl_stmt var = + decl_stmt var = new decl_stmt var = == var bool public public using = new using = new decl_stmt var = + new decl_stmt bool out var public public using = new using = new decl_stmt var = + var public public using = new using = new decl_stmt var = + new byte new byte new byte new byte new byte new byte new byte new byte new byte new byte var public public using = new using = new using = new decl_stmt var = + new byte new byte byte new byte new byte + new byte new byte byte new byte var bool var var var public public using = new using = new using = new using = new decl_stmt var = decl_stmt var = = = + + + + new byte new byte decl_stmt var = decl_stmt var = = = decl_stmt bool out out out out out out + out out var string bool public public using = new using = new decl_stmt var = + new byte decl_stmt bool out out new byte decl_stmt string out var public public using = new using = new = new byte decl_stmt var = byte var public public using = new using = new decl_stmt var = byte var public public using = new using = new decl_stmt var = byte var var var var var var var public public using = new using = new using = new = new byte new byte decl_stmt var = new byte decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() new byte new byte decl_stmt var = decl_stmt var = decl_stmt var = = call var.Skip() call var.Skip() call var.Skip() call var.Skip() call var.Skip() decl_stmt var = == = call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() decl_stmt var = ref var var var var var var public public using = new using = new using = new = new byte new byte decl_stmt var = new byte new byte new byte decl_stmt var = decl_stmt var = decl_stmt var = decl_stmt var = == = call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() decl_stmt var = == = call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() var var var var var public public using = new using = new using = new = new byte decl_stmt var = new decl_stmt var = new new byte new byte decl_stmt var = = call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() decl_stmt var = decl_stmt var = new byte new byte new byte = = call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() = = new byte new byte = = call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() new byte new byte = = call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual()