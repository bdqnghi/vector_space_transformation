NetMQ.Core.Transports.Tcp System using System.Diagnostics using System.Net.Sockets using AsyncIO using JetBrains.Annotations using class NetMQ.Core.Transports.Tcp.TcpConnector super super Own super IProactorEvents bool int SessionBase string IOObject int SocketBase AsyncSocket bool bool Address public override public override ! ! == protected override protected override call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) if else protected override protected override if call NetMQ.Core.IOObject.CancelTimer(int) call NetMQ.Core.IOObject.CancelTimer(int) call NetMQ.Core.IOObject.CancelTimer(int) call NetMQ.Core.IOObject.CancelTimer(int) call NetMQ.Core.IOObject.CancelTimer(int) = if call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) = if != public public throw new private private == try = catch return call IOObject.AddSocket() call IOObject.AddSocket() call IOObject.AddSocket() call IOObject.AddSocket() call IOObject.AddSocket() = try call AsyncSocket.Connect() call AsyncSocket.Connect() call AsyncSocket.Connect() call AsyncSocket.Connect() call AsyncSocket.Connect() call NetMQ.Core.SocketBase.EventConnectDelayed(string,ErrorCode) call NetMQ.Core.SocketBase.EventConnectDelayed(string,ErrorCode) call NetMQ.Core.SocketBase.EventConnectDelayed(string,ErrorCode) call NetMQ.Core.SocketBase.EventConnectDelayed(string,ErrorCode) call NetMQ.Core.SocketBase.EventConnectDelayed(string,ErrorCode) catch catch var var Endianness public public if != call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) = if == || == || == || == || == || == || == if >= else throw else call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) = = if != - call AsyncSocket.SetSocketOption() call AsyncSocket.SetSocketOption() call AsyncSocket.SetSocketOption() call AsyncSocket.SetSocketOption() call AsyncSocket.SetSocketOption() if != - && != - decl_stmt var = new new decl_stmt Endianness = : call var.PutInteger() call var.PutInteger() call var.PutInteger() call var.PutInteger() call var.PutInteger() call var.PutInteger() call var.PutInteger() call var.PutInteger() call var.PutInteger() call var.PutInteger() call var.PutInteger() call var.PutInteger() call var.PutInteger() call var.PutInteger() call var.PutInteger() call AsyncSocket.IOControl() call AsyncSocket.IOControl() call AsyncSocket.IOControl() call AsyncSocket.IOControl() call AsyncSocket.IOControl() decl_stmt var = new call NetMQ.Core.SocketBase.EventConnected(string,AsyncSocket) call NetMQ.Core.SocketBase.EventConnected(string,AsyncSocket) call NetMQ.Core.SocketBase.EventConnected(string,AsyncSocket) call NetMQ.Core.SocketBase.EventConnected(string,AsyncSocket) call NetMQ.Core.SocketBase.EventConnected(string,AsyncSocket) = public public = int private private decl_stmt int = call NetMQ.Core.IOObject.AddTimer(long,int) call NetMQ.Core.IOObject.AddTimer(long,int) call NetMQ.Core.IOObject.AddTimer(long,int) call NetMQ.Core.IOObject.AddTimer(long,int) call NetMQ.Core.IOObject.AddTimer(long,int) call NetMQ.Core.SocketBase.EventConnectRetried(string,int) call NetMQ.Core.SocketBase.EventConnectRetried(string,int) call NetMQ.Core.SocketBase.EventConnectRetried(string,int) call NetMQ.Core.SocketBase.EventConnectRetried(string,int) call NetMQ.Core.SocketBase.EventConnectRetried(string,int) = int private private decl_stmt int = + new if > && > = * if >= = return private private != try call AsyncSocket.Dispose() call AsyncSocket.Dispose() call AsyncSocket.Dispose() call AsyncSocket.Dispose() call AsyncSocket.Dispose() call NetMQ.Core.SocketBase.EventClosed(string,AsyncSocket) call NetMQ.Core.SocketBase.EventClosed(string,AsyncSocket) call NetMQ.Core.SocketBase.EventClosed(string,AsyncSocket) call NetMQ.Core.SocketBase.EventClosed(string,AsyncSocket) call NetMQ.Core.SocketBase.EventClosed(string,AsyncSocket) = catch call NetMQ.Core.SocketBase.EventCloseFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventCloseFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventCloseFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventCloseFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventCloseFailed(string,ErrorCode)