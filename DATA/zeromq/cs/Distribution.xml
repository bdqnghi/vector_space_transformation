NetMQ.Core.Patterns.Utils System.Collections.Generic using JetBrains.Annotations using class NetMQ.Core.Patterns.Utils.Distribution decl List bool int int int public public if call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() - ++ else call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() - ++ ++ int public public decl_stmt int = call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() if < return if >= return call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() ++ public public = public public if call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() < -- if call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() < -- if call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() < -- call decl List.Remove() call decl List.Remove() call decl List.Remove() call decl List.Remove() call decl List.Remove() public public call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() ++ if ! call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() - ++ public public ref ref = ref bool public public ref ref decl_stmt bool = ref if ! = = int private private ref ref if == return if != for = < ++ if ! ref -- return - decl_stmt int = for = < ++ if ! ref ++ -- if != public public return private private ref ref if ! ref call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() - -- call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() - -- call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() - -- return if ! return