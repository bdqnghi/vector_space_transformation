NetMQ.Core.Patterns.Utils System.Collections.Generic using System.Diagnostics using JetBrains.Annotations using class NetMQ.Core.Patterns.Utils.LoadBalancer decl List bool int int bool public public call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() int public public decl_stmt int = call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() if == && = if < -- call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() if == = call decl List.Remove() call decl List.Remove() call decl List.Remove() call decl List.Remove() call decl List.Remove() public public call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() ++ public public ref ref if = = return while > if ref break ! -- if < call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() else = if == return = if ! if > = + return public public if return while > if return -- call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() if == = return