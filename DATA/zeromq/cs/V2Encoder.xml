NetMQ.Core.Transports class NetMQ.Core.Transports.V2Encoder super super EncoderBase int int ByteArraySegment Msg IMsgSource public override public override = protected override protected override switch case return case return default: return private private new ! return int int bool private private call Msg.Close() call Msg.Close() call Msg.Close() call Msg.Close() call Msg.Close() call NetMQ.Core.Transports.ByteArraySegment.Reset() call NetMQ.Core.Transports.ByteArraySegment.Reset() call NetMQ.Core.Transports.ByteArraySegment.Reset() call NetMQ.Core.Transports.ByteArraySegment.Reset() call NetMQ.Core.Transports.ByteArraySegment.Reset() if == call Msg.InitEmpty() call Msg.InitEmpty() call Msg.InitEmpty() call Msg.InitEmpty() call Msg.InitEmpty() return decl_stmt bool = call IMsgSource.PullMsg() call IMsgSource.PullMsg() call IMsgSource.PullMsg() call IMsgSource.PullMsg() call IMsgSource.PullMsg() ref if ! call Msg.InitEmpty() call Msg.InitEmpty() call Msg.InitEmpty() call Msg.InitEmpty() call Msg.InitEmpty() return decl_stmt int = if |= if > |= = byte decl_stmt int = if > call NetMQ.Core.Transports.ByteArraySegment.PutLong(Endianness,long,int) call NetMQ.Core.Transports.ByteArraySegment.PutLong(Endianness,long,int) call NetMQ.Core.Transports.ByteArraySegment.PutLong(Endianness,long,int) call NetMQ.Core.Transports.ByteArraySegment.PutLong(Endianness,long,int) call NetMQ.Core.Transports.ByteArraySegment.PutLong(Endianness,long,int) else = return