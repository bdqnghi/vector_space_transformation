NetMQ.Core System using System.Collections.Generic using System.Diagnostics using System.Linq using System.Threading using JetBrains.Annotations using class NetMQ.Core.Ctx decl IMailbox object int Reaper bool int int decl List decl Stack int Mailbox decl Dictionary int object object int bool decl List bool int int public public if throw new var Command bool public public = if ! decl_stmt bool = = if ! try foreach in if ! call NetMQ.Core.Reaper.ForceStop() call NetMQ.Core.Reaper.ForceStop() call NetMQ.Core.Reaper.ForceStop() call NetMQ.Core.Reaper.ForceStop() call NetMQ.Core.Reaper.ForceStop() else if == call NetMQ.Core.Reaper.Stop() call NetMQ.Core.Reaper.Stop() call NetMQ.Core.Reaper.Stop() call NetMQ.Core.Reaper.Stop() call NetMQ.Core.Reaper.Stop() finally decl_stmt System.Data.Query.InternalTrees.Command decl_stmt var = call Mailbox.TryRecv() call Mailbox.TryRecv() call Mailbox.TryRecv() call Mailbox.TryRecv() call Mailbox.TryRecv() - out == foreach in foreach in call Mailbox.Close() call Mailbox.Close() call Mailbox.Close() call Mailbox.Close() call Mailbox.Close() = return if < throw new lock = return if <= throw new lock = int int int int SocketBase var string public public lock if = decl_stmt int decl_stmt int lock = = = + + = new = = new = call NetMQ.Core.Reaper.Start() call NetMQ.Core.Reaper.Start() call NetMQ.Core.Reaper.Start() call NetMQ.Core.Reaper.Start() call NetMQ.Core.Reaper.Start() for = != + ++ decl_stmt var = new call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() = call var.Start() call var.Start() call var.Start() call var.Start() call var.Start() for = - >= + -- call decl Stack.Push() call decl Stack.Push() call decl Stack.Push() call decl Stack.Push() call decl Stack.Push() = if decl_stmt string = throw new if == if decl_stmt string = throw else throw endif decl_stmt int = call decl Stack.Pop() call decl Stack.Pop() call decl Stack.Pop() call decl Stack.Pop() call decl Stack.Pop() decl_stmt int = ref decl_stmt NetMQ.Core.SocketBase = call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() = return int public public lock decl_stmt int = call decl Stack.Push() call decl Stack.Push() call decl Stack.Push() call decl Stack.Push() call decl Stack.Push() = call decl List.Remove() call decl List.Remove() call decl List.Remove() call decl List.Remove() call decl List.Remove() if && == call NetMQ.Core.Reaper.Stop() call NetMQ.Core.Reaper.Stop() call NetMQ.Core.Reaper.Stop() call NetMQ.Core.Reaper.Stop() call NetMQ.Core.Reaper.Stop() public public return public public IOThread var int public public if == return decl_stmt int = - decl_stmt NetMQ.Core.IOThread = for = != ++ decl_stmt var = if == || & << > if == || < = = return public public lock if call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() return = return Endpoint public public lock decl_stmt System.ServiceModel.Endpoint if ! call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out return if != return call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() return decl IList public public lock decl_stmt System.Collections.Generic.IList < = call decl Dictionary.Where() call decl Dictionary.Where() call decl Dictionary.Where() call decl Dictionary.Where() call decl Dictionary.Where() == foreach in call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() var public public != lock if ! call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() throw new decl_stmt var = if == throw new call var.Socket() call var.Socket() call var.Socket() call var.Socket() call var.Socket() call var.Socket() call var.Socket() call var.Socket() call var.Socket() return