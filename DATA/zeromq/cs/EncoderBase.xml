NetMQ.Core.Transports System using class NetMQ.Core.Transports.EncoderBase super super IEncoder int int bool ByteArraySegment bool decl byte int public public ref ref ref ref decl_stmt int = - ref ref ref ByteArraySegment int int int public public ref ref ref ref ref ref decl_stmt NetMQ.Core.Transports.ByteArraySegment = ?? new decl_stmt int = == : decl_stmt int = while < if == if if == - = if ! break if == && == && >= = = = = return decl_stmt int = - if != call NetMQ.Core.Transports.ByteArraySegment.CopyTo(int,ByteArraySegment,int,int) call NetMQ.Core.Transports.ByteArraySegment.CopyTo(int,ByteArraySegment,int,int) call NetMQ.Core.Transports.ByteArraySegment.CopyTo(int,ByteArraySegment,int,int) call NetMQ.Core.Transports.ByteArraySegment.CopyTo(int,ByteArraySegment,int,int) call NetMQ.Core.Transports.ByteArraySegment.CopyTo(int,ByteArraySegment,int,int) += call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) -= = = protected protected = public public return protected protected = = = =