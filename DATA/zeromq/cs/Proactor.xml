NetMQ.Core.Utils System using System.Collections.Generic using System.Threading using AsyncIO using JetBrains.Annotations using class NetMQ.Core.Utils.Proactor super super PollerBase bool Thread decl Dictionary bool int CompletionPort string public public = new = = call Thread.Start() call Thread.Start() call Thread.Start() call Thread.Start() call Thread.Start() public public = public public if ! try call Thread.Join() call Thread.Join() call Thread.Join() call Thread.Join() call Thread.Join() catch = call CompletionPort.Dispose() call CompletionPort.Dispose() call CompletionPort.Dispose() call CompletionPort.Dispose() call CompletionPort.Dispose() public public call CompletionPort.Signal() call CompletionPort.Signal() call CompletionPort.Signal() call CompletionPort.Signal() call CompletionPort.Signal() var public public decl_stmt var = new call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call CompletionPort.AssociateSocket() call CompletionPort.AssociateSocket() call CompletionPort.AssociateSocket() call CompletionPort.AssociateSocket() call CompletionPort.AssociateSocket() var public public - decl_stmt var = call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() = var int int var var private private decl_stmt var = new while ! decl_stmt int = decl_stmt int if ! call CompletionPort.GetMultipleQueuedCompletionStatus() call CompletionPort.GetMultipleQueuedCompletionStatus() call CompletionPort.GetMultipleQueuedCompletionStatus() call CompletionPort.GetMultipleQueuedCompletionStatus() call CompletionPort.GetMultipleQueuedCompletionStatus() != : - out continue for = < ++ try if == decl_stmt var = call var.RaiseEvent() call var.RaiseEvent() call var.RaiseEvent() call var.RaiseEvent() call var.RaiseEvent() else if != decl_stmt var = if ! switch case case call var.ProactorEvents() call var.ProactorEvents() call var.ProactorEvents() call var.ProactorEvents() call var.ProactorEvents() call var.ProactorEvents() call var.ProactorEvents() call var.ProactorEvents() call var.ProactorEvents() break case case case call var.ProactorEvents() call var.ProactorEvents() call var.ProactorEvents() call var.ProactorEvents() call var.ProactorEvents() call var.ProactorEvents() call var.ProactorEvents() call var.ProactorEvents() call var.ProactorEvents() break default: throw new catch