NetMQ.Core.Patterns System.Diagnostics using JetBrains.Annotations using NetMQ.Core.Patterns.Utils using class NetMQ.Core.Patterns.Dealer super super SocketBase FairQueueing LoadBalancer Msg bool public override public override call Msg.Close() call Msg.Close() call Msg.Close() call Msg.Close() call Msg.Close() protected override protected override != call NetMQ.Core.Patterns.Utils.FairQueueing.Attach(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Attach(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Attach(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Attach(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Attach(Pipe) call NetMQ.Core.Patterns.Utils.LoadBalancer.Attach(Pipe) call NetMQ.Core.Patterns.Utils.LoadBalancer.Attach(Pipe) call NetMQ.Core.Patterns.Utils.LoadBalancer.Attach(Pipe) call NetMQ.Core.Patterns.Utils.LoadBalancer.Attach(Pipe) call NetMQ.Core.Patterns.Utils.LoadBalancer.Attach(Pipe) protected override protected override ref ref return call NetMQ.Core.Patterns.Utils.LoadBalancer.Send(Msg) call NetMQ.Core.Patterns.Utils.LoadBalancer.Send(Msg) call NetMQ.Core.Patterns.Utils.LoadBalancer.Send(Msg) call NetMQ.Core.Patterns.Utils.LoadBalancer.Send(Msg) call NetMQ.Core.Patterns.Utils.LoadBalancer.Send(Msg) ref protected override protected override ref ref return ref bool private private ref ref if ref = return while decl_stmt bool = call NetMQ.Core.Patterns.Utils.FairQueueing.Recv(Msg) call NetMQ.Core.Patterns.Utils.FairQueueing.Recv(Msg) call NetMQ.Core.Patterns.Utils.FairQueueing.Recv(Msg) call NetMQ.Core.Patterns.Utils.FairQueueing.Recv(Msg) call NetMQ.Core.Patterns.Utils.FairQueueing.Recv(Msg) ref if ! return if ! break return bool protected override protected override if return decl_stmt bool = ref if ! return = return protected override protected override return call NetMQ.Core.Patterns.Utils.LoadBalancer.HasOut() call NetMQ.Core.Patterns.Utils.LoadBalancer.HasOut() call NetMQ.Core.Patterns.Utils.LoadBalancer.HasOut() call NetMQ.Core.Patterns.Utils.LoadBalancer.HasOut() call NetMQ.Core.Patterns.Utils.LoadBalancer.HasOut() protected override protected override call NetMQ.Core.Patterns.Utils.FairQueueing.Activated(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Activated(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Activated(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Activated(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Activated(Pipe) protected override protected override call NetMQ.Core.Patterns.Utils.LoadBalancer.Activated(Pipe) call NetMQ.Core.Patterns.Utils.LoadBalancer.Activated(Pipe) call NetMQ.Core.Patterns.Utils.LoadBalancer.Activated(Pipe) call NetMQ.Core.Patterns.Utils.LoadBalancer.Activated(Pipe) call NetMQ.Core.Patterns.Utils.LoadBalancer.Activated(Pipe) protected override protected override call NetMQ.Core.Patterns.Utils.FairQueueing.Terminated(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Terminated(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Terminated(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Terminated(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Terminated(Pipe) call LoadBalancer.Terminated() call LoadBalancer.Terminated() call LoadBalancer.Terminated() call LoadBalancer.Terminated() call LoadBalancer.Terminated()