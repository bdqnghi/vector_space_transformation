NetMQ System using System.Collections using System.Collections.Generic using System.Diagnostics using System.Linq using System.Net.Sockets using System.Threading using JetBrains.Annotations using NetMQ.Core.Utils using System.Threading.Tasks using System.ComponentModel using NetMQ.Core.Utils.Switch class NetMQ.NetMQPoller super super # super TaskScheduler super # super # super ISynchronizeInvoke super # super INetMQPoller super ISocketPollableCollection super IEnumerable super IDisposable decl NetMQSocket decl ThreadLocal decl List Switch Thread decl List StopSignaler int decl Dictionary Selector bool decl NetMQQueue decl SelectItem protected override protected override if == throw new return && protected override < protected override < throw new protected override protected override if == throw new call decl NetMQQueue.Enqueue() call decl NetMQQueue.Enqueue() call decl NetMQQueue.Enqueue() call decl NetMQQueue.Enqueue() call decl NetMQQueue.Enqueue() private private if else new private private public public if == throw new if call decl List.Contains() call decl List.Contains() call decl List.Contains() call decl List.Contains() call decl List.Contains() return call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() += = public public if == throw new call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() public public < if == throw new if == throw new if call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() return call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() = public public if == throw new -= call decl List.Remove() call decl List.Remove() call decl List.Remove() call decl List.Remove() call decl List.Remove() = public public if == throw new = - call decl List.Remove() call decl List.Remove() call decl List.Remove() call decl List.Remove() call decl List.Remove() public public if == throw new call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() = var public public if throw new decl_stmt var = new = call var.Start() call var.Start() call var.Start() call var.Start() call var.Start() call NetMQ.Core.Utils.Switch.WaitForOn() call NetMQ.Core.Utils.Switch.WaitForOn() call NetMQ.Core.Utils.Switch.WaitForOn() call NetMQ.Core.Utils.Switch.WaitForOn() call NetMQ.Core.Utils.Switch.WaitForOn() NetMQSocket long var var SelectItem var var decl Action var public public if throw new if = else decl_stmt var = new = endif call StopSignaler.Reset() call StopSignaler.Reset() call StopSignaler.Reset() call StopSignaler.Reset() call StopSignaler.Reset() call NetMQ.Core.Utils.Switch.SwitchOn() call NetMQ.Core.Utils.Switch.SwitchOn() call NetMQ.Core.Utils.Switch.SwitchOn() call NetMQ.Core.Utils.Switch.SwitchOn() call NetMQ.Core.Utils.Switch.SwitchOn() try foreach in if = + while ! if decl_stmt var = decl_stmt long = + foreach in if == - && = + if != - && > = decl_stmt var = - if < = decl_stmt var = if != = call Selector.Select() call Selector.Select() call Selector.Select() call Selector.Select() call Selector.Select() else if > <= int decl_stmt var = ! + : - foreach in if >= || >= && != - if = + for = < ++ decl_stmt SelectItem = if != decl_stmt NetMQ.NetMQSocket = if call SelectItem.ResultEvent() call SelectItem.ResultEvent() call SelectItem.ResultEvent() call SelectItem.ResultEvent() call SelectItem.ResultEvent() call SelectItem.ResultEvent() call SelectItem.ResultEvent() call SelectItem.ResultEvent() call SelectItem.ResultEvent() if ++ > = else = if != call NetMQ.NetMQSocket.InvokeEvents(object,PollEvents) call NetMQ.NetMQSocket.InvokeEvents(object,PollEvents) call NetMQ.NetMQSocket.InvokeEvents(object,PollEvents) call NetMQ.NetMQSocket.InvokeEvents(object,PollEvents) call NetMQ.NetMQSocket.InvokeEvents(object,PollEvents) else if call SelectItem.ResultEvent() call SelectItem.ResultEvent() call SelectItem.ResultEvent() call SelectItem.ResultEvent() call SelectItem.ResultEvent() call SelectItem.ResultEvent() call SelectItem.ResultEvent() call SelectItem.ResultEvent() call SelectItem.ResultEvent() || call SelectItem.ResultEvent() call SelectItem.ResultEvent() call SelectItem.ResultEvent() call SelectItem.ResultEvent() call SelectItem.ResultEvent() call SelectItem.ResultEvent() call SelectItem.ResultEvent() call SelectItem.ResultEvent() call SelectItem.ResultEvent() decl_stmt System.Xml.Xsl.XsltOld.Action < if call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out finally try foreach in call decl List.ToList() call decl List.ToList() call decl List.ToList() call decl List.ToList() call decl List.ToList() finally if = else = endif call NetMQ.Core.Utils.Switch.SwitchOff() call NetMQ.Core.Utils.Switch.SwitchOff() call NetMQ.Core.Utils.Switch.SwitchOff() call NetMQ.Core.Utils.Switch.SwitchOff() call NetMQ.Core.Utils.Switch.SwitchOff() public public if ! throw new call NetMQ.Core.Utils.StopSignaler.RequestStop() call NetMQ.Core.Utils.StopSignaler.RequestStop() call NetMQ.Core.Utils.StopSignaler.RequestStop() call NetMQ.Core.Utils.StopSignaler.RequestStop() call NetMQ.Core.Utils.StopSignaler.RequestStop() if if != else if ! endif call Switch.WaitForOff() call Switch.WaitForOff() call Switch.WaitForOff() call Switch.WaitForOff() call Switch.WaitForOff() ! public public if ! throw new call NetMQ.Core.Utils.StopSignaler.RequestStop() call NetMQ.Core.Utils.StopSignaler.RequestStop() call NetMQ.Core.Utils.StopSignaler.RequestStop() call NetMQ.Core.Utils.StopSignaler.RequestStop() call NetMQ.Core.Utils.StopSignaler.RequestStop() private private = uint private private if ! endif = new + = new decl_stmt uint = foreach in = new = ++ foreach in = new | ++ = yield var public override public override decl_stmt var = new call var.Start() call var.Start() call var.Start() call var.Start() call var.Start() var public override public override decl_stmt var = new call var.Start() call var.Start() call var.Start() call var.Start() call var.Start() call var.Wait() call var.Wait() call var.Wait() call var.Wait() call var.Wait()