NetMQ.Core.Transports.Tcp System using System.Diagnostics using System.Net.Sockets using AsyncIO using JetBrains.Annotations using class NetMQ.Core.Transports.Tcp.TcpListener super super Own super IProactorEvents AsyncSocket int SocketOptionName IOObject AsyncSocket TcpAddress SocketBase string public override public override == protected override protected override call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call IOObject.AddSocket() call IOObject.AddSocket() call IOObject.AddSocket() call IOObject.AddSocket() call IOObject.AddSocket() protected override protected override call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) public virtual public virtual call NetMQ.Core.Transports.Tcp.TcpAddress.Resolve(string,bool) call NetMQ.Core.Transports.Tcp.TcpAddress.Resolve(string,bool) call NetMQ.Core.Transports.Tcp.TcpAddress.Resolve(string,bool) call NetMQ.Core.Transports.Tcp.TcpAddress.Resolve(string,bool) call NetMQ.Core.Transports.Tcp.TcpAddress.Resolve(string,bool) try = != if ! && == try call AsyncSocket.SetSocketOption() call AsyncSocket.SetSocketOption() call AsyncSocket.SetSocketOption() call AsyncSocket.SetSocketOption() call AsyncSocket.SetSocketOption() catch = call AsyncSocket.Bind() call AsyncSocket.Bind() call AsyncSocket.Bind() call AsyncSocket.Bind() call AsyncSocket.Bind() call AsyncSocket.Listen() call AsyncSocket.Listen() call AsyncSocket.Listen() call AsyncSocket.Listen() call AsyncSocket.Listen() = = call TcpAddress.ToString() call TcpAddress.ToString() call TcpAddress.ToString() call TcpAddress.ToString() call TcpAddress.ToString() call NetMQ.Core.SocketBase.EventListening(string,AsyncSocket) call NetMQ.Core.SocketBase.EventListening(string,AsyncSocket) call NetMQ.Core.SocketBase.EventListening(string,AsyncSocket) call NetMQ.Core.SocketBase.EventListening(string,AsyncSocket) call NetMQ.Core.SocketBase.EventListening(string,AsyncSocket) = catch throw private private = call AsyncSocket.Accept() call AsyncSocket.Accept() call AsyncSocket.Accept() call AsyncSocket.Accept() call AsyncSocket.Accept() if = new var NetMQException var SessionBase IOThread Endianness public public switch case = if != - call AsyncSocket.SetSocketOption() call AsyncSocket.SetSocketOption() call AsyncSocket.SetSocketOption() call AsyncSocket.SetSocketOption() call AsyncSocket.SetSocketOption() if != - && != - decl_stmt var = new new decl_stmt Endianness = : call var.PutInteger() call var.PutInteger() call var.PutInteger() call var.PutInteger() call var.PutInteger() call var.PutInteger() call var.PutInteger() call var.PutInteger() call var.PutInteger() call var.PutInteger() call var.PutInteger() call var.PutInteger() call var.PutInteger() call var.PutInteger() call var.PutInteger() call AsyncSocket.IOControl() call AsyncSocket.IOControl() call AsyncSocket.IOControl() call AsyncSocket.IOControl() call AsyncSocket.IOControl() decl_stmt var = new decl_stmt NetMQ.Core.IOThread = decl_stmt NetMQ.Core.SessionBase = new call SessionBase.IncSeqnum() call SessionBase.IncSeqnum() call SessionBase.IncSeqnum() call SessionBase.IncSeqnum() call SessionBase.IncSeqnum() call NetMQ.Core.SocketBase.EventAccepted(string,AsyncSocket) call NetMQ.Core.SocketBase.EventAccepted(string,AsyncSocket) call NetMQ.Core.SocketBase.EventAccepted(string,AsyncSocket) call NetMQ.Core.SocketBase.EventAccepted(string,AsyncSocket) call NetMQ.Core.SocketBase.EventAccepted(string,AsyncSocket) break case case case call AsyncSocket.Dispose() call AsyncSocket.Dispose() call AsyncSocket.Dispose() call AsyncSocket.Dispose() call AsyncSocket.Dispose() call NetMQ.Core.SocketBase.EventAcceptFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventAcceptFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventAcceptFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventAcceptFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventAcceptFailed(string,ErrorCode) break default: call AsyncSocket.Dispose() call AsyncSocket.Dispose() call AsyncSocket.Dispose() call AsyncSocket.Dispose() call AsyncSocket.Dispose() decl_stmt NetMQ.NetMQException = call NetMQ.Core.SocketBase.EventAcceptFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventAcceptFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventAcceptFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventAcceptFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventAcceptFailed(string,ErrorCode) throw private private if == return try call AsyncSocket.Dispose() call AsyncSocket.Dispose() call AsyncSocket.Dispose() call AsyncSocket.Dispose() call AsyncSocket.Dispose() call NetMQ.Core.SocketBase.EventClosed(string,AsyncSocket) call NetMQ.Core.SocketBase.EventClosed(string,AsyncSocket) call NetMQ.Core.SocketBase.EventClosed(string,AsyncSocket) call NetMQ.Core.SocketBase.EventClosed(string,AsyncSocket) call NetMQ.Core.SocketBase.EventClosed(string,AsyncSocket) catch call NetMQ.Core.SocketBase.EventCloseFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventCloseFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventCloseFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventCloseFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventCloseFailed(string,ErrorCode) if != try call AsyncSocket.Dispose() call AsyncSocket.Dispose() call AsyncSocket.Dispose() call AsyncSocket.Dispose() call AsyncSocket.Dispose() catch = = throw new public public throw new