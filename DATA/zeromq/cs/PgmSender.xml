NetMQ.Core.Transports.Pgm System using System.Diagnostics using System.Net using System.Net.Sockets using AsyncIO using JetBrains.Annotations using class NetMQ.Core.Transports.Pgm.PgmSender super super IOObject super IEngine super IProactorEvents int int int SessionBase PgmSocket ByteArraySegment Options AsyncSocket V1Encoder PgmAddress bool int Address var public public = = new call PgmSocket.Init() call PgmSocket.Init() call PgmSocket.Init() call PgmSocket.Init() call PgmSocket.Init() = decl_stmt var = new call AsyncSocket.Bind() call AsyncSocket.Bind() call AsyncSocket.Bind() call AsyncSocket.Bind() call AsyncSocket.Bind() call PgmSocket.InitOptions() call PgmSocket.InitOptions() call PgmSocket.InitOptions() call PgmSocket.InitOptions() call PgmSocket.InitOptions() = = new new var bool public public = call NetMQ.Core.Transports.V1Encoder.SetMsgSource(IMsgSource) call NetMQ.Core.Transports.V1Encoder.SetMsgSource(IMsgSource) call NetMQ.Core.Transports.V1Encoder.SetMsgSource(IMsgSource) call NetMQ.Core.Transports.V1Encoder.SetMsgSource(IMsgSource) call NetMQ.Core.Transports.V1Encoder.SetMsgSource(IMsgSource) decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() decl_stmt bool = ref if call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() if ! else = private private = try call AsyncSocket.Connect() call AsyncSocket.Connect() call AsyncSocket.Connect() call AsyncSocket.Connect() call AsyncSocket.Connect() catch == public public public public if == = = public public public override public override if == else public override public override if == if == = = else = else if == if == && == = else if == else throw else var int int private private if == decl_stmt var = new sizeof ushort decl_stmt int = - sizeof ushort decl_stmt int = - call V1Encoder.GetData() call V1Encoder.GetData() call V1Encoder.GetData() call V1Encoder.GetData() call V1Encoder.GetData() ref ref ref if == = return = + sizeof ushort call NetMQ.Core.Transports.ByteArraySegment.PutUnsignedShort(Endianness,ushort,int) call NetMQ.Core.Transports.ByteArraySegment.PutUnsignedShort(Endianness,ushort,int) call NetMQ.Core.Transports.ByteArraySegment.PutUnsignedShort(Endianness,ushort,int) call NetMQ.Core.Transports.ByteArraySegment.PutUnsignedShort(Endianness,ushort,int) call NetMQ.Core.Transports.ByteArraySegment.PutUnsignedShort(Endianness,ushort,int) == - ushort : ushort try call AsyncSocket.Send() call AsyncSocket.Send() call AsyncSocket.Send() call AsyncSocket.Send() call AsyncSocket.Send() catch if == else throw private private != call NetMQ.Core.SessionBase.Detach() call NetMQ.Core.SessionBase.Detach() call NetMQ.Core.SessionBase.Detach() call NetMQ.Core.SessionBase.Detach() call NetMQ.Core.SessionBase.Detach() private private if == call PgmSocket.Dispose() call PgmSocket.Dispose() call PgmSocket.Dispose() call PgmSocket.Dispose() call PgmSocket.Dispose() call NetMQ.Core.Transports.V1Encoder.SetMsgSource(IMsgSource) call NetMQ.Core.Transports.V1Encoder.SetMsgSource(IMsgSource) call NetMQ.Core.Transports.V1Encoder.SetMsgSource(IMsgSource) call NetMQ.Core.Transports.V1Encoder.SetMsgSource(IMsgSource) call NetMQ.Core.Transports.V1Encoder.SetMsgSource(IMsgSource) int private private decl_stmt int = + new if > && > = * if >= = return public override public override throw new