NetMQ.Core.Patterns.Utils System.Collections.Generic using System.Diagnostics using class NetMQ.Core.Patterns.Utils.FairQueueing decl List int int bool public public call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() - ++ int public public decl_stmt int = call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() if < -- call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() if == = call decl List.Remove() call decl List.Remove() call decl List.Remove() call decl List.Remove() call decl List.Remove() public public call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() ++ public public ref ref return ref bool public public ref ref while > decl_stmt bool = ref if if != = = if ! = + return ! -- call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() if == = return public public if return while > if return -- call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() call decl List.Swap() if == = return