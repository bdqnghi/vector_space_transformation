NetMQ.Core.Transports.Pgm System.Diagnostics using System.Net.Sockets using AsyncIO using JetBrains.Annotations using class NetMQ.Core.Transports.Pgm.PgmSession super super IEngine super IProactorEvents V1Decoder AsyncSocket Options ByteArraySegment SessionBase IOObject int ByteArraySegment bool var = = new call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.Plug(IOThread) call NetMQ.Core.IOObject.Plug(IOThread) call NetMQ.Core.IOObject.Plug(IOThread) call NetMQ.Core.IOObject.Plug(IOThread) call NetMQ.Core.IOObject.Plug(IOThread) call IOObject.AddSocket() call IOObject.AddSocket() call IOObject.AddSocket() call IOObject.AddSocket() call IOObject.AddSocket() decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() ref = public public public public call NetMQ.Core.Transports.ByteArraySegment.Reset() call NetMQ.Core.Transports.ByteArraySegment.Reset() call NetMQ.Core.Transports.ByteArraySegment.Reset() call NetMQ.Core.Transports.ByteArraySegment.Reset() call NetMQ.Core.Transports.ByteArraySegment.Reset() call AsyncSocket.Receive() call AsyncSocket.Receive() call AsyncSocket.Receive() call AsyncSocket.Receive() call AsyncSocket.Receive() int public public if == != != decl_stmt int = call V1Decoder.ProcessBuffer() call V1Decoder.ProcessBuffer() call V1Decoder.ProcessBuffer() call V1Decoder.ProcessBuffer() call V1Decoder.ProcessBuffer() -= call SessionBase.Flush() call SessionBase.Flush() call SessionBase.Flush() call SessionBase.Flush() call SessionBase.Flush() if == = int ushort public public if != || == = else >= sizeof ushort decl_stmt ushort = call NetMQ.Core.Transports.ByteArraySegment.GetUnsignedShort(Endianness,int) call NetMQ.Core.Transports.ByteArraySegment.GetUnsignedShort(Endianness,int) call NetMQ.Core.Transports.ByteArraySegment.GetUnsignedShort(Endianness,int) call NetMQ.Core.Transports.ByteArraySegment.GetUnsignedShort(Endianness,int) call NetMQ.Core.Transports.ByteArraySegment.GetUnsignedShort(Endianness,int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) sizeof ushort -= sizeof ushort if ! if == return <= == call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) -= = = new call V1Decoder.SetMsgSink() call V1Decoder.SetMsgSink() call V1Decoder.SetMsgSink() call V1Decoder.SetMsgSink() call V1Decoder.SetMsgSink() decl_stmt int = call V1Decoder.ProcessBuffer() call V1Decoder.ProcessBuffer() call V1Decoder.ProcessBuffer() call V1Decoder.ProcessBuffer() call V1Decoder.ProcessBuffer() if < = - = new = else call SessionBase.Flush() call SessionBase.Flush() call SessionBase.Flush() call SessionBase.Flush() call SessionBase.Flush() private private != call NetMQ.Core.SessionBase.Detach() call NetMQ.Core.SessionBase.Detach() call NetMQ.Core.SessionBase.Detach() call NetMQ.Core.SessionBase.Detach() call NetMQ.Core.SessionBase.Detach() call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.Unplug() call NetMQ.Core.IOObject.Unplug() call NetMQ.Core.IOObject.Unplug() call NetMQ.Core.IOObject.Unplug() call NetMQ.Core.IOObject.Unplug() = = public public if != try call AsyncSocket.Dispose() call AsyncSocket.Dispose() call AsyncSocket.Dispose() call AsyncSocket.Dispose() call AsyncSocket.Dispose() catch = public public public public var private private decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() while call NetMQ.Core.SessionBase.PullMsg(Msg) call NetMQ.Core.SessionBase.PullMsg(Msg) call NetMQ.Core.SessionBase.PullMsg(Msg) call NetMQ.Core.SessionBase.PullMsg(Msg) call NetMQ.Core.SessionBase.PullMsg(Msg) ref call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() public public