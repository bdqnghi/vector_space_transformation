NetMQ.Tests System using System.Diagnostics using System.Net.Sockets using System.Threading using System.Threading.Tasks using NetMQ.Monitoring using NetMQ.Sockets using NUnit.Framework using System.Collections.Concurrent using class attribute NetMQ.Tests.NetMQPollerTest int bool bool public public using = new using = new using = new decl_stmt int = + += decl_stmt bool out decl_stmt bool out var var var int public public decl_stmt var = new decl_stmt var = new decl_stmt var = new using = new using = new using = new using = new | using = new += call var.Set() call var.Set() call var.Set() call var.Set() call var.Set() += call var.Set() call var.Set() call var.Set() call var.Set() call var.Set() decl_stmt int = += call var.Set() call var.Set() call var.Set() call var.Set() call var.Set() + call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() var int bool var bool int public public using = new using = new using = new using = new using = new decl_stmt int = decl_stmt int = + + decl_stmt bool = decl_stmt bool = decl_stmt var = new decl_stmt var = new += = call var.Set() call var.Set() call var.Set() call var.Set() call var.Set() += = call var.Set() call var.Set() call var.Set() call var.Set() call var.Set() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() bool int var bool var var bool int int public public using = new using = new using = new using = new using = new using = new using = new decl_stmt int = decl_stmt int = decl_stmt int = + + + decl_stmt bool = decl_stmt bool = decl_stmt bool = decl_stmt var = new decl_stmt var = new decl_stmt var = new += = call var.Set() call var.Set() call var.Set() call var.Set() call var.Set() += = call var.Set() call var.Set() call var.Set() call var.Set() call var.Set() += = call var.Set() call var.Set() call var.Set() call var.Set() call var.Set() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() bool int var var int var var bool int bool int int int public public using = new using = new using = new using = new using = new using = new using = new using = new using = new decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt int = + + + + decl_stmt int = decl_stmt int = decl_stmt bool = decl_stmt bool = decl_stmt var = new decl_stmt var = new decl_stmt var = new decl_stmt var = new += ++ call var.Set() call var.Set() call var.Set() call var.Set() call var.Set() += ++ if == call var.Set() call var.Set() call var.Set() call var.Set() call var.Set() += = call var.Set() call var.Set() call var.Set() call var.Set() call var.Set() += = call var.Set() call var.Set() call var.Set() call var.Set() call var.Set() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.Reset() call var.Reset() call var.Reset() call var.Reset() call var.Reset() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() decl_stmt bool out Task int bool int int decl byte bool public public using = new using = new using = new using = new using = new using = new using = new decl_stmt int = decl_stmt int = decl_stmt int = + + + decl_stmt bool = += if ! = decl_stmt bool out += decl_stmt byte = += decl_stmt byte = decl_stmt System.Threading.Tasks.Task = int int var bool bool int public public using = new using = new using = new decl_stmt int = + decl_stmt bool = += = decl_stmt bool = decl_stmt int = decl_stmt int const const = decl_stmt var = new += = = ++ bool bool int var public public using = new using = new using = new decl_stmt int = + decl_stmt bool = decl_stmt var = new += = decl_stmt bool = += = int int var public public decl_stmt int = decl_stmt int const const = decl_stmt var = new += ++ if == = using = new * int var var var var int public public decl_stmt var = new decl_stmt var = new decl_stmt int = decl_stmt int = decl_stmt var = new decl_stmt var = new += ++ = = call var.Set() call var.Set() call var.Set() call var.Set() call var.Set() += ++ call var.Set() call var.Set() call var.Set() call var.Set() call var.Set() using = new call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() int int int var var public public decl_stmt int const const = decl_stmt var = new decl_stmt var = new = decl_stmt int = decl_stmt int = += ++ if == = = else if == = += = = ++ using = new * int int long long var var public public decl_stmt int = decl_stmt int const const = decl_stmt var = new decl_stmt var = new decl_stmt long = decl_stmt long = += ++ if == call var.Start() call var.Start() call var.Start() call var.Start() call var.Start() = else if == = = call var.Restart() call var.Restart() call var.Restart() call var.Restart() call var.Restart() else if == = call var.Stop() call var.Stop() call var.Stop() call var.Stop() call var.Stop() = using = new var var NetMQPoller int var public public decl_stmt int const const = decl_stmt var = new decl_stmt var = new decl_stmt var = += if ++ == call var.Set() call var.Set() call var.Set() call var.Set() call var.Set() decl_stmt NetMQ.NetMQPoller using = new call NetMQ.NetMQPoller.RunAsync() call NetMQ.NetMQPoller.RunAsync() call NetMQ.NetMQPoller.RunAsync() call NetMQ.NetMQPoller.RunAsync() call NetMQ.NetMQPoller.RunAsync() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() < call NetMQ.NetMQPoller.Run(Action) call NetMQ.NetMQPoller.Run(Action) call NetMQ.NetMQPoller.Run(Action) call NetMQ.NetMQPoller.Run(Action) call NetMQ.NetMQPoller.Run(Action) < call NetMQ.NetMQPoller.Run(Action) call NetMQ.NetMQPoller.Run(Action) call NetMQ.NetMQPoller.Run(Action) call NetMQ.NetMQPoller.Run(Action) call NetMQ.NetMQPoller.Run(Action) < call NetMQ.NetMQPoller.Stop() call NetMQ.NetMQPoller.Stop() call NetMQ.NetMQPoller.Stop() call NetMQ.NetMQPoller.Stop() call NetMQ.NetMQPoller.Stop() < call NetMQ.NetMQPoller.Add(NetMQTimer) call NetMQ.NetMQPoller.Add(NetMQTimer) call NetMQ.NetMQPoller.Add(NetMQTimer) call NetMQ.NetMQPoller.Add(NetMQTimer) call NetMQ.NetMQPoller.Add(NetMQTimer) < call NetMQ.NetMQPoller.Remove(Socket) call NetMQ.NetMQPoller.Remove(Socket) call NetMQ.NetMQPoller.Remove(Socket) call NetMQ.NetMQPoller.Remove(Socket) call NetMQ.NetMQPoller.Remove(Socket) var decl byte var int decl byte public public using = new using = new decl_stmt int = decl_stmt var = new decl_stmt byte = decl_stmt byte = decl_stmt var = new using = new call var.Set() call var.Set() call var.Set() call var.Set() call var.Set() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.Reset() call var.Reset() call var.Reset() call var.Reset() call var.Reset() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() call var.WaitOne() var bool public public decl_stmt bool = using = new decl_stmt var = new = call var.Start() call var.Start() call var.Start() call var.Start() call var.Start() call var.Wait() call var.Wait() call var.Wait() call var.Wait() call var.Wait() var public public using = new decl_stmt var = new call var.Start() call var.Start() call var.Start() call var.Start() call var.Start() call var.Wait() call var.Wait() call var.Wait() call var.Wait() call var.Wait() var public public using = new decl_stmt var = new call var.Start() call var.Start() call var.Start() call var.Start() call var.Start() call var.Wait() call var.Wait() call var.Wait() call var.Wait() call var.Wait() var var int int int int public public decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt int = using = new decl_stmt var = new = ++ decl_stmt var = call var.ContinueWith() call var.ContinueWith() call var.ContinueWith() call var.ContinueWith() call var.ContinueWith() = ++ call var.Start() call var.Start() call var.Start() call var.Start() call var.Start() call var.Wait() call var.Wait() call var.Wait() call var.Wait() call var.Wait() call var.Wait() call var.Wait() call var.Wait() call var.Wait() call var.Wait() var Task Task int var int public public decl_stmt int = decl_stmt int = decl_stmt var = new < using = new decl_stmt System.Threading.Tasks.Task = for = < ++ decl_stmt var = new ++ call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Start() call var.Start() call var.Start() call var.Start() call var.Start() decl_stmt System.Threading.Tasks.Task = for = < ++ decl_stmt var = new ++ call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Start() call var.Start() call var.Start() call var.Start() call var.Start() call Task.Wait() call Task.Wait() call Task.Wait() call Task.Wait() call Task.Wait() call Task.Wait() call Task.Wait() call Task.Wait() call Task.Wait() call Task.Wait() call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() var public public using = new using = new using = new = = = = decl_stmt var = += =