NetMQ.Core.Transports.Pgm System using System.Net.Sockets using AsyncIO using JetBrains.Annotations using class NetMQ.Core.Transports.Pgm.PgmListener super super Own super IProactorEvents AsyncSocket PgmSocket IOObject PgmSocket PgmAddress SocketBase public public = new = new call PgmSocket.Init() call PgmSocket.Init() call PgmSocket.Init() call PgmSocket.Init() call PgmSocket.Init() = try call AsyncSocket.Bind() call AsyncSocket.Bind() call AsyncSocket.Bind() call AsyncSocket.Bind() call AsyncSocket.Bind() call PgmSocket.InitOptions() call PgmSocket.InitOptions() call PgmSocket.InitOptions() call PgmSocket.InitOptions() call PgmSocket.InitOptions() call AsyncSocket.Listen() call AsyncSocket.Listen() call AsyncSocket.Listen() call AsyncSocket.Listen() call AsyncSocket.Listen() catch throw call NetMQ.Core.SocketBase.EventListening(string,AsyncSocket) call NetMQ.Core.SocketBase.EventListening(string,AsyncSocket) call NetMQ.Core.SocketBase.EventListening(string,AsyncSocket) call NetMQ.Core.SocketBase.EventListening(string,AsyncSocket) call NetMQ.Core.SocketBase.EventListening(string,AsyncSocket) call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() public override public override protected override protected override call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call IOObject.AddSocket() call IOObject.AddSocket() call IOObject.AddSocket() call IOObject.AddSocket() call IOObject.AddSocket() protected override protected override call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.SetHandler(IProactorEvents) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) call NetMQ.Core.IOObject.RemoveSocket(AsyncSocket) private private if == return try call AsyncSocket.Dispose() call AsyncSocket.Dispose() call AsyncSocket.Dispose() call AsyncSocket.Dispose() call AsyncSocket.Dispose() call NetMQ.Core.SocketBase.EventClosed(string,AsyncSocket) call NetMQ.Core.SocketBase.EventClosed(string,AsyncSocket) call NetMQ.Core.SocketBase.EventClosed(string,AsyncSocket) call NetMQ.Core.SocketBase.EventClosed(string,AsyncSocket) call NetMQ.Core.SocketBase.EventClosed(string,AsyncSocket) call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() catch call NetMQ.Core.SocketBase.EventCloseFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventCloseFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventCloseFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventCloseFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventCloseFailed(string,ErrorCode) call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() catch call NetMQ.Core.SocketBase.EventCloseFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventCloseFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventCloseFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventCloseFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventCloseFailed(string,ErrorCode) call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() = SessionBase IOThread var public public if != call NetMQ.Core.SocketBase.EventAcceptFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventAcceptFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventAcceptFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventAcceptFailed(string,ErrorCode) call NetMQ.Core.SocketBase.EventAcceptFailed(string,ErrorCode) call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() call PgmSocket.Handle() call PgmSocket.Handle() call PgmSocket.Handle() call PgmSocket.Handle() call PgmSocket.Handle() call PgmSocket.Handle() call PgmSocket.Handle() call PgmSocket.Handle() call PgmSocket.Handle() else call PgmSocket.InitOptions() call PgmSocket.InitOptions() call PgmSocket.InitOptions() call PgmSocket.InitOptions() call PgmSocket.InitOptions() decl_stmt var = new decl_stmt NetMQ.Core.IOThread = decl_stmt NetMQ.Core.SessionBase = new call SessionBase.IncSeqnum() call SessionBase.IncSeqnum() call SessionBase.IncSeqnum() call SessionBase.IncSeqnum() call SessionBase.IncSeqnum() call NetMQ.Core.SocketBase.EventAccepted(string,AsyncSocket) call NetMQ.Core.SocketBase.EventAccepted(string,AsyncSocket) call NetMQ.Core.SocketBase.EventAccepted(string,AsyncSocket) call NetMQ.Core.SocketBase.EventAccepted(string,AsyncSocket) call NetMQ.Core.SocketBase.EventAccepted(string,AsyncSocket) call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() call NetMQ.Core.Transports.Pgm.PgmAddress.ToString() private private = new call PgmSocket.Init() call PgmSocket.Init() call PgmSocket.Init() call PgmSocket.Init() call PgmSocket.Init() call AsyncSocket.Accept() call AsyncSocket.Accept() call AsyncSocket.Accept() call AsyncSocket.Accept() call AsyncSocket.Accept() public public throw new public public throw new