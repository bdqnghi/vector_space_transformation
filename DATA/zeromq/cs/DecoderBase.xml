NetMQ.Core.Transports System using System.Diagnostics using class NetMQ.Core.Transports.DecoderBase super super IDecoder int ByteArraySegment decl byte int public virtual public virtual if ! return while == if ! if ! return return return public public out out out out if >= = call NetMQ.Core.Transports.ByteArraySegment.Clone() call NetMQ.Core.Transports.ByteArraySegment.Clone() call NetMQ.Core.Transports.ByteArraySegment.Clone() call NetMQ.Core.Transports.ByteArraySegment.Clone() call NetMQ.Core.Transports.ByteArraySegment.Clone() = return = new = int int public public if < return - if != && call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) -= while == if ! if < return - return return decl_stmt int = while while == if ! if < return - return if == return decl_stmt int = - call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) call NetMQ.Core.Transports.ByteArraySegment.AdvanceOffset(int) += -= protected protected = = = protected protected = - public virtual public virtual return