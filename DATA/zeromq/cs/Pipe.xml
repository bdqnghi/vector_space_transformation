NetMQ.Core System.Diagnostics using JetBrains.Annotations using class NetMQ.Core.Pipe super super ZObject ZObject bool long bool int int Pipe long decl YPipe long bool decl YPipe IPipeEvents var var var public static public static decl_stmt var = new < decl_stmt var = new < decl_stmt var = new new new return private private != = public public == = var bool public public if ! || != && != return if ! call decl YPipe.CheckRead() call decl YPipe.CheckRead() call decl YPipe.CheckRead() call decl YPipe.CheckRead() call decl YPipe.CheckRead() = return if call decl YPipe.Probe() call decl YPipe.Probe() call decl YPipe.Probe() call decl YPipe.Probe() call decl YPipe.Probe() decl_stmt var = new decl_stmt bool = call decl YPipe.TryRead() call decl YPipe.TryRead() call decl YPipe.TryRead() call decl YPipe.TryRead() call decl YPipe.TryRead() out return return public public ref ref if ! || != && != return if ! call decl YPipe.TryRead() call decl YPipe.TryRead() call decl YPipe.TryRead() call decl YPipe.TryRead() call decl YPipe.TryRead() out = return if return if ! ++ if > && == return bool public public if ! || != return decl_stmt bool = > && - == if = return return bool public public ref ref if ! return decl_stmt bool = call decl YPipe.Write() call decl YPipe.Write() call decl YPipe.Write() call decl YPipe.Write() call decl YPipe.Write() ref if ! ++ return var public public if != decl_stmt var = new while call decl YPipe.Unwrite() call decl YPipe.Unwrite() call decl YPipe.Unwrite() call decl YPipe.Unwrite() call decl YPipe.Unwrite() ref call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() public public if == return if != && ! call decl YPipe.Flush() call decl YPipe.Flush() call decl YPipe.Flush() call decl YPipe.Flush() call decl YPipe.Flush() protected override protected override if || != && != return = call IPipeEvents.ReadActivated() call IPipeEvents.ReadActivated() call IPipeEvents.ReadActivated() call IPipeEvents.ReadActivated() call IPipeEvents.ReadActivated() protected override protected override = if || != return = call NetMQ.Core.IPipeEvents.WriteActivated(Pipe) call NetMQ.Core.IPipeEvents.WriteActivated(Pipe) call NetMQ.Core.IPipeEvents.WriteActivated(Pipe) call NetMQ.Core.IPipeEvents.WriteActivated(Pipe) call NetMQ.Core.IPipeEvents.WriteActivated(Pipe) var protected override protected override != call decl YPipe.Flush() call decl YPipe.Flush() call decl YPipe.Flush() call decl YPipe.Flush() call decl YPipe.Flush() decl_stmt var = new while call decl YPipe.TryRead() call decl YPipe.TryRead() call decl YPipe.TryRead() call decl YPipe.TryRead() call decl YPipe.TryRead() out call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() != = < = if == call NetMQ.Core.IPipeEvents.Hiccuped(Pipe) call NetMQ.Core.IPipeEvents.Hiccuped(Pipe) call NetMQ.Core.IPipeEvents.Hiccuped(Pipe) call NetMQ.Core.IPipeEvents.Hiccuped(Pipe) call NetMQ.Core.IPipeEvents.Hiccuped(Pipe) protected override protected override if == if ! = = else = return if == = = return if == = = return var protected override protected override != call NetMQ.Core.IPipeEvents.Terminated(Pipe) call NetMQ.Core.IPipeEvents.Terminated(Pipe) call NetMQ.Core.IPipeEvents.Terminated(Pipe) call NetMQ.Core.IPipeEvents.Terminated(Pipe) call NetMQ.Core.IPipeEvents.Terminated(Pipe) if == = else == || == decl_stmt var = new while call decl YPipe.TryRead() call decl YPipe.TryRead() call decl YPipe.TryRead() call decl YPipe.TryRead() call decl YPipe.TryRead() out call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() = var public public = if == || == return if == return if == = else if == && ! = = else if == else if == = else = if != decl_stmt var = new call var.InitDelimiter() call var.InitDelimiter() call var.InitDelimiter() call var.InitDelimiter() call var.InitDelimiter() call decl YPipe.Write() call decl YPipe.Write() call decl YPipe.Write() call decl YPipe.Write() call decl YPipe.Write() ref int private static private static if > && < return decl_stmt int = > * - : + / return private private if == = return if == = = return public public if != return = = new < = public override public override return + + +