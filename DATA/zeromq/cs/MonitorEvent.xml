NetMQ.Core System using System.Runtime.InteropServices using AsyncIO using JetBrains.Annotations using NetMQ.Core.Transports using class NetMQ.Core.MonitorEvent int int int SocketEvents int object string ByteArraySegment var GCHandle int int public public decl_stmt int = + + ?? + if == += else if == += decl_stmt int = decl_stmt NetMQ.Core.Transports.ByteArraySegment = new call NetMQ.Core.Transports.ByteArraySegment.PutInteger(Endianness,int,int) call NetMQ.Core.Transports.ByteArraySegment.PutInteger(Endianness,int,int) call NetMQ.Core.Transports.ByteArraySegment.PutInteger(Endianness,int,int) call NetMQ.Core.Transports.ByteArraySegment.PutInteger(Endianness,int,int) call NetMQ.Core.Transports.ByteArraySegment.PutInteger(Endianness,int,int) int += if != ++ = byte call NetMQ.Core.Transports.ByteArraySegment.PutString(string,int,int) call NetMQ.Core.Transports.ByteArraySegment.PutString(string,int,int) call NetMQ.Core.Transports.ByteArraySegment.PutString(string,int,int) call NetMQ.Core.Transports.ByteArraySegment.PutString(string,int,int) call NetMQ.Core.Transports.ByteArraySegment.PutString(string,int,int) += else ++ = ++ = byte if == call NetMQ.Core.Transports.ByteArraySegment.PutInteger(Endianness,int,int) call NetMQ.Core.Transports.ByteArraySegment.PutInteger(Endianness,int,int) call NetMQ.Core.Transports.ByteArraySegment.PutInteger(Endianness,int,int) call NetMQ.Core.Transports.ByteArraySegment.PutInteger(Endianness,int,int) call NetMQ.Core.Transports.ByteArraySegment.PutInteger(Endianness,int,int) int else if == decl_stmt GCHandle = if == call NetMQ.Core.Transports.ByteArraySegment.PutInteger(Endianness,int,int) call NetMQ.Core.Transports.ByteArraySegment.PutInteger(Endianness,int,int) call NetMQ.Core.Transports.ByteArraySegment.PutInteger(Endianness,int,int) call NetMQ.Core.Transports.ByteArraySegment.PutInteger(Endianness,int,int) call NetMQ.Core.Transports.ByteArraySegment.PutInteger(Endianness,int,int) else call NetMQ.Core.Transports.ByteArraySegment.PutLong(Endianness,long,int) call NetMQ.Core.Transports.ByteArraySegment.PutLong(Endianness,long,int) call NetMQ.Core.Transports.ByteArraySegment.PutLong(Endianness,long,int) call NetMQ.Core.Transports.ByteArraySegment.PutLong(Endianness,long,int) call NetMQ.Core.Transports.ByteArraySegment.PutLong(Endianness,long,int) decl_stmt var = new call var.InitGC() call var.InitGC() call var.InitGC() call var.InitGC() call var.InitGC() ref GCHandle string int var var IntPtr object var ByteArraySegment var AsyncSocket public static public static decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() ref decl_stmt int = decl_stmt NetMQ.Core.Transports.ByteArraySegment = decl_stmt var = call NetMQ.Core.Transports.ByteArraySegment.GetInteger(Endianness,int) call NetMQ.Core.Transports.ByteArraySegment.GetInteger(Endianness,int) call NetMQ.Core.Transports.ByteArraySegment.GetInteger(Endianness,int) call NetMQ.Core.Transports.ByteArraySegment.GetInteger(Endianness,int) call NetMQ.Core.Transports.ByteArraySegment.GetInteger(Endianness,int) += decl_stmt var = int ++ decl_stmt string = call NetMQ.Core.Transports.ByteArraySegment.GetString(int,int) call NetMQ.Core.Transports.ByteArraySegment.GetString(int,int) call NetMQ.Core.Transports.ByteArraySegment.GetString(int,int) call NetMQ.Core.Transports.ByteArraySegment.GetString(int,int) call NetMQ.Core.Transports.ByteArraySegment.GetString(int,int) += decl_stmt var = int ++ decl_stmt object = if == = call NetMQ.Core.Transports.ByteArraySegment.GetInteger(Endianness,int) call NetMQ.Core.Transports.ByteArraySegment.GetInteger(Endianness,int) call NetMQ.Core.Transports.ByteArraySegment.GetInteger(Endianness,int) call NetMQ.Core.Transports.ByteArraySegment.GetInteger(Endianness,int) call NetMQ.Core.Transports.ByteArraySegment.GetInteger(Endianness,int) else if == decl_stmt IntPtr = == new call NetMQ.Core.Transports.ByteArraySegment.GetInteger(Endianness,int) call NetMQ.Core.Transports.ByteArraySegment.GetInteger(Endianness,int) call NetMQ.Core.Transports.ByteArraySegment.GetInteger(Endianness,int) call NetMQ.Core.Transports.ByteArraySegment.GetInteger(Endianness,int) call NetMQ.Core.Transports.ByteArraySegment.GetInteger(Endianness,int) : new call NetMQ.Core.Transports.ByteArraySegment.GetLong(Endianness,int) call NetMQ.Core.Transports.ByteArraySegment.GetLong(Endianness,int) call NetMQ.Core.Transports.ByteArraySegment.GetLong(Endianness,int) call NetMQ.Core.Transports.ByteArraySegment.GetLong(Endianness,int) call NetMQ.Core.Transports.ByteArraySegment.GetLong(Endianness,int) decl_stmt GCHandle = decl_stmt AsyncSocket = if = as call GCHandle.Free() call GCHandle.Free() call GCHandle.Free() call GCHandle.Free() call GCHandle.Free() = return new