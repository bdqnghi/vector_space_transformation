NetMQ.Core.Patterns System using System.Collections.Generic using System.Diagnostics using JetBrains.Annotations using NetMQ.Core.Patterns.Utils using NetMQ.Core.Utils using class NetMQ.Core.Patterns.Router super super SocketBase bool Pipe bool bool Msg Pipe decl HashSet bool bool FairQueueing int bool Random bool decl Dictionary bool Msg public override public override call Msg.Close() call Msg.Close() call Msg.Close() call Msg.Close() call Msg.Close() call Msg.Close() call Msg.Close() call Msg.Close() call Msg.Close() call Msg.Close() bool protected override protected override != decl_stmt bool = if call NetMQ.Core.Patterns.Utils.FairQueueing.Attach(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Attach(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Attach(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Attach(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Attach(Pipe) else call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() protected override protected override switch case = bool if = = return case = bool return case = bool return return Outpipe protected override protected override if ! call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() decl_stmt Outpipe call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() != call NetMQ.Core.Patterns.Utils.FairQueueing.Terminated(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Terminated(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Terminated(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Terminated(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Terminated(Pipe) if == = bool protected override protected override if ! call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call NetMQ.Core.Patterns.Utils.FairQueueing.Activated(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Activated(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Activated(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Activated(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Activated(Pipe) else decl_stmt bool = if call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() call NetMQ.Core.Patterns.Utils.FairQueueing.Attach(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Attach(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Attach(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Attach(Pipe) call NetMQ.Core.Patterns.Utils.FairQueueing.Attach(Pipe) Outpipe protected override protected override decl_stmt Outpipe = foreach in if == ! = = break != bool var Outpipe protected override protected override ref ref if ! == if = decl_stmt var = == : decl_stmt Outpipe if call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out = if ! call NetMQ.Core.Pipe.CheckWrite() call NetMQ.Core.Pipe.CheckWrite() call NetMQ.Core.Pipe.CheckWrite() call NetMQ.Core.Pipe.CheckWrite() call NetMQ.Core.Pipe.CheckWrite() = = if = if return else throw new else if = throw new return if = if != if && == call NetMQ.Core.Pipe.Terminate(bool) call NetMQ.Core.Pipe.Terminate(bool) call NetMQ.Core.Pipe.Terminate(bool) call NetMQ.Core.Pipe.Terminate(bool) call NetMQ.Core.Pipe.Terminate(bool) = return decl_stmt bool = call NetMQ.Core.Pipe.Write(Msg) call NetMQ.Core.Pipe.Write(Msg) call NetMQ.Core.Pipe.Write(Msg) call NetMQ.Core.Pipe.Write(Msg) call NetMQ.Core.Pipe.Write(Msg) ref if ! = else if ! call Pipe.Flush() call Pipe.Flush() call Pipe.Flush() call Pipe.Flush() call Pipe.Flush() = else return var bool decl byte protected override protected override ref ref if if ! ref = else ref = = if ! if call NetMQ.Core.Pipe.Terminate(bool) call NetMQ.Core.Pipe.Terminate(bool) call NetMQ.Core.Pipe.Terminate(bool) call NetMQ.Core.Pipe.Terminate(bool) call NetMQ.Core.Pipe.Terminate(bool) = = return decl_stmt var = new decl_stmt bool = call FairQueueing.RecvPipe() call FairQueueing.RecvPipe() call FairQueueing.RecvPipe() call FairQueueing.RecvPipe() call FairQueueing.RecvPipe() ref while && = call FairQueueing.RecvPipe() call FairQueueing.RecvPipe() call FairQueueing.RecvPipe() call FairQueueing.RecvPipe() call FairQueueing.RecvPipe() ref if ! return != if = if ! if call NetMQ.Core.Pipe.Terminate(bool) call NetMQ.Core.Pipe.Terminate(bool) call NetMQ.Core.Pipe.Terminate(bool) call NetMQ.Core.Pipe.Terminate(bool) call NetMQ.Core.Pipe.Terminate(bool) = = else call Msg.Move() call Msg.Move() call Msg.Move() call Msg.Move() call Msg.Move() ref = = decl_stmt byte = = return protected protected if != call NetMQ.Core.Pipe.Rollback() call NetMQ.Core.Pipe.Rollback() call NetMQ.Core.Pipe.Rollback() call NetMQ.Core.Pipe.Rollback() call NetMQ.Core.Pipe.Rollback() = = var bool decl byte protected override protected override if return if return decl_stmt var = new decl_stmt bool = call FairQueueing.RecvPipe() call FairQueueing.RecvPipe() call FairQueueing.RecvPipe() call FairQueueing.RecvPipe() call FairQueueing.RecvPipe() ref while && = call FairQueueing.RecvPipe() call FairQueueing.RecvPipe() call FairQueueing.RecvPipe() call FairQueueing.RecvPipe() call FairQueueing.RecvPipe() ref if ! return != decl_stmt byte = = new call Msg.InitPool() call Msg.InitPool() call Msg.InitPool() call Msg.InitPool() call Msg.InitPool() call Msg.Put() call Msg.Put() call Msg.Put() call Msg.Put() call Msg.Put() call Msg.SetFlags() call Msg.SetFlags() call Msg.SetFlags() call Msg.SetFlags() call Msg.SetFlags() = = = return protected override protected override return bool var decl byte var Outpipe decl byte var private private decl_stmt byte if = new decl_stmt byte = ++ else decl_stmt var = new call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() call var.InitEmpty() decl_stmt bool = ref if ! return if == = new decl_stmt byte = ++ call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() else = call var.CloneData() call var.CloneData() call var.CloneData() call var.CloneData() call var.CloneData() call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() decl_stmt Outpipe if call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out if ! return else decl_stmt var = new decl_stmt byte = ++ = call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() if == = else call Outpipe.Pipe() call Outpipe.Pipe() call Outpipe.Pipe() call Outpipe.Pipe() call Outpipe.Pipe() call Outpipe.Pipe() call Outpipe.Pipe() call Outpipe.Pipe() call Outpipe.Pipe() = decl_stmt var = new call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() return