com.factual.driver java.io.BufferedReader import java.io.IOException import java.io.InputStreamReader import java.security.GeneralSecurityException import java.util.HashMap import java.util.List import java.util.Map import java.util.Map.Entry import java.util.logging.Level import java.util.logging.Logger import java.util.logging.SimpleFormatter import java.util.logging.StreamHandler import org.json.JSONArray import com.google.api.client.auth.oauth.OAuthHmacSigner import com.google.api.client.auth.oauth.OAuthParameters import com.google.api.client.http.GenericUrl import com.google.api.client.http.HttpHeaders import com.google.api.client.http.HttpRequest import com.google.api.client.http.HttpRequestFactory import com.google.api.client.http.HttpResponse import com.google.api.client.http.HttpResponseException import com.google.api.client.http.HttpTransport import com.google.api.client.http.UrlEncodedContent import com.google.api.client.http.javanet.NetHttpTransport import com.google.common.collect.Maps import com.google.common.io.Closeables import class com.factual.driver.Factual String int StreamHandler String String boolean String String OAuthHmacSigner Logger int public synchronized public synchronized = public synchronized public synchronized = public public return new public public return new public public return new protected static protected static return + + protected static protected static return + + protected static protected static return + protected static protected static return + + + protected static protected static return + + protected static protected static return protected static protected static return public public return new new public public return new public public return + + + + public public return + + public public return + + + + public public return + + + + public public return + + public public return public public return public public return protected static protected static return + + + + public public return public public < return public public return public public return public public return public public return public public return public public < return private private < return new public public return new public public < < return private private < < return new public public return new + DiffsResponse FactualStream public public decl_stmt com.factual.driver.DiffsResponse = new decl_stmt com.factual.driver.FactualStream = call com.factual.driver.FactualStream.start() call com.factual.driver.FactualStream.start() call com.factual.driver.FactualStream.start() call com.factual.driver.FactualStream.start() call com.factual.driver.FactualStream.start() return InternalResponse decl Map private private decl_stmt java.util.Map < = call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() decl_stmt com.factual.driver.InternalResponse = new < return new InternalResponse decl Map private private decl_stmt java.util.Map < = call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() decl_stmt com.factual.driver.InternalResponse = new < return new InternalResponse decl Map private private decl_stmt java.util.Map < = call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() decl_stmt com.factual.driver.InternalResponse = new < return new InternalResponse decl Map private private < decl_stmt java.util.Map < = call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new decl_stmt com.factual.driver.InternalResponse = new < return new decl Map String MultiResponse String decl Map decl Map RequestImpl InternalResponse public public decl_stmt java.util.Map < = decl_stmt java.util.Map < = for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt RequestImpl = decl_stmt java.lang.String = + call RequestImpl.toUrlString() call RequestImpl.toUrlString() call RequestImpl.toUrlString() call RequestImpl.toUrlString() call RequestImpl.toUrlString() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt java.lang.String = decl_stmt java.util.Map < = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt com.factual.driver.InternalResponse = decl_stmt com.factual.driver.MultiResponse = new call MultiResponse.setJson() call MultiResponse.setJson() call MultiResponse.setJson() call MultiResponse.setJson() call MultiResponse.setJson() call InternalResponse.getContent() call InternalResponse.getContent() call InternalResponse.getContent() call InternalResponse.getContent() call InternalResponse.getContent() return public public return public public return public < public < return ResolveResponse public < public < decl_stmt com.factual.driver.ResolveResponse = if call com.factual.driver.ResolveResponse.isResolved() call com.factual.driver.ResolveResponse.isResolved() call com.factual.driver.ResolveResponse.isResolved() call com.factual.driver.ResolveResponse.isResolved() call com.factual.driver.ResolveResponse.isResolved() return call ResolveResponse.getResolved() call ResolveResponse.getResolved() call ResolveResponse.getResolved() call ResolveResponse.getResolved() call ResolveResponse.getResolved() else return ResolveResponse public public decl_stmt com.factual.driver.ResolveResponse = new new if call ResolveResponse.getData() call ResolveResponse.getData() call ResolveResponse.getData() call ResolveResponse.getData() call ResolveResponse.getData() > return call ResolveResponse.getData() call ResolveResponse.getData() call ResolveResponse.getData() call ResolveResponse.getData() call ResolveResponse.getData() else return public public return new new public public return public public return Boost public public decl_stmt com.factual.driver.Boost = new if != call com.factual.driver.Boost.search(String) call com.factual.driver.Boost.search(String) call com.factual.driver.Boost.search(String) call com.factual.driver.Boost.search(String) call com.factual.driver.Boost.search(String) if != call com.factual.driver.Boost.user(String) call com.factual.driver.Boost.user(String) call com.factual.driver.Boost.user(String) call com.factual.driver.Boost.user(String) call com.factual.driver.Boost.user(String) return public public return new InternalResponse public public decl_stmt com.factual.driver.InternalResponse = + + new < return new decl Map public public decl_stmt java.util.Map < = return new private private return + + private private return private private return private private return private private return InternalResponse String HttpRequest HttpResponse BufferedReader private private decl_stmt java.lang.String = + decl_stmt java.io.BufferedReader = try decl_stmt HttpRequest = decl_stmt HttpResponse = call HttpRequest.execute() call HttpRequest.execute() call HttpRequest.execute() call HttpRequest.execute() call HttpRequest.execute() decl_stmt com.factual.driver.InternalResponse = new return catch throw new catch throw new catch throw new finally String HttpRequest BufferedReader private private decl_stmt java.lang.String = + decl_stmt java.io.BufferedReader = try decl_stmt HttpRequest = = new new call HttpRequest.execute() call HttpRequest.execute() call HttpRequest.execute() call HttpRequest.execute() call HttpRequest.execute() return new catch throw new catch throw new catch throw new decl Map HttpRequestFactory GenericUrl HttpRequest HttpHeaders OAuthParameters HttpTransport private private throws decl_stmt java.util.Map < = decl_stmt GenericUrl = new if = call java.util.logging.Logger.removeHandler(Handler) call java.util.logging.Logger.removeHandler(Handler) call java.util.logging.Logger.removeHandler(Handler) call java.util.logging.Logger.removeHandler(Handler) call java.util.logging.Logger.removeHandler(Handler) call java.util.logging.Logger.setLevel(Level) call java.util.logging.Logger.setLevel(Level) call java.util.logging.Logger.setLevel(Level) call java.util.logging.Logger.setLevel(Level) call java.util.logging.Logger.setLevel(Level) call java.util.logging.Logger.addHandler(Handler) call java.util.logging.Logger.addHandler(Handler) call java.util.logging.Logger.addHandler(Handler) call java.util.logging.Logger.addHandler(Handler) call java.util.logging.Logger.addHandler(Handler) decl_stmt OAuthParameters = new = call OAuthParameters.computeNonce() call OAuthParameters.computeNonce() call OAuthParameters.computeNonce() call OAuthParameters.computeNonce() call OAuthParameters.computeNonce() call OAuthParameters.computeTimestamp() call OAuthParameters.computeTimestamp() call OAuthParameters.computeTimestamp() call OAuthParameters.computeTimestamp() call OAuthParameters.computeTimestamp() = call OAuthParameters.computeSignature() call OAuthParameters.computeSignature() call OAuthParameters.computeSignature() call OAuthParameters.computeSignature() call OAuthParameters.computeSignature() decl_stmt HttpTransport = new decl_stmt HttpRequestFactory = if = call HttpTransport.createRequestFactory() call HttpTransport.createRequestFactory() call HttpTransport.createRequestFactory() call HttpTransport.createRequestFactory() call HttpTransport.createRequestFactory() else = call HttpTransport.createRequestFactory() call HttpTransport.createRequestFactory() call HttpTransport.createRequestFactory() call HttpTransport.createRequestFactory() call HttpTransport.createRequestFactory() decl_stmt HttpRequest = if if == = call HttpRequestFactory.buildPostRequest() call HttpRequestFactory.buildPostRequest() call HttpRequestFactory.buildPostRequest() call HttpRequestFactory.buildPostRequest() call HttpRequestFactory.buildPostRequest() else = call HttpRequestFactory.buildPostRequest() call HttpRequestFactory.buildPostRequest() call HttpRequestFactory.buildPostRequest() call HttpRequestFactory.buildPostRequest() call HttpRequestFactory.buildPostRequest() new else = call HttpRequestFactory.buildGetRequest() call HttpRequestFactory.buildGetRequest() call HttpRequestFactory.buildGetRequest() call HttpRequestFactory.buildGetRequest() call HttpRequestFactory.buildGetRequest() if != - call HttpRequest.setReadTimeout() call HttpRequest.setReadTimeout() call HttpRequest.setReadTimeout() call HttpRequest.setReadTimeout() call HttpRequest.setReadTimeout() if != - call HttpRequest.setConnectTimeout() call HttpRequest.setConnectTimeout() call HttpRequest.setConnectTimeout() call HttpRequest.setConnectTimeout() call HttpRequest.setConnectTimeout() decl_stmt HttpHeaders = new call HttpHeaders.set() call HttpHeaders.set() call HttpHeaders.set() call HttpHeaders.set() call HttpHeaders.set() call HttpHeaders.set() call HttpHeaders.set() call HttpHeaders.set() call HttpHeaders.set() call HttpHeaders.set() call HttpRequest.setHeaders() call HttpRequest.setHeaders() call HttpRequest.setHeaders() call HttpRequest.setHeaders() call HttpRequest.setHeaders() return public synchronized public synchronized = if && == = new new call StreamHandler.setLevel() call StreamHandler.setLevel() call StreamHandler.setLevel() call StreamHandler.setLevel() call StreamHandler.setLevel() public public = public public = public public return new public < public < return public public return public < public < return public public + + if != for : + + public public return public public return new public public return new public public return new public public public public return new public public return new public public return public < public < return public public return new public public + + public public return