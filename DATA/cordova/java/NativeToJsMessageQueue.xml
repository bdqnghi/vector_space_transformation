org.apache.cordova java.util.ArrayList import java.util.LinkedList import android.util.Log import class org.apache.cordova.NativeToJsMessageQueue decl LinkedList boolean String BridgeMode boolean boolean decl ArrayList int public public call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() public public return != public public return call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() BridgeMode public public if < - || >= call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() + else decl_stmt BridgeMode = < : call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() if != + == : call BridgeMode.getClass() call BridgeMode.getClass() call BridgeMode.getClass() call BridgeMode.getClass() call BridgeMode.getClass() synchronized = if != call BridgeMode.reset() call BridgeMode.reset() call BridgeMode.reset() call BridgeMode.reset() call BridgeMode.reset() if ! && ! call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call BridgeMode.onNativeToJsMessageAvailable() call BridgeMode.onNativeToJsMessageAvailable() call BridgeMode.onNativeToJsMessageAvailable() call BridgeMode.onNativeToJsMessageAvailable() call BridgeMode.onNativeToJsMessageAvailable() public public synchronized call decl LinkedList.clear() call decl LinkedList.clear() call decl LinkedList.clear() call decl LinkedList.clear() call decl LinkedList.clear() - int String private private decl_stmt int = decl_stmt java.lang.String = return call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() + + int private private decl_stmt int = int int String int StringBuilder JsMessage public public synchronized if == return call BridgeMode.notifyOfFlush() call BridgeMode.notifyOfFlush() call BridgeMode.notifyOfFlush() call BridgeMode.notifyOfFlush() call BridgeMode.notifyOfFlush() if call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() return decl_stmt int = decl_stmt int = for : decl_stmt int = if > && + > && > break += += decl_stmt java.lang.StringBuilder = new for = < ++ decl_stmt JsMessage = call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() if ! call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.lang.String = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() return boolean int int String int int StringBuilder JsMessage public public synchronized decl_stmt int = call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() if == return decl_stmt int = decl_stmt int = for : decl_stmt int = call JsMessage.calculateEncodedLength() call JsMessage.calculateEncodedLength() call JsMessage.calculateEncodedLength() call JsMessage.calculateEncodedLength() call JsMessage.calculateEncodedLength() + if > && + > && > break += += decl_stmt boolean = == call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() decl_stmt java.lang.StringBuilder = new + : for = < ++ decl_stmt JsMessage = call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() if && + == call JsMessage.encodeAsJsMessage() call JsMessage.encodeAsJsMessage() call JsMessage.encodeAsJsMessage() call JsMessage.encodeAsJsMessage() call JsMessage.encodeAsJsMessage() else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call JsMessage.encodeAsJsMessage() call JsMessage.encodeAsJsMessage() call JsMessage.encodeAsJsMessage() call JsMessage.encodeAsJsMessage() call JsMessage.encodeAsJsMessage() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if ! call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) for = : < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.lang.String = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() return public public new StringBuilder boolean JsMessage boolean public public if == new return decl_stmt boolean = == decl_stmt boolean = if && return decl_stmt JsMessage = new if decl_stmt java.lang.StringBuilder = new call JsMessage.calculateEncodedLength() call JsMessage.calculateEncodedLength() call JsMessage.calculateEncodedLength() call JsMessage.calculateEncodedLength() call JsMessage.calculateEncodedLength() + call JsMessage.encodeAsJsMessage() call JsMessage.encodeAsJsMessage() call JsMessage.encodeAsJsMessage() call JsMessage.encodeAsJsMessage() call JsMessage.encodeAsJsMessage() = new call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() private private synchronized if == return call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() if ! call BridgeMode.onNativeToJsMessageAvailable() call BridgeMode.onNativeToJsMessageAvailable() call BridgeMode.onNativeToJsMessageAvailable() call BridgeMode.onNativeToJsMessageAvailable() call BridgeMode.onNativeToJsMessageAvailable() public public if && new = if ! synchronized if ! call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() && != call BridgeMode.onNativeToJsMessageAvailable() call BridgeMode.onNativeToJsMessageAvailable() call BridgeMode.onNativeToJsMessageAvailable() call BridgeMode.onNativeToJsMessageAvailable() call BridgeMode.onNativeToJsMessageAvailable() public public public public public public String public public final final new public public decl_stmt java.lang.String = call decl LinkedList.popAndEncodeAsJs() call decl LinkedList.popAndEncodeAsJs() call decl LinkedList.popAndEncodeAsJs() call decl LinkedList.popAndEncodeAsJs() call decl LinkedList.popAndEncodeAsJs() if != + String public public decl_stmt java.lang.String = call decl LinkedList.popAndEncodeAsJs() call decl LinkedList.popAndEncodeAsJs() call decl LinkedList.popAndEncodeAsJs() call decl LinkedList.popAndEncodeAsJs() call decl LinkedList.popAndEncodeAsJs() if != + public public new public public = = public public = = public public final final new public public if ! call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() = public public if ! call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() = public public final final if && ! = ! int int int static static switch case case return case return + case return + case return + case return + case decl_stmt int = for = < ++ decl_stmt int = decl_stmt int = += + + return case default: return int int if == return + decl_stmt int = decl_stmt int = + + + + return + PluginResult static static switch case break case break case break case break case break case break case for = < ++ decl_stmt org.apache.cordova.PluginResult = break case default: int boolean boolean boolean if == return decl_stmt int = decl_stmt boolean = == decl_stmt boolean = == decl_stmt boolean = || : : int boolean if == else decl_stmt int = decl_stmt boolean = == || == switch case break case break default: