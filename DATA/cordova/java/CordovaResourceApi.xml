org.apache.cordova android.content.ContentResolver import android.content.Context import android.content.res.AssetFileDescriptor import android.content.res.AssetManager import android.database.Cursor import android.net.Uri import android.os.Looper import android.util.Base64 import android.webkit.MimeTypeMap import java.io.ByteArrayInputStream import java.io.File import java.io.FileInputStream import java.io.FileNotFoundException import java.io.FileOutputStream import java.io.IOException import java.io.InputStream import java.io.OutputStream import java.io.UnsupportedEncodingException import java.net.HttpURLConnection import java.net.URL import java.nio.channels.FileChannel import java.util.Locale import class org.apache.cordova.CordovaResourceApi int int int int int String String ContentResolver PluginManager Thread int AssetManager int decl String int boolean int public public = public public return String public static public static decl_stmt java.lang.String = if return if return if if return return if return if return if return if call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) return return Uri public public decl_stmt com.sun.jndi.toolkit.url.Uri = call org.apache.cordova.PluginManager.remapUri(Uri) call org.apache.cordova.PluginManager.remapUri(Uri) call org.apache.cordova.PluginManager.remapUri(Uri) call org.apache.cordova.PluginManager.remapUri(Uri) call org.apache.cordova.PluginManager.remapUri(Uri) return != : public public return new Cursor int String public public switch case return new case decl_stmt java.awt.Cursor = call ContentResolver.query() call ContentResolver.query() call ContentResolver.query() call ContentResolver.query() call ContentResolver.query() if != try decl_stmt int = call Cursor.getColumnIndex() call Cursor.getColumnIndex() call Cursor.getColumnIndex() call Cursor.getColumnIndex() call Cursor.getColumnIndex() if != - && call Cursor.getCount() call Cursor.getCount() call Cursor.getCount() call Cursor.getCount() call Cursor.getCount() > call Cursor.moveToFirst() call Cursor.moveToFirst() call Cursor.moveToFirst() call Cursor.moveToFirst() call Cursor.moveToFirst() decl_stmt java.lang.String = call Cursor.getString() call Cursor.getString() call Cursor.getString() call Cursor.getString() call Cursor.getString() if != return new finally call Cursor.close() call Cursor.close() call Cursor.close() call Cursor.close() call Cursor.close() return String HttpURLConnection public public switch case case return case case return call ContentResolver.getType() call ContentResolver.getType() call ContentResolver.getType() call ContentResolver.getType() call ContentResolver.getType() case return case case try decl_stmt java.net.HttpURLConnection = new call HttpURLConnection.setDoInput() call HttpURLConnection.setDoInput() call HttpURLConnection.setDoInput() call HttpURLConnection.setDoInput() call HttpURLConnection.setDoInput() call java.net.HttpURLConnection.setRequestMethod(String) call java.net.HttpURLConnection.setRequestMethod(String) call java.net.HttpURLConnection.setRequestMethod(String) call java.net.HttpURLConnection.setRequestMethod(String) call java.net.HttpURLConnection.setRequestMethod(String) decl_stmt java.lang.String = call java.net.HttpURLConnection.getHeaderField(int) call java.net.HttpURLConnection.getHeaderField(int) call java.net.HttpURLConnection.getHeaderField(int) call java.net.HttpURLConnection.getHeaderField(int) call java.net.HttpURLConnection.getHeaderField(int) if != = call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) return catch return int String private private decl_stmt java.lang.String = decl_stmt int = call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) if != - = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) + = call java.lang.String.toLowerCase(Locale) call java.lang.String.toLowerCase(Locale) call java.lang.String.toLowerCase(Locale) call java.lang.String.toLowerCase(Locale) call java.lang.String.toLowerCase(Locale) if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return return public public throws return String AssetFileDescriptor String CordovaPlugin String OpenForReadResult InputStream int HttpURLConnection public public throws if ! switch case decl_stmt FileInputStream = new decl_stmt java.lang.String = decl_stmt long = call InputStream.getChannel() call InputStream.getChannel() call InputStream.getChannel() call InputStream.getChannel() call InputStream.getChannel() return new case decl_stmt java.lang.String = decl_stmt AssetFileDescriptor = decl_stmt java.io.InputStream decl_stmt long = - try = call AssetManager.openFd() call AssetManager.openFd() call AssetManager.openFd() call AssetManager.openFd() call AssetManager.openFd() = call AssetFileDescriptor.createInputStream() call AssetFileDescriptor.createInputStream() call AssetFileDescriptor.createInputStream() call AssetFileDescriptor.createInputStream() call AssetFileDescriptor.createInputStream() = call AssetFileDescriptor.getLength() call AssetFileDescriptor.getLength() call AssetFileDescriptor.getLength() call AssetFileDescriptor.getLength() call AssetFileDescriptor.getLength() catch = call AssetManager.open() call AssetManager.open() call AssetManager.open() call AssetManager.open() call AssetManager.open() decl_stmt java.lang.String = return new case case decl_stmt java.lang.String = call ContentResolver.getType() call ContentResolver.getType() call ContentResolver.getType() call ContentResolver.getType() call ContentResolver.getType() decl_stmt AssetFileDescriptor = call ContentResolver.openAssetFileDescriptor() call ContentResolver.openAssetFileDescriptor() call ContentResolver.openAssetFileDescriptor() call ContentResolver.openAssetFileDescriptor() call ContentResolver.openAssetFileDescriptor() decl_stmt java.io.InputStream = call AssetFileDescriptor.createInputStream() call AssetFileDescriptor.createInputStream() call AssetFileDescriptor.createInputStream() call AssetFileDescriptor.createInputStream() call AssetFileDescriptor.createInputStream() decl_stmt long = call AssetFileDescriptor.getLength() call AssetFileDescriptor.getLength() call AssetFileDescriptor.getLength() call AssetFileDescriptor.getLength() call AssetFileDescriptor.getLength() return new case decl_stmt OpenForReadResult = if == break return case case decl_stmt java.net.HttpURLConnection = new call HttpURLConnection.setDoInput() call HttpURLConnection.setDoInput() call HttpURLConnection.setDoInput() call HttpURLConnection.setDoInput() call HttpURLConnection.setDoInput() decl_stmt java.lang.String = call java.net.HttpURLConnection.getHeaderField(int) call java.net.HttpURLConnection.getHeaderField(int) call java.net.HttpURLConnection.getHeaderField(int) call java.net.HttpURLConnection.getHeaderField(int) call java.net.HttpURLConnection.getHeaderField(int) if != = call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) decl_stmt int = call HttpURLConnection.getContentLength() call HttpURLConnection.getContentLength() call HttpURLConnection.getContentLength() call HttpURLConnection.getContentLength() call HttpURLConnection.getContentLength() decl_stmt java.io.InputStream = call java.net.HttpURLConnection.getInputStream() call java.net.HttpURLConnection.getInputStream() call java.net.HttpURLConnection.getInputStream() call java.net.HttpURLConnection.getInputStream() call java.net.HttpURLConnection.getInputStream() return new case decl_stmt java.lang.String = decl_stmt org.apache.cordova.CordovaPlugin = call org.apache.cordova.PluginManager.getPlugin(String) call org.apache.cordova.PluginManager.getPlugin(String) call org.apache.cordova.PluginManager.getPlugin(String) call org.apache.cordova.PluginManager.getPlugin(String) call org.apache.cordova.PluginManager.getPlugin(String) if == throw new + return call org.apache.cordova.CordovaPlugin.handleOpenForRead(Uri) call org.apache.cordova.CordovaPlugin.handleOpenForRead(Uri) call org.apache.cordova.CordovaPlugin.handleOpenForRead(Uri) call org.apache.cordova.CordovaPlugin.handleOpenForRead(Uri) call org.apache.cordova.CordovaPlugin.handleOpenForRead(Uri) throw new + public public throws return AssetFileDescriptor File File public public throws switch case decl_stmt File = new decl_stmt File = call File.getParentFile() call File.getParentFile() call File.getParentFile() call File.getParentFile() call File.getParentFile() if != call File.mkdirs() call File.mkdirs() call File.mkdirs() call File.mkdirs() call File.mkdirs() return new case case decl_stmt AssetFileDescriptor = call ContentResolver.openAssetFileDescriptor() call ContentResolver.openAssetFileDescriptor() call ContentResolver.openAssetFileDescriptor() call ContentResolver.openAssetFileDescriptor() call ContentResolver.openAssetFileDescriptor() : return call AssetFileDescriptor.createOutputStream() call AssetFileDescriptor.createOutputStream() call AssetFileDescriptor.createOutputStream() call AssetFileDescriptor.createOutputStream() call AssetFileDescriptor.createOutputStream() throw new + public public throws return new FileChannel decl byte InputStream long FileChannel long int int public public throws try decl_stmt java.io.InputStream = if instanceof && instanceof decl_stmt java.nio.channels.FileChannel = decl_stmt java.nio.channels.FileChannel = decl_stmt long = decl_stmt long = if != = call FileChannel.position() call FileChannel.position() call FileChannel.position() call FileChannel.position() call FileChannel.position() call FileChannel.transferFrom() call FileChannel.transferFrom() call FileChannel.transferFrom() call FileChannel.transferFrom() call FileChannel.transferFrom() else decl_stmt int final final = decl_stmt byte = new for decl_stmt int = call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) if <= break finally if != public public throws public public throws Thread private private if decl_stmt java.lang.Thread = if == throw new if == throw new int String decl String private private decl_stmt java.lang.String = decl_stmt int = call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) if == - return decl_stmt java.lang.String = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) if > return return String String int boolean decl String String InputStream decl byte private private decl_stmt java.lang.String = decl_stmt int = call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) if == - return decl_stmt java.lang.String = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) decl_stmt java.lang.String = decl_stmt boolean = if > = for = < ++ if = decl_stmt java.lang.String = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) + decl_stmt byte if = else try = call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) catch = call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) decl_stmt java.io.InputStream = new return new private static private static if ! throw new