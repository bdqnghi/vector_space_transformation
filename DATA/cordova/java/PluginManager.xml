org.apache.cordova java.util.Collection import java.util.LinkedHashMap import org.json.JSONException import android.content.Intent import android.content.res.Configuration import android.net.Uri import android.os.Bundle import android.os.Debug import android.util.Log import class org.apache.cordova.PluginManager CordovaPlugin decl LinkedHashMap CordovaWebView int CordovaInterface String boolean decl LinkedHashMap public < public < return call decl LinkedHashMap.values() call decl LinkedHashMap.values() call decl LinkedHashMap.values() call decl LinkedHashMap.values() call decl LinkedHashMap.values() public public < if call decl LinkedHashMap.clear() call decl LinkedHashMap.clear() call decl LinkedHashMap.clear() call decl LinkedHashMap.clear() call decl LinkedHashMap.clear() call decl LinkedHashMap.clear() call decl LinkedHashMap.clear() call decl LinkedHashMap.clear() call decl LinkedHashMap.clear() call decl LinkedHashMap.clear() for : if public public = call decl LinkedHashMap.clear() call decl LinkedHashMap.clear() call decl LinkedHashMap.clear() call decl LinkedHashMap.clear() call decl LinkedHashMap.clear() private private for : call decl LinkedHashMap.values() call decl LinkedHashMap.values() call decl LinkedHashMap.values() call decl LinkedHashMap.values() call decl LinkedHashMap.values() if else call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() long boolean CallbackContext long PluginResult CordovaPlugin public public final final final final final final final final decl_stmt org.apache.cordova.CordovaPlugin = if == + decl_stmt org.apache.cordova.PluginResult = new call org.apache.cordova.CordovaWebView.sendPluginResult(PluginResult,String) call org.apache.cordova.CordovaWebView.sendPluginResult(PluginResult,String) call org.apache.cordova.CordovaWebView.sendPluginResult(PluginResult,String) call org.apache.cordova.CordovaWebView.sendPluginResult(PluginResult,String) call org.apache.cordova.CordovaWebView.sendPluginResult(PluginResult,String) return decl_stmt org.apache.cordova.CallbackContext = new try decl_stmt long = decl_stmt boolean = call org.apache.cordova.CordovaPlugin.execute(String,JSONArray,CallbackContext) call org.apache.cordova.CordovaPlugin.execute(String,JSONArray,CallbackContext) call org.apache.cordova.CordovaPlugin.execute(String,JSONArray,CallbackContext) call org.apache.cordova.CordovaPlugin.execute(String,JSONArray,CallbackContext) call org.apache.cordova.CordovaPlugin.execute(String,JSONArray,CallbackContext) decl_stmt long = - if > + + + + + + if ! decl_stmt org.apache.cordova.PluginResult = new call org.apache.cordova.CallbackContext.sendPluginResult(PluginResult) call org.apache.cordova.CallbackContext.sendPluginResult(PluginResult) call org.apache.cordova.CallbackContext.sendPluginResult(PluginResult) call org.apache.cordova.CallbackContext.sendPluginResult(PluginResult) call org.apache.cordova.CallbackContext.sendPluginResult(PluginResult) catch decl_stmt org.apache.cordova.PluginResult = new call org.apache.cordova.CallbackContext.sendPluginResult(PluginResult) call org.apache.cordova.CallbackContext.sendPluginResult(PluginResult) call org.apache.cordova.CallbackContext.sendPluginResult(PluginResult) call org.apache.cordova.CallbackContext.sendPluginResult(PluginResult) call org.apache.cordova.CallbackContext.sendPluginResult(PluginResult) catch call org.apache.cordova.CallbackContext.error(String) call org.apache.cordova.CallbackContext.error(String) call org.apache.cordova.CallbackContext.error(String) call org.apache.cordova.CallbackContext.error(String) call org.apache.cordova.CallbackContext.error(String) CordovaPlugin PluginEntry public public decl_stmt org.apache.cordova.CordovaPlugin = call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() if == decl_stmt PluginEntry = call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() if == return if != = else = call org.apache.cordova.CordovaPlugin.privateInitialize(String,CordovaInterface,CordovaWebView,CordovaPreferences) call org.apache.cordova.CordovaPlugin.privateInitialize(String,CordovaInterface,CordovaWebView,CordovaPreferences) call org.apache.cordova.CordovaPlugin.privateInitialize(String,CordovaInterface,CordovaWebView,CordovaPreferences) call org.apache.cordova.CordovaPlugin.privateInitialize(String,CordovaInterface,CordovaWebView,CordovaPreferences) call org.apache.cordova.CordovaPlugin.privateInitialize(String,CordovaInterface,CordovaWebView,CordovaPreferences) call org.apache.cordova.CordovaWebView.getPreferences() call org.apache.cordova.CordovaWebView.getPreferences() call org.apache.cordova.CordovaWebView.getPreferences() call org.apache.cordova.CordovaWebView.getPreferences() call org.apache.cordova.CordovaWebView.getPreferences() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() return PluginEntry public public decl_stmt PluginEntry = new public public if != call org.apache.cordova.CordovaWebView.getPreferences() call org.apache.cordova.CordovaWebView.getPreferences() call org.apache.cordova.CordovaWebView.getPreferences() call org.apache.cordova.CordovaWebView.getPreferences() call org.apache.cordova.CordovaWebView.getPreferences() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() public public for : if != public public for : if != && return return public public for : if != && return return public public for : if != public public for : if != public public for : if != public public for : if != Object public public for : if != decl_stmt java.lang.Object = if != return return call org.apache.cordova.CordovaInterface.onMessage(String,Object) call org.apache.cordova.CordovaInterface.onMessage(String,Object) call org.apache.cordova.CordovaInterface.onMessage(String,Object) call org.apache.cordova.CordovaInterface.onMessage(String,Object) call org.apache.cordova.CordovaInterface.onMessage(String,Object) public public for : if != Boolean CordovaPlugin public public for : decl_stmt org.apache.cordova.CordovaPlugin = call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() if != decl_stmt java.lang.Boolean = call CordovaPlugin.shouldAllowRequest() call CordovaPlugin.shouldAllowRequest() call CordovaPlugin.shouldAllowRequest() call CordovaPlugin.shouldAllowRequest() call CordovaPlugin.shouldAllowRequest() if != return if || || return if return if return ! return Boolean CordovaPlugin public public for : decl_stmt org.apache.cordova.CordovaPlugin = call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() if != decl_stmt java.lang.Boolean = call org.apache.cordova.CordovaPlugin.shouldAllowNavigation(String) call org.apache.cordova.CordovaPlugin.shouldAllowNavigation(String) call org.apache.cordova.CordovaPlugin.shouldAllowNavigation(String) call org.apache.cordova.CordovaPlugin.shouldAllowNavigation(String) call org.apache.cordova.CordovaPlugin.shouldAllowNavigation(String) if != return return || Boolean CordovaPlugin public public for : decl_stmt org.apache.cordova.CordovaPlugin = call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() if != decl_stmt java.lang.Boolean = call org.apache.cordova.CordovaPlugin.shouldAllowBridgeAccess(String) call org.apache.cordova.CordovaPlugin.shouldAllowBridgeAccess(String) call org.apache.cordova.CordovaPlugin.shouldAllowBridgeAccess(String) call org.apache.cordova.CordovaPlugin.shouldAllowBridgeAccess(String) call org.apache.cordova.CordovaPlugin.shouldAllowBridgeAccess(String) if != return return Boolean CordovaPlugin public public for : decl_stmt org.apache.cordova.CordovaPlugin = call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() if != decl_stmt java.lang.Boolean = call org.apache.cordova.CordovaPlugin.shouldOpenExternalUrl(String) call org.apache.cordova.CordovaPlugin.shouldOpenExternalUrl(String) call org.apache.cordova.CordovaPlugin.shouldOpenExternalUrl(String) call org.apache.cordova.CordovaPlugin.shouldOpenExternalUrl(String) call org.apache.cordova.CordovaPlugin.shouldOpenExternalUrl(String) if != return return CordovaPlugin public public for : decl_stmt org.apache.cordova.CordovaPlugin = call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() if != && call org.apache.cordova.CordovaPlugin.onOverrideUrlLoading(String) call org.apache.cordova.CordovaPlugin.onOverrideUrlLoading(String) call org.apache.cordova.CordovaPlugin.onOverrideUrlLoading(String) call org.apache.cordova.CordovaPlugin.onOverrideUrlLoading(String) call org.apache.cordova.CordovaPlugin.onOverrideUrlLoading(String) return return public public for : if != Uri for : if != decl_stmt com.sun.jndi.toolkit.url.Uri = if != return return decl Class CordovaPlugin private private decl_stmt org.apache.cordova.CordovaPlugin = try decl_stmt java.lang.Class < = if != && ! = if != & = call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() catch + + return public public for : if != Bundle Bundle public public decl_stmt Bundle = new for : if != decl_stmt Bundle = if != call Bundle.putBundle() call Bundle.putBundle() call Bundle.putBundle() call Bundle.putBundle() call Bundle.putBundle() return