log4net.Tests.Appender System using System.Collections using System.Diagnostics using System.IO using System.Text using System.Text.RegularExpressions using log4net.Appender using log4net.Core using log4net.Layout using log4net.Repository.Hierarchy using log4net.Util using NUnit.Framework using System.Globalization using class attribute log4net.Tests.Appender.RollingFileAppenderTest int int CultureInfo string CountingAppender Logger CultureInfo string int int int int string return public public + public public + + + public public + + + private private = = = + = private static private static public public = = = = public public = = ArrayList private static private static decl_stmt System.Collections.ArrayList = FileStream FileInfo private static private static decl_stmt System.IO.FileInfo = new decl_stmt FileStream = try = call System.IO.FileInfo.Create() call System.IO.FileInfo.Create() call System.IO.FileInfo.Create() call System.IO.FileInfo.Create() call System.IO.FileInfo.Create() finally if != try call FileStream.Close() call FileStream.Close() call FileStream.Close() call FileStream.Close() call FileStream.Close() catch public public ArrayList private static private static decl_stmt System.Collections.ArrayList = foreach in try + catch + private static private static if == return return + + private private return new PatternLayout RollingFileAppender private private decl_stmt log4net.Layout.PatternLayout = new decl_stmt log4net.Appender.RollingFileAppender = new = = = = call int.ToString() call int.ToString() call int.ToString() call int.ToString() call int.ToString() = = = = call log4net.Appender.RollingFileAppender.ActivateOptions() call log4net.Appender.RollingFileAppender.ActivateOptions() call log4net.Appender.RollingFileAppender.ActivateOptions() call log4net.Appender.RollingFileAppender.ActivateOptions() call log4net.Appender.RollingFileAppender.ActivateOptions() return return return public public return public public return private static private static FileInfo string ArrayList private static private static decl_stmt System.Collections.ArrayList = if != foreach in decl_stmt string = decl_stmt System.IO.FileInfo = new if > else if else private static private static private static private static private private ++ call log4net.Repository.Hierarchy.Logger.Log(LoggingEvent) call log4net.Repository.Hierarchy.Logger.Log(LoggingEvent) call log4net.Repository.Hierarchy.Logger.Log(LoggingEvent) call log4net.Repository.Hierarchy.Logger.Log(LoggingEvent) call log4net.Repository.Hierarchy.Logger.Log(LoggingEvent) ++ RollConditions private private for = < ++ decl_stmt RollConditions = private static private static return + int private static private static decl_stmt int = / if * < ++ return private static private static return ArrayList decl string private static private static decl_stmt string = decl_stmt System.Collections.ArrayList = new for = < ++ if > call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) new return call System.Collections.ArrayList.ToArray(Type) call System.Collections.ArrayList.ToArray(Type) call System.Collections.ArrayList.ToArray(Type) call System.Collections.ArrayList.ToArray(Type) call System.Collections.ArrayList.ToArray(Type) typeof decl string private static private static decl_stmt string = return string private static private static if == return decl_stmt string = - return return * return = return = return = return = RollingStats private static private static decl_stmt RollingStats = new = = = = return decl RollFileEntry int private static private static decl_stmt int = if != += decl_stmt RollFileEntry = new if != - = return decl RollFileEntry decl RollFileEntry private static private static decl_stmt RollFileEntry = decl_stmt RollFileEntry = if == return new return new private static private static = + if >= = = + return new else return Int32 private static private static decl_stmt Int32 = return Regex private static private static decl_stmt System.Text.RegularExpressions.Regex = new return call System.Text.RegularExpressions.Regex.Replace(String,MatchEvaluator,int,int) call System.Text.RegularExpressions.Regex.Replace(String,MatchEvaluator,int,int) call System.Text.RegularExpressions.Regex.Replace(String,MatchEvaluator,int,int) call System.Text.RegularExpressions.Regex.Replace(String,MatchEvaluator,int,int) call System.Text.RegularExpressions.Regex.Replace(String,MatchEvaluator,int,int) private static private static return new RollConditions RollFileEntry RollFileEntry RollingStats decl RollConditions string private static private static decl_stmt string = decl_stmt RollConditions = new decl_stmt RollingStats = decl_stmt RollConditions = = decl_stmt RollFileEntry = new for = < ++ decl_stmt RollFileEntry = new + * = = = return private private int string public public decl_stmt string = = + decl_stmt int = int string public public decl_stmt string = = + = - decl_stmt int = int string public public decl_stmt string = = + = decl_stmt int = int string public public decl_stmt string = = - decl_stmt int = int string public public decl_stmt string = = - = - decl_stmt int = int string public public decl_stmt string = = - = decl_stmt int = private private = = = new call log4net.Repository.Hierarchy.Logger.AddAppender(IAppender) call log4net.Repository.Hierarchy.Logger.AddAppender(IAppender) call log4net.Repository.Hierarchy.Logger.AddAppender(IAppender) call log4net.Repository.Hierarchy.Logger.AddAppender(IAppender) call log4net.Repository.Hierarchy.Logger.AddAppender(IAppender) call log4net.Repository.Hierarchy.Logger.AddAppender(IAppender) call log4net.Repository.Hierarchy.Logger.AddAppender(IAppender) call log4net.Repository.Hierarchy.Logger.AddAppender(IAppender) call log4net.Repository.Hierarchy.Logger.AddAppender(IAppender) call log4net.Repository.Hierarchy.Logger.AddAppender(IAppender) = private static private static int ArrayList string public public decl_stmt string = decl_stmt System.Collections.ArrayList = new call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) decl_stmt int = int ArrayList private static private static decl_stmt System.Collections.ArrayList = decl_stmt int = int ArrayList public public decl_stmt System.Collections.ArrayList = decl_stmt int = int ArrayList public public decl_stmt System.Collections.ArrayList = decl_stmt int = int ArrayList public public decl_stmt System.Collections.ArrayList = decl_stmt int = int ArrayList public public decl_stmt System.Collections.ArrayList = decl_stmt int = ArrayList public public decl_stmt System.Collections.ArrayList = ArrayList public public decl_stmt System.Collections.ArrayList = ArrayList public public decl_stmt System.Collections.ArrayList = ArrayList public public decl_stmt System.Collections.ArrayList = ArrayList public public decl_stmt System.Collections.ArrayList = ArrayList public public decl_stmt System.Collections.ArrayList = ArrayList public public decl_stmt System.Collections.ArrayList = private static private static private static private static decl string RollingFileAppender private static private static decl_stmt string = if == || != throw new decl_stmt log4net.Appender.RollingFileAppender = new = = return ArrayList public public decl_stmt System.Collections.ArrayList = ArrayList public public decl_stmt System.Collections.ArrayList = ArrayList public public decl_stmt System.Collections.ArrayList = ArrayList public public decl_stmt System.Collections.ArrayList = ArrayList public public decl_stmt System.Collections.ArrayList = ArrayList public public decl_stmt System.Collections.ArrayList = private static private static return decl Repository decl Hierarchy decl Hierarchy RollingFileAppender private static private static decl_stmt log4net.Tests.Hierarchy.Hierarchy = decl_stmt log4net.Appender.RollingFileAppender = new = = = = = = = = if != = decl_stmt log4net.Layout.PatternLayout = new = call decl Hierarchy.ActivateOptions() call decl Hierarchy.ActivateOptions() call decl Hierarchy.ActivateOptions() call decl Hierarchy.ActivateOptions() call decl Hierarchy.ActivateOptions() = call decl Hierarchy.ActivateOptions() call decl Hierarchy.ActivateOptions() call decl Hierarchy.ActivateOptions() call decl Hierarchy.ActivateOptions() call decl Hierarchy.ActivateOptions() call decl Repository.Root() call decl Repository.Root() call decl Repository.Root() call decl Repository.Root() call decl Repository.Root() call decl Repository.Root() call decl Repository.Root() call decl Repository.Root() call decl Repository.Root() = decl_stmt log4net.Core.ILogger = call decl Repository.GetLogger() call decl Repository.GetLogger() call decl Repository.GetLogger() call decl Repository.GetLogger() call decl Repository.GetLogger() return decl Repository private static private static decl_stmt log4net.Tests.Hierarchy.Hierarchy = call decl Repository.ResetConfiguration() call decl Repository.ResetConfiguration() call decl Repository.ResetConfiguration() call decl Repository.ResetConfiguration() call decl Repository.ResetConfiguration() = new typeof StreamReader string private static private static decl_stmt System.IO.StreamReader = new decl_stmt string = call System.IO.StreamReader.ReadToEnd() call System.IO.StreamReader.ReadToEnd() call System.IO.StreamReader.ReadToEnd() call System.IO.StreamReader.ReadToEnd() call System.IO.StreamReader.ReadToEnd() call System.IO.StreamReader.Close() call System.IO.StreamReader.Close() call System.IO.StreamReader.Close() call System.IO.StreamReader.Close() call System.IO.StreamReader.Close() SilentErrorHandler ILogger String public public decl_stmt System.String = decl_stmt SilentErrorHandler = new decl_stmt log4net.Core.ILogger = new call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) + + + FileStream ILogger SilentErrorHandler String public public decl_stmt System.String = decl_stmt FileStream = new call FileStream.Write() call FileStream.Write() call FileStream.Write() call FileStream.Write() call FileStream.Write() decl_stmt SilentErrorHandler = new decl_stmt log4net.Core.ILogger = new call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call FileStream.Close() call FileStream.Close() call FileStream.Close() call FileStream.Close() call FileStream.Close() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() FileStream ILogger SilentErrorHandler String public public decl_stmt System.String = decl_stmt FileStream = new call FileStream.Write() call FileStream.Write() call FileStream.Write() call FileStream.Write() call FileStream.Write() decl_stmt SilentErrorHandler = new decl_stmt log4net.Core.ILogger = new call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call FileStream.Close() call FileStream.Close() call FileStream.Close() call FileStream.Close() call FileStream.Close() call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) + call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() SilentErrorHandler bool ILogger FileStream String public public decl_stmt System.String = decl_stmt bool = decl_stmt SilentErrorHandler = new decl_stmt log4net.Core.ILogger = new call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) try decl_stmt FileStream = new call FileStream.Write() call FileStream.Write() call FileStream.Write() call FileStream.Write() call FileStream.Write() call FileStream.Close() call FileStream.Close() call FileStream.Close() call FileStream.Close() call FileStream.Close() catch if else endif = call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) if ! || || + + + endif FileStream ILogger SilentErrorHandler String public public decl_stmt System.String = decl_stmt FileStream = new call FileStream.Write() call FileStream.Write() call FileStream.Write() call FileStream.Write() call FileStream.Write() decl_stmt SilentErrorHandler = new decl_stmt log4net.Core.ILogger = new call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call FileStream.Close() call FileStream.Close() call FileStream.Close() call FileStream.Close() call FileStream.Close() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() FileStream ILogger SilentErrorHandler String public public decl_stmt System.String = decl_stmt FileStream = new call FileStream.Write() call FileStream.Write() call FileStream.Write() call FileStream.Write() call FileStream.Write() decl_stmt SilentErrorHandler = new decl_stmt log4net.Core.ILogger = new call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call FileStream.Close() call FileStream.Close() call FileStream.Close() call FileStream.Close() call FileStream.Close() call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) + call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() SilentErrorHandler bool ILogger FileStream String public public decl_stmt System.String = decl_stmt bool decl_stmt SilentErrorHandler = new decl_stmt log4net.Core.ILogger = new call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) = decl_stmt FileStream = new call FileStream.Write() call FileStream.Write() call FileStream.Write() call FileStream.Write() call FileStream.Write() + + call FileStream.Close() call FileStream.Close() call FileStream.Close() call FileStream.Close() call FileStream.Close() call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) + + + + + FileStream ILogger SilentErrorHandler String public public decl_stmt System.String = decl_stmt FileStream = new call FileStream.Write() call FileStream.Write() call FileStream.Write() call FileStream.Write() call FileStream.Write() decl_stmt SilentErrorHandler = new decl_stmt log4net.Core.ILogger = new call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call FileStream.Close() call FileStream.Close() call FileStream.Close() call FileStream.Close() call FileStream.Close() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() FileStream ILogger SilentErrorHandler String public public decl_stmt System.String = decl_stmt FileStream = new call FileStream.Write() call FileStream.Write() call FileStream.Write() call FileStream.Write() call FileStream.Write() decl_stmt SilentErrorHandler = new decl_stmt log4net.Core.ILogger = new call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call FileStream.Close() call FileStream.Close() call FileStream.Close() call FileStream.Close() call FileStream.Close() call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) + call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() call SilentErrorHandler.Message() SilentErrorHandler bool ILogger FileStream String public public decl_stmt System.String = decl_stmt bool decl_stmt SilentErrorHandler = new decl_stmt log4net.Core.ILogger = new call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) = decl_stmt FileStream = new call FileStream.Write() call FileStream.Write() call FileStream.Write() call FileStream.Write() call FileStream.Write() + + call FileStream.Close() call FileStream.Close() call FileStream.Close() call FileStream.Close() call FileStream.Close() call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) + + + + + SilentErrorHandler bool ILogger String public public decl_stmt System.String = decl_stmt bool decl_stmt SilentErrorHandler = new decl_stmt log4net.Core.ILogger = new call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) call log4net.Core.ILogger.Log(Type,Level,object,Exception) + + + decl IAppender RollingFileAppender SilentErrorHandler ILogger String public public decl_stmt System.String = decl_stmt SilentErrorHandler = new decl_stmt log4net.Core.ILogger = decl_stmt log4net.Appender.IAppender = call ILogger.Repository() call ILogger.Repository() call ILogger.Repository() call ILogger.Repository() call ILogger.Repository() call ILogger.Repository() call ILogger.Repository() call ILogger.Repository() call ILogger.Repository() decl_stmt log4net.Appender.RollingFileAppender = typeof call RollingFileAppender.LockingModel() call RollingFileAppender.LockingModel() call RollingFileAppender.LockingModel() call RollingFileAppender.LockingModel() call RollingFileAppender.LockingModel() call RollingFileAppender.LockingModel() call RollingFileAppender.LockingModel() call RollingFileAppender.LockingModel() call RollingFileAppender.LockingModel() private static private static private static private static private static private static return decl string Int32 ArrayList private static private static decl_stmt System.Collections.ArrayList = new decl_stmt string = foreach in decl_stmt Int32 = call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) return public public public public RollingFileAppender ArrayList string public public decl_stmt string = decl_stmt System.Collections.ArrayList = new call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) for = < ++ call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) decl_stmt log4net.Appender.RollingFileAppender = new = if == || == else - int public public decl_stmt int const const = public public public public public public public public public public RollingFileAppender private static private static decl_stmt log4net.Appender.RollingFileAppender = new = return private static private static private static private static return int private static private static private static private static private static private static switch case return case return default: throw new