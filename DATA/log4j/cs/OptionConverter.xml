log4net.Util System using System.Collections using System.Globalization using System.Reflection using System.Text using log4net.Core using log4net.Util.TypeConverters using class log4net.Util.OptionConverter int string int char Type public static public static if != && > try return catch + + return long int string long public static public static if == return decl_stmt string = decl_stmt long = decl_stmt int if = call string.IndexOf() call string.IndexOf() call string.IndexOf() call string.IndexOf() call string.IndexOf() != - = = call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.Substring() else if = call string.IndexOf() call string.IndexOf() call string.IndexOf() call string.IndexOf() call string.IndexOf() != - = * = call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.Substring() else if = call string.IndexOf() call string.IndexOf() call string.IndexOf() call string.IndexOf() call string.IndexOf() != - = * * = call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.Substring() if != = call string.Trim() call string.Trim() call string.Trim() call string.Trim() call string.Trim() decl_stmt long if out return * else + + return IConvertFrom decl System public static public static if == throw new if typeof string == || typeof object == return decl_stmt log4net.Util.TypeConverters.IConvertFrom = if != && call IConvertFrom.CanConvertFrom() call IConvertFrom.CanConvertFrom() call IConvertFrom.CanConvertFrom() call IConvertFrom.CanConvertFrom() call IConvertFrom.CanConvertFrom() typeof string return call log4net.Util.TypeConverters.IConvertFrom.ConvertFrom(object) call log4net.Util.TypeConverters.IConvertFrom.ConvertFrom(object) call log4net.Util.TypeConverters.IConvertFrom.ConvertFrom(object) call log4net.Util.TypeConverters.IConvertFrom.ConvertFrom(object) call log4net.Util.TypeConverters.IConvertFrom.ConvertFrom(object) else if return else decl_stmt System.Reflection.MethodInfo = new typeof string if != return call decl System.Invoke() call decl System.Invoke() call decl System.Invoke() call decl System.Invoke() call decl System.Invoke() new else return IConvertTo IConvertFrom public static public static if == || == return if return decl_stmt log4net.Util.TypeConverters.IConvertTo = if != if call IConvertTo.CanConvertTo() call IConvertTo.CanConvertTo() call IConvertTo.CanConvertTo() call IConvertTo.CanConvertTo() call IConvertTo.CanConvertTo() return decl_stmt log4net.Util.TypeConverters.IConvertFrom = if != if call IConvertFrom.CanConvertFrom() call IConvertFrom.CanConvertFrom() call IConvertFrom.CanConvertFrom() call IConvertFrom.CanConvertFrom() call IConvertFrom.CanConvertFrom() return return IConvertTo IConvertFrom Type public static public static decl_stmt System.Type = if return decl_stmt log4net.Util.TypeConverters.IConvertTo = if != if call IConvertTo.CanConvertTo() call IConvertTo.CanConvertTo() call IConvertTo.CanConvertTo() call IConvertTo.CanConvertTo() call IConvertTo.CanConvertTo() return call log4net.Util.TypeConverters.IConvertTo.ConvertTo(object,Type) call log4net.Util.TypeConverters.IConvertTo.ConvertTo(object,Type) call log4net.Util.TypeConverters.IConvertTo.ConvertTo(object,Type) call log4net.Util.TypeConverters.IConvertTo.ConvertTo(object,Type) call log4net.Util.TypeConverters.IConvertTo.ConvertTo(object,Type) decl_stmt log4net.Util.TypeConverters.IConvertFrom = if != if call IConvertFrom.CanConvertFrom() call IConvertFrom.CanConvertFrom() call IConvertFrom.CanConvertFrom() call IConvertFrom.CanConvertFrom() call IConvertFrom.CanConvertFrom() return call log4net.Util.TypeConverters.IConvertFrom.ConvertFrom(object) call log4net.Util.TypeConverters.IConvertFrom.ConvertFrom(object) call log4net.Util.TypeConverters.IConvertFrom.ConvertFrom(object) call log4net.Util.TypeConverters.IConvertFrom.ConvertFrom(object) call log4net.Util.TypeConverters.IConvertFrom.ConvertFrom(object) throw new + + + + Type public static public static if != try decl_stmt System.Type = if ! + + + + return return catch + + return int string int StringBuilder string public static public static decl_stmt System.Text.StringBuilder = new decl_stmt int = decl_stmt int while = if == - if == return else call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) - return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) else call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) - = if == - throw new + + + + else += decl_stmt string = - decl_stmt string = as string if != call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) = + decl FieldInfo long decl string bool private static private static if ! return else decl_stmt System.Reflection.FieldInfo = | decl_stmt string = new for = < ++ = decl_stmt long = try return typeof long catch foreach in decl_stmt bool = foreach in if == |= = break if ! throw new + + + + return endif