log4net.Appender System using System.Collections using System.Globalization using System.IO using log4net.Util using log4net.Core using System.Threading using class log4net.Appender.RollingFileAppender super super FileAppender bool DateTime DateTime DateTime long string string int int RollPoint Mutex IDateTime bool bool bool RollingMode string int return = return = return = return = return call long.ToString() call long.ToString() call long.ToString() call long.ToString() call long.ToString() = + return = return = switch case = = = break case = = break case = = break case = = break return = return = override protected override protected = new override protected override protected override protected override protected DateTime virtual protected virtual protected try if != call Mutex.WaitOne() call Mutex.WaitOne() call Mutex.WaitOne() call Mutex.WaitOne() call Mutex.WaitOne() if decl_stmt DateTime = if >= = = if if != && >= finally if != call Mutex.ReleaseMutex() call Mutex.ReleaseMutex() call Mutex.ReleaseMutex() call Mutex.ReleaseMutex() call Mutex.ReleaseMutex() long override protected override protected lock = decl_stmt long = if using if = new else if if != && + + if ! = = protected protected if ! = if = call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() if >= = + return string ArrayList string private private = decl_stmt string = decl_stmt string = using = = decl_stmt System.Collections.ArrayList = + + private private if return + + else return + decl string string string string string ArrayList private private decl_stmt System.Collections.ArrayList = new decl_stmt string = using decl_stmt string = = if decl_stmt string = decl_stmt string = if != for = < ++ decl_stmt string = if call string.StartsWith() call string.StartsWith() call string.StartsWith() call string.StartsWith() call string.StartsWith() call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) + + return DateTime private private if && if decl_stmt DateTime using if ! && ! && ! if is = else endif = if ! && ! && ! endif + call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() + + call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() + if ! call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() = call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() + + + + bool string protected protected if == decl_stmt bool = decl_stmt string = using = if if == + + else + + string string int string private private if == return if return if && ! decl_stmt string = call IDateTime.Now() call IDateTime.Now() call IDateTime.Now() call IDateTime.Now() call IDateTime.Now() call IDateTime.Now() call IDateTime.Now() call IDateTime.Now() call IDateTime.Now() decl_stmt string = + : + decl_stmt string = : if ! || ! + + return try decl_stmt int = if > if == else if - == = else if >= = else if <= = + + + + catch + + int int string private private decl_stmt int = - decl_stmt string = if = decl_stmt int = call string.LastIndexOf() call string.LastIndexOf() call string.LastIndexOf() call string.LastIndexOf() call string.LastIndexOf() if > call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.Substring() + out return string private private if != decl_stmt string = foreach in string string private private decl_stmt string = call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() for = int <= int ++ decl_stmt string = + + + + + + if != && != && ! call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return return override public override public if == = new if && != = = if == throw new + + = else if + + if == = using = = = new call string.Replace() call string.Replace() call string.Replace() call string.Replace() call string.Replace() if && != && == = call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() string private private decl_stmt string = if && > return + + else return + string string string protected protected if if == return decl_stmt string = call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() + + + return if for = <= ++ decl_stmt string = + decl_stmt string = + from = = call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() call DateTime.ToString() if protected protected if try + + + + using catch + + + + else + + + + protected protected using return string string protected protected if decl_stmt string = decl_stmt string = + + + try using = catch + + + + try using + + catch if == + + else + + protected protected + + + + + + + + if ! && >= ++ string int int protected protected if != if < if == + -- for = >= -- + + + ++ else if >= && > decl_stmt int = - if ++ decl_stmt string = if ! decl_stmt int = call string.LastIndexOf() call string.LastIndexOf() call string.LastIndexOf() call string.LastIndexOf() call string.LastIndexOf() if >= = call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.Substring() + if ++ + DateTime protected protected decl_stmt DateTime = switch case = call DateTime.AddMilliseconds() call DateTime.AddMilliseconds() call DateTime.AddMilliseconds() call DateTime.AddMilliseconds() call DateTime.AddMilliseconds() - = call DateTime.AddSeconds() call DateTime.AddSeconds() call DateTime.AddSeconds() call DateTime.AddSeconds() call DateTime.AddSeconds() - = call DateTime.AddMinutes() call DateTime.AddMinutes() call DateTime.AddMinutes() call DateTime.AddMinutes() call DateTime.AddMinutes() break case = call DateTime.AddMilliseconds() call DateTime.AddMilliseconds() call DateTime.AddMilliseconds() call DateTime.AddMilliseconds() call DateTime.AddMilliseconds() - = call DateTime.AddSeconds() call DateTime.AddSeconds() call DateTime.AddSeconds() call DateTime.AddSeconds() call DateTime.AddSeconds() - = call DateTime.AddMinutes() call DateTime.AddMinutes() call DateTime.AddMinutes() call DateTime.AddMinutes() call DateTime.AddMinutes() - = call DateTime.AddHours() call DateTime.AddHours() call DateTime.AddHours() call DateTime.AddHours() call DateTime.AddHours() break case = call DateTime.AddMilliseconds() call DateTime.AddMilliseconds() call DateTime.AddMilliseconds() call DateTime.AddMilliseconds() call DateTime.AddMilliseconds() - = call DateTime.AddSeconds() call DateTime.AddSeconds() call DateTime.AddSeconds() call DateTime.AddSeconds() call DateTime.AddSeconds() - = call DateTime.AddMinutes() call DateTime.AddMinutes() call DateTime.AddMinutes() call DateTime.AddMinutes() call DateTime.AddMinutes() - if < = call DateTime.AddHours() call DateTime.AddHours() call DateTime.AddHours() call DateTime.AddHours() call DateTime.AddHours() - else = call DateTime.AddHours() call DateTime.AddHours() call DateTime.AddHours() call DateTime.AddHours() call DateTime.AddHours() - = call DateTime.AddDays() call DateTime.AddDays() call DateTime.AddDays() call DateTime.AddDays() call DateTime.AddDays() break case = call DateTime.AddMilliseconds() call DateTime.AddMilliseconds() call DateTime.AddMilliseconds() call DateTime.AddMilliseconds() call DateTime.AddMilliseconds() - = call DateTime.AddSeconds() call DateTime.AddSeconds() call DateTime.AddSeconds() call DateTime.AddSeconds() call DateTime.AddSeconds() - = call DateTime.AddMinutes() call DateTime.AddMinutes() call DateTime.AddMinutes() call DateTime.AddMinutes() call DateTime.AddMinutes() - = call DateTime.AddHours() call DateTime.AddHours() call DateTime.AddHours() call DateTime.AddHours() call DateTime.AddHours() - = call DateTime.AddDays() call DateTime.AddDays() call DateTime.AddDays() call DateTime.AddDays() call DateTime.AddDays() break case = call DateTime.AddMilliseconds() call DateTime.AddMilliseconds() call DateTime.AddMilliseconds() call DateTime.AddMilliseconds() call DateTime.AddMilliseconds() - = call DateTime.AddSeconds() call DateTime.AddSeconds() call DateTime.AddSeconds() call DateTime.AddSeconds() call DateTime.AddSeconds() - = call DateTime.AddMinutes() call DateTime.AddMinutes() call DateTime.AddMinutes() call DateTime.AddMinutes() call DateTime.AddMinutes() - = call DateTime.AddHours() call DateTime.AddHours() call DateTime.AddHours() call DateTime.AddHours() call DateTime.AddHours() - = call DateTime.AddDays() call DateTime.AddDays() call DateTime.AddDays() call DateTime.AddDays() call DateTime.AddDays() - int break case = call DateTime.AddMilliseconds() call DateTime.AddMilliseconds() call DateTime.AddMilliseconds() call DateTime.AddMilliseconds() call DateTime.AddMilliseconds() - = call DateTime.AddSeconds() call DateTime.AddSeconds() call DateTime.AddSeconds() call DateTime.AddSeconds() call DateTime.AddSeconds() - = call DateTime.AddMinutes() call DateTime.AddMinutes() call DateTime.AddMinutes() call DateTime.AddMinutes() call DateTime.AddMinutes() - = call DateTime.AddHours() call DateTime.AddHours() call DateTime.AddHours() call DateTime.AddHours() call DateTime.AddHours() - = call DateTime.AddDays() call DateTime.AddDays() call DateTime.AddDays() call DateTime.AddDays() call DateTime.AddDays() - = call DateTime.AddMonths() call DateTime.AddMonths() call DateTime.AddMonths() call DateTime.AddMonths() call DateTime.AddMonths() break return return return