log4net.Util System.Text using System.IO using System.Collections using log4net.Util using log4net.Repository using class log4net.Util.PatternConverter ReusableStringWriter PatternConverter bool decl string string int int int PropertiesDictionary int return return new = = = return = public virtual public virtual = return string StringBuilder int virtual public virtual public if < && == else decl_stmt string = decl_stmt int lock call log4net.Util.ReusableStringWriter.Reset(int,int) call log4net.Util.ReusableStringWriter.Reset(int,int) call log4net.Util.ReusableStringWriter.Reset(int,int) call log4net.Util.ReusableStringWriter.Reset(int,int) call log4net.Util.ReusableStringWriter.Reset(int,int) decl_stmt System.Text.StringBuilder = call ReusableStringWriter.GetStringBuilder() call ReusableStringWriter.GetStringBuilder() call ReusableStringWriter.GetStringBuilder() call ReusableStringWriter.GetStringBuilder() call ReusableStringWriter.GetStringBuilder() = if > = call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) - = else = call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) if < if - else - else protected static protected static while >= -= for = >= -- if & << != protected static protected static bool protected static protected static decl_stmt bool = while if = else protected static protected static if != else if == else return =