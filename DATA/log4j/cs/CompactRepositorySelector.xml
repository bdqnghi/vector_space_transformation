log4net.Core System using System.Collections using System.Reflection using log4net.Appender using log4net.Util using log4net.Repository using class log4net.Core.CompactRepositorySelector super super IRepositorySelector Type Hashtable Type string public public return ILoggerRepository public public if == throw new lock decl_stmt log4net.Repository.ILoggerRepository = as if == throw new + + return ILoggerRepository public public if == = lock decl_stmt log4net.Repository.ILoggerRepository = as if == = return ILoggerRepository public public if == throw new if == = lock decl_stmt log4net.Repository.ILoggerRepository = = as if != throw new + + else + + + + = = = return public public lock return call Hashtable.ContainsKey() call Hashtable.ContainsKey() call Hashtable.ContainsKey() call Hashtable.ContainsKey() call Hashtable.ContainsKey() decl ILoggerRepository ICollection public public lock decl_stmt System.Collections.Generic.ICollection = decl_stmt log4net.Repository.ILoggerRepository = new call System.Collections.Generic.ICollection.CopyTo(T,int) call System.Collections.Generic.ICollection.CopyTo(T,int) call System.Collections.Generic.ICollection.CopyTo(T,int) call System.Collections.Generic.ICollection.CopyTo(T,int) call System.Collections.Generic.ICollection.CopyTo(T,int) return += -= LoggerRepositoryCreationEventHandler protected virtual protected virtual decl_stmt LoggerRepositoryCreationEventHandler = if != new