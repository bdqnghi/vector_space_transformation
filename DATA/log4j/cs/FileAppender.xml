log4net.Appender System using System.IO using System.Text using System.Threading using log4net.Util using log4net.Layout using log4net.Core using class log4net.Appender.FileAppender super super TextWriterAppender decl FileAppender decl LockingStream decl FileAppender Encoding SecurityContext string bool IAsyncResult public override public override decl_stmt System.IAsyncResult = = return IAsyncResult public override public override decl_stmt System.IAsyncResult = return public override public override call decl LockingStream.CloseFile() call decl LockingStream.CloseFile() call decl LockingStream.CloseFile() call decl LockingStream.CloseFile() call decl LockingStream.CloseFile() public override public override return public override public override public override public override public override public override return public override public override return public override public override return public override public override public override public override public override public override return return return return return = private private if == throw new bool public public decl_stmt bool = lock if == = call decl LockingStream.AcquireLock() call decl LockingStream.AcquireLock() call decl LockingStream.AcquireLock() call decl LockingStream.AcquireLock() call decl LockingStream.AcquireLock() if != ++ = return public public lock -- if == call decl LockingStream.ReleaseLock() call decl LockingStream.ReleaseLock() call decl LockingStream.ReleaseLock() call decl LockingStream.ReleaseLock() call decl LockingStream.ReleaseLock() = return = FileMode string protected protected using decl_stmt string = if ! decl_stmt FileMode = : return new protected protected using public override public override try = catch + + + public override public override = public override public override return public override public override public override public override public override public override public override public override = = public override public override public override public override if == try = = catch + + + return public override public override = public override public override public override public override endif public override endif public override try = catch + + + public override public override try = finally public override public override if != ++ if != if call decl FileAppender.Seek() call decl FileAppender.Seek() call decl FileAppender.Seek() call decl FileAppender.Seek() call decl FileAppender.Seek() else else return public override public override if != if > -- else string public override public override if == decl_stmt string = = new else public override public override if != = else return = return = return = return = return = override public override public if == = if == = new = call decl LockingStream.ActivateOptions() call decl LockingStream.ActivateOptions() call decl LockingStream.ActivateOptions() call decl LockingStream.ActivateOptions() call decl LockingStream.ActivateOptions() if != using = call string.Trim() call string.Trim() call string.Trim() call string.Trim() call string.Trim() else + + override protected override protected = override protected override protected call decl LockingStream.OnClose() call decl LockingStream.OnClose() call decl LockingStream.OnClose() call decl LockingStream.OnClose() call decl LockingStream.OnClose() override protected override protected override protected override protected if call decl FileAppender.AcquireLock() call decl FileAppender.AcquireLock() call decl FileAppender.AcquireLock() call decl FileAppender.AcquireLock() call decl FileAppender.AcquireLock() try finally call decl FileAppender.ReleaseLock() call decl FileAppender.ReleaseLock() call decl FileAppender.ReleaseLock() call decl FileAppender.ReleaseLock() call decl FileAppender.ReleaseLock() override protected override protected if call decl FileAppender.AcquireLock() call decl FileAppender.AcquireLock() call decl FileAppender.AcquireLock() call decl FileAppender.AcquireLock() call decl FileAppender.AcquireLock() try finally call decl FileAppender.ReleaseLock() call decl FileAppender.ReleaseLock() call decl FileAppender.ReleaseLock() call decl FileAppender.ReleaseLock() call decl FileAppender.ReleaseLock() protected override protected override if != call decl FileAppender.AcquireLock() call decl FileAppender.AcquireLock() call decl FileAppender.AcquireLock() call decl FileAppender.AcquireLock() call decl FileAppender.AcquireLock() try finally call decl FileAppender.ReleaseLock() call decl FileAppender.ReleaseLock() call decl FileAppender.ReleaseLock() call decl FileAppender.ReleaseLock() call decl FileAppender.ReleaseLock() protected override protected override if != if call decl FileAppender.AcquireLock() call decl FileAppender.AcquireLock() call decl FileAppender.AcquireLock() call decl FileAppender.AcquireLock() call decl FileAppender.AcquireLock() try finally call decl FileAppender.ReleaseLock() call decl FileAppender.ReleaseLock() call decl FileAppender.ReleaseLock() call decl FileAppender.ReleaseLock() call decl FileAppender.ReleaseLock() protected override protected override if != call decl FileAppender.AcquireLock() call decl FileAppender.AcquireLock() call decl FileAppender.AcquireLock() call decl FileAppender.AcquireLock() call decl FileAppender.AcquireLock() try finally call decl FileAppender.ReleaseLock() call decl FileAppender.ReleaseLock() call decl FileAppender.ReleaseLock() call decl FileAppender.ReleaseLock() call decl FileAppender.ReleaseLock() protected protected virtual protected virtual protected try catch + + + + bool virtual protected virtual protected if decl_stmt bool = using = if ! + + lock + + + + = = = = new if != call decl FileAppender.AcquireLock() call decl FileAppender.AcquireLock() call decl FileAppender.AcquireLock() call decl FileAppender.AcquireLock() call decl FileAppender.AcquireLock() try new finally call decl FileAppender.ReleaseLock() call decl FileAppender.ReleaseLock() call decl FileAppender.ReleaseLock() call decl FileAppender.ReleaseLock() call decl FileAppender.ReleaseLock() virtual protected virtual protected new virtual protected virtual protected = new protected static protected static return