log4net.Appender System using System.IO using System.Collections using log4net.Filter using log4net.Util using log4net.Layout using log4net.Core using class log4net.Appender.AppenderSkeleton super super IAppender super IBulkAppender super IOptionHandler bool IFilter ILayout Type ReusableStringWriter IFilter int Level IErrorHandler int bool string return = return lock if == else = return return = virtual public virtual public return = public public lock if ! = public public lock if + + return if return try = if && catch if ! && ! catch endif finally = ArrayList public public lock if + + return if return try = decl_stmt System.Collections.ArrayList = new foreach in if call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) call System.Collections.ArrayList.Add(Object) if > && call System.Collections.ArrayList.ToArray(Type) call System.Collections.ArrayList.ToArray(Type) call System.Collections.ArrayList.ToArray(Type) call System.Collections.ArrayList.ToArray(Type) call System.Collections.ArrayList.ToArray(Type) typeof catch if ! && ! catch endif finally = IFilter virtual protected virtual protected if ! return decl_stmt log4net.Filter.IFilter = while != switch call log4net.Filter.IFilter.Decide(LoggingEvent) call log4net.Filter.IFilter.Decide(LoggingEvent) call log4net.Filter.IFilter.Decide(LoggingEvent) call log4net.Filter.IFilter.Decide(LoggingEvent) call log4net.Filter.IFilter.Decide(LoggingEvent) case return case = break case = break return virtual public virtual public if == throw new if == = = else = = virtual public virtual public = = virtual protected virtual protected return == || >= virtual protected virtual protected virtual protected virtual protected foreach in virtual protected virtual protected if == && + + return return protected protected if == = new lock call log4net.Util.ReusableStringWriter.Reset(int,int) call log4net.Util.ReusableStringWriter.Reset(int,int) call log4net.Util.ReusableStringWriter.Reset(int,int) call log4net.Util.ReusableStringWriter.Reset(int,int) call log4net.Util.ReusableStringWriter.Reset(int,int) return call ReusableStringWriter.ToString() call ReusableStringWriter.ToString() call ReusableStringWriter.ToString() call ReusableStringWriter.ToString() call ReusableStringWriter.ToString() string protected protected if == throw new if decl_stmt string = if != && > call ILayout.Format() call ILayout.Format() call ILayout.Format() call ILayout.Format() call ILayout.Format() else call ILayout.Format() call ILayout.Format() call ILayout.Format() call ILayout.Format() call ILayout.Format() else call ILayout.Format() call ILayout.Format() call ILayout.Format() call ILayout.Format() call ILayout.Format() return