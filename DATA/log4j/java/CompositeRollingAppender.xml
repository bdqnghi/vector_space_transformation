org.apache.log4j org.apache.log4j.RollingCalendar import org.apache.log4j.helpers.OptionConverter import org.apache.log4j.helpers.QuietWriter import org.apache.log4j.helpers.CountingQuietWriter import org.apache.log4j.helpers.LogLog import org.apache.log4j.spi.LoggingEvent import java.util.Date import java.io.IOException import java.io.Writer import java.text.SimpleDateFormat import java.io.File import java.io.FilenameFilter import class org.apache.log4j.CompositeRollingAppender super super extends String int long int String String int int boolean int int int String int RollingCalendar int int int int int SimpleDateFormat int String boolean Date long boolean int int int String public public = public public return public public return public public return public public = public public = public public = public public = + protected protected = new RollingCalendar String String Date Date decl_stmt RollingCalendar = new decl_stmt java.util.Date = new if != for = <= ++ decl_stmt java.lang.String = call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call RollingCalendar.setType() call RollingCalendar.setType() call RollingCalendar.setType() call RollingCalendar.setType() call RollingCalendar.setType() decl_stmt java.util.Date = new call RollingCalendar.getNextCheckMillis() call RollingCalendar.getNextCheckMillis() call RollingCalendar.getNextCheckMillis() call RollingCalendar.getNextCheckMillis() call RollingCalendar.getNextCheckMillis() decl_stmt java.lang.String = call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) if != && != && ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return return long protected protected if decl_stmt long = if >= call java.util.Date.setTime(long) call java.util.Date.setTime(long) call java.util.Date.setTime(long) call java.util.Date.setTime(long) call java.util.Date.setTime(long) = call RollingCalendar.getNextCheckMillis() call RollingCalendar.getNextCheckMillis() call RollingCalendar.getNextCheckMillis() call RollingCalendar.getNextCheckMillis() call RollingCalendar.getNextCheckMillis() if if != && >= public public = = File public synchronized public synchronized throws if ! = = + call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) if > = = + + ++ if decl_stmt File = new call File.length() call File.length() call File.length() call File.length() call File.length() public public return public public = public public return public public = switch case = = break case = = break case = = break default: public public return public public = public public decl String int File File String Date int int protected protected = = decl_stmt java.lang.String if || ! = + else = + decl_stmt File = new = call File.getParentFile() call File.getParentFile() call File.getParentFile() call File.getParentFile() call File.getParentFile() if == = new + decl_stmt java.lang.String = call File.list() call File.list() call File.list() call File.list() call File.list() if != for = < ++ if ! continue decl_stmt int = if decl_stmt int = - if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() + != continue try decl_stmt int = + + + + if > = catch + + if && decl_stmt File = new if call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() decl_stmt java.util.Date = new call File.lastModified() call File.lastModified() call File.lastModified() call File.lastModified() call File.lastModified() if ! call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) = + call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) + + int public public if != call java.util.Date.setTime(long) call java.util.Date.setTime(long) call java.util.Date.setTime(long) call java.util.Date.setTime(long) call java.util.Date.setTime(long) = new decl_stmt int = call RollingCalendar.setType() call RollingCalendar.setType() call RollingCalendar.setType() call RollingCalendar.setType() call RollingCalendar.setType() = call RollingCalendar.getNextCheckMillis() call RollingCalendar.getNextCheckMillis() call RollingCalendar.getNextCheckMillis() call RollingCalendar.getNextCheckMillis() call RollingCalendar.getNextCheckMillis() else if + + if && != && == = + call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) String String protected protected ++ if if == return decl_stmt java.lang.String = call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) + + + + + return decl_stmt java.lang.String for = <= ++ = + + = + + try = = + call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) catch + + File File protected static protected static decl_stmt File = new if call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() + call File.delete() call File.delete() call File.delete() call File.delete() call File.delete() decl_stmt File = new call File.renameTo() call File.renameTo() call File.renameTo() call File.renameTo() call File.renameTo() + + File protected static protected static decl_stmt File = new if call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() call File.delete() call File.delete() call File.delete() call File.delete() call File.delete() int File protected protected decl_stmt File + + + + if != if < if == + + -- for = >= -- + + + + + ++ + else if == ++ call java.util.Date.setTime(long) call java.util.Date.setTime(long) call java.util.Date.setTime(long) call java.util.Date.setTime(long) call java.util.Date.setTime(long) = + call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) else if >= && > decl_stmt int = - + + + if ++ + + try catch + +