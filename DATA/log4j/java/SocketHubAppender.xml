org.apache.log4j.net java.io.IOException import java.io.InterruptedIOException import java.io.ObjectOutputStream import java.net.InetAddress import java.net.ServerSocket import java.net.Socket import java.net.SocketException import java.util.Vector import org.apache.log4j.AppenderSkeleton import org.apache.log4j.helpers.CyclicBuffer import org.apache.log4j.helpers.LogLog import org.apache.log4j.spi.LoggingEvent import class org.apache.log4j.net.SocketHubAppender super super extends ServerMonitor String boolean CyclicBuffer boolean ZeroConfSupport String ServerSocket int Vector int public public if = new call org.apache.log4j.net.ZeroConfSupport.advertise() call org.apache.log4j.net.ZeroConfSupport.advertise() call org.apache.log4j.net.ZeroConfSupport.advertise() call org.apache.log4j.net.ZeroConfSupport.advertise() call org.apache.log4j.net.ZeroConfSupport.advertise() synchronized public synchronized public if return + = if call org.apache.log4j.net.ZeroConfSupport.unadvertise() call org.apache.log4j.net.ZeroConfSupport.unadvertise() call org.apache.log4j.net.ZeroConfSupport.unadvertise() call org.apache.log4j.net.ZeroConfSupport.unadvertise() call org.apache.log4j.net.ZeroConfSupport.unadvertise() + + ObjectOutputStream public public call ServerMonitor.stopMonitor() call ServerMonitor.stopMonitor() call ServerMonitor.stopMonitor() call ServerMonitor.stopMonitor() call ServerMonitor.stopMonitor() = while call java.util.Vector.size() call java.util.Vector.size() call java.util.Vector.size() call java.util.Vector.size() call java.util.Vector.size() != decl_stmt ObjectOutputStream = call java.util.Vector.elementAt(int) call java.util.Vector.elementAt(int) call java.util.Vector.elementAt(int) call java.util.Vector.elementAt(int) call java.util.Vector.elementAt(int) if != try call ObjectOutputStream.close() call ObjectOutputStream.close() call ObjectOutputStream.close() call ObjectOutputStream.close() call ObjectOutputStream.close() catch catch call java.util.Vector.removeElementAt(int) call java.util.Vector.removeElementAt(int) call java.util.Vector.removeElementAt(int) call java.util.Vector.removeElementAt(int) call java.util.Vector.removeElementAt(int) ObjectOutputStream public public if != if if != if != call org.apache.log4j.helpers.CyclicBuffer.add(LoggingEvent) call org.apache.log4j.helpers.CyclicBuffer.add(LoggingEvent) call org.apache.log4j.helpers.CyclicBuffer.add(LoggingEvent) call org.apache.log4j.helpers.CyclicBuffer.add(LoggingEvent) call org.apache.log4j.helpers.CyclicBuffer.add(LoggingEvent) if == || call java.util.Vector.size() call java.util.Vector.size() call java.util.Vector.size() call java.util.Vector.size() call java.util.Vector.size() == return for = < call java.util.Vector.size() call java.util.Vector.size() call java.util.Vector.size() call java.util.Vector.size() call java.util.Vector.size() ++ decl_stmt ObjectOutputStream = try = call java.util.Vector.elementAt(int) call java.util.Vector.elementAt(int) call java.util.Vector.elementAt(int) call java.util.Vector.elementAt(int) call java.util.Vector.elementAt(int) catch if == break try call ObjectOutputStream.writeObject() call ObjectOutputStream.writeObject() call ObjectOutputStream.writeObject() call ObjectOutputStream.writeObject() call ObjectOutputStream.writeObject() call ObjectOutputStream.flush() call ObjectOutputStream.flush() call ObjectOutputStream.flush() call ObjectOutputStream.flush() call ObjectOutputStream.flush() call ObjectOutputStream.reset() call ObjectOutputStream.reset() call ObjectOutputStream.reset() call ObjectOutputStream.reset() call ObjectOutputStream.reset() catch if instanceof call java.util.Vector.removeElementAt(int) call java.util.Vector.removeElementAt(int) call java.util.Vector.removeElementAt(int) call java.util.Vector.removeElementAt(int) call java.util.Vector.removeElementAt(int) -- public public return public public = public public = public public return public public return public public = new public public if == return else return call CyclicBuffer.getMaxSize() call CyclicBuffer.getMaxSize() call CyclicBuffer.getMaxSize() call CyclicBuffer.getMaxSize() call CyclicBuffer.getMaxSize() public public = public public return public public = public public return private private = new protected protected final final throws return new public synchronized public synchronized if = try if != call java.net.ServerSocket.close() call java.net.ServerSocket.close() call java.net.ServerSocket.close() call java.net.ServerSocket.close() call java.net.ServerSocket.close() = catch try catch = private private throws if != for = < call org.apache.log4j.helpers.CyclicBuffer.length() call org.apache.log4j.helpers.CyclicBuffer.length() call org.apache.log4j.helpers.CyclicBuffer.length() call org.apache.log4j.helpers.CyclicBuffer.length() call org.apache.log4j.helpers.CyclicBuffer.length() ++ call org.apache.log4j.helpers.CyclicBuffer.get(int) call org.apache.log4j.helpers.CyclicBuffer.get(int) call org.apache.log4j.helpers.CyclicBuffer.get(int) call org.apache.log4j.helpers.CyclicBuffer.get(int) call org.apache.log4j.helpers.CyclicBuffer.get(int) Socket ObjectOutputStream InetAddress public public = try = call java.net.ServerSocket.setSoTimeout(int) call java.net.ServerSocket.setSoTimeout(int) call java.net.ServerSocket.setSoTimeout(int) call java.net.ServerSocket.setSoTimeout(int) call java.net.ServerSocket.setSoTimeout(int) catch if instanceof || instanceof = return try try call java.net.ServerSocket.setSoTimeout(int) call java.net.ServerSocket.setSoTimeout(int) call java.net.ServerSocket.setSoTimeout(int) call java.net.ServerSocket.setSoTimeout(int) call java.net.ServerSocket.setSoTimeout(int) catch return while decl_stmt java.net.Socket = try = call java.net.ServerSocket.accept() call java.net.ServerSocket.accept() call java.net.ServerSocket.accept() call java.net.ServerSocket.accept() call java.net.ServerSocket.accept() catch catch = catch if != try decl_stmt java.net.InetAddress = call java.net.Socket.getInetAddress() call java.net.Socket.getInetAddress() call java.net.Socket.getInetAddress() call java.net.Socket.getInetAddress() call java.net.Socket.getInetAddress() + call java.net.InetAddress.getHostName() call java.net.InetAddress.getHostName() call java.net.InetAddress.getHostName() call java.net.InetAddress.getHostName() call java.net.InetAddress.getHostName() + + call java.net.InetAddress.getHostAddress() call java.net.InetAddress.getHostAddress() call java.net.InetAddress.getHostAddress() call java.net.InetAddress.getHostAddress() call java.net.InetAddress.getHostAddress() + decl_stmt ObjectOutputStream = new call java.net.Socket.getOutputStream() call java.net.Socket.getOutputStream() call java.net.Socket.getOutputStream() call java.net.Socket.getOutputStream() call java.net.Socket.getOutputStream() if != && call org.apache.log4j.helpers.CyclicBuffer.length() call org.apache.log4j.helpers.CyclicBuffer.length() call org.apache.log4j.helpers.CyclicBuffer.length() call org.apache.log4j.helpers.CyclicBuffer.length() call org.apache.log4j.helpers.CyclicBuffer.length() > call java.util.Vector.addElement(E) call java.util.Vector.addElement(E) call java.util.Vector.addElement(E) call java.util.Vector.addElement(E) call java.util.Vector.addElement(E) catch if instanceof finally try call java.net.ServerSocket.close() call java.net.ServerSocket.close() call java.net.ServerSocket.close() call java.net.ServerSocket.close() call java.net.ServerSocket.close() catch catch