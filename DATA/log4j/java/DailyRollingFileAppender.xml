org.apache.log4j java.io.IOException import java.io.File import java.io.InterruptedIOException import java.text.SimpleDateFormat import java.util.Date import java.util.GregorianCalendar import java.util.Calendar import java.util.TimeZone import java.util.Locale import org.apache.log4j.helpers.LogLog import org.apache.log4j.spi.LoggingEvent import class org.apache.log4j.DailyRollingFileAppender super super extends String int int long int int SimpleDateFormat int int RollingCalendar int String TimeZone Date int public public = public public return int File public public if != && != call java.util.Date.setTime(long) call java.util.Date.setTime(long) call java.util.Date.setTime(long) call java.util.Date.setTime(long) call java.util.Date.setTime(long) = new decl_stmt int = call RollingCalendar.setType() call RollingCalendar.setType() call RollingCalendar.setType() call RollingCalendar.setType() call RollingCalendar.setType() decl_stmt File = new = + call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) new call File.lastModified() call File.lastModified() call File.lastModified() call File.lastModified() call File.lastModified() else + + switch case + + break case + + break case + + break case + + break case + + break case + + break default: + + String String Date Date RollingCalendar SimpleDateFormat decl_stmt RollingCalendar = new decl_stmt java.util.Date = new if != for = <= ++ decl_stmt java.text.SimpleDateFormat = new call SimpleDateFormat.setTimeZone() call SimpleDateFormat.setTimeZone() call SimpleDateFormat.setTimeZone() call SimpleDateFormat.setTimeZone() call SimpleDateFormat.setTimeZone() decl_stmt java.lang.String = call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call RollingCalendar.setType() call RollingCalendar.setType() call RollingCalendar.setType() call RollingCalendar.setType() call RollingCalendar.setType() decl_stmt java.util.Date = new call RollingCalendar.getNextCheckMillis() call RollingCalendar.getNextCheckMillis() call RollingCalendar.getNextCheckMillis() call RollingCalendar.getNextCheckMillis() call RollingCalendar.getNextCheckMillis() decl_stmt java.lang.String = call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) if != && != && ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return return String File File boolean throws if == return decl_stmt java.lang.String = + call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return decl_stmt File = new if call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() call File.delete() call File.delete() call File.delete() call File.delete() call File.delete() decl_stmt File = new decl_stmt boolean = call File.renameTo() call File.renameTo() call File.renameTo() call File.renameTo() call File.renameTo() if + + else + + + + try catch + + = long protected protected decl_stmt long = if >= call java.util.Date.setTime(long) call java.util.Date.setTime(long) call java.util.Date.setTime(long) call java.util.Date.setTime(long) call java.util.Date.setTime(long) = call RollingCalendar.getNextCheckMillis() call RollingCalendar.getNextCheckMillis() call RollingCalendar.getNextCheckMillis() call RollingCalendar.getNextCheckMillis() call RollingCalendar.getNextCheckMillis() try catch if instanceof