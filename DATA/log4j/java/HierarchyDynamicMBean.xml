org.apache.log4j.jmx org.apache.log4j.Appender import org.apache.log4j.Category import org.apache.log4j.Level import org.apache.log4j.LogManager import org.apache.log4j.Logger import org.apache.log4j.helpers.OptionConverter import org.apache.log4j.spi.HierarchyEventListener import org.apache.log4j.spi.LoggerRepository import javax.management.Attribute import javax.management.AttributeNotFoundException import javax.management.InvalidAttributeValueException import javax.management.JMException import javax.management.ListenerNotFoundException import javax.management.MBeanAttributeInfo import javax.management.MBeanConstructorInfo import javax.management.MBeanException import javax.management.MBeanInfo import javax.management.MBeanNotificationInfo import javax.management.MBeanOperationInfo import javax.management.MBeanParameterInfo import javax.management.Notification import javax.management.NotificationBroadcaster import javax.management.NotificationBroadcasterSupport import javax.management.NotificationFilter import javax.management.NotificationFilterSupport import javax.management.NotificationListener import javax.management.ObjectName import javax.management.ReflectionException import javax.management.RuntimeOperationsException import java.lang.reflect.Constructor import java.util.Vector import class org.apache.log4j.jmx.HierarchyDynamicMBean super super extends super implements decl MBeanConstructorInfo NotificationBroadcasterSupport String String decl MBeanOperationInfo LoggerRepository Logger Vector String String decl Constructor decl MBeanParameterInfo private private decl_stmt java.lang.reflect.Constructor = = new call java.util.Vector.add(int,E) call java.util.Vector.add(int,E) call java.util.Vector.add(int,E) call java.util.Vector.add(int,E) call java.util.Vector.add(int,E) new decl_stmt javax.management.MBeanParameterInfo = new = new = new Logger public public decl_stmt org.apache.log4j.Logger = if != return else return NotificationFilterSupport LoggerDynamicMBean String ObjectName decl_stmt java.lang.String = decl_stmt ObjectName = try decl_stmt org.apache.log4j.jmx.LoggerDynamicMBean = new = new if ! decl_stmt NotificationFilterSupport = new call NotificationFilterSupport.enableType() call NotificationFilterSupport.enableType() call NotificationFilterSupport.enableType() call NotificationFilterSupport.enableType() call NotificationFilterSupport.enableType() + call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + call NotificationBroadcasterSupport.addNotificationListener() call NotificationBroadcasterSupport.addNotificationListener() call NotificationBroadcasterSupport.addNotificationListener() call NotificationBroadcasterSupport.addNotificationListener() call NotificationBroadcasterSupport.addNotificationListener() call java.util.Vector.add(int,E) call java.util.Vector.add(int,E) call java.util.Vector.add(int,E) call java.util.Vector.add(int,E) call java.util.Vector.add(int,E) new + + + catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + return public public call NotificationBroadcasterSupport.addNotificationListener() call NotificationBroadcasterSupport.addNotificationListener() call NotificationBroadcasterSupport.addNotificationListener() call NotificationBroadcasterSupport.addNotificationListener() call NotificationBroadcasterSupport.addNotificationListener() protected protected return decl MBeanAttributeInfo public public decl_stmt javax.management.MBeanAttributeInfo = new call java.util.Vector.size() call java.util.Vector.size() call java.util.Vector.size() call java.util.Vector.size() call java.util.Vector.size() call java.util.Vector.toArray() call java.util.Vector.toArray() call java.util.Vector.toArray() call java.util.Vector.toArray() call java.util.Vector.toArray() return new new public public return call NotificationBroadcasterSupport.getNotificationInfo() call NotificationBroadcasterSupport.getNotificationInfo() call NotificationBroadcasterSupport.getNotificationInfo() call NotificationBroadcasterSupport.getNotificationInfo() call NotificationBroadcasterSupport.getNotificationInfo() public public throws if == throw new new + if return else throw new new + + + int String public public throws if == throw new new + + call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + if return call org.apache.log4j.spi.LoggerRepository.getThreshold() call org.apache.log4j.spi.LoggerRepository.getThreshold() call org.apache.log4j.spi.LoggerRepository.getThreshold() call org.apache.log4j.spi.LoggerRepository.getThreshold() call org.apache.log4j.spi.LoggerRepository.getThreshold() else if decl_stmt int = decl_stmt java.lang.String = if > = + + + try return new + catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + throw new + + + Notification public public call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + + decl_stmt javax.management.Notification = new + call javax.management.Notification.setUserData(Object) call javax.management.Notification.setUserData(Object) call javax.management.Notification.setUserData(Object) call javax.management.Notification.setUserData(Object) call javax.management.Notification.setUserData(Object) call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call NotificationBroadcasterSupport.sendNotification() call NotificationBroadcasterSupport.sendNotification() call NotificationBroadcasterSupport.sendNotification() call NotificationBroadcasterSupport.sendNotification() call NotificationBroadcasterSupport.sendNotification() public public call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + + Logger public public call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call LoggerRepository.addHierarchyEventListener() call LoggerRepository.addHierarchyEventListener() call LoggerRepository.addHierarchyEventListener() call LoggerRepository.addHierarchyEventListener() call LoggerRepository.addHierarchyEventListener() decl_stmt org.apache.log4j.Logger = call org.apache.log4j.spi.LoggerRepository.getRootLogger() call org.apache.log4j.spi.LoggerRepository.getRootLogger() call org.apache.log4j.spi.LoggerRepository.getRootLogger() call org.apache.log4j.spi.LoggerRepository.getRootLogger() call org.apache.log4j.spi.LoggerRepository.getRootLogger() public public throws call NotificationBroadcasterSupport.removeNotificationListener() call NotificationBroadcasterSupport.removeNotificationListener() call NotificationBroadcasterSupport.removeNotificationListener() call NotificationBroadcasterSupport.removeNotificationListener() call NotificationBroadcasterSupport.removeNotificationListener() String Object Level public public throws if == throw new new + + decl_stmt java.lang.String = decl_stmt java.lang.Object = if == throw new new + + if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) decl_stmt org.apache.log4j.Level = call org.apache.log4j.spi.LoggerRepository.getThreshold() call org.apache.log4j.spi.LoggerRepository.getThreshold() call org.apache.log4j.spi.LoggerRepository.getThreshold() call org.apache.log4j.spi.LoggerRepository.getThreshold() call org.apache.log4j.spi.LoggerRepository.getThreshold() call org.apache.log4j.spi.LoggerRepository.setThreshold(Level) call org.apache.log4j.spi.LoggerRepository.setThreshold(Level) call org.apache.log4j.spi.LoggerRepository.setThreshold(Level) call org.apache.log4j.spi.LoggerRepository.setThreshold(Level) call org.apache.log4j.spi.LoggerRepository.setThreshold(Level)