org.apache.log4j.net org.apache.log4j.AppenderSkeleton import org.apache.log4j.helpers.LogLog import org.apache.log4j.spi.LoggingEvent import java.io.IOException import java.io.PrintWriter import java.io.InterruptedIOException import java.net.ServerSocket import java.net.Socket import java.util.Enumeration import java.util.Iterator import java.util.Vector import class org.apache.log4j.net.TelnetAppender super super extends SocketHandler int String public public return public public try = new call SocketHandler.start() call SocketHandler.start() call SocketHandler.start() call SocketHandler.start() call SocketHandler.start() catch catch catch public public return public public = public public if != call java.util.logging.SocketHandler.close() call java.util.logging.SocketHandler.close() call java.util.logging.SocketHandler.close() call java.util.logging.SocketHandler.close() call java.util.logging.SocketHandler.close() try call SocketHandler.join() call SocketHandler.join() call SocketHandler.join() call SocketHandler.join() call SocketHandler.join() catch decl String StringBuffer protected protected if != call SocketHandler.send() call SocketHandler.send() call SocketHandler.send() call SocketHandler.send() call SocketHandler.send() if decl_stmt java.lang.String = if != decl_stmt java.lang.StringBuffer = new for = < ++ call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call SocketHandler.send() call SocketHandler.send() call SocketHandler.send() call SocketHandler.send() call SocketHandler.send() call java.lang.StringBuffer.toString() call java.lang.StringBuffer.toString() call java.lang.StringBuffer.toString() call java.lang.StringBuffer.toString() call java.lang.StringBuffer.toString() public public public public synchronized for = try catch catch catch try catch catch catch PrintWriter Iterator public synchronized public synchronized final final decl_stmt java.util.Iterator = for = call java.util.Iterator.next() call java.util.Iterator.next() call java.util.Iterator.next() call java.util.Iterator.next() call java.util.Iterator.next() decl_stmt PrintWriter = call PrintWriter.print() call PrintWriter.print() call PrintWriter.print() call PrintWriter.print() call PrintWriter.print() if call PrintWriter.checkError() call PrintWriter.checkError() call PrintWriter.checkError() call PrintWriter.checkError() call PrintWriter.checkError() call java.util.Iterator.remove() call java.util.Iterator.remove() call java.util.Iterator.remove() call java.util.Iterator.remove() call java.util.Iterator.remove() PrintWriter Socket public public while ! try decl_stmt java.net.Socket = decl_stmt PrintWriter = new call java.net.Socket.getOutputStream() call java.net.Socket.getOutputStream() call java.net.Socket.getOutputStream() call java.net.Socket.getOutputStream() call java.net.Socket.getOutputStream() if < synchronized call PrintWriter.print() call PrintWriter.print() call PrintWriter.print() call PrintWriter.print() call PrintWriter.print() + + + + call PrintWriter.flush() call PrintWriter.flush() call PrintWriter.flush() call PrintWriter.flush() call PrintWriter.flush() else call PrintWriter.print() call PrintWriter.print() call PrintWriter.print() call PrintWriter.print() call PrintWriter.print() + call PrintWriter.flush() call PrintWriter.flush() call PrintWriter.flush() call PrintWriter.flush() call PrintWriter.flush() call Socket.close() call Socket.close() call Socket.close() call Socket.close() call Socket.close() catch if instanceof || instanceof if ! break try catch catch