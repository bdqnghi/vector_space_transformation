org.apache.log4j.net java.io.File import java.net.InetAddress import java.net.ServerSocket import java.net.Socket import java.util.Hashtable import org.apache.log4j.Hierarchy import org.apache.log4j.Level import org.apache.log4j.LogManager import org.apache.log4j.Logger import org.apache.log4j.PropertyConfigurator import org.apache.log4j.spi.LoggerRepository import org.apache.log4j.spi.RootLogger import class org.apache.log4j.net.SocketServer LoggerRepository String Hashtable SocketServer String Logger int File InetAddress ServerSocket Socket LoggerRepository public static public static if == else try call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + decl_stmt java.net.ServerSocket = new while call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt java.net.Socket = call java.net.ServerSocket.accept() call java.net.ServerSocket.accept() call java.net.ServerSocket.accept() call java.net.ServerSocket.accept() call java.net.ServerSocket.accept() decl_stmt java.net.InetAddress = call java.net.Socket.getInetAddress() call java.net.Socket.getInetAddress() call java.net.Socket.getInetAddress() call java.net.Socket.getInetAddress() call java.net.Socket.getInetAddress() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + decl_stmt org.apache.log4j.spi.LoggerRepository = call SocketServer.hierarchyMap() call SocketServer.hierarchyMap() call SocketServer.hierarchyMap() call SocketServer.hierarchyMap() call SocketServer.hierarchyMap() call SocketServer.hierarchyMap() call SocketServer.hierarchyMap() call SocketServer.hierarchyMap() call SocketServer.hierarchyMap() if == = call org.apache.log4j.net.SocketServer.configureHierarchy(InetAddress) call org.apache.log4j.net.SocketServer.configureHierarchy(InetAddress) call org.apache.log4j.net.SocketServer.configureHierarchy(InetAddress) call org.apache.log4j.net.SocketServer.configureHierarchy(InetAddress) call org.apache.log4j.net.SocketServer.configureHierarchy(InetAddress) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) new new catch static static + + File static static try = catch + + decl_stmt File = new if ! call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() + + = new int Hierarchy String File String call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + decl_stmt java.lang.String = decl_stmt int = call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) if == - call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + return else decl_stmt java.lang.String = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) decl_stmt File = new + if call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() decl_stmt org.apache.log4j.Hierarchy = new new call java.util.Hashtable.put(K,V) call java.util.Hashtable.put(K,V) call java.util.Hashtable.put(K,V) call java.util.Hashtable.put(K,V) call java.util.Hashtable.put(K,V) new call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() return else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + return File if == decl_stmt File = new + if call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() = new new new call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + = return