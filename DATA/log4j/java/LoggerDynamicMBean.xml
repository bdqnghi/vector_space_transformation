org.apache.log4j.jmx org.apache.log4j.Appender import org.apache.log4j.Level import org.apache.log4j.Logger import org.apache.log4j.helpers.OptionConverter import javax.management.Attribute import javax.management.AttributeNotFoundException import javax.management.InvalidAttributeValueException import javax.management.JMException import javax.management.MBeanAttributeInfo import javax.management.MBeanConstructorInfo import javax.management.MBeanException import javax.management.MBeanInfo import javax.management.MBeanNotificationInfo import javax.management.MBeanOperationInfo import javax.management.MBeanParameterInfo import javax.management.MalformedObjectNameException import javax.management.Notification import javax.management.NotificationListener import javax.management.ObjectName import javax.management.ReflectionException import javax.management.RuntimeOperationsException import java.lang.reflect.Constructor import java.util.Enumeration import java.util.Vector import class org.apache.log4j.jmx.LoggerDynamicMBean super super extends super implements decl MBeanOperationInfo String Logger Vector decl MBeanConstructorInfo Logger String public public call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + decl Constructor decl MBeanParameterInfo private private decl_stmt java.lang.reflect.Constructor = = new call java.util.Vector.add(int,E) call java.util.Vector.add(int,E) call java.util.Vector.add(int,E) call java.util.Vector.add(int,E) call java.util.Vector.add(int,E) new call java.util.Vector.add(int,E) call java.util.Vector.add(int,E) call java.util.Vector.add(int,E) call java.util.Vector.add(int,E) call java.util.Vector.add(int,E) new decl_stmt javax.management.MBeanParameterInfo = new = new = new = new protected protected return decl MBeanAttributeInfo MBeanInfo public public decl_stmt javax.management.MBeanAttributeInfo = new call java.util.Vector.size() call java.util.Vector.size() call java.util.Vector.size() call java.util.Vector.size() call java.util.Vector.size() call java.util.Vector.toArray() call java.util.Vector.toArray() call java.util.Vector.toArray() call java.util.Vector.toArray() call java.util.Vector.toArray() decl_stmt MBeanInfo = new new return public public throws if return return Level public public throws if == throw new new + + if return call java.util.logging.Logger.getName() call java.util.logging.Logger.getName() call java.util.logging.Logger.getName() call java.util.logging.Logger.getName() call java.util.logging.Logger.getName() else if decl_stmt org.apache.log4j.Level = call java.util.logging.Logger.getLevel() call java.util.logging.Logger.getLevel() call java.util.logging.Logger.getLevel() call java.util.logging.Logger.getLevel() call java.util.logging.Logger.getLevel() if == return else return call java.util.logging.Level.toString() call java.util.logging.Level.toString() call java.util.logging.Level.toString() call java.util.logging.Level.toString() call java.util.logging.Level.toString() else if try return new + catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + throw new + + + Appender call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + + decl_stmt org.apache.log4j.Appender = call org.apache.log4j.Appender.setName(String) call org.apache.log4j.Appender.setName(String) call org.apache.log4j.Appender.setName(String) call org.apache.log4j.Appender.setName(String) call org.apache.log4j.Appender.setName(String) call Logger.addAppender() call Logger.addAppender() call Logger.addAppender() call Logger.addAppender() call Logger.addAppender() Level String String Object public public throws if == throw new new + + decl_stmt java.lang.String = decl_stmt java.lang.Object = if == throw new new + + if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if instanceof decl_stmt java.lang.String = decl_stmt org.apache.log4j.Level = call java.util.logging.Logger.getLevel() call java.util.logging.Logger.getLevel() call java.util.logging.Logger.getLevel() call java.util.logging.Logger.getLevel() call java.util.logging.Logger.getLevel() if call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) = else = call java.util.logging.Logger.setLevel(Level) call java.util.logging.Logger.setLevel(Level) call java.util.logging.Logger.setLevel(Level) call java.util.logging.Logger.setLevel(Level) call java.util.logging.Logger.setLevel(Level) else throw new + + + Appender Enumeration decl_stmt java.util.Enumeration = call Logger.getAllAppenders() call Logger.getAllAppenders() call Logger.getAllAppenders() call Logger.getAllAppenders() call Logger.getAllAppenders() while call Enumeration.hasMoreElements() call Enumeration.hasMoreElements() call Enumeration.hasMoreElements() call Enumeration.hasMoreElements() call Enumeration.hasMoreElements() decl_stmt org.apache.log4j.Appender = call java.util.Enumeration.nextElement() call java.util.Enumeration.nextElement() call java.util.Enumeration.nextElement() call java.util.Enumeration.nextElement() call java.util.Enumeration.nextElement() String ObjectName AppenderDynamicMBean decl_stmt java.lang.String = call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + decl_stmt ObjectName = try decl_stmt org.apache.log4j.jmx.AppenderDynamicMBean = new = new if ! call java.util.Vector.add(int,E) call java.util.Vector.add(int,E) call java.util.Vector.add(int,E) call java.util.Vector.add(int,E) call java.util.Vector.add(int,E) new + + + catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + public public