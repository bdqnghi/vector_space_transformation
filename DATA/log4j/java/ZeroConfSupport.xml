org.apache.log4j.net java.lang.reflect.Constructor import java.lang.reflect.InvocationTargetException import java.lang.reflect.Method import java.util.HashMap import java.util.Hashtable import java.util.Map import org.apache.log4j.helpers.LogLog import class org.apache.log4j.net.ZeroConfSupport Class Class Object Object private static private static try return call java.lang.Class.newInstance() call java.lang.Class.newInstance() call java.lang.Class.newInstance() call java.lang.Class.newInstance() call java.lang.Class.newInstance() catch catch return Method private static private static try decl_stmt com.sun.jdi.Method = call Class.getMethod() call Class.getMethod() call Class.getMethod() call Class.getMethod() call Class.getMethod() return call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) catch catch catch return Hashtable decl Class decl Object Object Constructor private private decl_stmt java.util.Hashtable = new try decl_stmt java.lang.Class = new = = = = = = decl_stmt java.lang.reflect.Constructor = call Class.getConstructor() call Class.getConstructor() call Class.getConstructor() call Class.getConstructor() call Class.getConstructor() decl_stmt java.lang.Object = new = = = new = new = new = decl_stmt java.lang.Object = call java.lang.reflect.Constructor.newInstance(Object) call java.lang.reflect.Constructor.newInstance(Object) call java.lang.reflect.Constructor.newInstance(Object) call java.lang.reflect.Constructor.newInstance(Object) call java.lang.reflect.Constructor.newInstance(Object) + return catch catch catch catch return decl Class decl Object Method Object private private try decl_stmt java.lang.Class = new = = = = = = decl_stmt com.sun.jdi.Method = call Class.getMethod() call Class.getMethod() call Class.getMethod() call Class.getMethod() call Class.getMethod() decl_stmt java.lang.Object = new = = = new = new = new = decl_stmt java.lang.Object = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) + return catch catch catch return Method public public try decl_stmt com.sun.jdi.Method = call Class.getMethod() call Class.getMethod() call Class.getMethod() call Class.getMethod() call Class.getMethod() new call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) new + catch catch catch Method public public try decl_stmt com.sun.jdi.Method = call Class.getMethod() call Class.getMethod() call Class.getMethod() call Class.getMethod() call Class.getMethod() new call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) new + catch catch catch boolean private static private static try = = catch decl_stmt boolean = try call Class.getMethod() call Class.getMethod() call Class.getMethod() call Class.getMethod() call Class.getMethod() = catch if return else return public static public static return