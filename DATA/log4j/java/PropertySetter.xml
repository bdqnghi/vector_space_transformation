org.apache.log4j.config org.apache.log4j.Appender import org.apache.log4j.Level import org.apache.log4j.Priority import org.apache.log4j.helpers.LogLog import org.apache.log4j.helpers.OptionConverter import org.apache.log4j.spi.OptionHandler import org.apache.log4j.spi.ErrorHandler import java.beans.BeanInfo import java.beans.IntrospectionException import java.beans.Introspector import java.beans.PropertyDescriptor import java.io.InterruptedIOException import java.lang.reflect.InvocationTargetException import java.lang.reflect.Method import java.util.Enumeration import java.util.Properties import class org.apache.log4j.config.PropertySetter Object decl PropertyDescriptor BeanInfo protected protected try decl_stmt java.beans.BeanInfo = call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() = call java.beans.BeanInfo.getPropertyDescriptors() call java.beans.BeanInfo.getPropertyDescriptors() call java.beans.BeanInfo.getPropertyDescriptors() call java.beans.BeanInfo.getPropertyDescriptors() call java.beans.BeanInfo.getPropertyDescriptors() catch + + + = new public static public static new OptionHandler String PropertyDescriptor int String PropertySetter public public decl_stmt int = for = decl_stmt java.lang.String = if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) if call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) + > continue decl_stmt java.lang.String = = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) if || && instanceof continue decl_stmt java.beans.PropertyDescriptor = if != && call java.beans.PropertyDescriptor.getPropertyType() call java.beans.PropertyDescriptor.getPropertyType() call java.beans.PropertyDescriptor.getPropertyType() call java.beans.PropertyDescriptor.getPropertyType() call java.beans.PropertyDescriptor.getPropertyType() && call java.beans.PropertyDescriptor.getWriteMethod() call java.beans.PropertyDescriptor.getWriteMethod() call java.beans.PropertyDescriptor.getWriteMethod() call java.beans.PropertyDescriptor.getWriteMethod() call java.beans.PropertyDescriptor.getWriteMethod() != decl_stmt org.apache.log4j.spi.OptionHandler = + call java.beans.PropertyDescriptor.getPropertyType() call java.beans.PropertyDescriptor.getPropertyType() call java.beans.PropertyDescriptor.getPropertyType() call java.beans.PropertyDescriptor.getPropertyType() call java.beans.PropertyDescriptor.getPropertyType() decl_stmt org.apache.log4j.config.PropertySetter = new call org.apache.log4j.config.PropertySetter.setProperties(Properties,String) call org.apache.log4j.config.PropertySetter.setProperties(Properties,String) call org.apache.log4j.config.PropertySetter.setProperties(Properties,String) call org.apache.log4j.config.PropertySetter.setProperties(Properties,String) call org.apache.log4j.config.PropertySetter.setProperties(Properties,String) + + try call java.beans.PropertyDescriptor.getWriteMethod() call java.beans.PropertyDescriptor.getWriteMethod() call java.beans.PropertyDescriptor.getWriteMethod() call java.beans.PropertyDescriptor.getWriteMethod() call java.beans.PropertyDescriptor.getWriteMethod() new catch + + + + catch if instanceof || instanceof + + + + catch + + + + continue PropertyDescriptor public public if == return = decl_stmt java.beans.PropertyDescriptor = if == + + + call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() + else try catch + + + + decl Class Object Method public public throws decl_stmt com.sun.jdi.Method = if == throw new + + decl_stmt java.lang.Class = call com.sun.jdi.Method.getParameterTypes() call com.sun.jdi.Method.getParameterTypes() call com.sun.jdi.Method.getParameterTypes() call com.sun.jdi.Method.getParameterTypes() call com.sun.jdi.Method.getParameterTypes() if != throw new decl_stmt java.lang.Object try = catch throw new + + + if == throw new + + + + + + try call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) new catch throw new catch if instanceof || instanceof throw new catch throw new String protected protected if == return decl_stmt java.lang.String = if return else if return new else if return new else if if return else if return else if return else if return return protected protected if == for = < ++ if return return public public if instanceof