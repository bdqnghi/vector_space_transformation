org.apache.log4j java.io.File import java.io.FileInputStream import java.io.FileOutputStream import java.io.FileWriter import java.io.IOException import java.net.URL import java.util.Properties import java.util.zip.ZipEntry import java.util.zip.ZipOutputStream import junit.framework.TestCase import org.apache.log4j.spi.Filter import org.apache.log4j.spi.LoggingEvent import org.apache.log4j.spi.OptionHandler import org.apache.log4j.spi.ThrowableRenderer import org.apache.log4j.spi.ThrowableRendererSupport import org.apache.log4j.varia.LevelRangeFilter import class org.apache.log4j.PropertyConfiguratorTest super super extends FileWriter File String public public throws decl_stmt java.lang.String = decl_stmt FileWriter = new call FileWriter.write() call FileWriter.write() call FileWriter.write() call FileWriter.write() call FileWriter.write() call FileWriter.close() call FileWriter.close() call FileWriter.close() call FileWriter.close() call FileWriter.close() decl_stmt File = new call File.delete() call File.delete() call File.delete() call File.delete() call File.delete() call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() URL FileWriter File public public throws decl_stmt File = new decl_stmt FileWriter = new call FileWriter.write() call FileWriter.write() call FileWriter.write() call FileWriter.write() call FileWriter.write() call FileWriter.close() call FileWriter.close() call FileWriter.close() call FileWriter.close() call FileWriter.close() decl_stmt java.net.URL = call File.toURL() call File.toURL() call File.toURL() call File.toURL() call File.toURL() call File.delete() call File.delete() call File.delete() call File.delete() call File.delete() call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() URL FileWriter File public public throws decl_stmt File = new decl_stmt FileWriter = new call FileWriter.write() call FileWriter.write() call FileWriter.write() call FileWriter.write() call FileWriter.write() call FileWriter.close() call FileWriter.close() call FileWriter.close() call FileWriter.close() call FileWriter.close() decl_stmt java.net.URL = call File.toURL() call File.toURL() call File.toURL() call File.toURL() call File.toURL() call File.delete() call File.delete() call File.delete() call File.delete() call File.delete() call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() File FileInputStream public public throws decl_stmt File = new call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() decl_stmt FileInputStream = new try finally call FileInputStream.close() call FileInputStream.close() call FileInputStream.close() call FileInputStream.close() call FileInputStream.close() FixedWindowRollingPolicy LevelRangeFilter RollingFileAppender FilterBasedTriggeringPolicy public public decl_stmt org.apache.log4j.RollingFileAppender = decl_stmt FixedWindowRollingPolicy = call RollingFileAppender.getRollingPolicy() call RollingFileAppender.getRollingPolicy() call RollingFileAppender.getRollingPolicy() call RollingFileAppender.getRollingPolicy() call RollingFileAppender.getRollingPolicy() call FixedWindowRollingPolicy.getActiveFileName() call FixedWindowRollingPolicy.getActiveFileName() call FixedWindowRollingPolicy.getActiveFileName() call FixedWindowRollingPolicy.getActiveFileName() call FixedWindowRollingPolicy.getActiveFileName() call FixedWindowRollingPolicy.getFileNamePattern() call FixedWindowRollingPolicy.getFileNamePattern() call FixedWindowRollingPolicy.getFileNamePattern() call FixedWindowRollingPolicy.getFileNamePattern() call FixedWindowRollingPolicy.getFileNamePattern() call FixedWindowRollingPolicy.getMinIndex() call FixedWindowRollingPolicy.getMinIndex() call FixedWindowRollingPolicy.getMinIndex() call FixedWindowRollingPolicy.getMinIndex() call FixedWindowRollingPolicy.getMinIndex() call FixedWindowRollingPolicy.isActivated() call FixedWindowRollingPolicy.isActivated() call FixedWindowRollingPolicy.isActivated() call FixedWindowRollingPolicy.isActivated() call FixedWindowRollingPolicy.isActivated() decl_stmt FilterBasedTriggeringPolicy = call RollingFileAppender.getTriggeringPolicy() call RollingFileAppender.getTriggeringPolicy() call RollingFileAppender.getTriggeringPolicy() call RollingFileAppender.getTriggeringPolicy() call RollingFileAppender.getTriggeringPolicy() decl_stmt org.apache.log4j.varia.LevelRangeFilter = call FilterBasedTriggeringPolicy.getFilter() call FilterBasedTriggeringPolicy.getFilter() call FilterBasedTriggeringPolicy.getFilter() call FilterBasedTriggeringPolicy.getFilter() call FilterBasedTriggeringPolicy.getFilter() call org.apache.log4j.varia.LevelRangeFilter.getLevelMin() call org.apache.log4j.varia.LevelRangeFilter.getLevelMin() call org.apache.log4j.varia.LevelRangeFilter.getLevelMin() call org.apache.log4j.varia.LevelRangeFilter.getLevelMin() call org.apache.log4j.varia.LevelRangeFilter.getLevelMin() URL ZipOutputStream File File public public throws decl_stmt File = new call File.mkdirs() call File.mkdirs() call File.mkdirs() call File.mkdirs() call File.mkdirs() decl_stmt File = new decl_stmt java.util.zip.ZipOutputStream = new new call java.util.zip.ZipOutputStream.putNextEntry(ZipEntry) call java.util.zip.ZipOutputStream.putNextEntry(ZipEntry) call java.util.zip.ZipOutputStream.putNextEntry(ZipEntry) call java.util.zip.ZipOutputStream.putNextEntry(ZipEntry) call java.util.zip.ZipOutputStream.putNextEntry(ZipEntry) new call java.util.zip.ZipOutputStream.write(byte,int,int) call java.util.zip.ZipOutputStream.write(byte,int,int) call java.util.zip.ZipOutputStream.write(byte,int,int) call java.util.zip.ZipOutputStream.write(byte,int,int) call java.util.zip.ZipOutputStream.write(byte,int,int) call java.util.zip.ZipOutputStream.closeEntry() call java.util.zip.ZipOutputStream.closeEntry() call java.util.zip.ZipOutputStream.closeEntry() call java.util.zip.ZipOutputStream.closeEntry() call java.util.zip.ZipOutputStream.closeEntry() call java.util.zip.ZipOutputStream.close() call java.util.zip.ZipOutputStream.close() call java.util.zip.ZipOutputStream.close() call java.util.zip.ZipOutputStream.close() call java.util.zip.ZipOutputStream.close() decl_stmt java.net.URL = new + call File.toURL() call File.toURL() call File.toURL() call File.toURL() call File.toURL() + + call File.delete() call File.delete() call File.delete() call File.delete() call File.delete() call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() VectorAppender Properties public public decl_stmt org.apache.log4j.VectorAppender = new call VectorAppender.setName() call VectorAppender.setName() call VectorAppender.setName() call VectorAppender.setName() call VectorAppender.setName() decl_stmt java.util.Properties = new call Properties.put() call Properties.put() call Properties.put() call Properties.put() call Properties.put() public public = public final public final return public public return public public final final = public public return public public final final = public public return public public final final = public public = public final public final return public public final final = public public return public public return public public final final = public public return public public final final = public public return public public = public public public public return public public final final public public try finally public public = public public return public public final final return new public public = public public return ThrowableRendererSupport MockThrowableRenderer Properties public public decl_stmt java.util.Properties = new call Properties.put() call Properties.put() call Properties.put() call Properties.put() call Properties.put() call Properties.put() call Properties.put() call Properties.put() call Properties.put() call Properties.put() decl_stmt org.apache.log4j.spi.ThrowableRendererSupport = decl_stmt MockThrowableRenderer = call ThrowableRendererSupport.getThrowableRenderer() call ThrowableRendererSupport.getThrowableRenderer() call ThrowableRendererSupport.getThrowableRenderer() call ThrowableRendererSupport.getThrowableRenderer() call ThrowableRendererSupport.getThrowableRenderer() call MockThrowableRenderer.isActivated() call MockThrowableRenderer.isActivated() call MockThrowableRenderer.isActivated() call MockThrowableRenderer.isActivated() call MockThrowableRenderer.isActivated() call MockThrowableRenderer.getShowVersion() call MockThrowableRenderer.getShowVersion() call MockThrowableRenderer.getShowVersion() call MockThrowableRenderer.getShowVersion() call MockThrowableRenderer.getShowVersion()