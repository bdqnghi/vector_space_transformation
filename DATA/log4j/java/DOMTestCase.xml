org.apache.log4j.xml junit.framework.TestCase import org.apache.log4j.Appender import org.apache.log4j.FileAppender import org.apache.log4j.Level import org.apache.log4j.LogManager import org.apache.log4j.Logger import org.apache.log4j.VectorAppender import org.apache.log4j.spi.ErrorHandler import org.apache.log4j.spi.LoggerFactory import org.apache.log4j.spi.LoggingEvent import org.apache.log4j.spi.ThrowableRenderer import org.apache.log4j.spi.OptionHandler import org.apache.log4j.spi.ThrowableRendererSupport import org.apache.log4j.util.Compare import org.apache.log4j.util.ControlFilter import org.apache.log4j.util.Filter import org.apache.log4j.util.ISO8601Filter import org.apache.log4j.util.JunitTestRunnerFilter import org.apache.log4j.util.LineNumberFilter import org.apache.log4j.util.SunReflectFilter import org.apache.log4j.util.Transformer import java.io.File import java.io.FileInputStream import java.io.FileOutputStream import java.io.IOException import java.io.InputStream import java.net.URL import java.util.zip.ZipEntry import java.util.zip.ZipOutputStream import class org.apache.log4j.xml.DOMTestCase super super extends String String String String String String String String String String Logger Logger String String public public = = public public call Logger.getLoggerRepository() call Logger.getLoggerRepository() call Logger.getLoggerRepository() call Logger.getLoggerRepository() call Logger.getLoggerRepository() ControlFilter ControlFilter public public throws decl_stmt org.apache.log4j.util.ControlFilter = new new decl_stmt org.apache.log4j.util.ControlFilter = new new new new new new new new new new new ControlFilter ControlFilter public public throws decl_stmt org.apache.log4j.util.ControlFilter = new new decl_stmt org.apache.log4j.util.ControlFilter = new new + + new new new new + + new new new new new + + int String Exception decl_stmt java.lang.String = decl_stmt int = - call org.apache.log4j.Logger.trace(Object) call org.apache.log4j.Logger.trace(Object) call org.apache.log4j.Logger.trace(Object) call org.apache.log4j.Logger.trace(Object) call org.apache.log4j.Logger.trace(Object) + ++ call org.apache.log4j.Logger.trace(Object) call org.apache.log4j.Logger.trace(Object) call org.apache.log4j.Logger.trace(Object) call org.apache.log4j.Logger.trace(Object) call org.apache.log4j.Logger.trace(Object) + call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + ++ call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + ++ call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + ++ call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + ++ call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) + ++ call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) + decl_stmt Exception = new call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + ++ call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + ++ call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + Logger public public final final decl_stmt org.apache.log4j.Logger = new return public public final final = public public public public final final public public public public public public public public public public Logger Logger public public decl_stmt org.apache.log4j.Logger = instanceof decl_stmt org.apache.log4j.Logger = instanceof Logger Logger public public decl_stmt org.apache.log4j.Logger = instanceof decl_stmt org.apache.log4j.Logger = instanceof Logger Logger public public decl_stmt org.apache.log4j.Logger = instanceof decl_stmt org.apache.log4j.Logger = instanceof VectorAppender public public throws decl_stmt org.apache.log4j.VectorAppender = new call VectorAppender.setName() call VectorAppender.setName() call VectorAppender.setName() call VectorAppender.setName() call VectorAppender.setName() public public throws FileAppender String DOMConfigurator public public decl_stmt org.apache.log4j.xml.DOMConfigurator = new protected protected final final if return return call org.apache.log4j.xml.DOMConfigurator.doConfigure(Reader,LoggerRepository) call org.apache.log4j.xml.DOMConfigurator.doConfigure(Reader,LoggerRepository) call org.apache.log4j.xml.DOMConfigurator.doConfigure(Reader,LoggerRepository) call org.apache.log4j.xml.DOMConfigurator.doConfigure(Reader,LoggerRepository) call org.apache.log4j.xml.DOMConfigurator.doConfigure(Reader,LoggerRepository) decl_stmt org.apache.log4j.FileAppender = decl_stmt java.lang.String = call org.apache.log4j.FileAppender.getFile() call org.apache.log4j.FileAppender.getFile() call org.apache.log4j.FileAppender.getFile() call org.apache.log4j.FileAppender.getFile() call org.apache.log4j.FileAppender.getFile() protected protected final final if return return public public = public public return public public final final return new public public = public public return ThrowableRendererSupport MockThrowableRenderer public public decl_stmt org.apache.log4j.spi.ThrowableRendererSupport = decl_stmt MockThrowableRenderer = call ThrowableRendererSupport.getThrowableRenderer() call ThrowableRendererSupport.getThrowableRenderer() call ThrowableRendererSupport.getThrowableRenderer() call ThrowableRendererSupport.getThrowableRenderer() call ThrowableRendererSupport.getThrowableRenderer() call MockThrowableRenderer.isActivated() call MockThrowableRenderer.isActivated() call MockThrowableRenderer.isActivated() call MockThrowableRenderer.isActivated() call MockThrowableRenderer.isActivated() call MockThrowableRenderer.getShowVersion() call MockThrowableRenderer.getShowVersion() call MockThrowableRenderer.getShowVersion() call MockThrowableRenderer.getShowVersion() call MockThrowableRenderer.getShowVersion() URL InputStream int ZipOutputStream File File decl byte File public public throws decl_stmt File = new call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() decl_stmt java.io.InputStream = new decl_stmt File = new call File.mkdirs() call File.mkdirs() call File.mkdirs() call File.mkdirs() call File.mkdirs() decl_stmt File = new decl_stmt java.util.zip.ZipOutputStream = new new call java.util.zip.ZipOutputStream.putNextEntry(ZipEntry) call java.util.zip.ZipOutputStream.putNextEntry(ZipEntry) call java.util.zip.ZipOutputStream.putNextEntry(ZipEntry) call java.util.zip.ZipOutputStream.putNextEntry(ZipEntry) call java.util.zip.ZipOutputStream.putNextEntry(ZipEntry) new decl_stmt int decl_stmt byte = new while = call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) > call java.util.zip.ZipOutputStream.write(byte,int,int) call java.util.zip.ZipOutputStream.write(byte,int,int) call java.util.zip.ZipOutputStream.write(byte,int,int) call java.util.zip.ZipOutputStream.write(byte,int,int) call java.util.zip.ZipOutputStream.write(byte,int,int) call java.util.zip.ZipOutputStream.closeEntry() call java.util.zip.ZipOutputStream.closeEntry() call java.util.zip.ZipOutputStream.closeEntry() call java.util.zip.ZipOutputStream.closeEntry() call java.util.zip.ZipOutputStream.closeEntry() call java.util.zip.ZipOutputStream.close() call java.util.zip.ZipOutputStream.close() call java.util.zip.ZipOutputStream.close() call java.util.zip.ZipOutputStream.close() call java.util.zip.ZipOutputStream.close() decl_stmt java.net.URL = new + call File.toURL() call File.toURL() call File.toURL() call File.toURL() call File.toURL() + call File.delete() call File.delete() call File.delete() call File.delete() call File.delete() call File.exists() call File.exists() call File.exists() call File.exists() call File.exists()