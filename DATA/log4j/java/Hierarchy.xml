org.apache.log4j java.util.Hashtable import java.util.Enumeration import java.util.Vector import org.apache.log4j.spi.LoggerFactory import org.apache.log4j.spi.HierarchyEventListener import org.apache.log4j.spi.LoggerRepository import org.apache.log4j.spi.RendererSupport import org.apache.log4j.or.RendererMap import org.apache.log4j.or.ObjectRenderer import org.apache.log4j.helpers.LogLog import org.apache.log4j.spi.ThrowableRendererSupport import org.apache.log4j.spi.ThrowableRenderer import class org.apache.log4j.Hierarchy super super implements boolean boolean Hashtable Level Vector ThrowableRenderer RendererMap int LoggerFactory Logger public public call org.apache.log4j.or.RendererMap.put(Class,ObjectRenderer) call org.apache.log4j.or.RendererMap.put(Class,ObjectRenderer) call org.apache.log4j.or.RendererMap.put(Class,ObjectRenderer) call org.apache.log4j.or.RendererMap.put(Class,ObjectRenderer) call org.apache.log4j.or.RendererMap.put(Class,ObjectRenderer) public public if call java.util.Vector.contains(Object) call java.util.Vector.contains(Object) call java.util.Vector.contains(Object) call java.util.Vector.contains(Object) call java.util.Vector.contains(Object) else call java.util.Vector.addElement(E) call java.util.Vector.addElement(E) call java.util.Vector.addElement(E) call java.util.Vector.addElement(E) call java.util.Vector.addElement(E) public public call java.util.Hashtable.clear() call java.util.Hashtable.clear() call java.util.Hashtable.clear() call java.util.Hashtable.clear() call java.util.Hashtable.clear() public public if ! + + = Object public public decl_stmt java.lang.Object = call java.util.Hashtable.get(Object) call java.util.Hashtable.get(Object) call java.util.Hashtable.get(Object) call java.util.Hashtable.get(Object) call java.util.Hashtable.get(Object) new if instanceof return else return Level public public decl_stmt org.apache.log4j.Level = if != else + + public public if != = = HierarchyEventListener int public public if != decl_stmt int = call java.util.Vector.size() call java.util.Vector.size() call java.util.Vector.size() call java.util.Vector.size() call java.util.Vector.size() decl_stmt org.apache.log4j.spi.HierarchyEventListener for = < ++ = call java.util.Vector.elementAt(int) call java.util.Vector.elementAt(int) call java.util.Vector.elementAt(int) call java.util.Vector.elementAt(int) call java.util.Vector.elementAt(int) call HierarchyEventListener.addAppenderEvent() call HierarchyEventListener.addAppenderEvent() call HierarchyEventListener.addAppenderEvent() call HierarchyEventListener.addAppenderEvent() call HierarchyEventListener.addAppenderEvent() HierarchyEventListener int if != decl_stmt int = call java.util.Vector.size() call java.util.Vector.size() call java.util.Vector.size() call java.util.Vector.size() call java.util.Vector.size() decl_stmt org.apache.log4j.spi.HierarchyEventListener for = < ++ = call java.util.Vector.elementAt(int) call java.util.Vector.elementAt(int) call java.util.Vector.elementAt(int) call java.util.Vector.elementAt(int) call java.util.Vector.elementAt(int) call org.apache.log4j.spi.HierarchyEventListener.removeAppenderEvent(Category,Appender) call org.apache.log4j.spi.HierarchyEventListener.removeAppenderEvent(Category,Appender) call org.apache.log4j.spi.HierarchyEventListener.removeAppenderEvent(Category,Appender) call org.apache.log4j.spi.HierarchyEventListener.removeAppenderEvent(Category,Appender) call org.apache.log4j.spi.HierarchyEventListener.removeAppenderEvent(Category,Appender) public public return public public return Logger Object CategoryKey public public decl_stmt org.apache.log4j.CategoryKey = new decl_stmt org.apache.log4j.Logger synchronized decl_stmt java.lang.Object = call java.util.Hashtable.get(Object) call java.util.Hashtable.get(Object) call java.util.Hashtable.get(Object) call java.util.Hashtable.get(Object) call java.util.Hashtable.get(Object) if == = call Logger.setHierarchy() call Logger.setHierarchy() call Logger.setHierarchy() call Logger.setHierarchy() call Logger.setHierarchy() call java.util.Hashtable.put(K,V) call java.util.Hashtable.put(K,V) call java.util.Hashtable.put(K,V) call java.util.Hashtable.put(K,V) call java.util.Hashtable.put(K,V) return else if instanceof return else if instanceof = call Logger.setHierarchy() call Logger.setHierarchy() call Logger.setHierarchy() call Logger.setHierarchy() call Logger.setHierarchy() call java.util.Hashtable.put(K,V) call java.util.Hashtable.put(K,V) call java.util.Hashtable.put(K,V) call java.util.Hashtable.put(K,V) call java.util.Hashtable.put(K,V) return else return Enumeration Object Vector public public decl_stmt java.util.Vector = new call java.util.Hashtable.size() call java.util.Hashtable.size() call java.util.Hashtable.size() call java.util.Hashtable.size() call java.util.Hashtable.size() decl_stmt java.util.Enumeration = call java.util.Hashtable.elements() call java.util.Hashtable.elements() call java.util.Hashtable.elements() call java.util.Hashtable.elements() call java.util.Hashtable.elements() while call Enumeration.hasMoreElements() call Enumeration.hasMoreElements() call Enumeration.hasMoreElements() call Enumeration.hasMoreElements() call Enumeration.hasMoreElements() decl_stmt java.lang.Object = call java.util.Enumeration.nextElement() call java.util.Enumeration.nextElement() call java.util.Enumeration.nextElement() call java.util.Enumeration.nextElement() call java.util.Enumeration.nextElement() if instanceof call java.util.Vector.addElement(E) call java.util.Vector.addElement(E) call java.util.Vector.addElement(E) call java.util.Vector.addElement(E) call java.util.Vector.addElement(E) return call java.util.Vector.elements() call java.util.Vector.elements() call java.util.Vector.elements() call java.util.Vector.elements() call java.util.Vector.elements() public public return public public return public public return public public return > public public Logger Enumeration public public call Logger.setResourceBundle() call Logger.setResourceBundle() call Logger.setResourceBundle() call Logger.setResourceBundle() call Logger.setResourceBundle() synchronized decl_stmt java.util.Enumeration = while call Enumeration.hasMoreElements() call Enumeration.hasMoreElements() call Enumeration.hasMoreElements() call Enumeration.hasMoreElements() call Enumeration.hasMoreElements() decl_stmt org.apache.log4j.Logger = call java.util.Enumeration.nextElement() call java.util.Enumeration.nextElement() call java.util.Enumeration.nextElement() call java.util.Enumeration.nextElement() call java.util.Enumeration.nextElement() call java.util.logging.Logger.setLevel(Level) call java.util.logging.Logger.setLevel(Level) call java.util.logging.Logger.setLevel(Level) call java.util.logging.Logger.setLevel(Level) call java.util.logging.Logger.setLevel(Level) call Logger.setAdditivity() call Logger.setAdditivity() call Logger.setAdditivity() call Logger.setAdditivity() call Logger.setAdditivity() call Logger.setResourceBundle() call Logger.setResourceBundle() call Logger.setResourceBundle() call Logger.setResourceBundle() call Logger.setResourceBundle() call RendererMap.clear() call RendererMap.clear() call RendererMap.clear() call RendererMap.clear() call RendererMap.clear() = public public public public call org.apache.log4j.or.RendererMap.put(Class,ObjectRenderer) call org.apache.log4j.or.RendererMap.put(Class,ObjectRenderer) call org.apache.log4j.or.RendererMap.put(Class,ObjectRenderer) call org.apache.log4j.or.RendererMap.put(Class,ObjectRenderer) call org.apache.log4j.or.RendererMap.put(Class,ObjectRenderer) public public final final = public public return Logger Enumeration Logger public public decl_stmt org.apache.log4j.Logger = call Logger.closeNestedAppenders() call Logger.closeNestedAppenders() call Logger.closeNestedAppenders() call Logger.closeNestedAppenders() call Logger.closeNestedAppenders() synchronized decl_stmt java.util.Enumeration = while call Enumeration.hasMoreElements() call Enumeration.hasMoreElements() call Enumeration.hasMoreElements() call Enumeration.hasMoreElements() call Enumeration.hasMoreElements() decl_stmt org.apache.log4j.Logger = call java.util.Enumeration.nextElement() call java.util.Enumeration.nextElement() call java.util.Enumeration.nextElement() call java.util.Enumeration.nextElement() call java.util.Enumeration.nextElement() call Logger.closeNestedAppenders() call Logger.closeNestedAppenders() call Logger.closeNestedAppenders() call Logger.closeNestedAppenders() call Logger.closeNestedAppenders() call Logger.removeAllAppenders() call Logger.removeAllAppenders() call Logger.removeAllAppenders() call Logger.removeAllAppenders() call Logger.removeAllAppenders() = while call Enumeration.hasMoreElements() call Enumeration.hasMoreElements() call Enumeration.hasMoreElements() call Enumeration.hasMoreElements() call Enumeration.hasMoreElements() decl_stmt org.apache.log4j.Logger = call java.util.Enumeration.nextElement() call java.util.Enumeration.nextElement() call java.util.Enumeration.nextElement() call java.util.Enumeration.nextElement() call java.util.Enumeration.nextElement() call Logger.removeAllAppenders() call Logger.removeAllAppenders() call Logger.removeAllAppenders() call Logger.removeAllAppenders() call Logger.removeAllAppenders() Exception String Object String int CategoryKey boolean ProvisionNode final private final private decl_stmt java.lang.String = decl_stmt int = call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() decl_stmt boolean = for = call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) - >= = call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) - decl_stmt java.lang.String = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) decl_stmt org.apache.log4j.CategoryKey = new decl_stmt java.lang.Object = call java.util.Hashtable.get(Object) call java.util.Hashtable.get(Object) call java.util.Hashtable.get(Object) call java.util.Hashtable.get(Object) call java.util.Hashtable.get(Object) if == decl_stmt ProvisionNode = new call java.util.Hashtable.put(K,V) call java.util.Hashtable.put(K,V) call java.util.Hashtable.put(K,V) call java.util.Hashtable.put(K,V) call java.util.Hashtable.put(K,V) else if instanceof = = break else if instanceof else decl_stmt Exception = new + call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() + call Exception.printStackTrace() call Exception.printStackTrace() call Exception.printStackTrace() call Exception.printStackTrace() call Exception.printStackTrace() if ! = int Logger final private final private decl_stmt int final final = for = < ++ decl_stmt org.apache.log4j.Logger = if ! call Logger.parent() call Logger.parent() call Logger.parent() call Logger.parent() call Logger.parent() call Logger.parent() call Logger.parent() call Logger.parent() call Logger.parent() call Logger.parent() call Logger.parent() call Logger.parent() call Logger.parent() call Logger.parent() call Logger.parent() call Logger.parent() call Logger.parent() = =