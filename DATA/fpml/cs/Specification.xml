HandCoded.Meta System using System.Collections.Generic using System.Configuration using System.IO using System.Text using System.Xml using HandCoded.Framework using HandCoded.Xml using log4net using class HandCoded.Meta.Specification decl List ILog decl Dictionary string public static public static return Release public static public static decl_stmt HandCoded.Meta.Release = return != : Release public static public static foreach in decl_stmt HandCoded.Meta.Release = if != return return return return public public return != public public foreach in if return return public public foreach in if return return SchemaRelease public public foreach in if is decl_stmt HandCoded.Meta.SchemaRelease = as if call SchemaRelease.Version() call SchemaRelease.Version() call SchemaRelease.Version() call SchemaRelease.Version() call SchemaRelease.Version() call SchemaRelease.Version() call SchemaRelease.Version() call SchemaRelease.Version() call SchemaRelease.Version() && call SchemaRelease.NamespaceUri() call SchemaRelease.NamespaceUri() call SchemaRelease.NamespaceUri() call SchemaRelease.NamespaceUri() call SchemaRelease.NamespaceUri() call SchemaRelease.NamespaceUri() call SchemaRelease.NamespaceUri() call SchemaRelease.NamespaceUri() call SchemaRelease.NamespaceUri() return return public public if != throw new call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() public public if != throw new call decl List.Remove() call decl List.Remove() call decl List.Remove() call decl List.Remove() call decl List.Remove() public override public override return call string.GetHashCode() call string.GetHashCode() call string.GetHashCode() call string.GetHashCode() call string.GetHashCode() public override public override return + + + string private static private static foreach in decl_stmt string = if != && call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return return Type string private static private static decl_stmt string = try decl_stmt System.Type = return call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) as catch call ILog.Fatal() call ILog.Fatal() call ILog.Fatal() call ILog.Fatal() call ILog.Fatal() + throw Type string private static private static decl_stmt string = try decl_stmt System.Type = return call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) as catch call ILog.Fatal() call ILog.Fatal() call ILog.Fatal() call ILog.Fatal() call ILog.Fatal() + throw StringBuilder bool private private decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt bool = foreach in if ! call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) = call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int)