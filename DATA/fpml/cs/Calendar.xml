HandCoded.Finance System using System.Collections.Generic using System.Configuration using System.IO using System.Xml using HandCoded.Framework using log4net using class HandCoded.Finance.Calendar ILog decl Dictionary string decl Calendar decl_stmt HandCoded.Finance.Calendar = new call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() return public static public static return call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() : return public override public override return + + + protected virtual protected virtual return + + int string int int int DateRoll XmlReader int RuleBasedCalendar Weekend int int private static private static decl_stmt HandCoded.Finance.RuleBasedCalendar = decl_stmt System.Xml.XmlReader = while call XmlReader.Read() call XmlReader.Read() call XmlReader.Read() call XmlReader.Read() call XmlReader.Read() switch case if call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() decl_stmt string = decl_stmt HandCoded.Finance.Weekend = if != && != = new else = else if call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() decl_stmt string = decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt HandCoded.Finance.DateRoll = if != && != && != call HandCoded.Finance.RuleBasedCalendar.AddRule(CalendarRule) call HandCoded.Finance.RuleBasedCalendar.AddRule(CalendarRule) call HandCoded.Finance.RuleBasedCalendar.AddRule(CalendarRule) call HandCoded.Finance.RuleBasedCalendar.AddRule(CalendarRule) call HandCoded.Finance.RuleBasedCalendar.AddRule(CalendarRule) new from else if call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() decl_stmt string = decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt int = if != && != && != && != call HandCoded.Finance.RuleBasedCalendar.AddRule(CalendarRule) call HandCoded.Finance.RuleBasedCalendar.AddRule(CalendarRule) call HandCoded.Finance.RuleBasedCalendar.AddRule(CalendarRule) call HandCoded.Finance.RuleBasedCalendar.AddRule(CalendarRule) call HandCoded.Finance.RuleBasedCalendar.AddRule(CalendarRule) new from else if call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() call XmlReader.LocalName() decl_stmt string = decl_stmt int = decl_stmt int = decl_stmt int = if != call HandCoded.Finance.RuleBasedCalendar.AddRule(CalendarRule) call HandCoded.Finance.RuleBasedCalendar.AddRule(CalendarRule) call HandCoded.Finance.RuleBasedCalendar.AddRule(CalendarRule) call HandCoded.Finance.RuleBasedCalendar.AddRule(CalendarRule) call HandCoded.Finance.RuleBasedCalendar.AddRule(CalendarRule) new from break call System.Xml.XmlReader.Close() call System.Xml.XmlReader.Close() call System.Xml.XmlReader.Close() call System.Xml.XmlReader.Close() call System.Xml.XmlReader.Close() private static private static if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return return private static private static if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return return private static private static if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return return