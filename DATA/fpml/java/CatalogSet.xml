com.handcoded.xml.resolver java.io.IOException import java.util.Vector import org.xml.sax.InputSource import org.xml.sax.SAXException import org.xml.sax.ext.EntityResolver2 import class com.handcoded.xml.resolver.CatalogSet super super implements decl Vector public public final final call decl Vector.addElement() call decl Vector.addElement() call decl Vector.addElement() call decl Vector.addElement() call decl Vector.addElement() public public final final call decl Vector.removeElement() call decl Vector.removeElement() call decl Vector.removeElement() call decl Vector.removeElement() call decl Vector.removeElement() InputSource public final public final final final final final throws decl_stmt InputSource = for = < call decl Vector.size() call decl Vector.size() call decl Vector.size() call decl Vector.size() call decl Vector.size() ++ if = call decl Vector.elementAt() call decl Vector.elementAt() call decl Vector.elementAt() call decl Vector.elementAt() call decl Vector.elementAt() != break return InputSource public public throws decl_stmt InputSource = for = < call decl Vector.size() call decl Vector.size() call decl Vector.size() call decl Vector.size() call decl Vector.size() ++ if = call decl Vector.elementAt() call decl Vector.elementAt() call decl Vector.elementAt() call decl Vector.elementAt() call decl Vector.elementAt() != break return InputSource public public throws decl_stmt InputSource = for = < call decl Vector.size() call decl Vector.size() call decl Vector.size() call decl Vector.size() call decl Vector.size() ++ if = call decl Vector.elementAt() call decl Vector.elementAt() call decl Vector.elementAt() call decl Vector.elementAt() call decl Vector.elementAt() != break return public public return + + + StringBuffer protected protected decl_stmt java.lang.StringBuffer = new call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) for = < call decl Vector.size() call decl Vector.size() call decl Vector.size() call decl Vector.size() call decl Vector.size() ++ if != call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call decl Vector.elementAt() call decl Vector.elementAt() call decl Vector.elementAt() call decl Vector.elementAt() call decl Vector.elementAt() call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) return call java.lang.StringBuffer.toString() call java.lang.StringBuffer.toString() call java.lang.StringBuffer.toString() call java.lang.StringBuffer.toString() call java.lang.StringBuffer.toString()