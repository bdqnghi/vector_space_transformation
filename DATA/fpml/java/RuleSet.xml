com.handcoded.validation java.util.Enumeration import java.util.Hashtable import java.util.logging.Level import java.util.logging.Logger import org.xml.sax.Attributes import org.xml.sax.InputSource import org.xml.sax.helpers.DefaultHandler import com.handcoded.framework.Application import com.handcoded.xml.NodeIndex import com.handcoded.xml.parser.SAXParser import class com.handcoded.validation.RuleSet super super extends decl Hashtable Logger String decl Hashtable RuleSet public static public static final final synchronized decl_stmt com.handcoded.validation.RuleSet = call decl Hashtable.get() call decl Hashtable.get() call decl Hashtable.get() call decl Hashtable.get() call decl Hashtable.get() if == = new return public final public final return public public call decl Hashtable.put() call decl Hashtable.put() call decl Hashtable.put() call decl Hashtable.put() call decl Hashtable.put() public public for < = public public return call decl Hashtable.remove() call decl Hashtable.remove() call decl Hashtable.remove() call decl Hashtable.remove() call decl Hashtable.remove() public public return public public return call decl Hashtable.size() call decl Hashtable.size() call decl Hashtable.size() call decl Hashtable.size() call decl Hashtable.size() public public return + + + Boolean decl Hashtable Rule boolean boolean Precondition protected protected decl_stmt boolean = decl_stmt java.util.Hashtable < = new < for < = call decl Hashtable.keys() call decl Hashtable.keys() call decl Hashtable.keys() call decl Hashtable.keys() call decl Hashtable.keys() decl_stmt com.handcoded.validation.Rule = call decl Hashtable.get() call decl Hashtable.get() call decl Hashtable.get() call decl Hashtable.get() call decl Hashtable.get() decl_stmt com.handcoded.validation.Precondition = call com.handcoded.validation.Rule.getPrecondition() call com.handcoded.validation.Rule.getPrecondition() call com.handcoded.validation.Rule.getPrecondition() call com.handcoded.validation.Rule.getPrecondition() call com.handcoded.validation.Rule.getPrecondition() decl_stmt java.lang.Boolean = call decl Hashtable.get() call decl Hashtable.get() call decl Hashtable.get() call decl Hashtable.get() call decl Hashtable.get() decl_stmt boolean if == = call com.handcoded.validation.Precondition.evaluate(NodeIndex,Hashtable) call com.handcoded.validation.Precondition.evaluate(NodeIndex,Hashtable) call com.handcoded.validation.Precondition.evaluate(NodeIndex,Hashtable) call com.handcoded.validation.Precondition.evaluate(NodeIndex,Hashtable) call com.handcoded.validation.Precondition.evaluate(NodeIndex,Hashtable) call decl Hashtable.put() call decl Hashtable.put() call decl Hashtable.put() call decl Hashtable.put() call decl Hashtable.put() : else = == if &= call Rule.validate() call Rule.validate() call Rule.validate() call Rule.validate() call Rule.validate() return StringBuffer protected protected decl_stmt java.lang.StringBuffer = new for < = call decl Hashtable.keys() call decl Hashtable.keys() call decl Hashtable.keys() call decl Hashtable.keys() call decl Hashtable.keys() if call java.lang.StringBuffer.length() call java.lang.StringBuffer.length() call java.lang.StringBuffer.length() call java.lang.StringBuffer.length() call java.lang.StringBuffer.length() > call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call decl Hashtable.get() call decl Hashtable.get() call decl Hashtable.get() call decl Hashtable.get() call decl Hashtable.get() call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) return + String String RuleSet String Rule public public if decl_stmt java.lang.String = decl_stmt java.lang.String = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) try catch call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) + + else if decl_stmt java.lang.String = = new else if decl_stmt java.lang.String = decl_stmt com.handcoded.validation.Rule = if != if != else call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) else call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) + + else if decl_stmt java.lang.String = decl_stmt com.handcoded.validation.Rule = if != if != else call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) else call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) + + else if decl_stmt java.lang.String = decl_stmt com.handcoded.validation.RuleSet = if != if != if != else call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) + + else call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) else call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) call java.util.logging.Logger.severe(String) + + public public if =