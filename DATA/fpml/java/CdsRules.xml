com.handcoded.fpml.validation java.math.BigDecimal import org.w3c.dom.Element import org.w3c.dom.Node import org.w3c.dom.NodeList import com.handcoded.finance.Date import com.handcoded.finance.Interval import com.handcoded.finance.Period import com.handcoded.validation.Precondition import com.handcoded.validation.Rule import com.handcoded.validation.RuleSet import com.handcoded.validation.ValidationErrorHandler import com.handcoded.xml.DOM import com.handcoded.xml.Logic import com.handcoded.xml.NodeIndex import com.handcoded.xml.XPath import class com.handcoded.fpml.validation.CdsRules super super extends Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Precondition Precondition Rule Rule Rule Rule RuleSet Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Precondition Rule Rule Precondition Rule Rule Rule Rule Rule Rule Rule Rule public public return & Date Element boolean Element Date private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || ! continue try decl_stmt com.handcoded.finance.Date = decl_stmt com.handcoded.finance.Date = if call com.handcoded.finance.Date.compareTo(Date) call com.handcoded.finance.Date.compareTo(Date) call com.handcoded.finance.Date.compareTo(Date) call com.handcoded.finance.Date.compareTo(Date) call com.handcoded.finance.Date.compareTo(Date) < continue = catch return public public return & Date Element boolean Element Date private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || ! continue try decl_stmt com.handcoded.finance.Date = decl_stmt com.handcoded.finance.Date = if call com.handcoded.finance.Date.compareTo(Date) call com.handcoded.finance.Date.compareTo(Date) call com.handcoded.finance.Date.compareTo(Date) call com.handcoded.finance.Date.compareTo(Date) call com.handcoded.finance.Date.compareTo(Date) >= continue = catch return public public return & Element boolean Element boolean Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == continue decl_stmt javax.swing.text.Element = if != decl_stmt boolean = for = call Element.getFirstChild() call Element.getFirstChild() call Element.getFirstChild() call Element.getFirstChild() call Element.getFirstChild() != = if == if continue if && continue = if + = return public public return & Element NodeList boolean Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = if ! continue if ! continue decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() if = return public public return & NodeList Element boolean Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = if ! continue if ! continue decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() if = return public public return & Element NodeList boolean Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = if ! continue if ! continue decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() if = return public public return & NodeList Element boolean Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = if ! continue if ! continue decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() if = return Date Date NodeList boolean Element Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt javax.swing.text.Element = if != try decl_stmt com.handcoded.finance.Date = decl_stmt com.handcoded.finance.Date = if call com.handcoded.finance.Date.compareTo(Date) call com.handcoded.finance.Date.compareTo(Date) call com.handcoded.finance.Date.compareTo(Date) call com.handcoded.finance.Date.compareTo(Date) call com.handcoded.finance.Date.compareTo(Date) >= = catch return Element NodeList boolean Element Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == continue if call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() = return Element NodeList boolean Element Element Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() if ! continue decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == && == || != && != = return Element NodeList boolean Element Element Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() if ! continue decl_stmt javax.swing.text.Element = if == continue decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == && == || != && != = return Element NodeList NodeList Element boolean Element Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt NodeList = call Element.getElementsByTagName() call Element.getElementsByTagName() call Element.getElementsByTagName() call Element.getElementsByTagName() call Element.getElementsByTagName() for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt javax.swing.text.Element = if != decl_stmt javax.swing.text.Element = if ! call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() = return Element NodeList NodeList Element boolean Element Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt NodeList = call Element.getElementsByTagName() call Element.getElementsByTagName() call Element.getElementsByTagName() call Element.getElementsByTagName() call Element.getElementsByTagName() for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt javax.swing.text.Element = if != decl_stmt javax.swing.text.Element = if ! call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() = return Element NodeList boolean Element Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt javax.swing.text.Element = if ! || ! continue decl_stmt javax.swing.text.Element = if == = return String Element NodeList boolean Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt javax.swing.text.Element = if != decl_stmt java.lang.String = if < = return NodeList NodeList boolean Element String Element String public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt java.lang.String decl_stmt java.lang.String if = call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() = continue + + + = return Element NodeList boolean Element NodeList public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() if call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() continue + = return NodeList boolean Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() if continue + + + = return NodeList boolean Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() if continue + + + = return NodeList boolean Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() if continue + + + = return NodeList boolean Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() if continue + + + = return public public return & boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = if decl_stmt javax.swing.text.Element = &= & & & & & & return private private final final final final if != return return public public return & boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = if decl_stmt javax.swing.text.Element = if ! continue = return public public return & boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = if decl_stmt javax.swing.text.Element = if ! continue &= & & & & & & & & & & & & & & & & & & & & return private private final final final final if != return return public public return & boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = if decl_stmt javax.swing.text.Element = if ! continue &= & & & & & & & & & & return private private final final final final if != return return public public return & Node NodeList boolean Element String Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = if decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if != decl_stmt NodeList = call Element.getChildNodes() call Element.getChildNodes() call Element.getChildNodes() call Element.getChildNodes() call Element.getChildNodes() for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt sun.tools.tree.Node = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() if instanceof decl_stmt java.lang.String = call Node.getLocalName() call Node.getLocalName() call Node.getLocalName() call Node.getLocalName() call Node.getLocalName() if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) = return public public return & boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = if decl_stmt javax.swing.text.Element = if continue = return public public return & boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = if decl_stmt javax.swing.text.Element = if ! = if ! = if ! = return public public return & boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = if decl_stmt javax.swing.text.Element = if if ! = if ! = if ! = if ! = return Element NodeList boolean Element Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt javax.swing.text.Element decl_stmt javax.swing.text.Element if = = continue + + + + = return Element Element NodeList boolean Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt javax.swing.text.Element decl_stmt javax.swing.text.Element if = = if continue + + + + + = return Element NodeList boolean Element Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == || continue + + + + + = return Element NodeList boolean Element Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt javax.swing.text.Element decl_stmt javax.swing.text.Element if = = if continue + + + + + = return Element NodeList boolean Element Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt javax.swing.text.Element decl_stmt javax.swing.text.Element if = = if continue + + + + + = return Element NodeList boolean Element Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt javax.swing.text.Element decl_stmt javax.swing.text.Element if = = continue + + + + + = return public public return & boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = if decl_stmt javax.swing.text.Element = if == continue if ! continue if ! + = return Interval NodeList Element boolean Element Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == continue decl_stmt com.handcoded.finance.Interval = if call com.handcoded.finance.Interval.dividesDates(Date,Date) call com.handcoded.finance.Interval.dividesDates(Date,Date) call com.handcoded.finance.Interval.dividesDates(Date,Date) call com.handcoded.finance.Interval.dividesDates(Date,Date) call com.handcoded.finance.Interval.dividesDates(Date,Date) continue + + + + + + = return Node NodeList boolean Element NodeList public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() if decl_stmt NodeList = call Element.getChildNodes() call Element.getChildNodes() call Element.getChildNodes() call Element.getChildNodes() call Element.getChildNodes() for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt sun.tools.tree.Node = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() if instanceof && ! call Node.getLocalName() call Node.getLocalName() call Node.getLocalName() call Node.getLocalName() call Node.getLocalName() + = break return NodeList boolean Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() if == + = return NodeList boolean Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() if continue + = return Element Element NodeList Element Element boolean Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == || == || == || || >= continue + + = return public public return Element NodeList BigDecimal boolean Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt NodeList = if call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() == continue decl_stmt java.math.BigDecimal = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ = call java.math.BigDecimal.add(BigDecimal) call java.math.BigDecimal.add(BigDecimal) call java.math.BigDecimal.add(BigDecimal) call java.math.BigDecimal.add(BigDecimal) call java.math.BigDecimal.add(BigDecimal) call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() if continue call java.math.BigDecimal.toString() call java.math.BigDecimal.toString() call java.math.BigDecimal.toString() call java.math.BigDecimal.toString() call java.math.BigDecimal.toString() = return public public return Element Element Element boolean Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == || < continue = return public public return Element Element boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == || continue = return Element Element NodeList boolean Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == && != = return Element NodeList boolean Element Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == && != = return Element NodeList Element boolean Element Element Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() if ! continue if ! continue decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if != && != && != && != if && continue = return public public return Element NodeList NodeList boolean Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt NodeList = decl_stmt NodeList = if call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() == || call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() == call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() continue = return public static public static return Element Element Element protected static protected static decl_stmt javax.swing.text.Element = if != decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = return || return NodeList Element String protected static protected static if decl_stmt javax.swing.text.Element decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() if return if = != decl_stmt java.lang.String = if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) || call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) return return Element String protected static protected static decl_stmt javax.swing.text.Element if if return if return if = != decl_stmt java.lang.String = if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) || call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) return return Element protected static protected static decl_stmt javax.swing.text.Element if = if return if return return return private static private static if return return private static private static if && ! return return private static private static final final try return new catch return