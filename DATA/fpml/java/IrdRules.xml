com.handcoded.fpml.validation java.math.BigDecimal import org.w3c.dom.Element import org.w3c.dom.NodeList import com.handcoded.finance.Date import com.handcoded.finance.Interval import com.handcoded.finance.Period import com.handcoded.validation.Precondition import com.handcoded.validation.Rule import com.handcoded.validation.RuleSet import com.handcoded.validation.ValidationErrorHandler import com.handcoded.xml.DOM import com.handcoded.xml.NodeIndex import com.handcoded.xml.XPath import class com.handcoded.fpml.validation.IrdRules super super extends Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Precondition RuleSet BigDecimal Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Rule Precondition Rule public public if return return & boolean Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = if continue + = return public public if return return & Element Element boolean Element Interval Interval private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = if ! continue decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == continue decl_stmt com.handcoded.finance.Interval = decl_stmt com.handcoded.finance.Interval = if == || == || call com.handcoded.finance.Interval.isMultipleOf(Interval) call com.handcoded.finance.Interval.isMultipleOf(Interval) call com.handcoded.finance.Interval.isMultipleOf(Interval) call com.handcoded.finance.Interval.isMultipleOf(Interval) call com.handcoded.finance.Interval.isMultipleOf(Interval) continue + + + + = return public public if return return & Element Element Interval boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = if ! continue decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if ! = if ! = decl_stmt com.handcoded.finance.Interval = if == || == || == || == || continue + + + = return public public if return return & Element Element Interval boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = if ! continue decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if ! = if ! = decl_stmt com.handcoded.finance.Interval = if == || == || == || == || continue + + + = return public public if return return & Interval Element boolean Element Interval Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = if ! continue decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == continue decl_stmt com.handcoded.finance.Interval = decl_stmt com.handcoded.finance.Interval = if == || == || call com.handcoded.finance.Interval.isMultipleOf(Interval) call com.handcoded.finance.Interval.isMultipleOf(Interval) call com.handcoded.finance.Interval.isMultipleOf(Interval) call com.handcoded.finance.Interval.isMultipleOf(Interval) call com.handcoded.finance.Interval.isMultipleOf(Interval) continue + + + + = return public public if return return & Element boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = if ! continue decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == || continue + + + + = return public public if return return & Element Element boolean Element Element Interval Interval private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = if ! continue decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == continue decl_stmt com.handcoded.finance.Interval = decl_stmt com.handcoded.finance.Interval = if == || == continue if call com.handcoded.finance.Interval.equals(Interval) call com.handcoded.finance.Interval.equals(Interval) call com.handcoded.finance.Interval.equals(Interval) call com.handcoded.finance.Interval.equals(Interval) call com.handcoded.finance.Interval.equals(Interval) continue + + + + + = return public public if return return & Element boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() = return public public if return return & boolean Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = if continue + = return public public if return return Element Element Date boolean Element int private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if ! continue decl_stmt javax.swing.text.Element = if ! = decl_stmt int = decl_stmt com.handcoded.finance.Date = if < call com.handcoded.finance.Date.lastDayOfMonth() call com.handcoded.finance.Date.lastDayOfMonth() call com.handcoded.finance.Date.lastDayOfMonth() call com.handcoded.finance.Date.lastDayOfMonth() call com.handcoded.finance.Date.lastDayOfMonth() if == call com.handcoded.finance.Date.dayOfMonth() call com.handcoded.finance.Date.dayOfMonth() call com.handcoded.finance.Date.dayOfMonth() call com.handcoded.finance.Date.dayOfMonth() call com.handcoded.finance.Date.dayOfMonth() continue else if call com.handcoded.finance.Date.isEndOfMonth() call com.handcoded.finance.Date.isEndOfMonth() call com.handcoded.finance.Date.isEndOfMonth() call com.handcoded.finance.Date.isEndOfMonth() call com.handcoded.finance.Date.isEndOfMonth() continue + + + + = return public public if return return Element Date boolean Element Element int private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if ! continue decl_stmt javax.swing.text.Element = if ! = decl_stmt int = decl_stmt com.handcoded.finance.Date = if == continue if <= call com.handcoded.finance.Date.lastDayOfMonth() call com.handcoded.finance.Date.lastDayOfMonth() call com.handcoded.finance.Date.lastDayOfMonth() call com.handcoded.finance.Date.lastDayOfMonth() call com.handcoded.finance.Date.lastDayOfMonth() if == call com.handcoded.finance.Date.dayOfMonth() call com.handcoded.finance.Date.dayOfMonth() call com.handcoded.finance.Date.dayOfMonth() call com.handcoded.finance.Date.dayOfMonth() call com.handcoded.finance.Date.dayOfMonth() continue else if call com.handcoded.finance.Date.isEndOfMonth() call com.handcoded.finance.Date.isEndOfMonth() call com.handcoded.finance.Date.isEndOfMonth() call com.handcoded.finance.Date.isEndOfMonth() call com.handcoded.finance.Date.isEndOfMonth() continue + + + + = return public public if return return Date Element Interval Element Element boolean Element Date private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == = if == = if != && != && != decl_stmt com.handcoded.finance.Date = decl_stmt com.handcoded.finance.Date = decl_stmt com.handcoded.finance.Interval = if == || == || == continue if call com.handcoded.finance.Interval.dividesDates(Date,Date) call com.handcoded.finance.Interval.dividesDates(Date,Date) call com.handcoded.finance.Interval.dividesDates(Date,Date) call com.handcoded.finance.Interval.dividesDates(Date,Date) call com.handcoded.finance.Interval.dividesDates(Date,Date) continue + + + + + + = return public public if return return Element Element boolean Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == || continue + + + + + = return public public if return return Element Element boolean Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == || continue + + + + + = return public public if return return Element Element boolean Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == || continue + + + + + = return public public if return return Element Element boolean Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == || continue + + + + + = return public public if return return Element Element boolean Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == || continue + + + + + = return public public if return return Element Element boolean Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == || continue + + + + + = return public public if return return Element Element boolean Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == || continue + + + = return public public if return return Element Element boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if ! continue decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == || continue + + + = return public public if return return Element boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == || continue + + + = return public public if return return Element String boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == continue decl_stmt java.lang.String = call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() if != && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > && call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) == = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) decl_stmt javax.swing.text.Element = if == continue if continue + = return public public if return return Element String boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == continue decl_stmt java.lang.String = call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() if != && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > && call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) == = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) decl_stmt javax.swing.text.Element = if == continue if continue + = return public public if return return & & & & & & & & boolean Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = if continue + = return public public if return return & & & & & & & boolean Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = if continue + = return public public if return return String boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt java.lang.String = call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() if != && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > && call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) == = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) decl_stmt javax.swing.text.Element = if == || call Element.getLocalName() call Element.getLocalName() call Element.getLocalName() call Element.getLocalName() call Element.getLocalName() continue call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() = return public public if return return boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if continue + = return public public if return return Element Element String boolean Element String private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if != && != decl_stmt java.lang.String = call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() decl_stmt java.lang.String = call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() if != && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > && call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) == = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) if != && != && call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) continue + = return public public if return return Element Element String boolean Element String private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if != && != decl_stmt java.lang.String = call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() decl_stmt java.lang.String = call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() if != && != && call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) continue + = return public public if return return Element Element Element boolean Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if continue + = return public public if return return Element boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if continue + = return public public if return return Element boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if continue + = return public public if return return Element Element boolean Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if continue = return public public if return return Element Element boolean Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == || continue + + + + + = return public public if return return Element boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if continue + = return public public if return return Element boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == || continue + + + + + = return public public if return return Element Element Interval Date boolean Element Date Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if != && != decl_stmt com.handcoded.finance.Date = decl_stmt com.handcoded.finance.Date = decl_stmt com.handcoded.finance.Interval = if call com.handcoded.finance.Interval.dividesDates(Date,Date) call com.handcoded.finance.Interval.dividesDates(Date,Date) call com.handcoded.finance.Interval.dividesDates(Date,Date) call com.handcoded.finance.Interval.dividesDates(Date,Date) call com.handcoded.finance.Interval.dividesDates(Date,Date) continue + = return public public if return return Element boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if continue + = return public public if return return Element boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == || continue + + + + + = return public public if return return Element boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == || continue + + + + + = return public public if return return Element boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == || continue + + + + = return public public if return return Element boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == || continue + + + + + = return public public if return return boolean Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = if continue = return public public if return return Element Element boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == || == || continue + + + + + + + + + = return public public return Element Element String boolean Element String private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == continue decl_stmt java.lang.String = call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() decl_stmt java.lang.String = call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() if != && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > && call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) == = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) if != && != && continue + = return public public if return return Element Element String boolean Element String private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == continue decl_stmt java.lang.String = call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() decl_stmt java.lang.String = call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() if != && != && continue + = return public public return Element String boolean Element String Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == = if == = if == || == continue decl_stmt java.lang.String = call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() decl_stmt java.lang.String = call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() if != && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > && call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) == = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) if != && != && continue + = return public public if return return Element String boolean Element String Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == = if == = if == || == continue decl_stmt java.lang.String = call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() decl_stmt java.lang.String = call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() if != && != && continue + = return public public if return return Element String boolean Element String Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == = if == = if == || == continue decl_stmt java.lang.String = call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() decl_stmt java.lang.String = call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() if != && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > && call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) == = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) if != && != && continue + = return public public if return return boolean Element Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if continue = return NodeList Date Element Interval NodeList Element Element boolean Element Element Element Date Date public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt NodeList = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == = if == = decl_stmt javax.swing.text.Element = decl_stmt com.handcoded.finance.Interval = if == || == || == continue decl_stmt com.handcoded.finance.Date = decl_stmt com.handcoded.finance.Date = if == || == continue for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt com.handcoded.finance.Date = if continue + + + + + + + = return NodeList Date Element Interval NodeList Element Element boolean Element Element Element Date Date public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt NodeList = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == = if == = decl_stmt javax.swing.text.Element = decl_stmt com.handcoded.finance.Interval = if == || == || == continue decl_stmt com.handcoded.finance.Date = decl_stmt com.handcoded.finance.Date = if == || == continue for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt com.handcoded.finance.Date = if continue + + + + + + + = return NodeList Date Element Interval NodeList Element Element boolean Element Element Element Date Date public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt NodeList = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == = if == = decl_stmt javax.swing.text.Element = decl_stmt com.handcoded.finance.Interval = if == || == || == continue decl_stmt com.handcoded.finance.Date = decl_stmt com.handcoded.finance.Date = if == || == continue for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt com.handcoded.finance.Date = if continue + + + + + + + = return NodeList Date Element Interval NodeList Element Element boolean Element Element Element Date Date public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt NodeList = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == = if == = decl_stmt javax.swing.text.Element = decl_stmt com.handcoded.finance.Interval = if == || == || == continue decl_stmt com.handcoded.finance.Date = decl_stmt com.handcoded.finance.Date = if == || == continue for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt com.handcoded.finance.Date = if continue + + + + + + + = return NodeList Date Element Interval NodeList Element Element boolean Element Element Element Date Date public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt NodeList = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == = if == = decl_stmt javax.swing.text.Element = decl_stmt com.handcoded.finance.Interval = if == || == || == continue decl_stmt com.handcoded.finance.Date = decl_stmt com.handcoded.finance.Date = if == || == continue for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt com.handcoded.finance.Date = if continue + + + + + + + = return Element Element NodeList String boolean Element String public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if != && != decl_stmt java.lang.String = call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() decl_stmt java.lang.String = call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() if != && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > && call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) == = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) if != && != && continue + = return Element Element NodeList String boolean Element String public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if != && != decl_stmt java.lang.String = call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() decl_stmt java.lang.String = call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() if != && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > && call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) == = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) if != && != && continue + = return Element NodeList boolean Element Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == || ! || continue if ! continue + + + + = return Element NodeList boolean Element Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == || ! continue if continue + + + + = return Element Element NodeList String boolean Element String public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if != && != decl_stmt java.lang.String = call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() decl_stmt java.lang.String = call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() call Element.getAttribute() if != && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > && call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) == = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) if != && != && continue + = return Element NodeList boolean Element Element public public decl_stmt boolean = decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt javax.swing.text.Element = decl_stmt javax.swing.text.Element = if == || == || ! continue if continue + + + + = return public public if return return boolean Element private private decl_stmt boolean = for = < ++ decl_stmt javax.swing.text.Element = if continue + = return Element protected static protected static decl_stmt javax.swing.text.Element if = return return public static public static return char private static private static final final if != for = < ++ decl_stmt char = if ! >= && <= return return > return private static private static final final if return if return if return if return if return if return if return return private static private static final final return || || Interval Date private static private static decl_stmt com.handcoded.finance.Interval = new for decl_stmt com.handcoded.finance.Date = if call com.handcoded.finance.Date.compareTo(Date) call com.handcoded.finance.Date.compareTo(Date) call com.handcoded.finance.Date.compareTo(Date) call com.handcoded.finance.Date.compareTo(Date) call com.handcoded.finance.Date.compareTo(Date) > return if call com.handcoded.finance.Date.equals(Object) call com.handcoded.finance.Date.equals(Object) call com.handcoded.finance.Date.equals(Object) call com.handcoded.finance.Date.equals(Object) call com.handcoded.finance.Date.equals(Object) return = call com.handcoded.finance.Interval.plus(Interval) call com.handcoded.finance.Interval.plus(Interval) call com.handcoded.finance.Interval.plus(Interval) call com.handcoded.finance.Interval.plus(Interval) call com.handcoded.finance.Interval.plus(Interval)